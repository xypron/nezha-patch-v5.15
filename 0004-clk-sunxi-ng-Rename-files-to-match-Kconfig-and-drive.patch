From e4873f9ec76775e65ef83bb5fa3c8119568f797c Mon Sep 17 00:00:00 2001
From: Samuel Holland <samuel@sholland.org>
Date: Wed, 1 Sep 2021 00:05:22 -0500
Subject: [PATCH 4/8] clk: sunxi-ng: Rename files to match Kconfig and drivers

When the drivers are built as modules, the file name will become the
module name. Rename the files so everything matches: the Kconfig symbol,
the platform driver name (as seen in sysfs), and the module name.

Signed-off-by: Samuel Holland <samuel@sholland.org>
---
 drivers/clk/sunxi-ng/Makefile            |   42 +-
 drivers/clk/sunxi-ng/ccu-sun4i-a10.c     | 1482 ----------------------
 drivers/clk/sunxi-ng/ccu-sun4i-a10.h     |   52 -
 drivers/clk/sunxi-ng/ccu-sun50i-a100-r.c |  215 ----
 drivers/clk/sunxi-ng/ccu-sun50i-a100-r.h |   21 -
 drivers/clk/sunxi-ng/ccu-sun50i-a100.c   | 1277 -------------------
 drivers/clk/sunxi-ng/ccu-sun50i-a100.h   |   56 -
 drivers/clk/sunxi-ng/ccu-sun50i-a64.c    |  985 --------------
 drivers/clk/sunxi-ng/ccu-sun50i-a64.h    |   62 -
 drivers/clk/sunxi-ng/ccu-sun50i-h6-r.c   |  250 ----
 drivers/clk/sunxi-ng/ccu-sun50i-h6-r.h   |   19 -
 drivers/clk/sunxi-ng/ccu-sun50i-h6.c     | 1259 ------------------
 drivers/clk/sunxi-ng/ccu-sun50i-h6.h     |   56 -
 drivers/clk/sunxi-ng/ccu-sun50i-h616.c   | 1148 -----------------
 drivers/clk/sunxi-ng/ccu-sun50i-h616.h   |   56 -
 drivers/clk/sunxi-ng/ccu-sun5i.c         | 1037 ---------------
 drivers/clk/sunxi-ng/ccu-sun5i.h         |   56 -
 drivers/clk/sunxi-ng/ccu-sun6i-a31.c     | 1266 ------------------
 drivers/clk/sunxi-ng/ccu-sun6i-a31.h     |   69 -
 drivers/clk/sunxi-ng/ccu-sun8i-a23-a33.h |   56 -
 drivers/clk/sunxi-ng/ccu-sun8i-a23.c     |  751 -----------
 drivers/clk/sunxi-ng/ccu-sun8i-a33.c     |  818 ------------
 drivers/clk/sunxi-ng/ccu-sun8i-a83t.c    |  925 --------------
 drivers/clk/sunxi-ng/ccu-sun8i-a83t.h    |   55 -
 drivers/clk/sunxi-ng/ccu-sun8i-de2.c     |  399 ------
 drivers/clk/sunxi-ng/ccu-sun8i-de2.h     |   21 -
 drivers/clk/sunxi-ng/ccu-sun8i-h3.c      | 1179 -----------------
 drivers/clk/sunxi-ng/ccu-sun8i-h3.h      |   54 -
 drivers/clk/sunxi-ng/ccu-sun8i-r.c       |  290 -----
 drivers/clk/sunxi-ng/ccu-sun8i-r.h       |   18 -
 drivers/clk/sunxi-ng/ccu-sun8i-r40.c     | 1376 --------------------
 drivers/clk/sunxi-ng/ccu-sun8i-r40.h     |   60 -
 drivers/clk/sunxi-ng/ccu-sun8i-v3s.c     |  842 ------------
 drivers/clk/sunxi-ng/ccu-sun8i-v3s.h     |   54 -
 drivers/clk/sunxi-ng/ccu-sun9i-a80-de.c  |  275 ----
 drivers/clk/sunxi-ng/ccu-sun9i-a80-de.h  |   24 -
 drivers/clk/sunxi-ng/ccu-sun9i-a80-usb.c |  143 ---
 drivers/clk/sunxi-ng/ccu-sun9i-a80-usb.h |   16 -
 drivers/clk/sunxi-ng/ccu-sun9i-a80.c     | 1250 ------------------
 drivers/clk/sunxi-ng/ccu-sun9i-a80.h     |   48 -
 drivers/clk/sunxi-ng/ccu-suniv-f1c100s.c |  551 --------
 drivers/clk/sunxi-ng/ccu-suniv-f1c100s.h |   34 -
 drivers/clk/sunxi-ng/sun4i-a10-ccu.c     | 1482 ++++++++++++++++++++++
 drivers/clk/sunxi-ng/sun4i-a10-ccu.h     |   52 +
 drivers/clk/sunxi-ng/sun50i-a100-ccu.c   | 1277 +++++++++++++++++++
 drivers/clk/sunxi-ng/sun50i-a100-ccu.h   |   56 +
 drivers/clk/sunxi-ng/sun50i-a100-r-ccu.c |  215 ++++
 drivers/clk/sunxi-ng/sun50i-a100-r-ccu.h |   21 +
 drivers/clk/sunxi-ng/sun50i-a64-ccu.c    |  985 ++++++++++++++
 drivers/clk/sunxi-ng/sun50i-a64-ccu.h    |   62 +
 drivers/clk/sunxi-ng/sun50i-h6-ccu.c     | 1259 ++++++++++++++++++
 drivers/clk/sunxi-ng/sun50i-h6-ccu.h     |   56 +
 drivers/clk/sunxi-ng/sun50i-h6-r-ccu.c   |  250 ++++
 drivers/clk/sunxi-ng/sun50i-h6-r-ccu.h   |   19 +
 drivers/clk/sunxi-ng/sun50i-h616-ccu.c   | 1148 +++++++++++++++++
 drivers/clk/sunxi-ng/sun50i-h616-ccu.h   |   56 +
 drivers/clk/sunxi-ng/sun5i-ccu.c         | 1037 +++++++++++++++
 drivers/clk/sunxi-ng/sun5i-ccu.h         |   56 +
 drivers/clk/sunxi-ng/sun6i-a31-ccu.c     | 1266 ++++++++++++++++++
 drivers/clk/sunxi-ng/sun6i-a31-ccu.h     |   69 +
 drivers/clk/sunxi-ng/sun8i-a23-a33-ccu.h |   56 +
 drivers/clk/sunxi-ng/sun8i-a23-ccu.c     |  751 +++++++++++
 drivers/clk/sunxi-ng/sun8i-a33-ccu.c     |  818 ++++++++++++
 drivers/clk/sunxi-ng/sun8i-a83t-ccu.c    |  925 ++++++++++++++
 drivers/clk/sunxi-ng/sun8i-a83t-ccu.h    |   55 +
 drivers/clk/sunxi-ng/sun8i-de2-ccu.c     |  399 ++++++
 drivers/clk/sunxi-ng/sun8i-de2-ccu.h     |   21 +
 drivers/clk/sunxi-ng/sun8i-h3-ccu.c      | 1179 +++++++++++++++++
 drivers/clk/sunxi-ng/sun8i-h3-ccu.h      |   54 +
 drivers/clk/sunxi-ng/sun8i-r-ccu.c       |  290 +++++
 drivers/clk/sunxi-ng/sun8i-r-ccu.h       |   18 +
 drivers/clk/sunxi-ng/sun8i-r40-ccu.c     | 1376 ++++++++++++++++++++
 drivers/clk/sunxi-ng/sun8i-r40-ccu.h     |   60 +
 drivers/clk/sunxi-ng/sun8i-v3s-ccu.c     |  842 ++++++++++++
 drivers/clk/sunxi-ng/sun8i-v3s-ccu.h     |   54 +
 drivers/clk/sunxi-ng/sun9i-a80-ccu.c     | 1250 ++++++++++++++++++
 drivers/clk/sunxi-ng/sun9i-a80-ccu.h     |   48 +
 drivers/clk/sunxi-ng/sun9i-a80-de-ccu.c  |  275 ++++
 drivers/clk/sunxi-ng/sun9i-a80-de-ccu.h  |   24 +
 drivers/clk/sunxi-ng/sun9i-a80-usb-ccu.c |  143 +++
 drivers/clk/sunxi-ng/sun9i-a80-usb-ccu.h |   16 +
 drivers/clk/sunxi-ng/suniv-f1c100s-ccu.c |  551 ++++++++
 drivers/clk/sunxi-ng/suniv-f1c100s-ccu.h |   34 +
 83 files changed, 18626 insertions(+), 18626 deletions(-)
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun4i-a10.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun4i-a10.h
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun50i-a100-r.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun50i-a100-r.h
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun50i-a100.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun50i-a100.h
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun50i-a64.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun50i-a64.h
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun50i-h6-r.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun50i-h6-r.h
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun50i-h6.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun50i-h6.h
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun50i-h616.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun50i-h616.h
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun5i.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun5i.h
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun6i-a31.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun6i-a31.h
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun8i-a23-a33.h
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun8i-a23.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun8i-a33.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun8i-a83t.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun8i-a83t.h
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun8i-de2.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun8i-de2.h
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun8i-h3.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun8i-h3.h
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun8i-r.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun8i-r.h
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun8i-r40.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun8i-r40.h
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun8i-v3s.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun8i-v3s.h
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun9i-a80-de.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun9i-a80-de.h
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun9i-a80-usb.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun9i-a80-usb.h
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun9i-a80.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-sun9i-a80.h
 delete mode 100644 drivers/clk/sunxi-ng/ccu-suniv-f1c100s.c
 delete mode 100644 drivers/clk/sunxi-ng/ccu-suniv-f1c100s.h
 create mode 100644 drivers/clk/sunxi-ng/sun4i-a10-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun4i-a10-ccu.h
 create mode 100644 drivers/clk/sunxi-ng/sun50i-a100-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun50i-a100-ccu.h
 create mode 100644 drivers/clk/sunxi-ng/sun50i-a100-r-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun50i-a100-r-ccu.h
 create mode 100644 drivers/clk/sunxi-ng/sun50i-a64-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun50i-a64-ccu.h
 create mode 100644 drivers/clk/sunxi-ng/sun50i-h6-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun50i-h6-ccu.h
 create mode 100644 drivers/clk/sunxi-ng/sun50i-h6-r-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun50i-h6-r-ccu.h
 create mode 100644 drivers/clk/sunxi-ng/sun50i-h616-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun50i-h616-ccu.h
 create mode 100644 drivers/clk/sunxi-ng/sun5i-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun5i-ccu.h
 create mode 100644 drivers/clk/sunxi-ng/sun6i-a31-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun6i-a31-ccu.h
 create mode 100644 drivers/clk/sunxi-ng/sun8i-a23-a33-ccu.h
 create mode 100644 drivers/clk/sunxi-ng/sun8i-a23-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun8i-a33-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun8i-a83t-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun8i-a83t-ccu.h
 create mode 100644 drivers/clk/sunxi-ng/sun8i-de2-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun8i-de2-ccu.h
 create mode 100644 drivers/clk/sunxi-ng/sun8i-h3-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun8i-h3-ccu.h
 create mode 100644 drivers/clk/sunxi-ng/sun8i-r-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun8i-r-ccu.h
 create mode 100644 drivers/clk/sunxi-ng/sun8i-r40-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun8i-r40-ccu.h
 create mode 100644 drivers/clk/sunxi-ng/sun8i-v3s-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun8i-v3s-ccu.h
 create mode 100644 drivers/clk/sunxi-ng/sun9i-a80-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun9i-a80-ccu.h
 create mode 100644 drivers/clk/sunxi-ng/sun9i-a80-de-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun9i-a80-de-ccu.h
 create mode 100644 drivers/clk/sunxi-ng/sun9i-a80-usb-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/sun9i-a80-usb-ccu.h
 create mode 100644 drivers/clk/sunxi-ng/suniv-f1c100s-ccu.c
 create mode 100644 drivers/clk/sunxi-ng/suniv-f1c100s-ccu.h

diff --git a/drivers/clk/sunxi-ng/Makefile b/drivers/clk/sunxi-ng/Makefile
index 96c324306d97..9ebf5920c93b 100644
--- a/drivers/clk/sunxi-ng/Makefile
+++ b/drivers/clk/sunxi-ng/Makefile
@@ -21,24 +21,24 @@ obj-y				+= ccu_nm.o
 obj-y				+= ccu_mp.o
 
 # SoC support
-obj-$(CONFIG_SUNIV_F1C100S_CCU)	+= ccu-suniv-f1c100s.o
-obj-$(CONFIG_SUN50I_A64_CCU)	+= ccu-sun50i-a64.o
-obj-$(CONFIG_SUN50I_A100_CCU)	+= ccu-sun50i-a100.o
-obj-$(CONFIG_SUN50I_A100_R_CCU)	+= ccu-sun50i-a100-r.o
-obj-$(CONFIG_SUN50I_H6_CCU)	+= ccu-sun50i-h6.o
-obj-$(CONFIG_SUN50I_H616_CCU)	+= ccu-sun50i-h616.o
-obj-$(CONFIG_SUN50I_H6_R_CCU)	+= ccu-sun50i-h6-r.o
-obj-$(CONFIG_SUN4I_A10_CCU)	+= ccu-sun4i-a10.o
-obj-$(CONFIG_SUN5I_CCU)		+= ccu-sun5i.o
-obj-$(CONFIG_SUN6I_A31_CCU)	+= ccu-sun6i-a31.o
-obj-$(CONFIG_SUN8I_A23_CCU)	+= ccu-sun8i-a23.o
-obj-$(CONFIG_SUN8I_A33_CCU)	+= ccu-sun8i-a33.o
-obj-$(CONFIG_SUN8I_A83T_CCU)	+= ccu-sun8i-a83t.o
-obj-$(CONFIG_SUN8I_H3_CCU)	+= ccu-sun8i-h3.o
-obj-$(CONFIG_SUN8I_V3S_CCU)	+= ccu-sun8i-v3s.o
-obj-$(CONFIG_SUN8I_DE2_CCU)	+= ccu-sun8i-de2.o
-obj-$(CONFIG_SUN8I_R_CCU)	+= ccu-sun8i-r.o
-obj-$(CONFIG_SUN8I_R40_CCU)	+= ccu-sun8i-r40.o
-obj-$(CONFIG_SUN9I_A80_CCU)	+= ccu-sun9i-a80.o
-obj-$(CONFIG_SUN9I_A80_CCU)	+= ccu-sun9i-a80-de.o
-obj-$(CONFIG_SUN9I_A80_CCU)	+= ccu-sun9i-a80-usb.o
+obj-$(CONFIG_SUNIV_F1C100S_CCU)	+= suniv-f1c100s-ccu.o
+obj-$(CONFIG_SUN50I_A64_CCU)	+= sun50i-a64-ccu.o
+obj-$(CONFIG_SUN50I_A100_CCU)	+= sun50i-a100-ccu.o
+obj-$(CONFIG_SUN50I_A100_R_CCU)	+= sun50i-a100-r-ccu.o
+obj-$(CONFIG_SUN50I_H6_CCU)	+= sun50i-h6-ccu.o
+obj-$(CONFIG_SUN50I_H616_CCU)	+= sun50i-h616-ccu.o
+obj-$(CONFIG_SUN50I_H6_R_CCU)	+= sun50i-h6-r-ccu.o
+obj-$(CONFIG_SUN4I_A10_CCU)	+= sun4i-a10-ccu.o
+obj-$(CONFIG_SUN5I_CCU)		+= sun5i-ccu.o
+obj-$(CONFIG_SUN6I_A31_CCU)	+= sun6i-a31-ccu.o
+obj-$(CONFIG_SUN8I_A23_CCU)	+= sun8i-a23-ccu.o
+obj-$(CONFIG_SUN8I_A33_CCU)	+= sun8i-a33-ccu.o
+obj-$(CONFIG_SUN8I_A83T_CCU)	+= sun8i-a83t-ccu.o
+obj-$(CONFIG_SUN8I_H3_CCU)	+= sun8i-h3-ccu.o
+obj-$(CONFIG_SUN8I_V3S_CCU)	+= sun8i-v3s-ccu.o
+obj-$(CONFIG_SUN8I_DE2_CCU)	+= sun8i-de2-ccu.o
+obj-$(CONFIG_SUN8I_R_CCU)	+= sun8i-r-ccu.o
+obj-$(CONFIG_SUN8I_R40_CCU)	+= sun8i-r40-ccu.o
+obj-$(CONFIG_SUN9I_A80_CCU)	+= sun9i-a80-ccu.o
+obj-$(CONFIG_SUN9I_A80_CCU)	+= sun9i-a80-de-ccu.o
+obj-$(CONFIG_SUN9I_A80_CCU)	+= sun9i-a80-usb-ccu.o
diff --git a/drivers/clk/sunxi-ng/ccu-sun4i-a10.c b/drivers/clk/sunxi-ng/ccu-sun4i-a10.c
deleted file mode 100644
index bd9a8782fec3..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun4i-a10.c
+++ /dev/null
@@ -1,1482 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-only
-/*
- * Copyright (c) 2017 Priit Laes <plaes@plaes.org>.
- * Copyright (c) 2017 Maxime Ripard.
- * Copyright (c) 2017 Jonathan Liu.
- */
-
-#include <linux/clk-provider.h>
-#include <linux/io.h>
-#include <linux/of_address.h>
-
-#include "ccu_common.h"
-#include "ccu_reset.h"
-
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_mp.h"
-#include "ccu_mult.h"
-#include "ccu_nk.h"
-#include "ccu_nkm.h"
-#include "ccu_nkmp.h"
-#include "ccu_nm.h"
-#include "ccu_phase.h"
-#include "ccu_sdm.h"
-
-#include "ccu-sun4i-a10.h"
-
-static struct ccu_nkmp pll_core_clk = {
-	.enable		= BIT(31),
-	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
-	.k		= _SUNXI_CCU_MULT(4, 2),
-	.m		= _SUNXI_CCU_DIV(0, 2),
-	.p		= _SUNXI_CCU_DIV(16, 2),
-	.common		= {
-		.reg		= 0x000,
-		.hw.init	= CLK_HW_INIT("pll-core",
-					      "hosc",
-					      &ccu_nkmp_ops,
-					      0),
-	},
-};
-
-/*
- * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
- * the base (2x, 4x and 8x), and one variable divider (the one true
- * pll audio).
- *
- * With sigma-delta modulation for fractional-N on the audio PLL,
- * we have to use specific dividers. This means the variable divider
- * can no longer be used, as the audio codec requests the exact clock
- * rates we support through this mechanism. So we now hard code the
- * variable divider to 1. This means the clock rates will no longer
- * match the clock names.
- */
-#define SUN4I_PLL_AUDIO_REG	0x008
-
-static struct ccu_sdm_setting pll_audio_sdm_table[] = {
-	{ .rate = 22579200, .pattern = 0xc0010d84, .m = 8, .n = 7 },
-	{ .rate = 24576000, .pattern = 0xc000ac02, .m = 14, .n = 14 },
-};
-
-static struct ccu_nm pll_audio_base_clk = {
-	.enable		= BIT(31),
-	.n		= _SUNXI_CCU_MULT_OFFSET(8, 7, 0),
-	.m		= _SUNXI_CCU_DIV_OFFSET(0, 5, 0),
-	.sdm		= _SUNXI_CCU_SDM(pll_audio_sdm_table, 0,
-					 0x00c, BIT(31)),
-	.common		= {
-		.reg		= 0x008,
-		.features	= CCU_FEATURE_SIGMA_DELTA_MOD,
-		.hw.init	= CLK_HW_INIT("pll-audio-base",
-					      "hosc",
-					      &ccu_nm_ops,
-					      0),
-	},
-
-};
-
-static struct ccu_mult pll_video0_clk = {
-	.enable		= BIT(31),
-	.mult		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(0, 7, 0, 9, 127),
-	.frac		= _SUNXI_CCU_FRAC(BIT(15), BIT(14),
-					  270000000, 297000000),
-	.common		= {
-		.reg		= 0x010,
-		.features	= (CCU_FEATURE_FRACTIONAL |
-				   CCU_FEATURE_ALL_PREDIV),
-		.prediv		= 8,
-		.hw.init	= CLK_HW_INIT("pll-video0",
-					      "hosc",
-					      &ccu_mult_ops,
-					      0),
-	},
-};
-
-static struct ccu_nkmp pll_ve_sun4i_clk = {
-	.enable		= BIT(31),
-	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
-	.k		= _SUNXI_CCU_MULT(4, 2),
-	.m		= _SUNXI_CCU_DIV(0, 2),
-	.p		= _SUNXI_CCU_DIV(16, 2),
-	.common		= {
-		.reg		= 0x018,
-		.hw.init	= CLK_HW_INIT("pll-ve",
-					      "hosc",
-					      &ccu_nkmp_ops,
-					      0),
-	},
-};
-
-static struct ccu_nk pll_ve_sun7i_clk = {
-	.enable		= BIT(31),
-	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
-	.k		= _SUNXI_CCU_MULT(4, 2),
-	.common		= {
-		.reg		= 0x018,
-		.hw.init	= CLK_HW_INIT("pll-ve",
-					      "hosc",
-					      &ccu_nk_ops,
-					      0),
-	},
-};
-
-static struct ccu_nk pll_ddr_base_clk = {
-	.enable		= BIT(31),
-	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
-	.k		= _SUNXI_CCU_MULT(4, 2),
-	.common		= {
-		.reg		= 0x020,
-		.hw.init	= CLK_HW_INIT("pll-ddr-base",
-					      "hosc",
-					      &ccu_nk_ops,
-					      0),
-	},
-};
-
-static SUNXI_CCU_M(pll_ddr_clk, "pll-ddr", "pll-ddr-base", 0x020, 0, 2,
-		   CLK_IS_CRITICAL);
-
-static struct ccu_div pll_ddr_other_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(16, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.common		= {
-		.reg		= 0x020,
-		.hw.init	= CLK_HW_INIT("pll-ddr-other", "pll-ddr-base",
-					      &ccu_div_ops,
-					      0),
-	},
-};
-
-static struct ccu_nk pll_periph_base_clk = {
-	.enable		= BIT(31),
-	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
-	.k		= _SUNXI_CCU_MULT(4, 2),
-	.common		= {
-		.reg		= 0x028,
-		.hw.init	= CLK_HW_INIT("pll-periph-base",
-					      "hosc",
-					      &ccu_nk_ops,
-					      0),
-	},
-};
-
-static CLK_FIXED_FACTOR_HW(pll_periph_clk, "pll-periph",
-			   &pll_periph_base_clk.common.hw,
-			   2, 1, CLK_SET_RATE_PARENT);
-
-/* Not documented on A10 */
-static struct ccu_div pll_periph_sata_clk = {
-	.enable		= BIT(14),
-	.div		= _SUNXI_CCU_DIV(0, 2),
-	.fixed_post_div	= 6,
-	.common		= {
-		.reg		= 0x028,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-periph-sata",
-					      "pll-periph-base",
-					      &ccu_div_ops, 0),
-	},
-};
-
-static struct ccu_mult pll_video1_clk = {
-	.enable		= BIT(31),
-	.mult		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(0, 7, 0, 9, 127),
-	.frac		= _SUNXI_CCU_FRAC(BIT(15), BIT(14),
-				  270000000, 297000000),
-	.common		= {
-		.reg		= 0x030,
-		.features	= (CCU_FEATURE_FRACTIONAL |
-				   CCU_FEATURE_ALL_PREDIV),
-		.prediv		= 8,
-		.hw.init	= CLK_HW_INIT("pll-video1",
-					      "hosc",
-					      &ccu_mult_ops,
-					      0),
-	},
-};
-
-/* Not present on A10 */
-static struct ccu_nk pll_gpu_clk = {
-	.enable		= BIT(31),
-	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
-	.k		= _SUNXI_CCU_MULT(4, 2),
-	.common		= {
-		.reg		= 0x040,
-		.hw.init	= CLK_HW_INIT("pll-gpu",
-					      "hosc",
-					      &ccu_nk_ops,
-					      0),
-	},
-};
-
-static SUNXI_CCU_GATE(hosc_clk,	"hosc",	"osc24M", 0x050, BIT(0), 0);
-
-static const char *const cpu_parents[] = { "osc32k", "hosc",
-					   "pll-core", "pll-periph" };
-static const struct ccu_mux_fixed_prediv cpu_predivs[] = {
-	{ .index = 3, .div = 3, },
-};
-
-#define SUN4I_AHB_REG		0x054
-static struct ccu_mux cpu_clk = {
-	.mux		= {
-		.shift		= 16,
-		.width		= 2,
-		.fixed_predivs	= cpu_predivs,
-		.n_predivs	= ARRAY_SIZE(cpu_predivs),
-	},
-	.common		= {
-		.reg		= 0x054,
-		.features	= CCU_FEATURE_FIXED_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("cpu",
-						      cpu_parents,
-						      &ccu_mux_ops,
-						      CLK_SET_RATE_PARENT | CLK_IS_CRITICAL),
-	}
-};
-
-static SUNXI_CCU_M(axi_clk, "axi", "cpu", 0x054, 0, 2, 0);
-
-static struct ccu_div ahb_sun4i_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.common		= {
-		.reg		= 0x054,
-		.hw.init	= CLK_HW_INIT("ahb", "axi", &ccu_div_ops, 0),
-	},
-};
-
-static const char *const ahb_sun7i_parents[] = { "axi", "pll-periph",
-						 "pll-periph" };
-static const struct ccu_mux_fixed_prediv ahb_sun7i_predivs[] = {
-	{ .index = 1, .div = 2, },
-	{ /* Sentinel */ },
-};
-static struct ccu_div ahb_sun7i_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= {
-		.shift		= 6,
-		.width		= 2,
-		.fixed_predivs	= ahb_sun7i_predivs,
-		.n_predivs	= ARRAY_SIZE(ahb_sun7i_predivs),
-	},
-
-	.common		= {
-		.reg		= 0x054,
-		.hw.init	= CLK_HW_INIT_PARENTS("ahb",
-						      ahb_sun7i_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static struct clk_div_table apb0_div_table[] = {
-	{ .val = 0, .div = 2 },
-	{ .val = 1, .div = 2 },
-	{ .val = 2, .div = 4 },
-	{ .val = 3, .div = 8 },
-	{ /* Sentinel */ },
-};
-static SUNXI_CCU_DIV_TABLE(apb0_clk, "apb0", "ahb",
-			   0x054, 8, 2, apb0_div_table, 0);
-
-static const char *const apb1_parents[] = { "hosc", "pll-periph", "osc32k" };
-static SUNXI_CCU_MP_WITH_MUX(apb1_clk, "apb1", apb1_parents, 0x058,
-			     0, 5,	/* M */
-			     16, 2,	/* P */
-			     24, 2,	/* mux */
-			     0);
-
-/* Not present on A20 */
-static SUNXI_CCU_GATE(axi_dram_clk,	"axi-dram",	"ahb",
-		      0x05c, BIT(31), 0);
-
-static SUNXI_CCU_GATE(ahb_otg_clk,	"ahb-otg",	"ahb",
-		      0x060, BIT(0), 0);
-static SUNXI_CCU_GATE(ahb_ehci0_clk,	"ahb-ehci0",	"ahb",
-		      0x060, BIT(1), 0);
-static SUNXI_CCU_GATE(ahb_ohci0_clk,	"ahb-ohci0",	"ahb",
-		      0x060, BIT(2), 0);
-static SUNXI_CCU_GATE(ahb_ehci1_clk,	"ahb-ehci1",	"ahb",
-		      0x060, BIT(3), 0);
-static SUNXI_CCU_GATE(ahb_ohci1_clk,	"ahb-ohci1",	"ahb",
-		      0x060, BIT(4), 0);
-static SUNXI_CCU_GATE(ahb_ss_clk,	"ahb-ss",	"ahb",
-		      0x060, BIT(5), 0);
-static SUNXI_CCU_GATE(ahb_dma_clk,	"ahb-dma",	"ahb",
-		      0x060, BIT(6), 0);
-static SUNXI_CCU_GATE(ahb_bist_clk,	"ahb-bist",	"ahb",
-		      0x060, BIT(7), 0);
-static SUNXI_CCU_GATE(ahb_mmc0_clk,	"ahb-mmc0",	"ahb",
-		      0x060, BIT(8), 0);
-static SUNXI_CCU_GATE(ahb_mmc1_clk,	"ahb-mmc1",	"ahb",
-		      0x060, BIT(9), 0);
-static SUNXI_CCU_GATE(ahb_mmc2_clk,	"ahb-mmc2",	"ahb",
-		      0x060, BIT(10), 0);
-static SUNXI_CCU_GATE(ahb_mmc3_clk,	"ahb-mmc3",	"ahb",
-		      0x060, BIT(11), 0);
-static SUNXI_CCU_GATE(ahb_ms_clk,	"ahb-ms",	"ahb",
-		      0x060, BIT(12), 0);
-static SUNXI_CCU_GATE(ahb_nand_clk,	"ahb-nand",	"ahb",
-		      0x060, BIT(13), 0);
-static SUNXI_CCU_GATE(ahb_sdram_clk,	"ahb-sdram",	"ahb",
-		      0x060, BIT(14), CLK_IS_CRITICAL);
-
-static SUNXI_CCU_GATE(ahb_ace_clk,	"ahb-ace",	"ahb",
-		      0x060, BIT(16), 0);
-static SUNXI_CCU_GATE(ahb_emac_clk,	"ahb-emac",	"ahb",
-		      0x060, BIT(17), 0);
-static SUNXI_CCU_GATE(ahb_ts_clk,	"ahb-ts",	"ahb",
-		      0x060, BIT(18), 0);
-static SUNXI_CCU_GATE(ahb_spi0_clk,	"ahb-spi0",	"ahb",
-		      0x060, BIT(20), 0);
-static SUNXI_CCU_GATE(ahb_spi1_clk,	"ahb-spi1",	"ahb",
-		      0x060, BIT(21), 0);
-static SUNXI_CCU_GATE(ahb_spi2_clk,	"ahb-spi2",	"ahb",
-		      0x060, BIT(22), 0);
-static SUNXI_CCU_GATE(ahb_spi3_clk,	"ahb-spi3",	"ahb",
-		      0x060, BIT(23), 0);
-static SUNXI_CCU_GATE(ahb_pata_clk,	"ahb-pata",	"ahb",
-		      0x060, BIT(24), 0);
-/* Not documented on A20 */
-static SUNXI_CCU_GATE(ahb_sata_clk,	"ahb-sata",	"ahb",
-		      0x060, BIT(25), 0);
-/* Not present on A20 */
-static SUNXI_CCU_GATE(ahb_gps_clk,	"ahb-gps",	"ahb",
-		      0x060, BIT(26), 0);
-/* Not present on A10 */
-static SUNXI_CCU_GATE(ahb_hstimer_clk,	"ahb-hstimer",	"ahb",
-		      0x060, BIT(28), 0);
-
-static SUNXI_CCU_GATE(ahb_ve_clk,	"ahb-ve",	"ahb",
-		      0x064, BIT(0), 0);
-static SUNXI_CCU_GATE(ahb_tvd_clk,	"ahb-tvd",	"ahb",
-		      0x064, BIT(1), 0);
-static SUNXI_CCU_GATE(ahb_tve0_clk,	"ahb-tve0",	"ahb",
-		      0x064, BIT(2), 0);
-static SUNXI_CCU_GATE(ahb_tve1_clk,	"ahb-tve1",	"ahb",
-		      0x064, BIT(3), 0);
-static SUNXI_CCU_GATE(ahb_lcd0_clk,	"ahb-lcd0",	"ahb",
-		      0x064, BIT(4), 0);
-static SUNXI_CCU_GATE(ahb_lcd1_clk,	"ahb-lcd1",	"ahb",
-		      0x064, BIT(5), 0);
-static SUNXI_CCU_GATE(ahb_csi0_clk,	"ahb-csi0",	"ahb",
-		      0x064, BIT(8), 0);
-static SUNXI_CCU_GATE(ahb_csi1_clk,	"ahb-csi1",	"ahb",
-		      0x064, BIT(9), 0);
-/* Not present on A10 */
-static SUNXI_CCU_GATE(ahb_hdmi1_clk,	"ahb-hdmi1",	"ahb",
-		      0x064, BIT(10), 0);
-static SUNXI_CCU_GATE(ahb_hdmi0_clk,	"ahb-hdmi0",	"ahb",
-		      0x064, BIT(11), 0);
-static SUNXI_CCU_GATE(ahb_de_be0_clk,	"ahb-de-be0",	"ahb",
-		      0x064, BIT(12), 0);
-static SUNXI_CCU_GATE(ahb_de_be1_clk,	"ahb-de-be1",	"ahb",
-		      0x064, BIT(13), 0);
-static SUNXI_CCU_GATE(ahb_de_fe0_clk,	"ahb-de-fe0",	"ahb",
-		      0x064, BIT(14), 0);
-static SUNXI_CCU_GATE(ahb_de_fe1_clk,	"ahb-de-fe1",	"ahb",
-		      0x064, BIT(15), 0);
-/* Not present on A10 */
-static SUNXI_CCU_GATE(ahb_gmac_clk,	"ahb-gmac",	"ahb",
-		      0x064, BIT(17), 0);
-static SUNXI_CCU_GATE(ahb_mp_clk,	"ahb-mp",	"ahb",
-		      0x064, BIT(18), 0);
-static SUNXI_CCU_GATE(ahb_gpu_clk,	"ahb-gpu",	"ahb",
-		      0x064, BIT(20), 0);
-
-static SUNXI_CCU_GATE(apb0_codec_clk,	"apb0-codec",	"apb0",
-		      0x068, BIT(0), 0);
-static SUNXI_CCU_GATE(apb0_spdif_clk,	"apb0-spdif",	"apb0",
-		      0x068, BIT(1), 0);
-static SUNXI_CCU_GATE(apb0_ac97_clk,	"apb0-ac97",	"apb0",
-		      0x068, BIT(2), 0);
-static SUNXI_CCU_GATE(apb0_i2s0_clk,	"apb0-i2s0",	"apb0",
-		      0x068, BIT(3), 0);
-/* Not present on A10 */
-static SUNXI_CCU_GATE(apb0_i2s1_clk,	"apb0-i2s1",	"apb0",
-		      0x068, BIT(4), 0);
-static SUNXI_CCU_GATE(apb0_pio_clk,	"apb0-pio",	"apb0",
-		      0x068, BIT(5), 0);
-static SUNXI_CCU_GATE(apb0_ir0_clk,	"apb0-ir0",	"apb0",
-		      0x068, BIT(6), 0);
-static SUNXI_CCU_GATE(apb0_ir1_clk,	"apb0-ir1",	"apb0",
-		      0x068, BIT(7), 0);
-/* Not present on A10 */
-static SUNXI_CCU_GATE(apb0_i2s2_clk,	"apb0-i2s2",	"apb0",
-		      0x068, BIT(8), 0);
-static SUNXI_CCU_GATE(apb0_keypad_clk,	"apb0-keypad",	"apb0",
-		      0x068, BIT(10), 0);
-
-static SUNXI_CCU_GATE(apb1_i2c0_clk,	"apb1-i2c0",	"apb1",
-		      0x06c, BIT(0), 0);
-static SUNXI_CCU_GATE(apb1_i2c1_clk,	"apb1-i2c1",	"apb1",
-		      0x06c, BIT(1), 0);
-static SUNXI_CCU_GATE(apb1_i2c2_clk,	"apb1-i2c2",	"apb1",
-		      0x06c, BIT(2), 0);
-/* Not present on A10 */
-static SUNXI_CCU_GATE(apb1_i2c3_clk,	"apb1-i2c3",	"apb1",
-		      0x06c, BIT(3), 0);
-static SUNXI_CCU_GATE(apb1_can_clk,	"apb1-can",	"apb1",
-		      0x06c, BIT(4), 0);
-static SUNXI_CCU_GATE(apb1_scr_clk,	"apb1-scr",	"apb1",
-		      0x06c, BIT(5), 0);
-static SUNXI_CCU_GATE(apb1_ps20_clk,	"apb1-ps20",	"apb1",
-		      0x06c, BIT(6), 0);
-static SUNXI_CCU_GATE(apb1_ps21_clk,	"apb1-ps21",	"apb1",
-		      0x06c, BIT(7), 0);
-/* Not present on A10 */
-static SUNXI_CCU_GATE(apb1_i2c4_clk,	"apb1-i2c4",	"apb1",
-		      0x06c, BIT(15), 0);
-static SUNXI_CCU_GATE(apb1_uart0_clk,	"apb1-uart0",	"apb1",
-		      0x06c, BIT(16), 0);
-static SUNXI_CCU_GATE(apb1_uart1_clk,	"apb1-uart1",	"apb1",
-		      0x06c, BIT(17), 0);
-static SUNXI_CCU_GATE(apb1_uart2_clk,	"apb1-uart2",	"apb1",
-		      0x06c, BIT(18), 0);
-static SUNXI_CCU_GATE(apb1_uart3_clk,	"apb1-uart3",	"apb1",
-		      0x06c, BIT(19), 0);
-static SUNXI_CCU_GATE(apb1_uart4_clk,	"apb1-uart4",	"apb1",
-		      0x06c, BIT(20), 0);
-static SUNXI_CCU_GATE(apb1_uart5_clk,	"apb1-uart5",	"apb1",
-		      0x06c, BIT(21), 0);
-static SUNXI_CCU_GATE(apb1_uart6_clk,	"apb1-uart6",	"apb1",
-		      0x06c, BIT(22), 0);
-static SUNXI_CCU_GATE(apb1_uart7_clk,	"apb1-uart7",	"apb1",
-		      0x06c, BIT(23), 0);
-
-static const char *const mod0_default_parents[] = { "hosc", "pll-periph",
-						     "pll-ddr-other" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand_clk, "nand", mod0_default_parents, 0x080,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-/* Undocumented on A10 */
-static SUNXI_CCU_MP_WITH_MUX_GATE(ms_clk, "ms", mod0_default_parents, 0x084,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents, 0x088,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-/* MMC output and sample clocks are not present on A10 */
-static SUNXI_CCU_PHASE(mmc0_output_clk, "mmc0_output", "mmc0",
-		       0x088, 8, 3, 0);
-static SUNXI_CCU_PHASE(mmc0_sample_clk, "mmc0_sample", "mmc0",
-		       0x088, 20, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents, 0x08c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-/* MMC output and sample clocks are not present on A10 */
-static SUNXI_CCU_PHASE(mmc1_output_clk, "mmc1_output", "mmc1",
-		       0x08c, 8, 3, 0);
-static SUNXI_CCU_PHASE(mmc1_sample_clk, "mmc1_sample", "mmc1",
-		       0x08c, 20, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents, 0x090,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-/* MMC output and sample clocks are not present on A10 */
-static SUNXI_CCU_PHASE(mmc2_output_clk, "mmc2_output", "mmc2",
-		       0x090, 8, 3, 0);
-static SUNXI_CCU_PHASE(mmc2_sample_clk, "mmc2_sample", "mmc2",
-		       0x090, 20, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc3_clk, "mmc3", mod0_default_parents, 0x094,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-/* MMC output and sample clocks are not present on A10 */
-static SUNXI_CCU_PHASE(mmc3_output_clk, "mmc3_output", "mmc3",
-		       0x094, 8, 3, 0);
-static SUNXI_CCU_PHASE(mmc3_sample_clk, "mmc3_sample", "mmc3",
-		       0x094, 20, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(ts_clk, "ts", mod0_default_parents, 0x098,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(ss_clk, "ss", mod0_default_parents, 0x09c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents, 0x0a0,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents, 0x0a4,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi2_clk, "spi2", mod0_default_parents, 0x0a8,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-/* Undocumented on A10 */
-static SUNXI_CCU_MP_WITH_MUX_GATE(pata_clk, "pata", mod0_default_parents, 0x0ac,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-/* TODO: Check whether A10 actually supports osc32k as 4th parent? */
-static const char *const ir_parents_sun4i[] = { "hosc", "pll-periph",
-						"pll-ddr-other" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(ir0_sun4i_clk, "ir0", ir_parents_sun4i, 0x0b0,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(ir1_sun4i_clk, "ir1", ir_parents_sun4i, 0x0b4,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-static const char *const ir_parents_sun7i[] = { "hosc", "pll-periph",
-						"pll-ddr-other", "osc32k" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(ir0_sun7i_clk, "ir0", ir_parents_sun7i, 0x0b0,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(ir1_sun7i_clk, "ir1", ir_parents_sun7i, 0x0b4,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static const char *const audio_parents[] = { "pll-audio-8x", "pll-audio-4x",
-					      "pll-audio-2x", "pll-audio" };
-static SUNXI_CCU_MUX_WITH_GATE(i2s0_clk, "i2s0", audio_parents,
-			       0x0b8, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_MUX_WITH_GATE(ac97_clk, "ac97", audio_parents,
-			       0x0bc, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-/* Undocumented on A10 */
-static SUNXI_CCU_MUX_WITH_GATE(spdif_clk, "spdif", audio_parents,
-			       0x0c0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static const char *const keypad_parents[] = { "hosc", "losc"};
-static const u8 keypad_table[] = { 0, 2 };
-static struct ccu_mp keypad_clk = {
-	.enable		= BIT(31),
-	.m		= _SUNXI_CCU_DIV(0, 5),
-	.p		= _SUNXI_CCU_DIV(16, 2),
-	.mux		= _SUNXI_CCU_MUX_TABLE(24, 2, keypad_table),
-	.common		= {
-		.reg		= 0x0c4,
-		.hw.init	= CLK_HW_INIT_PARENTS("keypad",
-						      keypad_parents,
-						      &ccu_mp_ops,
-						      0),
-	},
-};
-
-/*
- * SATA supports external clock as parent via BIT(24) and is probably an
- * optional crystal or oscillator that can be connected to the
- * SATA-CLKM / SATA-CLKP pins.
- */
-static const char *const sata_parents[] = {"pll-periph-sata", "sata-ext"};
-static SUNXI_CCU_MUX_WITH_GATE(sata_clk, "sata", sata_parents,
-			       0x0c8, 24, 1, BIT(31), CLK_SET_RATE_PARENT);
-
-
-static SUNXI_CCU_GATE(usb_ohci0_clk,	"usb-ohci0",	"pll-periph",
-		      0x0cc, BIT(6), 0);
-static SUNXI_CCU_GATE(usb_ohci1_clk,	"usb-ohci1",	"pll-periph",
-		      0x0cc, BIT(7), 0);
-static SUNXI_CCU_GATE(usb_phy_clk,	"usb-phy",	"pll-periph",
-		      0x0cc, BIT(8), 0);
-
-/* TODO: GPS CLK 0x0d0 */
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi3_clk, "spi3", mod0_default_parents, 0x0d4,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-/* Not present on A10 */
-static SUNXI_CCU_MUX_WITH_GATE(i2s1_clk, "i2s1", audio_parents,
-			       0x0d8, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-/* Not present on A10 */
-static SUNXI_CCU_MUX_WITH_GATE(i2s2_clk, "i2s2", audio_parents,
-			       0x0dc, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"pll-ddr",
-		      0x100, BIT(0), 0);
-static SUNXI_CCU_GATE(dram_csi0_clk,	"dram-csi0",	"pll-ddr",
-		      0x100, BIT(1), 0);
-static SUNXI_CCU_GATE(dram_csi1_clk,	"dram-csi1",	"pll-ddr",
-		      0x100, BIT(2), 0);
-static SUNXI_CCU_GATE(dram_ts_clk,	"dram-ts",	"pll-ddr",
-		      0x100, BIT(3), 0);
-static SUNXI_CCU_GATE(dram_tvd_clk,	"dram-tvd",	"pll-ddr",
-		      0x100, BIT(4), 0);
-static SUNXI_CCU_GATE(dram_tve0_clk,	"dram-tve0",	"pll-ddr",
-		      0x100, BIT(5), 0);
-static SUNXI_CCU_GATE(dram_tve1_clk,	"dram-tve1",	"pll-ddr",
-		      0x100, BIT(6), 0);
-
-/* Clock seems to be critical only on sun4i */
-static SUNXI_CCU_GATE(dram_out_clk,	"dram-out",	"pll-ddr",
-		      0x100, BIT(15), CLK_IS_CRITICAL);
-static SUNXI_CCU_GATE(dram_de_fe1_clk,	"dram-de-fe1",	"pll-ddr",
-		      0x100, BIT(24), 0);
-static SUNXI_CCU_GATE(dram_de_fe0_clk,	"dram-de-fe0",	"pll-ddr",
-		      0x100, BIT(25), 0);
-static SUNXI_CCU_GATE(dram_de_be0_clk,	"dram-de-be0",	"pll-ddr",
-		      0x100, BIT(26), 0);
-static SUNXI_CCU_GATE(dram_de_be1_clk,	"dram-de-be1",	"pll-ddr",
-		      0x100, BIT(27), 0);
-static SUNXI_CCU_GATE(dram_mp_clk,	"dram-mp",	"pll-ddr",
-		      0x100, BIT(28), 0);
-static SUNXI_CCU_GATE(dram_ace_clk,	"dram-ace",	"pll-ddr",
-		      0x100, BIT(29), 0);
-
-static const char *const de_parents[] = { "pll-video0", "pll-video1",
-					   "pll-ddr-other" };
-static SUNXI_CCU_M_WITH_MUX_GATE(de_be0_clk, "de-be0", de_parents,
-				 0x104, 0, 4, 24, 2, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(de_be1_clk, "de-be1", de_parents,
-				 0x108, 0, 4, 24, 2, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(de_fe0_clk, "de-fe0", de_parents,
-				 0x10c, 0, 4, 24, 2, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(de_fe1_clk, "de-fe1", de_parents,
-				 0x110, 0, 4, 24, 2, BIT(31), 0);
-
-/* Undocumented on A10 */
-static SUNXI_CCU_M_WITH_MUX_GATE(de_mp_clk, "de-mp", de_parents,
-				 0x114, 0, 4, 24, 2, BIT(31), 0);
-
-static const char *const disp_parents[] = { "pll-video0", "pll-video1",
-					    "pll-video0-2x", "pll-video1-2x" };
-static SUNXI_CCU_MUX_WITH_GATE(tcon0_ch0_clk, "tcon0-ch0-sclk", disp_parents,
-			       0x118, 24, 2, BIT(31), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_MUX_WITH_GATE(tcon1_ch0_clk, "tcon1-ch0-sclk", disp_parents,
-			       0x11c, 24, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static const char *const csi_sclk_parents[] = { "pll-video0", "pll-ve",
-						"pll-ddr-other", "pll-periph" };
-
-static SUNXI_CCU_M_WITH_MUX_GATE(csi_sclk_clk, "csi-sclk",
-				 csi_sclk_parents,
-				 0x120, 0, 4, 24, 2, BIT(31), 0);
-
-/* TVD clock setup for A10 */
-static const char *const tvd_parents[] = { "pll-video0", "pll-video1" };
-static SUNXI_CCU_MUX_WITH_GATE(tvd_sun4i_clk, "tvd", tvd_parents,
-			       0x128, 24, 1, BIT(31), 0);
-
-/* TVD clock setup for A20 */
-static SUNXI_CCU_MP_WITH_MUX_GATE(tvd_sclk2_sun7i_clk,
-				  "tvd-sclk2", tvd_parents,
-				  0x128,
-				  0, 4,		/* M */
-				  16, 4,	/* P */
-				  8, 1,		/* mux */
-				  BIT(15),	/* gate */
-				  0);
-
-static SUNXI_CCU_M_WITH_GATE(tvd_sclk1_sun7i_clk, "tvd-sclk1", "tvd-sclk2",
-			     0x128, 0, 4, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(tcon0_ch1_sclk2_clk, "tcon0-ch1-sclk2",
-				 disp_parents,
-				 0x12c, 0, 4, 24, 2, BIT(31),
-				 CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M_WITH_GATE(tcon0_ch1_clk,
-			     "tcon0-ch1-sclk1", "tcon0-ch1-sclk2",
-			     0x12c, 11, 1, BIT(15),
-			     CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(tcon1_ch1_sclk2_clk, "tcon1-ch1-sclk2",
-				 disp_parents,
-				 0x130, 0, 4, 24, 2, BIT(31),
-				 CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M_WITH_GATE(tcon1_ch1_clk,
-			     "tcon1-ch1-sclk1", "tcon1-ch1-sclk2",
-			     0x130, 11, 1, BIT(15),
-			     CLK_SET_RATE_PARENT);
-
-static const char *const csi_parents[] = { "hosc", "pll-video0", "pll-video1",
-					   "pll-video0-2x", "pll-video1-2x"};
-static const u8 csi_table[] = { 0, 1, 2, 5, 6};
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi0_clk, "csi0",
-				       csi_parents, csi_table,
-				       0x134, 0, 5, 24, 3, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi1_clk, "csi1",
-				       csi_parents, csi_table,
-				       0x138, 0, 5, 24, 3, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve", 0x13c, 16, 8, BIT(31), 0);
-
-static SUNXI_CCU_GATE(codec_clk, "codec", "pll-audio",
-		      0x140, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(avs_clk, "avs", "hosc", 0x144, BIT(31), 0);
-
-static const char *const ace_parents[] = { "pll-ve", "pll-ddr-other" };
-static SUNXI_CCU_M_WITH_MUX_GATE(ace_clk, "ace", ace_parents,
-				 0x148, 0, 4, 24, 1, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(hdmi_clk, "hdmi", disp_parents,
-				 0x150, 0, 4, 24, 2, BIT(31),
-				 CLK_SET_RATE_PARENT);
-
-static const char *const gpu_parents_sun4i[] = { "pll-video0", "pll-ve",
-						 "pll-ddr-other",
-						 "pll-video1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(gpu_sun4i_clk, "gpu", gpu_parents_sun4i,
-				 0x154, 0, 4, 24, 2, BIT(31),
-				 CLK_SET_RATE_PARENT);
-
-static const char *const gpu_parents_sun7i[] = { "pll-video0", "pll-ve",
-						 "pll-ddr-other", "pll-video1",
-						 "pll-gpu" };
-static const u8 gpu_table_sun7i[] = { 0, 1, 2, 3, 4 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(gpu_sun7i_clk, "gpu",
-				       gpu_parents_sun7i, gpu_table_sun7i,
-				       0x154, 0, 4, 24, 3, BIT(31),
-				       CLK_SET_RATE_PARENT);
-
-static const char *const mbus_sun4i_parents[] = { "hosc", "pll-periph",
-						  "pll-ddr-other" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(mbus_sun4i_clk, "mbus", mbus_sun4i_parents,
-				  0x15c, 0, 4, 16, 2, 24, 2, BIT(31),
-				  0);
-static const char *const mbus_sun7i_parents[] = { "hosc", "pll-periph-base",
-						  "pll-ddr-other" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(mbus_sun7i_clk, "mbus", mbus_sun7i_parents,
-				  0x15c, 0, 4, 16, 2, 24, 2, BIT(31),
-				  CLK_IS_CRITICAL);
-
-static SUNXI_CCU_GATE(hdmi1_slow_clk, "hdmi1-slow", "hosc", 0x178, BIT(31), 0);
-
-static const char *const hdmi1_parents[] = { "pll-video0", "pll-video1" };
-static const u8 hdmi1_table[] = { 0, 1};
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(hdmi1_clk, "hdmi1",
-				       hdmi1_parents, hdmi1_table,
-				       0x17c, 0, 4, 24, 2, BIT(31),
-				       CLK_SET_RATE_PARENT);
-
-static const char *const out_parents[] = { "hosc", "osc32k", "hosc" };
-static const struct ccu_mux_fixed_prediv clk_out_predivs[] = {
-	{ .index = 0, .div = 750, },
-};
-
-static struct ccu_mp out_a_clk = {
-	.enable		= BIT(31),
-	.m		= _SUNXI_CCU_DIV(8, 5),
-	.p		= _SUNXI_CCU_DIV(20, 2),
-	.mux		= {
-		.shift		= 24,
-		.width		= 2,
-		.fixed_predivs	= clk_out_predivs,
-		.n_predivs	= ARRAY_SIZE(clk_out_predivs),
-	},
-	.common		= {
-		.reg		= 0x1f0,
-		.features	= CCU_FEATURE_FIXED_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("out-a",
-						      out_parents,
-						      &ccu_mp_ops,
-						      0),
-	},
-};
-static struct ccu_mp out_b_clk = {
-	.enable		= BIT(31),
-	.m		= _SUNXI_CCU_DIV(8, 5),
-	.p		= _SUNXI_CCU_DIV(20, 2),
-	.mux		= {
-		.shift		= 24,
-		.width		= 2,
-		.fixed_predivs	= clk_out_predivs,
-		.n_predivs	= ARRAY_SIZE(clk_out_predivs),
-	},
-	.common		= {
-		.reg		= 0x1f4,
-		.features	= CCU_FEATURE_FIXED_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("out-b",
-						      out_parents,
-						      &ccu_mp_ops,
-						      0),
-	},
-};
-
-static struct ccu_common *sun4i_sun7i_ccu_clks[] = {
-	&hosc_clk.common,
-	&pll_core_clk.common,
-	&pll_audio_base_clk.common,
-	&pll_video0_clk.common,
-	&pll_ve_sun4i_clk.common,
-	&pll_ve_sun7i_clk.common,
-	&pll_ddr_base_clk.common,
-	&pll_ddr_clk.common,
-	&pll_ddr_other_clk.common,
-	&pll_periph_base_clk.common,
-	&pll_periph_sata_clk.common,
-	&pll_video1_clk.common,
-	&pll_gpu_clk.common,
-	&cpu_clk.common,
-	&axi_clk.common,
-	&axi_dram_clk.common,
-	&ahb_sun4i_clk.common,
-	&ahb_sun7i_clk.common,
-	&apb0_clk.common,
-	&apb1_clk.common,
-	&ahb_otg_clk.common,
-	&ahb_ehci0_clk.common,
-	&ahb_ohci0_clk.common,
-	&ahb_ehci1_clk.common,
-	&ahb_ohci1_clk.common,
-	&ahb_ss_clk.common,
-	&ahb_dma_clk.common,
-	&ahb_bist_clk.common,
-	&ahb_mmc0_clk.common,
-	&ahb_mmc1_clk.common,
-	&ahb_mmc2_clk.common,
-	&ahb_mmc3_clk.common,
-	&ahb_ms_clk.common,
-	&ahb_nand_clk.common,
-	&ahb_sdram_clk.common,
-	&ahb_ace_clk.common,
-	&ahb_emac_clk.common,
-	&ahb_ts_clk.common,
-	&ahb_spi0_clk.common,
-	&ahb_spi1_clk.common,
-	&ahb_spi2_clk.common,
-	&ahb_spi3_clk.common,
-	&ahb_pata_clk.common,
-	&ahb_sata_clk.common,
-	&ahb_gps_clk.common,
-	&ahb_hstimer_clk.common,
-	&ahb_ve_clk.common,
-	&ahb_tvd_clk.common,
-	&ahb_tve0_clk.common,
-	&ahb_tve1_clk.common,
-	&ahb_lcd0_clk.common,
-	&ahb_lcd1_clk.common,
-	&ahb_csi0_clk.common,
-	&ahb_csi1_clk.common,
-	&ahb_hdmi1_clk.common,
-	&ahb_hdmi0_clk.common,
-	&ahb_de_be0_clk.common,
-	&ahb_de_be1_clk.common,
-	&ahb_de_fe0_clk.common,
-	&ahb_de_fe1_clk.common,
-	&ahb_gmac_clk.common,
-	&ahb_mp_clk.common,
-	&ahb_gpu_clk.common,
-	&apb0_codec_clk.common,
-	&apb0_spdif_clk.common,
-	&apb0_ac97_clk.common,
-	&apb0_i2s0_clk.common,
-	&apb0_i2s1_clk.common,
-	&apb0_pio_clk.common,
-	&apb0_ir0_clk.common,
-	&apb0_ir1_clk.common,
-	&apb0_i2s2_clk.common,
-	&apb0_keypad_clk.common,
-	&apb1_i2c0_clk.common,
-	&apb1_i2c1_clk.common,
-	&apb1_i2c2_clk.common,
-	&apb1_i2c3_clk.common,
-	&apb1_can_clk.common,
-	&apb1_scr_clk.common,
-	&apb1_ps20_clk.common,
-	&apb1_ps21_clk.common,
-	&apb1_i2c4_clk.common,
-	&apb1_uart0_clk.common,
-	&apb1_uart1_clk.common,
-	&apb1_uart2_clk.common,
-	&apb1_uart3_clk.common,
-	&apb1_uart4_clk.common,
-	&apb1_uart5_clk.common,
-	&apb1_uart6_clk.common,
-	&apb1_uart7_clk.common,
-	&nand_clk.common,
-	&ms_clk.common,
-	&mmc0_clk.common,
-	&mmc0_output_clk.common,
-	&mmc0_sample_clk.common,
-	&mmc1_clk.common,
-	&mmc1_output_clk.common,
-	&mmc1_sample_clk.common,
-	&mmc2_clk.common,
-	&mmc2_output_clk.common,
-	&mmc2_sample_clk.common,
-	&mmc3_clk.common,
-	&mmc3_output_clk.common,
-	&mmc3_sample_clk.common,
-	&ts_clk.common,
-	&ss_clk.common,
-	&spi0_clk.common,
-	&spi1_clk.common,
-	&spi2_clk.common,
-	&pata_clk.common,
-	&ir0_sun4i_clk.common,
-	&ir1_sun4i_clk.common,
-	&ir0_sun7i_clk.common,
-	&ir1_sun7i_clk.common,
-	&i2s0_clk.common,
-	&ac97_clk.common,
-	&spdif_clk.common,
-	&keypad_clk.common,
-	&sata_clk.common,
-	&usb_ohci0_clk.common,
-	&usb_ohci1_clk.common,
-	&usb_phy_clk.common,
-	&spi3_clk.common,
-	&i2s1_clk.common,
-	&i2s2_clk.common,
-	&dram_ve_clk.common,
-	&dram_csi0_clk.common,
-	&dram_csi1_clk.common,
-	&dram_ts_clk.common,
-	&dram_tvd_clk.common,
-	&dram_tve0_clk.common,
-	&dram_tve1_clk.common,
-	&dram_out_clk.common,
-	&dram_de_fe1_clk.common,
-	&dram_de_fe0_clk.common,
-	&dram_de_be0_clk.common,
-	&dram_de_be1_clk.common,
-	&dram_mp_clk.common,
-	&dram_ace_clk.common,
-	&de_be0_clk.common,
-	&de_be1_clk.common,
-	&de_fe0_clk.common,
-	&de_fe1_clk.common,
-	&de_mp_clk.common,
-	&tcon0_ch0_clk.common,
-	&tcon1_ch0_clk.common,
-	&csi_sclk_clk.common,
-	&tvd_sun4i_clk.common,
-	&tvd_sclk1_sun7i_clk.common,
-	&tvd_sclk2_sun7i_clk.common,
-	&tcon0_ch1_sclk2_clk.common,
-	&tcon0_ch1_clk.common,
-	&tcon1_ch1_sclk2_clk.common,
-	&tcon1_ch1_clk.common,
-	&csi0_clk.common,
-	&csi1_clk.common,
-	&ve_clk.common,
-	&codec_clk.common,
-	&avs_clk.common,
-	&ace_clk.common,
-	&hdmi_clk.common,
-	&gpu_sun4i_clk.common,
-	&gpu_sun7i_clk.common,
-	&mbus_sun4i_clk.common,
-	&mbus_sun7i_clk.common,
-	&hdmi1_slow_clk.common,
-	&hdmi1_clk.common,
-	&out_a_clk.common,
-	&out_b_clk.common
-};
-
-static const struct clk_hw *clk_parent_pll_audio[] = {
-	&pll_audio_base_clk.common.hw
-};
-
-/* Post-divider for pll-audio is hardcoded to 1 */
-static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
-			    clk_parent_pll_audio,
-			    1, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
-			    clk_parent_pll_audio,
-			    2, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
-			    clk_parent_pll_audio,
-			    1, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
-			    clk_parent_pll_audio,
-			    1, 2, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HW(pll_video0_2x_clk, "pll-video0-2x",
-			   &pll_video0_clk.common.hw,
-			   1, 2, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HW(pll_video1_2x_clk, "pll-video1-2x",
-			   &pll_video1_clk.common.hw,
-			   1, 2, CLK_SET_RATE_PARENT);
-
-
-static struct clk_hw_onecell_data sun4i_a10_hw_clks = {
-	.hws	= {
-		[CLK_HOSC]		= &hosc_clk.common.hw,
-		[CLK_PLL_CORE]		= &pll_core_clk.common.hw,
-		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
-		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
-		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
-		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
-		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
-		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
-		[CLK_PLL_VIDEO0_2X]	= &pll_video0_2x_clk.hw,
-		[CLK_PLL_VE]		= &pll_ve_sun4i_clk.common.hw,
-		[CLK_PLL_DDR_BASE]	= &pll_ddr_base_clk.common.hw,
-		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
-		[CLK_PLL_DDR_OTHER]	= &pll_ddr_other_clk.common.hw,
-		[CLK_PLL_PERIPH_BASE]	= &pll_periph_base_clk.common.hw,
-		[CLK_PLL_PERIPH]	= &pll_periph_clk.hw,
-		[CLK_PLL_PERIPH_SATA]	= &pll_periph_sata_clk.common.hw,
-		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
-		[CLK_PLL_VIDEO1_2X]	= &pll_video1_2x_clk.hw,
-		[CLK_CPU]		= &cpu_clk.common.hw,
-		[CLK_AXI]		= &axi_clk.common.hw,
-		[CLK_AXI_DRAM]		= &axi_dram_clk.common.hw,
-		[CLK_AHB]		= &ahb_sun4i_clk.common.hw,
-		[CLK_APB0]		= &apb0_clk.common.hw,
-		[CLK_APB1]		= &apb1_clk.common.hw,
-		[CLK_AHB_OTG]		= &ahb_otg_clk.common.hw,
-		[CLK_AHB_EHCI0]		= &ahb_ehci0_clk.common.hw,
-		[CLK_AHB_OHCI0]		= &ahb_ohci0_clk.common.hw,
-		[CLK_AHB_EHCI1]		= &ahb_ehci1_clk.common.hw,
-		[CLK_AHB_OHCI1]		= &ahb_ohci1_clk.common.hw,
-		[CLK_AHB_SS]		= &ahb_ss_clk.common.hw,
-		[CLK_AHB_DMA]		= &ahb_dma_clk.common.hw,
-		[CLK_AHB_BIST]		= &ahb_bist_clk.common.hw,
-		[CLK_AHB_MMC0]		= &ahb_mmc0_clk.common.hw,
-		[CLK_AHB_MMC1]		= &ahb_mmc1_clk.common.hw,
-		[CLK_AHB_MMC2]		= &ahb_mmc2_clk.common.hw,
-		[CLK_AHB_MMC3]		= &ahb_mmc3_clk.common.hw,
-		[CLK_AHB_MS]		= &ahb_ms_clk.common.hw,
-		[CLK_AHB_NAND]		= &ahb_nand_clk.common.hw,
-		[CLK_AHB_SDRAM]		= &ahb_sdram_clk.common.hw,
-		[CLK_AHB_ACE]		= &ahb_ace_clk.common.hw,
-		[CLK_AHB_EMAC]		= &ahb_emac_clk.common.hw,
-		[CLK_AHB_TS]		= &ahb_ts_clk.common.hw,
-		[CLK_AHB_SPI0]		= &ahb_spi0_clk.common.hw,
-		[CLK_AHB_SPI1]		= &ahb_spi1_clk.common.hw,
-		[CLK_AHB_SPI2]		= &ahb_spi2_clk.common.hw,
-		[CLK_AHB_SPI3]		= &ahb_spi3_clk.common.hw,
-		[CLK_AHB_PATA]		= &ahb_pata_clk.common.hw,
-		[CLK_AHB_SATA]		= &ahb_sata_clk.common.hw,
-		[CLK_AHB_GPS]		= &ahb_gps_clk.common.hw,
-		[CLK_AHB_VE]		= &ahb_ve_clk.common.hw,
-		[CLK_AHB_TVD]		= &ahb_tvd_clk.common.hw,
-		[CLK_AHB_TVE0]		= &ahb_tve0_clk.common.hw,
-		[CLK_AHB_TVE1]		= &ahb_tve1_clk.common.hw,
-		[CLK_AHB_LCD0]		= &ahb_lcd0_clk.common.hw,
-		[CLK_AHB_LCD1]		= &ahb_lcd1_clk.common.hw,
-		[CLK_AHB_CSI0]		= &ahb_csi0_clk.common.hw,
-		[CLK_AHB_CSI1]		= &ahb_csi1_clk.common.hw,
-		[CLK_AHB_HDMI0]		= &ahb_hdmi0_clk.common.hw,
-		[CLK_AHB_DE_BE0]	= &ahb_de_be0_clk.common.hw,
-		[CLK_AHB_DE_BE1]	= &ahb_de_be1_clk.common.hw,
-		[CLK_AHB_DE_FE0]	= &ahb_de_fe0_clk.common.hw,
-		[CLK_AHB_DE_FE1]	= &ahb_de_fe1_clk.common.hw,
-		[CLK_AHB_MP]		= &ahb_mp_clk.common.hw,
-		[CLK_AHB_GPU]		= &ahb_gpu_clk.common.hw,
-		[CLK_APB0_CODEC]	= &apb0_codec_clk.common.hw,
-		[CLK_APB0_SPDIF]	= &apb0_spdif_clk.common.hw,
-		[CLK_APB0_AC97]		= &apb0_ac97_clk.common.hw,
-		[CLK_APB0_I2S0]		= &apb0_i2s0_clk.common.hw,
-		[CLK_APB0_PIO]		= &apb0_pio_clk.common.hw,
-		[CLK_APB0_IR0]		= &apb0_ir0_clk.common.hw,
-		[CLK_APB0_IR1]		= &apb0_ir1_clk.common.hw,
-		[CLK_APB0_KEYPAD]	= &apb0_keypad_clk.common.hw,
-		[CLK_APB1_I2C0]		= &apb1_i2c0_clk.common.hw,
-		[CLK_APB1_I2C1]		= &apb1_i2c1_clk.common.hw,
-		[CLK_APB1_I2C2]		= &apb1_i2c2_clk.common.hw,
-		[CLK_APB1_CAN]		= &apb1_can_clk.common.hw,
-		[CLK_APB1_SCR]		= &apb1_scr_clk.common.hw,
-		[CLK_APB1_PS20]		= &apb1_ps20_clk.common.hw,
-		[CLK_APB1_PS21]		= &apb1_ps21_clk.common.hw,
-		[CLK_APB1_UART0]	= &apb1_uart0_clk.common.hw,
-		[CLK_APB1_UART1]	= &apb1_uart1_clk.common.hw,
-		[CLK_APB1_UART2]	= &apb1_uart2_clk.common.hw,
-		[CLK_APB1_UART3]	= &apb1_uart3_clk.common.hw,
-		[CLK_APB1_UART4]	= &apb1_uart4_clk.common.hw,
-		[CLK_APB1_UART5]	= &apb1_uart5_clk.common.hw,
-		[CLK_APB1_UART6]	= &apb1_uart6_clk.common.hw,
-		[CLK_APB1_UART7]	= &apb1_uart7_clk.common.hw,
-		[CLK_NAND]		= &nand_clk.common.hw,
-		[CLK_MS]		= &ms_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC2]		= &mmc2_clk.common.hw,
-		[CLK_MMC3]		= &mmc3_clk.common.hw,
-		[CLK_TS]		= &ts_clk.common.hw,
-		[CLK_SS]		= &ss_clk.common.hw,
-		[CLK_SPI0]		= &spi0_clk.common.hw,
-		[CLK_SPI1]		= &spi1_clk.common.hw,
-		[CLK_SPI2]		= &spi2_clk.common.hw,
-		[CLK_PATA]		= &pata_clk.common.hw,
-		[CLK_IR0]		= &ir0_sun4i_clk.common.hw,
-		[CLK_IR1]		= &ir1_sun4i_clk.common.hw,
-		[CLK_I2S0]		= &i2s0_clk.common.hw,
-		[CLK_AC97]		= &ac97_clk.common.hw,
-		[CLK_SPDIF]		= &spdif_clk.common.hw,
-		[CLK_KEYPAD]		= &keypad_clk.common.hw,
-		[CLK_SATA]		= &sata_clk.common.hw,
-		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
-		[CLK_USB_OHCI1]		= &usb_ohci1_clk.common.hw,
-		[CLK_USB_PHY]		= &usb_phy_clk.common.hw,
-		/* CLK_GPS is unimplemented */
-		[CLK_SPI3]		= &spi3_clk.common.hw,
-		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
-		[CLK_DRAM_CSI0]		= &dram_csi0_clk.common.hw,
-		[CLK_DRAM_CSI1]		= &dram_csi1_clk.common.hw,
-		[CLK_DRAM_TS]		= &dram_ts_clk.common.hw,
-		[CLK_DRAM_TVD]		= &dram_tvd_clk.common.hw,
-		[CLK_DRAM_TVE0]		= &dram_tve0_clk.common.hw,
-		[CLK_DRAM_TVE1]		= &dram_tve1_clk.common.hw,
-		[CLK_DRAM_OUT]		= &dram_out_clk.common.hw,
-		[CLK_DRAM_DE_FE1]	= &dram_de_fe1_clk.common.hw,
-		[CLK_DRAM_DE_FE0]	= &dram_de_fe0_clk.common.hw,
-		[CLK_DRAM_DE_BE0]	= &dram_de_be0_clk.common.hw,
-		[CLK_DRAM_DE_BE1]	= &dram_de_be1_clk.common.hw,
-		[CLK_DRAM_MP]		= &dram_mp_clk.common.hw,
-		[CLK_DRAM_ACE]		= &dram_ace_clk.common.hw,
-		[CLK_DE_BE0]		= &de_be0_clk.common.hw,
-		[CLK_DE_BE1]		= &de_be1_clk.common.hw,
-		[CLK_DE_FE0]		= &de_fe0_clk.common.hw,
-		[CLK_DE_FE1]		= &de_fe1_clk.common.hw,
-		[CLK_DE_MP]		= &de_mp_clk.common.hw,
-		[CLK_TCON0_CH0]		= &tcon0_ch0_clk.common.hw,
-		[CLK_TCON1_CH0]		= &tcon1_ch0_clk.common.hw,
-		[CLK_CSI_SCLK]		= &csi_sclk_clk.common.hw,
-		[CLK_TVD]		= &tvd_sun4i_clk.common.hw,
-		[CLK_TCON0_CH1_SCLK2]	= &tcon0_ch1_sclk2_clk.common.hw,
-		[CLK_TCON0_CH1]		= &tcon0_ch1_clk.common.hw,
-		[CLK_TCON1_CH1_SCLK2]	= &tcon1_ch1_sclk2_clk.common.hw,
-		[CLK_TCON1_CH1]		= &tcon1_ch1_clk.common.hw,
-		[CLK_CSI0]		= &csi0_clk.common.hw,
-		[CLK_CSI1]		= &csi1_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_CODEC]		= &codec_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-		[CLK_ACE]		= &ace_clk.common.hw,
-		[CLK_HDMI]		= &hdmi_clk.common.hw,
-		[CLK_GPU]		= &gpu_sun7i_clk.common.hw,
-		[CLK_MBUS]		= &mbus_sun4i_clk.common.hw,
-	},
-	.num	= CLK_NUMBER_SUN4I,
-};
-static struct clk_hw_onecell_data sun7i_a20_hw_clks = {
-	.hws	= {
-		[CLK_HOSC]		= &hosc_clk.common.hw,
-		[CLK_PLL_CORE]		= &pll_core_clk.common.hw,
-		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
-		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
-		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
-		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
-		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
-		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
-		[CLK_PLL_VIDEO0_2X]	= &pll_video0_2x_clk.hw,
-		[CLK_PLL_VE]		= &pll_ve_sun7i_clk.common.hw,
-		[CLK_PLL_DDR_BASE]	= &pll_ddr_base_clk.common.hw,
-		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
-		[CLK_PLL_DDR_OTHER]	= &pll_ddr_other_clk.common.hw,
-		[CLK_PLL_PERIPH_BASE]	= &pll_periph_base_clk.common.hw,
-		[CLK_PLL_PERIPH]	= &pll_periph_clk.hw,
-		[CLK_PLL_PERIPH_SATA]	= &pll_periph_sata_clk.common.hw,
-		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
-		[CLK_PLL_VIDEO1_2X]	= &pll_video1_2x_clk.hw,
-		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
-		[CLK_CPU]		= &cpu_clk.common.hw,
-		[CLK_AXI]		= &axi_clk.common.hw,
-		[CLK_AHB]		= &ahb_sun7i_clk.common.hw,
-		[CLK_APB0]		= &apb0_clk.common.hw,
-		[CLK_APB1]		= &apb1_clk.common.hw,
-		[CLK_AHB_OTG]		= &ahb_otg_clk.common.hw,
-		[CLK_AHB_EHCI0]		= &ahb_ehci0_clk.common.hw,
-		[CLK_AHB_OHCI0]		= &ahb_ohci0_clk.common.hw,
-		[CLK_AHB_EHCI1]		= &ahb_ehci1_clk.common.hw,
-		[CLK_AHB_OHCI1]		= &ahb_ohci1_clk.common.hw,
-		[CLK_AHB_SS]		= &ahb_ss_clk.common.hw,
-		[CLK_AHB_DMA]		= &ahb_dma_clk.common.hw,
-		[CLK_AHB_BIST]		= &ahb_bist_clk.common.hw,
-		[CLK_AHB_MMC0]		= &ahb_mmc0_clk.common.hw,
-		[CLK_AHB_MMC1]		= &ahb_mmc1_clk.common.hw,
-		[CLK_AHB_MMC2]		= &ahb_mmc2_clk.common.hw,
-		[CLK_AHB_MMC3]		= &ahb_mmc3_clk.common.hw,
-		[CLK_AHB_MS]		= &ahb_ms_clk.common.hw,
-		[CLK_AHB_NAND]		= &ahb_nand_clk.common.hw,
-		[CLK_AHB_SDRAM]		= &ahb_sdram_clk.common.hw,
-		[CLK_AHB_ACE]		= &ahb_ace_clk.common.hw,
-		[CLK_AHB_EMAC]		= &ahb_emac_clk.common.hw,
-		[CLK_AHB_TS]		= &ahb_ts_clk.common.hw,
-		[CLK_AHB_SPI0]		= &ahb_spi0_clk.common.hw,
-		[CLK_AHB_SPI1]		= &ahb_spi1_clk.common.hw,
-		[CLK_AHB_SPI2]		= &ahb_spi2_clk.common.hw,
-		[CLK_AHB_SPI3]		= &ahb_spi3_clk.common.hw,
-		[CLK_AHB_PATA]		= &ahb_pata_clk.common.hw,
-		[CLK_AHB_SATA]		= &ahb_sata_clk.common.hw,
-		[CLK_AHB_HSTIMER]	= &ahb_hstimer_clk.common.hw,
-		[CLK_AHB_VE]		= &ahb_ve_clk.common.hw,
-		[CLK_AHB_TVD]		= &ahb_tvd_clk.common.hw,
-		[CLK_AHB_TVE0]		= &ahb_tve0_clk.common.hw,
-		[CLK_AHB_TVE1]		= &ahb_tve1_clk.common.hw,
-		[CLK_AHB_LCD0]		= &ahb_lcd0_clk.common.hw,
-		[CLK_AHB_LCD1]		= &ahb_lcd1_clk.common.hw,
-		[CLK_AHB_CSI0]		= &ahb_csi0_clk.common.hw,
-		[CLK_AHB_CSI1]		= &ahb_csi1_clk.common.hw,
-		[CLK_AHB_HDMI1]		= &ahb_hdmi1_clk.common.hw,
-		[CLK_AHB_HDMI0]		= &ahb_hdmi0_clk.common.hw,
-		[CLK_AHB_DE_BE0]	= &ahb_de_be0_clk.common.hw,
-		[CLK_AHB_DE_BE1]	= &ahb_de_be1_clk.common.hw,
-		[CLK_AHB_DE_FE0]	= &ahb_de_fe0_clk.common.hw,
-		[CLK_AHB_DE_FE1]	= &ahb_de_fe1_clk.common.hw,
-		[CLK_AHB_GMAC]		= &ahb_gmac_clk.common.hw,
-		[CLK_AHB_MP]		= &ahb_mp_clk.common.hw,
-		[CLK_AHB_GPU]		= &ahb_gpu_clk.common.hw,
-		[CLK_APB0_CODEC]	= &apb0_codec_clk.common.hw,
-		[CLK_APB0_SPDIF]	= &apb0_spdif_clk.common.hw,
-		[CLK_APB0_AC97]		= &apb0_ac97_clk.common.hw,
-		[CLK_APB0_I2S0]		= &apb0_i2s0_clk.common.hw,
-		[CLK_APB0_I2S1]		= &apb0_i2s1_clk.common.hw,
-		[CLK_APB0_PIO]		= &apb0_pio_clk.common.hw,
-		[CLK_APB0_IR0]		= &apb0_ir0_clk.common.hw,
-		[CLK_APB0_IR1]		= &apb0_ir1_clk.common.hw,
-		[CLK_APB0_I2S2]		= &apb0_i2s2_clk.common.hw,
-		[CLK_APB0_KEYPAD]	= &apb0_keypad_clk.common.hw,
-		[CLK_APB1_I2C0]		= &apb1_i2c0_clk.common.hw,
-		[CLK_APB1_I2C1]		= &apb1_i2c1_clk.common.hw,
-		[CLK_APB1_I2C2]		= &apb1_i2c2_clk.common.hw,
-		[CLK_APB1_I2C3]		= &apb1_i2c3_clk.common.hw,
-		[CLK_APB1_CAN]		= &apb1_can_clk.common.hw,
-		[CLK_APB1_SCR]		= &apb1_scr_clk.common.hw,
-		[CLK_APB1_PS20]		= &apb1_ps20_clk.common.hw,
-		[CLK_APB1_PS21]		= &apb1_ps21_clk.common.hw,
-		[CLK_APB1_I2C4]		= &apb1_i2c4_clk.common.hw,
-		[CLK_APB1_UART0]	= &apb1_uart0_clk.common.hw,
-		[CLK_APB1_UART1]	= &apb1_uart1_clk.common.hw,
-		[CLK_APB1_UART2]	= &apb1_uart2_clk.common.hw,
-		[CLK_APB1_UART3]	= &apb1_uart3_clk.common.hw,
-		[CLK_APB1_UART4]	= &apb1_uart4_clk.common.hw,
-		[CLK_APB1_UART5]	= &apb1_uart5_clk.common.hw,
-		[CLK_APB1_UART6]	= &apb1_uart6_clk.common.hw,
-		[CLK_APB1_UART7]	= &apb1_uart7_clk.common.hw,
-		[CLK_NAND]		= &nand_clk.common.hw,
-		[CLK_MS]		= &ms_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
-		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
-		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
-		[CLK_MMC2]		= &mmc2_clk.common.hw,
-		[CLK_MMC2_OUTPUT]	= &mmc2_output_clk.common.hw,
-		[CLK_MMC2_SAMPLE]	= &mmc2_sample_clk.common.hw,
-		[CLK_MMC3]		= &mmc3_clk.common.hw,
-		[CLK_MMC3_OUTPUT]	= &mmc3_output_clk.common.hw,
-		[CLK_MMC3_SAMPLE]	= &mmc3_sample_clk.common.hw,
-		[CLK_TS]		= &ts_clk.common.hw,
-		[CLK_SS]		= &ss_clk.common.hw,
-		[CLK_SPI0]		= &spi0_clk.common.hw,
-		[CLK_SPI1]		= &spi1_clk.common.hw,
-		[CLK_SPI2]		= &spi2_clk.common.hw,
-		[CLK_PATA]		= &pata_clk.common.hw,
-		[CLK_IR0]		= &ir0_sun7i_clk.common.hw,
-		[CLK_IR1]		= &ir1_sun7i_clk.common.hw,
-		[CLK_I2S0]		= &i2s0_clk.common.hw,
-		[CLK_AC97]		= &ac97_clk.common.hw,
-		[CLK_SPDIF]		= &spdif_clk.common.hw,
-		[CLK_KEYPAD]		= &keypad_clk.common.hw,
-		[CLK_SATA]		= &sata_clk.common.hw,
-		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
-		[CLK_USB_OHCI1]		= &usb_ohci1_clk.common.hw,
-		[CLK_USB_PHY]		= &usb_phy_clk.common.hw,
-		/* CLK_GPS is unimplemented */
-		[CLK_SPI3]		= &spi3_clk.common.hw,
-		[CLK_I2S1]		= &i2s1_clk.common.hw,
-		[CLK_I2S2]		= &i2s2_clk.common.hw,
-		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
-		[CLK_DRAM_CSI0]		= &dram_csi0_clk.common.hw,
-		[CLK_DRAM_CSI1]		= &dram_csi1_clk.common.hw,
-		[CLK_DRAM_TS]		= &dram_ts_clk.common.hw,
-		[CLK_DRAM_TVD]		= &dram_tvd_clk.common.hw,
-		[CLK_DRAM_TVE0]		= &dram_tve0_clk.common.hw,
-		[CLK_DRAM_TVE1]		= &dram_tve1_clk.common.hw,
-		[CLK_DRAM_OUT]		= &dram_out_clk.common.hw,
-		[CLK_DRAM_DE_FE1]	= &dram_de_fe1_clk.common.hw,
-		[CLK_DRAM_DE_FE0]	= &dram_de_fe0_clk.common.hw,
-		[CLK_DRAM_DE_BE0]	= &dram_de_be0_clk.common.hw,
-		[CLK_DRAM_DE_BE1]	= &dram_de_be1_clk.common.hw,
-		[CLK_DRAM_MP]		= &dram_mp_clk.common.hw,
-		[CLK_DRAM_ACE]		= &dram_ace_clk.common.hw,
-		[CLK_DE_BE0]		= &de_be0_clk.common.hw,
-		[CLK_DE_BE1]		= &de_be1_clk.common.hw,
-		[CLK_DE_FE0]		= &de_fe0_clk.common.hw,
-		[CLK_DE_FE1]		= &de_fe1_clk.common.hw,
-		[CLK_DE_MP]		= &de_mp_clk.common.hw,
-		[CLK_TCON0_CH0]		= &tcon0_ch0_clk.common.hw,
-		[CLK_TCON1_CH0]		= &tcon1_ch0_clk.common.hw,
-		[CLK_CSI_SCLK]		= &csi_sclk_clk.common.hw,
-		[CLK_TVD_SCLK2]		= &tvd_sclk2_sun7i_clk.common.hw,
-		[CLK_TVD]		= &tvd_sclk1_sun7i_clk.common.hw,
-		[CLK_TCON0_CH1_SCLK2]	= &tcon0_ch1_sclk2_clk.common.hw,
-		[CLK_TCON0_CH1]		= &tcon0_ch1_clk.common.hw,
-		[CLK_TCON1_CH1_SCLK2]	= &tcon1_ch1_sclk2_clk.common.hw,
-		[CLK_TCON1_CH1]		= &tcon1_ch1_clk.common.hw,
-		[CLK_CSI0]		= &csi0_clk.common.hw,
-		[CLK_CSI1]		= &csi1_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_CODEC]		= &codec_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-		[CLK_ACE]		= &ace_clk.common.hw,
-		[CLK_HDMI]		= &hdmi_clk.common.hw,
-		[CLK_GPU]		= &gpu_sun7i_clk.common.hw,
-		[CLK_MBUS]		= &mbus_sun7i_clk.common.hw,
-		[CLK_HDMI1_SLOW]	= &hdmi1_slow_clk.common.hw,
-		[CLK_HDMI1]		= &hdmi1_clk.common.hw,
-		[CLK_OUT_A]		= &out_a_clk.common.hw,
-		[CLK_OUT_B]		= &out_b_clk.common.hw,
-	},
-	.num	= CLK_NUMBER_SUN7I,
-};
-
-static struct ccu_reset_map sunxi_a10_a20_ccu_resets[] = {
-	[RST_USB_PHY0]		= { 0x0cc, BIT(0) },
-	[RST_USB_PHY1]		= { 0x0cc, BIT(1) },
-	[RST_USB_PHY2]		= { 0x0cc, BIT(2) },
-	[RST_GPS]		= { 0x0d0, BIT(0) },
-	[RST_DE_BE0]		= { 0x104, BIT(30) },
-	[RST_DE_BE1]		= { 0x108, BIT(30) },
-	[RST_DE_FE0]		= { 0x10c, BIT(30) },
-	[RST_DE_FE1]		= { 0x110, BIT(30) },
-	[RST_DE_MP]		= { 0x114, BIT(30) },
-	[RST_TVE0]		= { 0x118, BIT(29) },
-	[RST_TCON0]		= { 0x118, BIT(30) },
-	[RST_TVE1]		= { 0x11c, BIT(29) },
-	[RST_TCON1]		= { 0x11c, BIT(30) },
-	[RST_CSI0]		= { 0x134, BIT(30) },
-	[RST_CSI1]		= { 0x138, BIT(30) },
-	[RST_VE]		= { 0x13c, BIT(0) },
-	[RST_ACE]		= { 0x148, BIT(16) },
-	[RST_LVDS]		= { 0x14c, BIT(0) },
-	[RST_GPU]		= { 0x154, BIT(30) },
-	[RST_HDMI_H]		= { 0x170, BIT(0) },
-	[RST_HDMI_SYS]		= { 0x170, BIT(1) },
-	[RST_HDMI_AUDIO_DMA]	= { 0x170, BIT(2) },
-};
-
-static const struct sunxi_ccu_desc sun4i_a10_ccu_desc = {
-	.ccu_clks	= sun4i_sun7i_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun4i_sun7i_ccu_clks),
-
-	.hw_clks	= &sun4i_a10_hw_clks,
-
-	.resets		= sunxi_a10_a20_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sunxi_a10_a20_ccu_resets),
-};
-
-static const struct sunxi_ccu_desc sun7i_a20_ccu_desc = {
-	.ccu_clks	= sun4i_sun7i_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun4i_sun7i_ccu_clks),
-
-	.hw_clks	= &sun7i_a20_hw_clks,
-
-	.resets		= sunxi_a10_a20_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sunxi_a10_a20_ccu_resets),
-};
-
-static void __init sun4i_ccu_init(struct device_node *node,
-				  const struct sunxi_ccu_desc *desc)
-{
-	void __iomem *reg;
-	u32 val;
-
-	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
-	if (IS_ERR(reg)) {
-		pr_err("%s: Could not map the clock registers\n",
-		       of_node_full_name(node));
-		return;
-	}
-
-	val = readl(reg + SUN4I_PLL_AUDIO_REG);
-
-	/*
-	 * Force VCO and PLL bias current to lowest setting. Higher
-	 * settings interfere with sigma-delta modulation and result
-	 * in audible noise and distortions when using SPDIF or I2S.
-	 */
-	val &= ~GENMASK(25, 16);
-
-	/* Force the PLL-Audio-1x divider to 1 */
-	val &= ~GENMASK(29, 26);
-	writel(val | (1 << 26), reg + SUN4I_PLL_AUDIO_REG);
-
-	/*
-	 * Use the peripheral PLL6 as the AHB parent, instead of CPU /
-	 * AXI which have rate changes due to cpufreq.
-	 *
-	 * This is especially a big deal for the HS timer whose parent
-	 * clock is AHB.
-	 *
-	 * NB! These bits are undocumented in A10 manual.
-	 */
-	val = readl(reg + SUN4I_AHB_REG);
-	val &= ~GENMASK(7, 6);
-	writel(val | (2 << 6), reg + SUN4I_AHB_REG);
-
-	of_sunxi_ccu_probe(node, reg, desc);
-}
-
-static void __init sun4i_a10_ccu_setup(struct device_node *node)
-{
-	sun4i_ccu_init(node, &sun4i_a10_ccu_desc);
-}
-CLK_OF_DECLARE(sun4i_a10_ccu, "allwinner,sun4i-a10-ccu",
-	       sun4i_a10_ccu_setup);
-
-static void __init sun7i_a20_ccu_setup(struct device_node *node)
-{
-	sun4i_ccu_init(node, &sun7i_a20_ccu_desc);
-}
-CLK_OF_DECLARE(sun7i_a20_ccu, "allwinner,sun7i-a20-ccu",
-	       sun7i_a20_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/ccu-sun4i-a10.h b/drivers/clk/sunxi-ng/ccu-sun4i-a10.h
deleted file mode 100644
index 271b9623623a..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun4i-a10.h
+++ /dev/null
@@ -1,52 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0-or-later */
-/*
- * Copyright 2017 Priit Laes
- *
- * Priit Laes <plaes@plaes.org>
- */
-
-#ifndef _CCU_SUN4I_A10_H_
-#define _CCU_SUN4I_A10_H_
-
-#include <dt-bindings/clock/sun4i-a10-ccu.h>
-#include <dt-bindings/clock/sun7i-a20-ccu.h>
-#include <dt-bindings/reset/sun4i-a10-ccu.h>
-
-/* The HOSC is exported */
-#define CLK_PLL_CORE		2
-#define CLK_PLL_AUDIO_BASE	3
-#define CLK_PLL_AUDIO		4
-#define CLK_PLL_AUDIO_2X	5
-#define CLK_PLL_AUDIO_4X	6
-#define CLK_PLL_AUDIO_8X	7
-#define CLK_PLL_VIDEO0		8
-/* The PLL_VIDEO0_2X clock is exported */
-#define CLK_PLL_VE		10
-#define CLK_PLL_DDR_BASE	11
-#define CLK_PLL_DDR		12
-#define CLK_PLL_DDR_OTHER	13
-#define CLK_PLL_PERIPH_BASE	14
-#define CLK_PLL_PERIPH		15
-#define CLK_PLL_PERIPH_SATA	16
-#define CLK_PLL_VIDEO1		17
-/* The PLL_VIDEO1_2X clock is exported */
-#define CLK_PLL_GPU		19
-
-/* The CPU clock is exported */
-#define CLK_AXI			21
-#define CLK_AXI_DRAM		22
-#define CLK_AHB			23
-#define CLK_APB0		24
-#define CLK_APB1		25
-
-/* AHB gates are exported (23..68) */
-/* APB0 gates are exported (69..78) */
-/* APB1 gates are exported (79..95) */
-/* IP module clocks are exported (96..128) */
-/* DRAM gates are exported (129..142)*/
-/* Media (display engine clocks & etc) are exported (143..169) */
-
-#define CLK_NUMBER_SUN4I	(CLK_MBUS + 1)
-#define CLK_NUMBER_SUN7I	(CLK_OUT_B + 1)
-
-#endif /* _CCU_SUN4I_A10_H_ */
diff --git a/drivers/clk/sunxi-ng/ccu-sun50i-a100-r.c b/drivers/clk/sunxi-ng/ccu-sun50i-a100-r.c
deleted file mode 100644
index 804729e0a208..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun50i-a100-r.c
+++ /dev/null
@@ -1,215 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0
-/*
- * Copyright (c) 2020 Yangtao Li <frank@allwinnertech.com>
- */
-
-#include <linux/clk-provider.h>
-#include <linux/module.h>
-#include <linux/of_address.h>
-#include <linux/platform_device.h>
-
-#include "ccu_common.h"
-#include "ccu_reset.h"
-
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_mp.h"
-#include "ccu_nm.h"
-
-#include "ccu-sun50i-a100-r.h"
-
-static const char * const cpus_r_apb2_parents[] = { "dcxo24M", "osc32k",
-						     "iosc", "pll-periph0" };
-static const struct ccu_mux_var_prediv cpus_r_apb2_predivs[] = {
-	{ .index = 3, .shift = 0, .width = 5 },
-};
-
-static struct ccu_div r_cpus_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-
-	.mux		= {
-		.shift	= 24,
-		.width	= 2,
-
-		.var_predivs	= cpus_r_apb2_predivs,
-		.n_var_predivs	= ARRAY_SIZE(cpus_r_apb2_predivs),
-	},
-
-	.common		= {
-		.reg		= 0x000,
-		.features	= CCU_FEATURE_VARIABLE_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("cpus",
-						      cpus_r_apb2_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static CLK_FIXED_FACTOR_HW(r_ahb_clk, "r-ahb", &r_cpus_clk.common.hw, 1, 1, 0);
-
-static struct ccu_div r_apb1_clk = {
-	.div		= _SUNXI_CCU_DIV(0, 2),
-
-	.common		= {
-		.reg		= 0x00c,
-		.hw.init	= CLK_HW_INIT("r-apb1",
-					      "r-ahb",
-					      &ccu_div_ops,
-					      0),
-	},
-};
-
-static struct ccu_div r_apb2_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-
-	.mux		= {
-		.shift	= 24,
-		.width	= 2,
-
-		.var_predivs	= cpus_r_apb2_predivs,
-		.n_var_predivs	= ARRAY_SIZE(cpus_r_apb2_predivs),
-	},
-
-	.common		= {
-		.reg		= 0x010,
-		.features	= CCU_FEATURE_VARIABLE_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("r-apb2",
-						      cpus_r_apb2_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static const struct clk_parent_data clk_parent_r_apb1[] = {
-	{ .hw = &r_apb1_clk.common.hw },
-};
-
-static const struct clk_parent_data clk_parent_r_apb2[] = {
-	{ .hw = &r_apb2_clk.common.hw },
-};
-
-static SUNXI_CCU_GATE_DATA(r_apb1_timer_clk, "r-apb1-timer", clk_parent_r_apb1,
-			   0x11c, BIT(0), 0);
-
-static SUNXI_CCU_GATE_DATA(r_apb1_twd_clk, "r-apb1-twd", clk_parent_r_apb1,
-			   0x12c, BIT(0), 0);
-
-static const char * const r_apb1_pwm_clk_parents[] = { "dcxo24M", "osc32k",
-						       "iosc" };
-static SUNXI_CCU_MUX(r_apb1_pwm_clk, "r-apb1-pwm", r_apb1_pwm_clk_parents,
-		     0x130, 24, 2, 0);
-
-static SUNXI_CCU_GATE_DATA(r_apb1_bus_pwm_clk, "r-apb1-bus-pwm",
-			   clk_parent_r_apb1, 0x13c, BIT(0), 0);
-
-static SUNXI_CCU_GATE_DATA(r_apb1_ppu_clk, "r-apb1-ppu", clk_parent_r_apb1,
-			   0x17c, BIT(0), 0);
-
-static SUNXI_CCU_GATE_DATA(r_apb2_uart_clk, "r-apb2-uart", clk_parent_r_apb2,
-			   0x18c, BIT(0), 0);
-
-static SUNXI_CCU_GATE_DATA(r_apb2_i2c0_clk, "r-apb2-i2c0", clk_parent_r_apb2,
-			   0x19c, BIT(0), 0);
-
-static SUNXI_CCU_GATE_DATA(r_apb2_i2c1_clk, "r-apb2-i2c1", clk_parent_r_apb2,
-			   0x19c, BIT(1), 0);
-
-static const char * const r_apb1_ir_rx_parents[] = { "osc32k", "dcxo24M" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(r_apb1_ir_rx_clk, "r-apb1-ir-rx",
-				  r_apb1_ir_rx_parents, 0x1c0,
-				  0, 5,		/* M */
-				  8, 2,		/* P */
-				  24, 1,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_GATE_DATA(r_apb1_bus_ir_rx_clk, "r-apb1-bus-ir-rx",
-			   clk_parent_r_apb1, 0x1cc, BIT(0), 0);
-
-static SUNXI_CCU_GATE(r_ahb_bus_rtc_clk, "r-ahb-rtc", "r-ahb",
-		      0x20c, BIT(0), 0);
-
-static struct ccu_common *sun50i_a100_r_ccu_clks[] = {
-	&r_cpus_clk.common,
-	&r_apb1_clk.common,
-	&r_apb2_clk.common,
-	&r_apb1_timer_clk.common,
-	&r_apb1_twd_clk.common,
-	&r_apb1_pwm_clk.common,
-	&r_apb1_bus_pwm_clk.common,
-	&r_apb1_ppu_clk.common,
-	&r_apb2_uart_clk.common,
-	&r_apb2_i2c0_clk.common,
-	&r_apb2_i2c1_clk.common,
-	&r_apb1_ir_rx_clk.common,
-	&r_apb1_bus_ir_rx_clk.common,
-	&r_ahb_bus_rtc_clk.common,
-};
-
-static struct clk_hw_onecell_data sun50i_a100_r_hw_clks = {
-	.hws	= {
-		[CLK_R_CPUS]		= &r_cpus_clk.common.hw,
-		[CLK_R_AHB]		= &r_ahb_clk.hw,
-		[CLK_R_APB1]		= &r_apb1_clk.common.hw,
-		[CLK_R_APB2]		= &r_apb2_clk.common.hw,
-		[CLK_R_APB1_TIMER]	= &r_apb1_timer_clk.common.hw,
-		[CLK_R_APB1_TWD]	= &r_apb1_twd_clk.common.hw,
-		[CLK_R_APB1_PWM]	= &r_apb1_pwm_clk.common.hw,
-		[CLK_R_APB1_BUS_PWM]	= &r_apb1_bus_pwm_clk.common.hw,
-		[CLK_R_APB1_PPU]	= &r_apb1_ppu_clk.common.hw,
-		[CLK_R_APB2_UART]	= &r_apb2_uart_clk.common.hw,
-		[CLK_R_APB2_I2C0]	= &r_apb2_i2c0_clk.common.hw,
-		[CLK_R_APB2_I2C1]	= &r_apb2_i2c1_clk.common.hw,
-		[CLK_R_APB1_IR]		= &r_apb1_ir_rx_clk.common.hw,
-		[CLK_R_APB1_BUS_IR]	= &r_apb1_bus_ir_rx_clk.common.hw,
-		[CLK_R_AHB_BUS_RTC]	= &r_ahb_bus_rtc_clk.common.hw,
-	},
-	.num	= CLK_NUMBER,
-};
-
-static struct ccu_reset_map sun50i_a100_r_ccu_resets[] = {
-	[RST_R_APB1_TIMER]	=  { 0x11c, BIT(16) },
-	[RST_R_APB1_BUS_PWM]	=  { 0x13c, BIT(16) },
-	[RST_R_APB1_PPU]	=  { 0x17c, BIT(16) },
-	[RST_R_APB2_UART]	=  { 0x18c, BIT(16) },
-	[RST_R_APB2_I2C0]	=  { 0x19c, BIT(16) },
-	[RST_R_APB2_I2C1]	=  { 0x19c, BIT(17) },
-	[RST_R_APB1_BUS_IR]	=  { 0x1cc, BIT(16) },
-	[RST_R_AHB_BUS_RTC]	=  { 0x20c, BIT(16) },
-};
-
-static const struct sunxi_ccu_desc sun50i_a100_r_ccu_desc = {
-	.ccu_clks	= sun50i_a100_r_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun50i_a100_r_ccu_clks),
-
-	.hw_clks	= &sun50i_a100_r_hw_clks,
-
-	.resets		= sun50i_a100_r_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun50i_a100_r_ccu_resets),
-};
-
-static int sun50i_a100_r_ccu_probe(struct platform_device *pdev)
-{
-	void __iomem *reg;
-
-	reg = devm_platform_ioremap_resource(pdev, 0);
-	if (IS_ERR(reg))
-		return PTR_ERR(reg);
-
-	return devm_sunxi_ccu_probe(&pdev->dev, reg, &sun50i_a100_r_ccu_desc);
-}
-
-static const struct of_device_id sun50i_a100_r_ccu_ids[] = {
-	{ .compatible = "allwinner,sun50i-a100-r-ccu" },
-	{ }
-};
-
-static struct platform_driver sun50i_a100_r_ccu_driver = {
-	.probe	= sun50i_a100_r_ccu_probe,
-	.driver	= {
-		.name	= "sun50i-a100-r-ccu",
-		.suppress_bind_attrs = true,
-		.of_match_table	= sun50i_a100_r_ccu_ids,
-	},
-};
-module_platform_driver(sun50i_a100_r_ccu_driver);
diff --git a/drivers/clk/sunxi-ng/ccu-sun50i-a100-r.h b/drivers/clk/sunxi-ng/ccu-sun50i-a100-r.h
deleted file mode 100644
index 3a8f187a51b7..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun50i-a100-r.h
+++ /dev/null
@@ -1,21 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0 */
-/*
- * Copyright (c) 2020 Yangtao Li <frank@allwinnertech.com>
- */
-
-#ifndef _CCU_SUN50I_A100_R_H
-#define _CCU_SUN50I_A100_R_H
-
-#include <dt-bindings/clock/sun50i-a100-r-ccu.h>
-#include <dt-bindings/reset/sun50i-a100-r-ccu.h>
-
-#define CLK_R_CPUS		0
-#define CLK_R_AHB		1
-
-/* exported except APB1 for R_PIO */
-
-#define CLK_R_APB2		3
-
-#define CLK_NUMBER	(CLK_R_AHB_BUS_RTC + 1)
-
-#endif /* _CCU_SUN50I_A100_R_H */
diff --git a/drivers/clk/sunxi-ng/ccu-sun50i-a100.c b/drivers/clk/sunxi-ng/ccu-sun50i-a100.c
deleted file mode 100644
index 1d475d5a3d91..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun50i-a100.c
+++ /dev/null
@@ -1,1277 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0
-/*
- * Copyright (c) 2020 Yangtao Li <frank@allwinnertech.com>
- */
-
-#include <linux/clk-provider.h>
-#include <linux/io.h>
-#include <linux/module.h>
-#include <linux/of_address.h>
-#include <linux/platform_device.h>
-
-#include "ccu_common.h"
-#include "ccu_reset.h"
-
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_mp.h"
-#include "ccu_mult.h"
-#include "ccu_nk.h"
-#include "ccu_nkm.h"
-#include "ccu_nkmp.h"
-#include "ccu_nm.h"
-
-#include "ccu-sun50i-a100.h"
-
-#define SUN50I_A100_PLL_SDM_ENABLE		BIT(24)
-#define SUN50I_A100_PLL_OUTPUT_ENABLE		BIT(27)
-#define SUN50I_A100_PLL_LOCK			BIT(28)
-#define SUN50I_A100_PLL_LOCK_ENABLE		BIT(29)
-#define SUN50I_A100_PLL_ENABLE			BIT(31)
-
-#define SUN50I_A100_PLL_PERIPH1_PATTERN0	0xd1303333
-
-/*
- * The CPU PLL is actually NP clock, with P being /1, /2 or /4. However
- * P should only be used for output frequencies lower than 288 MHz.
- *
- * For now we can just model it as a multiplier clock, and force P to /1.
- *
- * The M factor is present in the register's description, but not in the
- * frequency formula, and it's documented as "M is only used for backdoor
- * testing", so it's not modelled and then force to 0.
- */
-#define SUN50I_A100_PLL_CPUX_REG		0x000
-static struct ccu_mult pll_cpux_clk = {
-	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
-	.lock		= SUN50I_A100_PLL_LOCK,
-	.mult		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.common		= {
-		.reg		= 0x000,
-		.hw.init	= CLK_HW_INIT("pll-cpux", "dcxo24M",
-					      &ccu_mult_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-/* Some PLLs are input * N / div1 / P. Model them as NKMP with no K */
-#define SUN50I_A100_PLL_DDR0_REG		0x010
-static struct ccu_nkmp pll_ddr0_clk = {
-	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
-	.lock		= SUN50I_A100_PLL_LOCK,
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
-	.common		= {
-		.reg		= 0x010,
-		.hw.init	= CLK_HW_INIT("pll-ddr0", "dcxo24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE |
-					      CLK_IS_CRITICAL),
-	},
-};
-
-#define SUN50I_A100_PLL_PERIPH0_REG	0x020
-static struct ccu_nkmp pll_periph0_clk = {
-	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
-	.lock		= SUN50I_A100_PLL_LOCK,
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
-	.fixed_post_div	= 2,
-	.common		= {
-		.reg		= 0x020,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-periph0", "dcxo24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_A100_PLL_PERIPH1_REG	0x028
-static struct ccu_nkmp pll_periph1_clk = {
-	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
-	.lock		= SUN50I_A100_PLL_LOCK,
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
-	.fixed_post_div	= 2,
-	.common		= {
-		.reg		= 0x028,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-periph1", "dcxo24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-#define SUN50I_A100_PLL_PERIPH1_PATTERN0_REG	0x128
-
-#define SUN50I_A100_PLL_GPU_REG		0x030
-static struct ccu_nkmp pll_gpu_clk = {
-	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
-	.lock		= SUN50I_A100_PLL_LOCK,
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
-	.common		= {
-		.reg		= 0x030,
-		.hw.init	= CLK_HW_INIT("pll-gpu", "dcxo24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-/*
- * For Video PLLs, the output divider is described as "used for testing"
- * in the user manual. So it's not modelled and forced to 0.
- */
-#define SUN50I_A100_PLL_VIDEO0_REG	0x040
-static struct ccu_nm pll_video0_clk = {
-	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
-	.lock		= SUN50I_A100_PLL_LOCK,
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.fixed_post_div	= 4,
-	.common		= {
-		.reg		= 0x040,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-video0", "dcxo24M",
-					      &ccu_nm_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_A100_PLL_VIDEO1_REG	0x048
-static struct ccu_nm pll_video1_clk = {
-	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
-	.lock		= SUN50I_A100_PLL_LOCK,
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.fixed_post_div	= 4,
-	.common		= {
-		.reg		= 0x048,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-video1", "dcxo24M",
-					      &ccu_nm_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_A100_PLL_VIDEO2_REG	0x050
-static struct ccu_nm pll_video2_clk = {
-	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
-	.lock		= SUN50I_A100_PLL_LOCK,
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.fixed_post_div	= 4,
-	.common		= {
-		.reg		= 0x050,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-video2", "dcxo24M",
-					      &ccu_nm_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_A100_PLL_VE_REG		0x058
-static struct ccu_nkmp pll_ve_clk = {
-	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
-	.lock		= SUN50I_A100_PLL_LOCK,
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
-	.common		= {
-		.reg		= 0x058,
-		.hw.init	= CLK_HW_INIT("pll-ve", "dcxo24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-/*
- * The COM PLL has m0 dividers in addition to the usual N, M
- * factors. Since we only need 1 frequencies from this PLL: 45.1584 MHz,
- * ignore it for now.
- */
-#define SUN50I_A100_PLL_COM_REG		0x060
-static struct ccu_sdm_setting pll_com_sdm_table[] = {
-	{ .rate = 451584000, .pattern = 0xc0014396, .m = 2, .n = 37 },
-};
-
-static struct ccu_nm pll_com_clk = {
-	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
-	.lock		= SUN50I_A100_PLL_LOCK,
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(0, 1),
-	.sdm		= _SUNXI_CCU_SDM(pll_com_sdm_table, BIT(24),
-					 0x160, BIT(31)),
-	.common		= {
-		.reg		= 0x060,
-		.features	= CCU_FEATURE_SIGMA_DELTA_MOD,
-		.hw.init	= CLK_HW_INIT("pll-com", "dcxo24M",
-					      &ccu_nm_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_A100_PLL_VIDEO3_REG	0x068
-static struct ccu_nm pll_video3_clk = {
-	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
-	.lock		= SUN50I_A100_PLL_LOCK,
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.fixed_post_div	= 4,
-	.common		= {
-		.reg		= 0x068,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-video3", "dcxo24M",
-					      &ccu_nm_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-/*
- * The Audio PLL has m0, m1 dividers in addition to the usual N, M
- * factors. Since we only need 4 frequencies from this PLL: 22.5792 MHz,
- * 24.576 MHz, 90.3168MHz and 98.304MHz ignore them for now.
- * Enforce the default for them, which is m0 = 1, m1 = 0.
- */
-#define SUN50I_A100_PLL_AUDIO_REG		0x078
-static struct ccu_sdm_setting pll_audio_sdm_table[] = {
-	{ .rate = 45158400, .pattern = 0xc001bcd3, .m = 18, .n = 33 },
-	{ .rate = 49152000, .pattern = 0xc001eb85, .m = 20, .n = 40 },
-	{ .rate = 180633600, .pattern = 0xc001288d, .m = 3, .n = 22 },
-	{ .rate = 196608000, .pattern = 0xc001eb85, .m = 5, .n = 40 },
-};
-
-static struct ccu_nm pll_audio_clk = {
-	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
-	.lock		= SUN50I_A100_PLL_LOCK,
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(16, 6),
-	.fixed_post_div	= 2,
-	.sdm		= _SUNXI_CCU_SDM(pll_audio_sdm_table, BIT(24),
-					 0x178, BIT(31)),
-	.common		= {
-		.reg		= 0x078,
-		.features	= CCU_FEATURE_FIXED_POSTDIV |
-				  CCU_FEATURE_SIGMA_DELTA_MOD,
-		.hw.init	= CLK_HW_INIT("pll-audio", "dcxo24M",
-					      &ccu_nm_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static const char * const cpux_parents[] = { "dcxo24M", "osc32k",
-					     "iosc", "pll-cpux",
-					      "pll-periph0" };
-static SUNXI_CCU_MUX(cpux_clk, "cpux", cpux_parents,
-		     0x500, 24, 3, CLK_SET_RATE_PARENT | CLK_IS_CRITICAL);
-static SUNXI_CCU_M(axi_clk, "axi", "cpux", 0x500, 0, 2, 0);
-static SUNXI_CCU_M(cpux_apb_clk, "cpux-apb", "cpux", 0x500, 8, 2, 0);
-
-static const char * const psi_ahb1_ahb2_parents[] = { "dcxo24M", "osc32k",
-						      "iosc", "pll-periph0",
-						      "pll-periph0-2x" };
-static SUNXI_CCU_MP_WITH_MUX(psi_ahb1_ahb2_clk, "psi-ahb1-ahb2",
-			     psi_ahb1_ahb2_parents, 0x510,
-			     0, 2,	/* M */
-			     8, 2,	/* P */
-			     24, 3,	/* mux */
-			     0);
-
-static const char * const ahb3_apb1_apb2_parents[] = { "dcxo24M", "osc32k",
-						       "psi-ahb1-ahb2",
-						       "pll-periph0",
-						       "pll-periph0-2x" };
-static SUNXI_CCU_MP_WITH_MUX(ahb3_clk, "ahb3", ahb3_apb1_apb2_parents, 0x51c,
-			     0, 2,	/* M */
-			     8, 2,	/* P */
-			     24, 3,	/* mux */
-			     0);
-
-static SUNXI_CCU_MP_WITH_MUX(apb1_clk, "apb1", ahb3_apb1_apb2_parents, 0x520,
-			     0, 2,	/* M */
-			     8, 2,	/* P */
-			     24, 3,	/* mux */
-			     0);
-
-static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", ahb3_apb1_apb2_parents, 0x524,
-			     0, 2,	/* M */
-			     8, 2,	/* P */
-			     24, 3,	/* mux */
-			     0);
-
-static const char * const mbus_parents[] = { "dcxo24M", "pll-ddr0",
-					     "pll-periph0",
-					     "pll-periph0-2x" };
-static SUNXI_CCU_M_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents, 0x540,
-				 0, 3,		/* M */
-				 24, 2,		/* mux */
-				 BIT(31),	/* gate */
-				 CLK_IS_CRITICAL);
-
-static const char * const de_parents[] = { "pll-com", "pll-periph0-2x" };
-static SUNXI_CCU_M_WITH_MUX_GATE(de_clk, "de0", de_parents, 0x600,
-				 0, 4,		/* M */
-				 24, 1,		/* mux */
-				 BIT(31),	/* gate */
-				 CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(bus_de_clk, "bus-de", "psi-ahb1-ahb2",
-		      0x60c, BIT(0), 0);
-
-static const char * const g2d_parents[] = { "pll-com", "pll-periph0-2x",
-					     "pll-video0-2x", "pll-video1-2x",
-					     "pll-video2-2x"};
-static SUNXI_CCU_M_WITH_MUX_GATE(g2d_clk, "g2d",
-				 g2d_parents,
-				 0x630,
-				 0, 4,		/* M */
-				 24, 3,		/* mux */
-				 BIT(31),	/* gate */
-				 0);
-
-static SUNXI_CCU_GATE(bus_g2d_clk, "bus-g2d", "psi-ahb1-ahb2",
-		      0x63c, BIT(0), 0);
-
-static const char * const gpu_parents[] = { "pll-gpu" };
-static SUNXI_CCU_M_WITH_MUX_GATE(gpu_clk, "gpu", gpu_parents, 0x670,
-				       0, 2,	/* M */
-				       24, 1,	/* mux */
-				       BIT(31),	/* gate */
-				       0);
-
-static SUNXI_CCU_GATE(bus_gpu_clk, "bus-gpu", "psi-ahb1-ahb2",
-		      0x67c, BIT(0), 0);
-
-static const char * const ce_parents[] = { "dcxo24M", "pll-periph0-2x" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(ce_clk, "ce", ce_parents, 0x680,
-				  0, 4,		/* M */
-				  8, 2,		/* P */
-				  24, 1,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_GATE(bus_ce_clk, "bus-ce", "psi-ahb1-ahb2",
-		      0x68c, BIT(0), 0);
-
-static const char * const ve_parents[] = { "pll-ve" };
-static SUNXI_CCU_M_WITH_MUX_GATE(ve_clk, "ve", ve_parents, 0x690,
-				 0, 3,		/* M */
-				 24, 1,		/* mux */
-				 BIT(31),	/* gate */
-				 CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(bus_ve_clk, "bus-ve", "psi-ahb1-ahb2",
-		      0x69c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_dma_clk, "bus-dma", "psi-ahb1-ahb2",
-		      0x70c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_msgbox_clk, "bus-msgbox", "psi-ahb1-ahb2",
-		      0x71c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_spinlock_clk, "bus-spinlock", "psi-ahb1-ahb2",
-		      0x72c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_hstimer_clk, "bus-hstimer", "psi-ahb1-ahb2",
-		      0x73c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(avs_clk, "avs", "dcxo24M", 0x740, BIT(31), 0);
-
-static SUNXI_CCU_GATE(bus_dbg_clk, "bus-dbg", "psi-ahb1-ahb2",
-		      0x78c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_psi_clk, "bus-psi", "psi-ahb1-ahb2",
-		      0x79c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_pwm_clk, "bus-pwm", "apb1", 0x7ac, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_iommu_clk, "bus-iommu", "apb1", 0x7bc, BIT(0), 0);
-
-static SUNXI_CCU_GATE(mbus_dma_clk, "mbus-dma", "mbus",
-		      0x804, BIT(0), 0);
-static SUNXI_CCU_GATE(mbus_ve_clk, "mbus-ve", "mbus",
-		      0x804, BIT(1), 0);
-static SUNXI_CCU_GATE(mbus_ce_clk, "mbus-ce", "mbus",
-		      0x804, BIT(2), 0);
-static SUNXI_CCU_GATE(mbus_nand_clk, "mbus-nand", "mbus",
-		      0x804, BIT(5), 0);
-static SUNXI_CCU_GATE(mbus_csi_clk, "mbus-csi", "mbus",
-		      0x804, BIT(8), 0);
-static SUNXI_CCU_GATE(mbus_isp_clk, "mbus-isp", "mbus",
-		      0x804, BIT(9), 0);
-static SUNXI_CCU_GATE(mbus_g2d_clk, "mbus-g2d", "mbus",
-		      0x804, BIT(10), 0);
-
-static SUNXI_CCU_GATE(bus_dram_clk, "bus-dram", "psi-ahb1-ahb2",
-		      0x80c, BIT(0), CLK_IS_CRITICAL);
-
-static const char * const nand_spi_parents[] = { "dcxo24M",
-						 "pll-periph0",
-						 "pll-periph1",
-						 "pll-periph0-2x",
-						 "pll-periph1-2x" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand0_clk, "nand0", nand_spi_parents, 0x810,
-				  0, 4,		/* M */
-				  8, 2,		/* P */
-				  24, 3,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand1_clk, "nand1", nand_spi_parents, 0x814,
-				  0, 4,		/* M */
-				  8, 2,		/* P */
-				  24, 3,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_GATE(bus_nand_clk, "bus-nand", "ahb3", 0x82c, BIT(0), 0);
-
-static const char * const mmc_parents[] = { "dcxo24M", "pll-periph0-2x",
-					    "pll-periph1-2x" };
-static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc0_clk, "mmc0", mmc_parents, 0x830,
-					  0, 4,		/* M */
-					  8, 2,		/* P */
-					  24, 2,	/* mux */
-					  BIT(31),	/* gate */
-					  2,		/* post-div */
-					  CLK_SET_RATE_NO_REPARENT);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc1_clk, "mmc1", mmc_parents, 0x834,
-					  0, 4,		/* M */
-					  8, 2,		/* P */
-					  24, 2,	/* mux */
-					  BIT(31),	/* gate */
-					  2,		/* post-div */
-					  CLK_SET_RATE_NO_REPARENT);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc2_clk, "mmc2", mmc_parents, 0x838,
-					  0, 4,		/* M */
-					  8, 2,		/* P */
-					  24, 2,	/* mux */
-					  BIT(31),	/* gate */
-					  2,		/* post-div */
-					  CLK_SET_RATE_NO_REPARENT);
-
-static SUNXI_CCU_GATE(bus_mmc0_clk, "bus-mmc0", "ahb3", 0x84c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_mmc1_clk, "bus-mmc1", "ahb3", 0x84c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_mmc2_clk, "bus-mmc2", "ahb3", 0x84c, BIT(2), 0);
-
-static SUNXI_CCU_GATE(bus_uart0_clk, "bus-uart0", "apb2", 0x90c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_uart1_clk, "bus-uart1", "apb2", 0x90c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_uart2_clk, "bus-uart2", "apb2", 0x90c, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_uart3_clk, "bus-uart3", "apb2", 0x90c, BIT(3), 0);
-static SUNXI_CCU_GATE(bus_uart4_clk, "bus-uart4", "apb2", 0x90c, BIT(4), 0);
-
-static SUNXI_CCU_GATE(bus_i2c0_clk, "bus-i2c0", "apb2", 0x91c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_i2c1_clk, "bus-i2c1", "apb2", 0x91c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_i2c2_clk, "bus-i2c2", "apb2", 0x91c, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_i2c3_clk, "bus-i2c3", "apb2", 0x91c, BIT(3), 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", nand_spi_parents, 0x940,
-				  0, 4,		/* M */
-				  8, 2,		/* P */
-				  24, 3,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", nand_spi_parents, 0x944,
-				  0, 4,		/* M */
-				  8, 2,		/* P */
-				  24, 3,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi2_clk, "spi2", nand_spi_parents, 0x948,
-				  0, 4,		/* M */
-				  8, 2,		/* P */
-				  24, 3,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_GATE(bus_spi0_clk, "bus-spi0", "ahb3", 0x96c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_spi1_clk, "bus-spi1", "ahb3", 0x96c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_spi2_clk, "bus-spi2", "ahb3", 0x96c, BIT(2), 0);
-
-static SUNXI_CCU_GATE(emac_25m_clk, "emac-25m", "ahb3", 0x970,
-		      BIT(31) | BIT(30), 0);
-
-static SUNXI_CCU_GATE(bus_emac_clk, "bus-emac", "ahb3", 0x97c, BIT(0), 0);
-
-static const char * const ir_parents[] = { "osc32k", "iosc",
-					   "pll-periph0", "pll-periph1" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(ir_rx_clk, "ir-rx", ir_parents, 0x990,
-				  0, 4,		/* M */
-				  8, 2,		/* P */
-				  24, 3,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_GATE(bus_ir_rx_clk, "bus-ir-rx", "ahb3", 0x99c, BIT(0), 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(ir_tx_clk, "ir-tx", ir_parents, 0x9c0,
-				  0, 4,		/* M */
-				  8, 2,		/* P */
-				  24, 3,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_GATE(bus_ir_tx_clk, "bus-ir-tx", "apb1", 0x9cc, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_gpadc_clk, "bus-gpadc", "apb1", 0x9ec, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_ths_clk, "bus-ths", "apb1", 0x9fc, BIT(0), 0);
-
-static const char * const audio_parents[] = { "pll-audio", "pll-com-audio" };
-static struct ccu_div i2s0_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0xa10,
-		.hw.init	= CLK_HW_INIT_PARENTS("i2s0",
-						      audio_parents,
-						      &ccu_div_ops,
-						      CLK_SET_RATE_PARENT),
-	},
-};
-
-static struct ccu_div i2s1_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0xa14,
-		.hw.init	= CLK_HW_INIT_PARENTS("i2s1",
-						      audio_parents,
-						      &ccu_div_ops,
-						      CLK_SET_RATE_PARENT),
-	},
-};
-
-static struct ccu_div i2s2_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0xa18,
-		.hw.init	= CLK_HW_INIT_PARENTS("i2s2",
-						      audio_parents,
-						      &ccu_div_ops,
-						      CLK_SET_RATE_PARENT),
-	},
-};
-
-static struct ccu_div i2s3_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0xa1c,
-		.hw.init	= CLK_HW_INIT_PARENTS("i2s3",
-						      audio_parents,
-						      &ccu_div_ops,
-						      CLK_SET_RATE_PARENT),
-	},
-};
-
-static SUNXI_CCU_GATE(bus_i2s0_clk, "bus-i2s0", "apb1", 0xa20, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_i2s1_clk, "bus-i2s1", "apb1", 0xa20, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_i2s2_clk, "bus-i2s2", "apb1", 0xa20, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_i2s3_clk, "bus-i2s3", "apb1", 0xa20, BIT(3), 0);
-
-static struct ccu_div spdif_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0xa24,
-		.hw.init	= CLK_HW_INIT_PARENTS("spdif",
-						      audio_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static SUNXI_CCU_GATE(bus_spdif_clk, "bus-spdif", "apb1", 0xa2c, BIT(0), 0);
-
-static struct ccu_div dmic_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0xa40,
-		.hw.init	= CLK_HW_INIT_PARENTS("dmic",
-						      audio_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static SUNXI_CCU_GATE(bus_dmic_clk, "bus-dmic", "apb1", 0xa4c, BIT(0), 0);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(audio_codec_dac_clk, "audio-codec-dac",
-				 audio_parents, 0xa50,
-				 0, 4,		/* M */
-				 24, 2,		/* mux */
-				 BIT(31),	/* gate */
-				 0);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(audio_codec_adc_clk, "audio-codec-adc",
-				 audio_parents, 0xa54,
-				 0, 4,		/* M */
-				 24, 2,		/* mux */
-				 BIT(31),	/* gate */
-				 0);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(audio_codec_4x_clk, "audio-codec-4x",
-				 audio_parents, 0xa58,
-				 0, 4,		/* M */
-				 24, 2,		/* mux */
-				 BIT(31),	/* gate */
-				 0);
-
-static SUNXI_CCU_GATE(bus_audio_codec_clk, "bus-audio-codec", "apb1", 0xa5c,
-		      BIT(0), 0);
-
-/*
- * There are OHCI 12M clock source selection bits for 2 USB 2.0 ports.
- * We will force them to 0 (12M divided from 48M).
- */
-#define SUN50I_A100_USB0_CLK_REG		0xa70
-#define SUN50I_A100_USB1_CLK_REG		0xa74
-
-static SUNXI_CCU_GATE(usb_ohci0_clk, "usb-ohci0", "osc12M", 0xa70, BIT(31), 0);
-static SUNXI_CCU_GATE(usb_phy0_clk, "usb-phy0", "dcxo24M", 0xa70, BIT(29), 0);
-
-static SUNXI_CCU_GATE(usb_ohci1_clk, "usb-ohci1", "osc12M", 0xa74, BIT(31), 0);
-static SUNXI_CCU_GATE(usb_phy1_clk, "usb-phy1", "dcxo24M", 0xa74, BIT(29), 0);
-
-static SUNXI_CCU_GATE(bus_ohci0_clk, "bus-ohci0", "ahb3", 0xa8c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_ohci1_clk, "bus-ohci1", "ahb3", 0xa8c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_ehci0_clk, "bus-ehci0", "ahb3", 0xa8c, BIT(4), 0);
-static SUNXI_CCU_GATE(bus_ehci1_clk, "bus-ehci1", "ahb3", 0xa8c, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_otg_clk, "bus-otg", "ahb3", 0xa8c, BIT(8), 0);
-
-static SUNXI_CCU_GATE(bus_lradc_clk, "bus-lradc", "ahb3", 0xa9c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_dpss_top0_clk, "bus-dpss-top0", "ahb3",
-		      0xabc, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_dpss_top1_clk, "bus-dpss-top1", "ahb3",
-		      0xacc, BIT(0), 0);
-
-static const char * const mipi_dsi_parents[] = { "dcxo24M", "pll-periph0-2x",
-						 "pll-periph0" };
-static SUNXI_CCU_M_WITH_MUX_GATE(mipi_dsi_clk, "mipi-dsi",
-				 mipi_dsi_parents,
-				 0xb24,
-				 0, 4,		/* M */
-				 24, 2,		/* mux */
-				 BIT(31),	/* gate */
-				 0);
-
-static SUNXI_CCU_GATE(bus_mipi_dsi_clk, "bus-mipi-dsi", "ahb3",
-		      0xb4c, BIT(0), 0);
-
-static const char * const tcon_lcd_parents[] = { "pll-video0-4x",
-						  "pll-video1-4x",
-						  "pll-video2-4x",
-						  "pll-video3-4x",
-						  "pll-periph0-2x" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(tcon_lcd_clk, "tcon-lcd0",
-				  tcon_lcd_parents, 0xb60,
-				  0, 4,		/* M */
-				  8, 2,		/* P */
-				  24, 3,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_GATE(bus_tcon_lcd_clk, "bus-tcon-lcd0", "ahb3",
-		      0xb7c, BIT(0), 0);
-
-static const char * const ledc_parents[] = { "dcxo24M",
-					     "pll-periph0" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(ledc_clk, "ledc",
-				  ledc_parents, 0xbf0,
-				  0, 4,		/* M */
-				  8, 2,		/* P */
-				  24, 3,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_GATE(bus_ledc_clk, "bus-ledc", "ahb3", 0xbfc, BIT(0), 0);
-
-static const char * const csi_top_parents[] = { "pll-periph0-2x",
-						"pll-video0-2x",
-						"pll-video1-2x",
-						"pll-video2-2x",
-						"pll-video3-2x" };
-static SUNXI_CCU_M_WITH_MUX_GATE(csi_top_clk, "csi-top",
-				 csi_top_parents, 0xc04,
-				 0, 4,		/* M */
-				 24, 3,		/* mux */
-				 BIT(31),	/* gate */
-				 0);
-
-static const char * const csi0_mclk_parents[] = { "dcxo24M", "pll-video2",
-						  "pll-video3", "pll-video0",
-						  "pll-video1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(csi0_mclk_clk, "csi0-mclk",
-				 csi0_mclk_parents, 0xc08,
-				 0, 5,		/* M */
-				 24, 3,		/* mux */
-				 BIT(31),	/* gate */
-				 0);
-
-static const char * const csi1_mclk_parents[] = { "dcxo24M", "pll-video3",
-						  "pll-video0", "pll-video1",
-						  "pll-video2" };
-static SUNXI_CCU_M_WITH_MUX_GATE(csi1_mclk_clk, "csi1-mclk",
-				 csi1_mclk_parents, 0xc0c,
-				 0, 5,		/* M */
-				 24, 3,		/* mux */
-				 BIT(31),	/* gate */
-				 0);
-
-static SUNXI_CCU_GATE(bus_csi_clk, "bus-csi", "ahb3", 0xc1c, BIT(0), 0);
-
-static const char * const csi_isp_parents[] = { "pll-periph0-2x",
-						"pll-video0-2x",
-						"pll-video1-2x",
-						"pll-video2-2x",
-						"pll-video3-2x" };
-static SUNXI_CCU_M_WITH_MUX_GATE(csi_isp_clk, "csi-isp",
-				 csi_isp_parents, 0xc20,
-				 0, 5,		/* M */
-				 24, 3,		/* mux */
-				 BIT(31),	/* gate */
-				 0);
-
-/* Fixed factor clocks */
-static CLK_FIXED_FACTOR_FW_NAME(osc12M_clk, "osc12M", "hosc", 2, 1, 0);
-
-static CLK_FIXED_FACTOR_HW(pll_com_audio_clk, "pll-com-audio",
-			   &pll_com_clk.common.hw,
-			   5, 1, CLK_SET_RATE_PARENT);
-
-static CLK_FIXED_FACTOR_HW(pll_periph0_2x_clk, "pll-periph0-2x",
-			   &pll_periph0_clk.common.hw,
-			   1, 2, 0);
-
-static CLK_FIXED_FACTOR_HW(pll_periph1_2x_clk, "pll-periph1-2x",
-			   &pll_periph1_clk.common.hw,
-			   1, 2, 0);
-
-static const struct clk_hw *pll_video0_parents[] = {
-	&pll_video0_clk.common.hw
-};
-static CLK_FIXED_FACTOR_HWS(pll_video0_4x_clk, "pll-video0-4x",
-			    pll_video0_parents,
-			    1, 4, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_video0_2x_clk, "pll-video0-2x",
-			    pll_video0_parents,
-			    1, 2, CLK_SET_RATE_PARENT);
-
-static const struct clk_hw *pll_video1_parents[] = {
-	&pll_video1_clk.common.hw
-};
-static CLK_FIXED_FACTOR_HWS(pll_video1_4x_clk, "pll-video1-4x",
-			    pll_video1_parents,
-			    1, 4, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_video1_2x_clk, "pll-video1-2x",
-			    pll_video1_parents,
-			    1, 2, CLK_SET_RATE_PARENT);
-
-static const struct clk_hw *pll_video2_parents[] = {
-	&pll_video2_clk.common.hw
-};
-static CLK_FIXED_FACTOR_HWS(pll_video2_4x_clk, "pll-video2-4x",
-			    pll_video2_parents,
-			    1, 4, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_video2_2x_clk, "pll-video2-2x",
-			    pll_video2_parents,
-			    1, 2, CLK_SET_RATE_PARENT);
-
-static const struct clk_hw *pll_video3_parents[] = {
-	&pll_video3_clk.common.hw
-};
-static CLK_FIXED_FACTOR_HWS(pll_video3_4x_clk, "pll-video3-4x",
-			    pll_video3_parents,
-			    1, 4, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_video3_2x_clk, "pll-video3-2x",
-			    pll_video3_parents,
-			    1, 2, CLK_SET_RATE_PARENT);
-
-static struct ccu_common *sun50i_a100_ccu_clks[] = {
-	&pll_cpux_clk.common,
-	&pll_ddr0_clk.common,
-	&pll_periph0_clk.common,
-	&pll_periph1_clk.common,
-	&pll_gpu_clk.common,
-	&pll_video0_clk.common,
-	&pll_video1_clk.common,
-	&pll_video2_clk.common,
-	&pll_video3_clk.common,
-	&pll_ve_clk.common,
-	&pll_com_clk.common,
-	&pll_audio_clk.common,
-	&cpux_clk.common,
-	&axi_clk.common,
-	&cpux_apb_clk.common,
-	&psi_ahb1_ahb2_clk.common,
-	&ahb3_clk.common,
-	&apb1_clk.common,
-	&apb2_clk.common,
-	&mbus_clk.common,
-	&de_clk.common,
-	&bus_de_clk.common,
-	&g2d_clk.common,
-	&bus_g2d_clk.common,
-	&gpu_clk.common,
-	&bus_gpu_clk.common,
-	&ce_clk.common,
-	&bus_ce_clk.common,
-	&ve_clk.common,
-	&bus_ve_clk.common,
-	&bus_dma_clk.common,
-	&bus_msgbox_clk.common,
-	&bus_spinlock_clk.common,
-	&bus_hstimer_clk.common,
-	&avs_clk.common,
-	&bus_dbg_clk.common,
-	&bus_psi_clk.common,
-	&bus_pwm_clk.common,
-	&bus_iommu_clk.common,
-	&mbus_dma_clk.common,
-	&mbus_ve_clk.common,
-	&mbus_ce_clk.common,
-	&mbus_nand_clk.common,
-	&mbus_csi_clk.common,
-	&mbus_isp_clk.common,
-	&mbus_g2d_clk.common,
-	&bus_dram_clk.common,
-	&nand0_clk.common,
-	&nand1_clk.common,
-	&bus_nand_clk.common,
-	&mmc0_clk.common,
-	&mmc1_clk.common,
-	&mmc2_clk.common,
-	&bus_mmc0_clk.common,
-	&bus_mmc1_clk.common,
-	&bus_mmc2_clk.common,
-	&bus_uart0_clk.common,
-	&bus_uart1_clk.common,
-	&bus_uart2_clk.common,
-	&bus_uart3_clk.common,
-	&bus_uart4_clk.common,
-	&bus_i2c0_clk.common,
-	&bus_i2c1_clk.common,
-	&bus_i2c2_clk.common,
-	&bus_i2c3_clk.common,
-	&spi0_clk.common,
-	&spi1_clk.common,
-	&spi2_clk.common,
-	&bus_spi0_clk.common,
-	&bus_spi1_clk.common,
-	&bus_spi2_clk.common,
-	&emac_25m_clk.common,
-	&bus_emac_clk.common,
-	&ir_rx_clk.common,
-	&bus_ir_rx_clk.common,
-	&ir_tx_clk.common,
-	&bus_ir_tx_clk.common,
-	&bus_gpadc_clk.common,
-	&bus_ths_clk.common,
-	&i2s0_clk.common,
-	&i2s1_clk.common,
-	&i2s2_clk.common,
-	&i2s3_clk.common,
-	&bus_i2s0_clk.common,
-	&bus_i2s1_clk.common,
-	&bus_i2s2_clk.common,
-	&bus_i2s3_clk.common,
-	&spdif_clk.common,
-	&bus_spdif_clk.common,
-	&dmic_clk.common,
-	&bus_dmic_clk.common,
-	&audio_codec_dac_clk.common,
-	&audio_codec_adc_clk.common,
-	&audio_codec_4x_clk.common,
-	&bus_audio_codec_clk.common,
-	&usb_ohci0_clk.common,
-	&usb_phy0_clk.common,
-	&usb_ohci1_clk.common,
-	&usb_phy1_clk.common,
-	&bus_ohci0_clk.common,
-	&bus_ohci1_clk.common,
-	&bus_ehci0_clk.common,
-	&bus_ehci1_clk.common,
-	&bus_otg_clk.common,
-	&bus_lradc_clk.common,
-	&bus_dpss_top0_clk.common,
-	&bus_dpss_top1_clk.common,
-	&mipi_dsi_clk.common,
-	&bus_mipi_dsi_clk.common,
-	&tcon_lcd_clk.common,
-	&bus_tcon_lcd_clk.common,
-	&ledc_clk.common,
-	&bus_ledc_clk.common,
-	&csi_top_clk.common,
-	&csi0_mclk_clk.common,
-	&csi1_mclk_clk.common,
-	&bus_csi_clk.common,
-	&csi_isp_clk.common,
-};
-
-static struct clk_hw_onecell_data sun50i_a100_hw_clks = {
-	.hws	= {
-		[CLK_OSC12M]		= &osc12M_clk.hw,
-		[CLK_PLL_CPUX]		= &pll_cpux_clk.common.hw,
-		[CLK_PLL_DDR0]		= &pll_ddr0_clk.common.hw,
-		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
-		[CLK_PLL_PERIPH0_2X]	= &pll_periph0_2x_clk.hw,
-		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
-		[CLK_PLL_PERIPH1_2X]	= &pll_periph1_2x_clk.hw,
-		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
-		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
-		[CLK_PLL_VIDEO0_2X]	= &pll_video0_2x_clk.hw,
-		[CLK_PLL_VIDEO0_4X]	= &pll_video0_4x_clk.hw,
-		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
-		[CLK_PLL_VIDEO1_2X]	= &pll_video1_2x_clk.hw,
-		[CLK_PLL_VIDEO1_4X]	= &pll_video1_4x_clk.hw,
-		[CLK_PLL_VIDEO2]	= &pll_video2_clk.common.hw,
-		[CLK_PLL_VIDEO2_2X]	= &pll_video2_2x_clk.hw,
-		[CLK_PLL_VIDEO2_4X]	= &pll_video2_4x_clk.hw,
-		[CLK_PLL_VIDEO3]	= &pll_video3_clk.common.hw,
-		[CLK_PLL_VIDEO3_2X]	= &pll_video3_2x_clk.hw,
-		[CLK_PLL_VIDEO3_4X]	= &pll_video3_4x_clk.hw,
-		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
-		[CLK_PLL_COM]		= &pll_com_clk.common.hw,
-		[CLK_PLL_COM_AUDIO]	= &pll_com_audio_clk.hw,
-		[CLK_PLL_AUDIO]		= &pll_audio_clk.common.hw,
-		[CLK_CPUX]		= &cpux_clk.common.hw,
-		[CLK_AXI]		= &axi_clk.common.hw,
-		[CLK_CPUX_APB]		= &cpux_apb_clk.common.hw,
-		[CLK_PSI_AHB1_AHB2]	= &psi_ahb1_ahb2_clk.common.hw,
-		[CLK_AHB3]		= &ahb3_clk.common.hw,
-		[CLK_APB1]		= &apb1_clk.common.hw,
-		[CLK_APB2]		= &apb2_clk.common.hw,
-		[CLK_MBUS]		= &mbus_clk.common.hw,
-		[CLK_DE]		= &de_clk.common.hw,
-		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
-		[CLK_G2D]		= &g2d_clk.common.hw,
-		[CLK_BUS_G2D]		= &bus_g2d_clk.common.hw,
-		[CLK_GPU]		= &gpu_clk.common.hw,
-		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
-		[CLK_CE]		= &ce_clk.common.hw,
-		[CLK_BUS_CE]		= &bus_ce_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
-		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
-		[CLK_BUS_MSGBOX]	= &bus_msgbox_clk.common.hw,
-		[CLK_BUS_SPINLOCK]	= &bus_spinlock_clk.common.hw,
-		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-		[CLK_BUS_DBG]		= &bus_dbg_clk.common.hw,
-		[CLK_BUS_PSI]		= &bus_psi_clk.common.hw,
-		[CLK_BUS_PWM]		= &bus_pwm_clk.common.hw,
-		[CLK_BUS_IOMMU]		= &bus_iommu_clk.common.hw,
-		[CLK_MBUS_DMA]		= &mbus_dma_clk.common.hw,
-		[CLK_MBUS_VE]		= &mbus_ve_clk.common.hw,
-		[CLK_MBUS_CE]		= &mbus_ce_clk.common.hw,
-		[CLK_MBUS_NAND]		= &mbus_nand_clk.common.hw,
-		[CLK_MBUS_CSI]		= &mbus_csi_clk.common.hw,
-		[CLK_MBUS_ISP]		= &mbus_isp_clk.common.hw,
-		[CLK_MBUS_G2D]		= &mbus_g2d_clk.common.hw,
-		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
-		[CLK_NAND0]		= &nand0_clk.common.hw,
-		[CLK_NAND1]		= &nand1_clk.common.hw,
-		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC2]		= &mmc2_clk.common.hw,
-		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
-		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
-		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
-		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
-		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
-		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
-		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
-		[CLK_BUS_UART4]		= &bus_uart4_clk.common.hw,
-		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
-		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
-		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
-		[CLK_BUS_I2C3]		= &bus_i2c3_clk.common.hw,
-		[CLK_SPI0]		= &spi0_clk.common.hw,
-		[CLK_SPI1]		= &spi1_clk.common.hw,
-		[CLK_SPI2]		= &spi2_clk.common.hw,
-		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
-		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
-		[CLK_BUS_SPI2]		= &bus_spi2_clk.common.hw,
-		[CLK_EMAC_25M]		= &emac_25m_clk.common.hw,
-		[CLK_BUS_EMAC]		= &bus_emac_clk.common.hw,
-		[CLK_IR_RX]		= &ir_rx_clk.common.hw,
-		[CLK_BUS_IR_RX]		= &bus_ir_rx_clk.common.hw,
-		[CLK_IR_TX]		= &ir_tx_clk.common.hw,
-		[CLK_BUS_IR_TX]		= &bus_ir_tx_clk.common.hw,
-		[CLK_BUS_GPADC]		= &bus_gpadc_clk.common.hw,
-		[CLK_BUS_THS]		= &bus_ths_clk.common.hw,
-		[CLK_I2S0]		= &i2s0_clk.common.hw,
-		[CLK_I2S1]		= &i2s1_clk.common.hw,
-		[CLK_I2S2]		= &i2s2_clk.common.hw,
-		[CLK_I2S3]		= &i2s3_clk.common.hw,
-		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
-		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
-		[CLK_BUS_I2S2]		= &bus_i2s2_clk.common.hw,
-		[CLK_BUS_I2S3]		= &bus_i2s3_clk.common.hw,
-		[CLK_SPDIF]		= &spdif_clk.common.hw,
-		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
-		[CLK_DMIC]		= &dmic_clk.common.hw,
-		[CLK_BUS_DMIC]		= &bus_dmic_clk.common.hw,
-		[CLK_AUDIO_DAC]		= &audio_codec_dac_clk.common.hw,
-		[CLK_AUDIO_ADC]		= &audio_codec_adc_clk.common.hw,
-		[CLK_AUDIO_4X]		= &audio_codec_4x_clk.common.hw,
-		[CLK_BUS_AUDIO_CODEC]	= &bus_audio_codec_clk.common.hw,
-		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
-		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
-		[CLK_USB_OHCI1]		= &usb_ohci1_clk.common.hw,
-		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
-		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
-		[CLK_BUS_OHCI1]		= &bus_ohci1_clk.common.hw,
-		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
-		[CLK_BUS_EHCI1]		= &bus_ehci1_clk.common.hw,
-		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
-		[CLK_BUS_LRADC]		= &bus_lradc_clk.common.hw,
-		[CLK_BUS_DPSS_TOP0]	= &bus_dpss_top0_clk.common.hw,
-		[CLK_BUS_DPSS_TOP1]	= &bus_dpss_top1_clk.common.hw,
-		[CLK_MIPI_DSI]		= &mipi_dsi_clk.common.hw,
-		[CLK_BUS_MIPI_DSI]	= &bus_mipi_dsi_clk.common.hw,
-		[CLK_TCON_LCD]		= &tcon_lcd_clk.common.hw,
-		[CLK_BUS_TCON_LCD]	= &bus_tcon_lcd_clk.common.hw,
-		[CLK_LEDC]		= &ledc_clk.common.hw,
-		[CLK_BUS_LEDC]		= &bus_ledc_clk.common.hw,
-		[CLK_CSI_TOP]		= &csi_top_clk.common.hw,
-		[CLK_CSI0_MCLK]		= &csi0_mclk_clk.common.hw,
-		[CLK_CSI1_MCLK]		= &csi1_mclk_clk.common.hw,
-		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
-		[CLK_CSI_ISP]		= &csi_isp_clk.common.hw,
-	},
-	.num = CLK_NUMBER,
-};
-
-static struct ccu_reset_map sun50i_a100_ccu_resets[] = {
-	[RST_MBUS]		= { 0x540, BIT(30) },
-
-	[RST_BUS_DE]		= { 0x60c, BIT(16) },
-	[RST_BUS_G2D]		= { 0x63c, BIT(16) },
-	[RST_BUS_GPU]		= { 0x67c, BIT(16) },
-	[RST_BUS_CE]		= { 0x68c, BIT(16) },
-	[RST_BUS_VE]		= { 0x69c, BIT(16) },
-	[RST_BUS_DMA]		= { 0x70c, BIT(16) },
-	[RST_BUS_MSGBOX]	= { 0x71c, BIT(16) },
-	[RST_BUS_SPINLOCK]	= { 0x72c, BIT(16) },
-	[RST_BUS_HSTIMER]	= { 0x73c, BIT(16) },
-	[RST_BUS_DBG]		= { 0x78c, BIT(16) },
-	[RST_BUS_PSI]		= { 0x79c, BIT(16) },
-	[RST_BUS_PWM]		= { 0x7ac, BIT(16) },
-	[RST_BUS_DRAM]		= { 0x80c, BIT(16) },
-	[RST_BUS_NAND]		= { 0x82c, BIT(16) },
-	[RST_BUS_MMC0]		= { 0x84c, BIT(16) },
-	[RST_BUS_MMC1]		= { 0x84c, BIT(17) },
-	[RST_BUS_MMC2]		= { 0x84c, BIT(18) },
-	[RST_BUS_UART0]		= { 0x90c, BIT(16) },
-	[RST_BUS_UART1]		= { 0x90c, BIT(17) },
-	[RST_BUS_UART2]		= { 0x90c, BIT(18) },
-	[RST_BUS_UART3]		= { 0x90c, BIT(19) },
-	[RST_BUS_UART4]		= { 0x90c, BIT(20) },
-	[RST_BUS_I2C0]		= { 0x91c, BIT(16) },
-	[RST_BUS_I2C1]		= { 0x91c, BIT(17) },
-	[RST_BUS_I2C2]		= { 0x91c, BIT(18) },
-	[RST_BUS_I2C3]		= { 0x91c, BIT(19) },
-	[RST_BUS_SPI0]		= { 0x96c, BIT(16) },
-	[RST_BUS_SPI1]		= { 0x96c, BIT(17) },
-	[RST_BUS_SPI2]		= { 0x96c, BIT(18) },
-	[RST_BUS_EMAC]		= { 0x97c, BIT(16) },
-	[RST_BUS_IR_RX]		= { 0x99c, BIT(16) },
-	[RST_BUS_IR_TX]		= { 0x9cc, BIT(16) },
-	[RST_BUS_GPADC]		= { 0x9ec, BIT(16) },
-	[RST_BUS_THS]		= { 0x9fc, BIT(16) },
-	[RST_BUS_I2S0]		= { 0xa20, BIT(16) },
-	[RST_BUS_I2S1]		= { 0xa20, BIT(17) },
-	[RST_BUS_I2S2]		= { 0xa20, BIT(18) },
-	[RST_BUS_I2S3]		= { 0xa20, BIT(19) },
-	[RST_BUS_SPDIF]		= { 0xa2c, BIT(16) },
-	[RST_BUS_DMIC]		= { 0xa4c, BIT(16) },
-	[RST_BUS_AUDIO_CODEC]	= { 0xa5c, BIT(16) },
-
-	[RST_USB_PHY0]		= { 0xa70, BIT(30) },
-	[RST_USB_PHY1]		= { 0xa74, BIT(30) },
-
-	[RST_BUS_OHCI0]		= { 0xa8c, BIT(16) },
-	[RST_BUS_OHCI1]		= { 0xa8c, BIT(17) },
-	[RST_BUS_EHCI0]		= { 0xa8c, BIT(20) },
-	[RST_BUS_EHCI1]		= { 0xa8c, BIT(21) },
-	[RST_BUS_OTG]		= { 0xa8c, BIT(24) },
-
-	[RST_BUS_LRADC]		= { 0xa9c, BIT(16) },
-	[RST_BUS_DPSS_TOP0]	= { 0xabc, BIT(16) },
-	[RST_BUS_DPSS_TOP1]	= { 0xacc, BIT(16) },
-	[RST_BUS_MIPI_DSI]	= { 0xb4c, BIT(16) },
-	[RST_BUS_TCON_LCD]	= { 0xb7c, BIT(16) },
-	[RST_BUS_LVDS]		= { 0xbac, BIT(16) },
-	[RST_BUS_LEDC]		= { 0xbfc, BIT(16) },
-	[RST_BUS_CSI]		= { 0xc1c, BIT(16) },
-	[RST_BUS_CSI_ISP]	= { 0xc2c, BIT(16) },
-};
-
-static const struct sunxi_ccu_desc sun50i_a100_ccu_desc = {
-	.ccu_clks	= sun50i_a100_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun50i_a100_ccu_clks),
-
-	.hw_clks	= &sun50i_a100_hw_clks,
-
-	.resets		= sun50i_a100_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun50i_a100_ccu_resets),
-};
-
-static const u32 sun50i_a100_pll_regs[] = {
-	SUN50I_A100_PLL_CPUX_REG,
-	SUN50I_A100_PLL_DDR0_REG,
-	SUN50I_A100_PLL_PERIPH0_REG,
-	SUN50I_A100_PLL_PERIPH1_REG,
-	SUN50I_A100_PLL_GPU_REG,
-	SUN50I_A100_PLL_VIDEO0_REG,
-	SUN50I_A100_PLL_VIDEO1_REG,
-	SUN50I_A100_PLL_VIDEO2_REG,
-	SUN50I_A100_PLL_VIDEO3_REG,
-	SUN50I_A100_PLL_VE_REG,
-	SUN50I_A100_PLL_COM_REG,
-	SUN50I_A100_PLL_AUDIO_REG,
-};
-
-static const u32 sun50i_a100_pll_video_regs[] = {
-	SUN50I_A100_PLL_VIDEO0_REG,
-	SUN50I_A100_PLL_VIDEO1_REG,
-	SUN50I_A100_PLL_VIDEO2_REG,
-	SUN50I_A100_PLL_VIDEO3_REG,
-};
-
-static const u32 sun50i_a100_usb2_clk_regs[] = {
-	SUN50I_A100_USB0_CLK_REG,
-	SUN50I_A100_USB1_CLK_REG,
-};
-
-static struct ccu_pll_nb sun50i_a100_pll_cpu_nb = {
-	.common = &pll_cpux_clk.common,
-	/* copy from pll_cpux_clk */
-	.enable = BIT(27),
-	.lock   = BIT(28),
-};
-
-static struct ccu_mux_nb sun50i_a100_cpu_nb = {
-	.common         = &cpux_clk.common,
-	.cm             = &cpux_clk.mux,
-	.delay_us       = 1,
-	.bypass_index   = 4, /* index of pll periph0 */
-};
-
-static int sun50i_a100_ccu_probe(struct platform_device *pdev)
-{
-	void __iomem *reg;
-	u32 val;
-	int i, ret;
-
-	reg = devm_platform_ioremap_resource(pdev, 0);
-	if (IS_ERR(reg))
-		return PTR_ERR(reg);
-
-	/*
-	 * Enable lock and enable bits on all PLLs.
-	 *
-	 * Due to the current design, multiple PLLs share one power switch,
-	 * so switching PLL is easy to cause stability problems.
-	 * When initializing, we enable them by default. When disable,
-	 * we only turn off the output of PLL.
-	 */
-	for (i = 0; i < ARRAY_SIZE(sun50i_a100_pll_regs); i++) {
-		val = readl(reg + sun50i_a100_pll_regs[i]);
-		val |= SUN50I_A100_PLL_LOCK_ENABLE | SUN50I_A100_PLL_ENABLE;
-		writel(val, reg + sun50i_a100_pll_regs[i]);
-	}
-
-	/*
-	 * In order to pass the EMI certification, the SDM function of
-	 * the peripheral 1 bus is enabled, and the frequency is still
-	 * calculated using the previous division factor.
-	 */
-	writel(SUN50I_A100_PLL_PERIPH1_PATTERN0,
-	       reg + SUN50I_A100_PLL_PERIPH1_PATTERN0_REG);
-
-	val = readl(reg + SUN50I_A100_PLL_PERIPH1_REG);
-	val |= SUN50I_A100_PLL_SDM_ENABLE;
-	writel(val, reg + SUN50I_A100_PLL_PERIPH1_REG);
-
-	/*
-	 * Force the output divider of video PLLs to 0.
-	 *
-	 * See the comment before pll-video0 definition for the reason.
-	 */
-	for (i = 0; i < ARRAY_SIZE(sun50i_a100_pll_video_regs); i++) {
-		val = readl(reg + sun50i_a100_pll_video_regs[i]);
-		val &= ~BIT(0);
-		writel(val, reg + sun50i_a100_pll_video_regs[i]);
-	}
-
-	/*
-	 * Enforce m1 = 0, m0 = 1 for Audio PLL
-	 *
-	 * See the comment before pll-audio definition for the reason.
-	 */
-	val = readl(reg + SUN50I_A100_PLL_AUDIO_REG);
-	val &= ~BIT(1);
-	val |= BIT(0);
-	writel(val, reg + SUN50I_A100_PLL_AUDIO_REG);
-
-	/*
-	 * Force OHCI 12M clock sources to 00 (12MHz divided from 48MHz)
-	 *
-	 * This clock mux is still mysterious, and the code just enforces
-	 * it to have a valid clock parent.
-	 */
-	for (i = 0; i < ARRAY_SIZE(sun50i_a100_usb2_clk_regs); i++) {
-		val = readl(reg + sun50i_a100_usb2_clk_regs[i]);
-		val &= ~GENMASK(25, 24);
-		writel(val, reg + sun50i_a100_usb2_clk_regs[i]);
-	}
-
-	ret = devm_sunxi_ccu_probe(&pdev->dev, reg, &sun50i_a100_ccu_desc);
-	if (ret)
-		return ret;
-
-	/* Gate then ungate PLL CPU after any rate changes */
-	ccu_pll_notifier_register(&sun50i_a100_pll_cpu_nb);
-
-	/* Reparent CPU during PLL CPU rate changes */
-	ccu_mux_notifier_register(pll_cpux_clk.common.hw.clk,
-				  &sun50i_a100_cpu_nb);
-
-	return 0;
-}
-
-static const struct of_device_id sun50i_a100_ccu_ids[] = {
-	{ .compatible = "allwinner,sun50i-a100-ccu" },
-	{ }
-};
-
-static struct platform_driver sun50i_a100_ccu_driver = {
-	.probe	= sun50i_a100_ccu_probe,
-	.driver	= {
-		.name	= "sun50i-a100-ccu",
-		.suppress_bind_attrs = true,
-		.of_match_table	= sun50i_a100_ccu_ids,
-	},
-};
-module_platform_driver(sun50i_a100_ccu_driver);
diff --git a/drivers/clk/sunxi-ng/ccu-sun50i-a100.h b/drivers/clk/sunxi-ng/ccu-sun50i-a100.h
deleted file mode 100644
index 21ce92bb1d5f..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun50i-a100.h
+++ /dev/null
@@ -1,56 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0 */
-/*
- * Copyright (c) 2020 Yangtao Li <frank@allwinnertech.com>
- */
-
-#ifndef _CCU_SUN50I_A100_H_
-#define _CCU_SUN50I_A100_H_
-
-#include <dt-bindings/clock/sun50i-a100-ccu.h>
-#include <dt-bindings/reset/sun50i-a100-ccu.h>
-
-#define CLK_OSC12M		0
-#define CLK_PLL_CPUX		1
-#define CLK_PLL_DDR0		2
-
-/* PLL_PERIPH0 exported for PRCM */
-
-#define CLK_PLL_PERIPH0_2X	4
-#define CLK_PLL_PERIPH1		5
-#define CLK_PLL_PERIPH1_2X	6
-#define CLK_PLL_GPU		7
-#define CLK_PLL_VIDEO0		8
-#define CLK_PLL_VIDEO0_2X	9
-#define CLK_PLL_VIDEO0_4X	10
-#define CLK_PLL_VIDEO1		11
-#define CLK_PLL_VIDEO1_2X	12
-#define CLK_PLL_VIDEO1_4X	13
-#define CLK_PLL_VIDEO2		14
-#define CLK_PLL_VIDEO2_2X	15
-#define CLK_PLL_VIDEO2_4X	16
-#define CLK_PLL_VIDEO3		17
-#define CLK_PLL_VIDEO3_2X	18
-#define CLK_PLL_VIDEO3_4X	19
-#define CLK_PLL_VE		20
-#define CLK_PLL_COM		21
-#define CLK_PLL_COM_AUDIO	22
-#define CLK_PLL_AUDIO		23
-
-/* CPUX clock exported for DVFS */
-
-#define CLK_AXI			25
-#define CLK_CPUX_APB		26
-#define CLK_PSI_AHB1_AHB2	27
-#define CLK_AHB3		28
-
-/* APB1 clock exported for PIO */
-
-#define CLK_APB2		30
-
-/* All module clocks and bus gates are exported except DRAM */
-
-#define CLK_BUS_DRAM		58
-
-#define CLK_NUMBER		(CLK_CSI_ISP + 1)
-
-#endif /* _CCU_SUN50I_A100_H_ */
diff --git a/drivers/clk/sunxi-ng/ccu-sun50i-a64.c b/drivers/clk/sunxi-ng/ccu-sun50i-a64.c
deleted file mode 100644
index fcbd914e84e0..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun50i-a64.c
+++ /dev/null
@@ -1,985 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-only
-/*
- * Copyright (c) 2016 Maxime Ripard. All rights reserved.
- */
-
-#include <linux/clk-provider.h>
-#include <linux/io.h>
-#include <linux/of_address.h>
-#include <linux/platform_device.h>
-
-#include "ccu_common.h"
-#include "ccu_reset.h"
-
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_mp.h"
-#include "ccu_mult.h"
-#include "ccu_nk.h"
-#include "ccu_nkm.h"
-#include "ccu_nkmp.h"
-#include "ccu_nm.h"
-#include "ccu_phase.h"
-
-#include "ccu-sun50i-a64.h"
-
-static struct ccu_nkmp pll_cpux_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT(8, 5),
-	.k		= _SUNXI_CCU_MULT(4, 2),
-	.m		= _SUNXI_CCU_DIV(0, 2),
-	.p		= _SUNXI_CCU_DIV_MAX(16, 2, 4),
-	.common		= {
-		.reg		= 0x000,
-		.hw.init	= CLK_HW_INIT("pll-cpux",
-					      "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-/*
- * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
- * the base (2x, 4x and 8x), and one variable divider (the one true
- * pll audio).
- *
- * With sigma-delta modulation for fractional-N on the audio PLL,
- * we have to use specific dividers. This means the variable divider
- * can no longer be used, as the audio codec requests the exact clock
- * rates we support through this mechanism. So we now hard code the
- * variable divider to 1. This means the clock rates will no longer
- * match the clock names.
- */
-#define SUN50I_A64_PLL_AUDIO_REG	0x008
-
-static struct ccu_sdm_setting pll_audio_sdm_table[] = {
-	{ .rate = 22579200, .pattern = 0xc0010d84, .m = 8, .n = 7 },
-	{ .rate = 24576000, .pattern = 0xc000ac02, .m = 14, .n = 14 },
-};
-
-static SUNXI_CCU_NM_WITH_SDM_GATE_LOCK(pll_audio_base_clk, "pll-audio-base",
-				       "osc24M", 0x008,
-				       8, 7,	/* N */
-				       0, 5,	/* M */
-				       pll_audio_sdm_table, BIT(24),
-				       0x284, BIT(31),
-				       BIT(31),	/* gate */
-				       BIT(28),	/* lock */
-				       CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK_MIN_MAX(pll_video0_clk, "pll-video0",
-						"osc24M", 0x010,
-						192000000,	/* Minimum rate */
-						1008000000,	/* Maximum rate */
-						8, 7,		/* N */
-						0, 4,		/* M */
-						BIT(24),	/* frac enable */
-						BIT(25),	/* frac select */
-						270000000,	/* frac rate 0 */
-						297000000,	/* frac rate 1 */
-						BIT(31),	/* gate */
-						BIT(28),	/* lock */
-						CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_ve_clk, "pll-ve",
-					"osc24M", 0x018,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_ddr0_clk, "pll-ddr0",
-				    "osc24M", 0x020,
-				    8, 5,	/* N */
-				    4, 2,	/* K */
-				    0, 2,	/* M */
-				    BIT(31),	/* gate */
-				    BIT(28),	/* lock */
-				    CLK_SET_RATE_UNGATE);
-
-static struct ccu_nk pll_periph0_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT(8, 5),
-	.k		= _SUNXI_CCU_MULT_MIN(4, 2, 2),
-	.fixed_post_div	= 2,
-	.common		= {
-		.reg		= 0x028,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-periph0", "osc24M",
-					      &ccu_nk_ops, CLK_SET_RATE_UNGATE),
-	},
-};
-
-static struct ccu_nk pll_periph1_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT(8, 5),
-	.k		= _SUNXI_CCU_MULT_MIN(4, 2, 2),
-	.fixed_post_div	= 2,
-	.common		= {
-		.reg		= 0x02c,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-periph1", "osc24M",
-					      &ccu_nk_ops, CLK_SET_RATE_UNGATE),
-	},
-};
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK_MIN_MAX(pll_video1_clk, "pll-video1",
-						"osc24M", 0x030,
-						192000000,	/* Minimum rate */
-						1008000000,	/* Maximum rate */
-						8, 7,		/* N */
-						0, 4,		/* M */
-						BIT(24),	/* frac enable */
-						BIT(25),	/* frac select */
-						270000000,	/* frac rate 0 */
-						297000000,	/* frac rate 1 */
-						BIT(31),	/* gate */
-						BIT(28),	/* lock */
-						CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_gpu_clk, "pll-gpu",
-					"osc24M", 0x038,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-/*
- * The output function can be changed to something more complex that
- * we do not handle yet.
- *
- * Hardcode the mode so that we don't fall in that case.
- */
-#define SUN50I_A64_PLL_MIPI_REG		0x040
-
-static struct ccu_nkm pll_mipi_clk = {
-	/*
-	 * The bit 23 and 22 are called "LDO{1,2}_EN" on the SoC's
-	 * user manual, and by experiments the PLL doesn't work without
-	 * these bits toggled.
-	 */
-	.enable		= BIT(31) | BIT(23) | BIT(22),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT(8, 4),
-	.k		= _SUNXI_CCU_MULT_MIN(4, 2, 2),
-	.m		= _SUNXI_CCU_DIV(0, 4),
-	.common		= {
-		.reg		= 0x040,
-		.hw.init	= CLK_HW_INIT("pll-mipi", "pll-video0",
-					      &ccu_nkm_ops, CLK_SET_RATE_UNGATE),
-	},
-};
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_hsic_clk, "pll-hsic",
-					"osc24M", 0x044,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_de_clk, "pll-de",
-					"osc24M", 0x048,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_GATE_LOCK(pll_ddr1_clk, "pll-ddr1",
-				   "osc24M", 0x04c,
-				   8, 7,	/* N */
-				   0, 2,	/* M */
-				   BIT(31),	/* gate */
-				   BIT(28),	/* lock */
-				   CLK_SET_RATE_UNGATE);
-
-static const char * const cpux_parents[] = { "osc32k", "osc24M",
-					     "pll-cpux", "pll-cpux" };
-static SUNXI_CCU_MUX(cpux_clk, "cpux", cpux_parents,
-		     0x050, 16, 2, CLK_SET_RATE_PARENT | CLK_IS_CRITICAL);
-
-static SUNXI_CCU_M(axi_clk, "axi", "cpux", 0x050, 0, 2, 0);
-
-static const char * const ahb1_parents[] = { "osc32k", "osc24M",
-					     "axi", "pll-periph0" };
-static const struct ccu_mux_var_prediv ahb1_predivs[] = {
-	{ .index = 3, .shift = 6, .width = 2 },
-};
-static struct ccu_div ahb1_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
-
-	.mux		= {
-		.shift	= 12,
-		.width	= 2,
-
-		.var_predivs	= ahb1_predivs,
-		.n_var_predivs	= ARRAY_SIZE(ahb1_predivs),
-	},
-
-	.common		= {
-		.reg		= 0x054,
-		.features	= CCU_FEATURE_VARIABLE_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("ahb1",
-						      ahb1_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static struct clk_div_table apb1_div_table[] = {
-	{ .val = 0, .div = 2 },
-	{ .val = 1, .div = 2 },
-	{ .val = 2, .div = 4 },
-	{ .val = 3, .div = 8 },
-	{ /* Sentinel */ },
-};
-static SUNXI_CCU_DIV_TABLE(apb1_clk, "apb1", "ahb1",
-			   0x054, 8, 2, apb1_div_table, 0);
-
-static const char * const apb2_parents[] = { "osc32k", "osc24M",
-					     "pll-periph0-2x",
-					     "pll-periph0-2x" };
-static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", apb2_parents, 0x058,
-			     0, 5,	/* M */
-			     16, 2,	/* P */
-			     24, 2,	/* mux */
-			     0);
-
-static const char * const ahb2_parents[] = { "ahb1", "pll-periph0" };
-static const struct ccu_mux_fixed_prediv ahb2_fixed_predivs[] = {
-	{ .index = 1, .div = 2 },
-};
-static struct ccu_mux ahb2_clk = {
-	.mux		= {
-		.shift	= 0,
-		.width	= 1,
-		.fixed_predivs	= ahb2_fixed_predivs,
-		.n_predivs	= ARRAY_SIZE(ahb2_fixed_predivs),
-	},
-
-	.common		= {
-		.reg		= 0x05c,
-		.features	= CCU_FEATURE_FIXED_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("ahb2",
-						      ahb2_parents,
-						      &ccu_mux_ops,
-						      0),
-	},
-};
-
-static SUNXI_CCU_GATE(bus_mipi_dsi_clk,	"bus-mipi-dsi",	"ahb1",
-		      0x060, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_ce_clk,	"bus-ce",	"ahb1",
-		      0x060, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_dma_clk,	"bus-dma",	"ahb1",
-		      0x060, BIT(6), 0);
-static SUNXI_CCU_GATE(bus_mmc0_clk,	"bus-mmc0",	"ahb1",
-		      0x060, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_mmc1_clk,	"bus-mmc1",	"ahb1",
-		      0x060, BIT(9), 0);
-static SUNXI_CCU_GATE(bus_mmc2_clk,	"bus-mmc2",	"ahb1",
-		      0x060, BIT(10), 0);
-static SUNXI_CCU_GATE(bus_nand_clk,	"bus-nand",	"ahb1",
-		      0x060, BIT(13), 0);
-static SUNXI_CCU_GATE(bus_dram_clk,	"bus-dram",	"ahb1",
-		      0x060, BIT(14), 0);
-static SUNXI_CCU_GATE(bus_emac_clk,	"bus-emac",	"ahb2",
-		      0x060, BIT(17), 0);
-static SUNXI_CCU_GATE(bus_ts_clk,	"bus-ts",	"ahb1",
-		      0x060, BIT(18), 0);
-static SUNXI_CCU_GATE(bus_hstimer_clk,	"bus-hstimer",	"ahb1",
-		      0x060, BIT(19), 0);
-static SUNXI_CCU_GATE(bus_spi0_clk,	"bus-spi0",	"ahb1",
-		      0x060, BIT(20), 0);
-static SUNXI_CCU_GATE(bus_spi1_clk,	"bus-spi1",	"ahb1",
-		      0x060, BIT(21), 0);
-static SUNXI_CCU_GATE(bus_otg_clk,	"bus-otg",	"ahb1",
-		      0x060, BIT(23), 0);
-static SUNXI_CCU_GATE(bus_ehci0_clk,	"bus-ehci0",	"ahb1",
-		      0x060, BIT(24), 0);
-static SUNXI_CCU_GATE(bus_ehci1_clk,	"bus-ehci1",	"ahb2",
-		      0x060, BIT(25), 0);
-static SUNXI_CCU_GATE(bus_ohci0_clk,	"bus-ohci0",	"ahb1",
-		      0x060, BIT(28), 0);
-static SUNXI_CCU_GATE(bus_ohci1_clk,	"bus-ohci1",	"ahb2",
-		      0x060, BIT(29), 0);
-
-static SUNXI_CCU_GATE(bus_ve_clk,	"bus-ve",	"ahb1",
-		      0x064, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_tcon0_clk,	"bus-tcon0",	"ahb1",
-		      0x064, BIT(3), 0);
-static SUNXI_CCU_GATE(bus_tcon1_clk,	"bus-tcon1",	"ahb1",
-		      0x064, BIT(4), 0);
-static SUNXI_CCU_GATE(bus_deinterlace_clk,	"bus-deinterlace",	"ahb1",
-		      0x064, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_csi_clk,	"bus-csi",	"ahb1",
-		      0x064, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_hdmi_clk,	"bus-hdmi",	"ahb1",
-		      0x064, BIT(11), 0);
-static SUNXI_CCU_GATE(bus_de_clk,	"bus-de",	"ahb1",
-		      0x064, BIT(12), 0);
-static SUNXI_CCU_GATE(bus_gpu_clk,	"bus-gpu",	"ahb1",
-		      0x064, BIT(20), 0);
-static SUNXI_CCU_GATE(bus_msgbox_clk,	"bus-msgbox",	"ahb1",
-		      0x064, BIT(21), 0);
-static SUNXI_CCU_GATE(bus_spinlock_clk,	"bus-spinlock",	"ahb1",
-		      0x064, BIT(22), 0);
-
-static SUNXI_CCU_GATE(bus_codec_clk,	"bus-codec",	"apb1",
-		      0x068, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_spdif_clk,	"bus-spdif",	"apb1",
-		      0x068, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_pio_clk,	"bus-pio",	"apb1",
-		      0x068, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_ths_clk,	"bus-ths",	"apb1",
-		      0x068, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_i2s0_clk,	"bus-i2s0",	"apb1",
-		      0x068, BIT(12), 0);
-static SUNXI_CCU_GATE(bus_i2s1_clk,	"bus-i2s1",	"apb1",
-		      0x068, BIT(13), 0);
-static SUNXI_CCU_GATE(bus_i2s2_clk,	"bus-i2s2",	"apb1",
-		      0x068, BIT(14), 0);
-
-static SUNXI_CCU_GATE(bus_i2c0_clk,	"bus-i2c0",	"apb2",
-		      0x06c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_i2c1_clk,	"bus-i2c1",	"apb2",
-		      0x06c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_i2c2_clk,	"bus-i2c2",	"apb2",
-		      0x06c, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_scr_clk,	"bus-scr",	"apb2",
-		      0x06c, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_uart0_clk,	"bus-uart0",	"apb2",
-		      0x06c, BIT(16), 0);
-static SUNXI_CCU_GATE(bus_uart1_clk,	"bus-uart1",	"apb2",
-		      0x06c, BIT(17), 0);
-static SUNXI_CCU_GATE(bus_uart2_clk,	"bus-uart2",	"apb2",
-		      0x06c, BIT(18), 0);
-static SUNXI_CCU_GATE(bus_uart3_clk,	"bus-uart3",	"apb2",
-		      0x06c, BIT(19), 0);
-static SUNXI_CCU_GATE(bus_uart4_clk,	"bus-uart4",	"apb2",
-		      0x06c, BIT(20), 0);
-
-static SUNXI_CCU_GATE(bus_dbg_clk,	"bus-dbg",	"ahb1",
-		      0x070, BIT(7), 0);
-
-static struct clk_div_table ths_div_table[] = {
-	{ .val = 0, .div = 1 },
-	{ .val = 1, .div = 2 },
-	{ .val = 2, .div = 4 },
-	{ .val = 3, .div = 6 },
-	{ /* Sentinel */ },
-};
-static const char * const ths_parents[] = { "osc24M" };
-static struct ccu_div ths_clk = {
-	.enable	= BIT(31),
-	.div	= _SUNXI_CCU_DIV_TABLE(0, 2, ths_div_table),
-	.mux	= _SUNXI_CCU_MUX(24, 2),
-	.common	= {
-		.reg		= 0x074,
-		.hw.init	= CLK_HW_INIT_PARENTS("ths",
-						      ths_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static const char * const mod0_default_parents[] = { "osc24M", "pll-periph0",
-						     "pll-periph1" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand_clk, "nand", mod0_default_parents, 0x080,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-/*
- * MMC clocks are the new timing mode (see A83T & H3) variety, but without
- * the mode switch. This means they have a 2x post divider between the clock
- * and the MMC module. This is not documented in the manual, but is taken
- * into consideration when setting the mmc module clocks in the BSP kernel.
- * Without it, MMC performance is degraded.
- *
- * We model it here to be consistent with other SoCs supporting this mode.
- * The alternative would be to add the 2x multiplier when setting the MMC
- * module clock in the MMC driver, just for the A64.
- */
-static const char * const mmc_default_parents[] = { "osc24M", "pll-periph0-2x",
-						    "pll-periph1-2x" };
-static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc0_clk, "mmc0",
-					  mmc_default_parents, 0x088,
-					  0, 4,		/* M */
-					  16, 2,	/* P */
-					  24, 2,	/* mux */
-					  BIT(31),	/* gate */
-					  2,		/* post-div */
-					  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc1_clk, "mmc1",
-					  mmc_default_parents, 0x08c,
-					  0, 4,		/* M */
-					  16, 2,	/* P */
-					  24, 2,	/* mux */
-					  BIT(31),	/* gate */
-					  2,		/* post-div */
-					  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc2_clk, "mmc2",
-					  mmc_default_parents, 0x090,
-					  0, 4,		/* M */
-					  16, 2,	/* P */
-					  24, 2,	/* mux */
-					  BIT(31),	/* gate */
-					  2,		/* post-div */
-					  0);
-
-static const char * const ts_parents[] = { "osc24M", "pll-periph0", };
-static SUNXI_CCU_MP_WITH_MUX_GATE(ts_clk, "ts", ts_parents, 0x098,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 4,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(ce_clk, "ce", mmc_default_parents, 0x09c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents, 0x0a0,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents, 0x0a4,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static const char * const i2s_parents[] = { "pll-audio-8x", "pll-audio-4x",
-					    "pll-audio-2x", "pll-audio" };
-static SUNXI_CCU_MUX_WITH_GATE(i2s0_clk, "i2s0", i2s_parents,
-			       0x0b0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_MUX_WITH_GATE(i2s1_clk, "i2s1", i2s_parents,
-			       0x0b4, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_MUX_WITH_GATE(i2s2_clk, "i2s2", i2s_parents,
-			       0x0b8, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M_WITH_GATE(spdif_clk, "spdif", "pll-audio",
-			     0x0c0, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"osc24M",
-		      0x0cc, BIT(8), 0);
-static SUNXI_CCU_GATE(usb_phy1_clk,	"usb-phy1",	"osc24M",
-		      0x0cc, BIT(9), 0);
-static SUNXI_CCU_GATE(usb_hsic_clk,	"usb-hsic",	"pll-hsic",
-		      0x0cc, BIT(10), 0);
-static SUNXI_CCU_GATE(usb_hsic_12m_clk,	"usb-hsic-12M",	"osc12M",
-		      0x0cc, BIT(11), 0);
-static SUNXI_CCU_GATE(usb_ohci0_clk,	"usb-ohci0",	"osc12M",
-		      0x0cc, BIT(16), 0);
-static SUNXI_CCU_GATE(usb_ohci1_clk,	"usb-ohci1",	"usb-ohci0",
-		      0x0cc, BIT(17), 0);
-
-static const char * const dram_parents[] = { "pll-ddr0", "pll-ddr1" };
-static SUNXI_CCU_M_WITH_MUX(dram_clk, "dram", dram_parents,
-			    0x0f4, 0, 4, 20, 2, CLK_IS_CRITICAL);
-
-static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"dram",
-		      0x100, BIT(0), 0);
-static SUNXI_CCU_GATE(dram_csi_clk,	"dram-csi",	"dram",
-		      0x100, BIT(1), 0);
-static SUNXI_CCU_GATE(dram_deinterlace_clk,	"dram-deinterlace",	"dram",
-		      0x100, BIT(2), 0);
-static SUNXI_CCU_GATE(dram_ts_clk,	"dram-ts",	"dram",
-		      0x100, BIT(3), 0);
-
-static const char * const de_parents[] = { "pll-periph0-2x", "pll-de" };
-static SUNXI_CCU_M_WITH_MUX_GATE(de_clk, "de", de_parents,
-				 0x104, 0, 4, 24, 3, BIT(31),
-				 CLK_SET_RATE_PARENT);
-
-static const char * const tcon0_parents[] = { "pll-mipi", "pll-video0-2x" };
-static const u8 tcon0_table[] = { 0, 2, };
-static SUNXI_CCU_MUX_TABLE_WITH_GATE(tcon0_clk, "tcon0", tcon0_parents,
-				     tcon0_table, 0x118, 24, 3, BIT(31),
-				     CLK_SET_RATE_PARENT);
-
-static const char * const tcon1_parents[] = { "pll-video0", "pll-video1" };
-static const u8 tcon1_table[] = { 0, 2, };
-static struct ccu_div tcon1_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV(0, 4),
-	.mux		= _SUNXI_CCU_MUX_TABLE(24, 2, tcon1_table),
-	.common		= {
-		.reg		= 0x11c,
-		.hw.init	= CLK_HW_INIT_PARENTS("tcon1",
-						      tcon1_parents,
-						      &ccu_div_ops,
-						      CLK_SET_RATE_PARENT),
-	},
-};
-
-static const char * const deinterlace_parents[] = { "pll-periph0", "pll-periph1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(deinterlace_clk, "deinterlace", deinterlace_parents,
-				 0x124, 0, 4, 24, 3, BIT(31), 0);
-
-static SUNXI_CCU_GATE(csi_misc_clk,	"csi-misc",	"osc24M",
-		      0x130, BIT(31), 0);
-
-static const char * const csi_sclk_parents[] = { "pll-periph0", "pll-periph1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(csi_sclk_clk, "csi-sclk", csi_sclk_parents,
-				 0x134, 16, 4, 24, 3, BIT(31), 0);
-
-static const char * const csi_mclk_parents[] = { "osc24M", "pll-video1", "pll-periph1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(csi_mclk_clk, "csi-mclk", csi_mclk_parents,
-				 0x134, 0, 5, 8, 3, BIT(15), 0);
-
-static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve",
-			     0x13c, 16, 3, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(ac_dig_clk,	"ac-dig",	"pll-audio",
-		      0x140, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(ac_dig_4x_clk,	"ac-dig-4x",	"pll-audio-4x",
-		      0x140, BIT(30), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(avs_clk,		"avs",		"osc24M",
-		      0x144, BIT(31), 0);
-
-static const char * const hdmi_parents[] = { "pll-video0", "pll-video1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(hdmi_clk, "hdmi", hdmi_parents,
-				 0x150, 0, 4, 24, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(hdmi_ddc_clk,	"hdmi-ddc",	"osc24M",
-		      0x154, BIT(31), 0);
-
-static const char * const mbus_parents[] = { "osc24M", "pll-periph0-2x",
-						 "pll-ddr0", "pll-ddr1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents,
-				 0x15c, 0, 3, 24, 2, BIT(31), CLK_IS_CRITICAL);
-
-static const char * const dsi_dphy_parents[] = { "pll-video0", "pll-periph0" };
-static const u8 dsi_dphy_table[] = { 0, 2, };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(dsi_dphy_clk, "dsi-dphy",
-				       dsi_dphy_parents, dsi_dphy_table,
-				       0x168, 0, 4, 8, 2, BIT(15), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M_WITH_GATE(gpu_clk, "gpu", "pll-gpu",
-			     0x1a0, 0, 3, BIT(31), CLK_SET_RATE_PARENT);
-
-/* Fixed Factor clocks */
-static CLK_FIXED_FACTOR_FW_NAME(osc12M_clk, "osc12M", "hosc", 2, 1, 0);
-
-static const struct clk_hw *clk_parent_pll_audio[] = {
-	&pll_audio_base_clk.common.hw
-};
-
-/* We hardcode the divider to 1 for now */
-static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
-			    clk_parent_pll_audio,
-			    1, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
-			    clk_parent_pll_audio,
-			    2, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
-			    clk_parent_pll_audio,
-			    1, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
-			    clk_parent_pll_audio,
-			    1, 2, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HW(pll_periph0_2x_clk, "pll-periph0-2x",
-			   &pll_periph0_clk.common.hw,
-			   1, 2, 0);
-static CLK_FIXED_FACTOR_HW(pll_periph1_2x_clk, "pll-periph1-2x",
-			   &pll_periph1_clk.common.hw,
-			   1, 2, 0);
-static CLK_FIXED_FACTOR_HW(pll_video0_2x_clk, "pll-video0-2x",
-			   &pll_video0_clk.common.hw,
-			   1, 2, CLK_SET_RATE_PARENT);
-
-static struct ccu_common *sun50i_a64_ccu_clks[] = {
-	&pll_cpux_clk.common,
-	&pll_audio_base_clk.common,
-	&pll_video0_clk.common,
-	&pll_ve_clk.common,
-	&pll_ddr0_clk.common,
-	&pll_periph0_clk.common,
-	&pll_periph1_clk.common,
-	&pll_video1_clk.common,
-	&pll_gpu_clk.common,
-	&pll_mipi_clk.common,
-	&pll_hsic_clk.common,
-	&pll_de_clk.common,
-	&pll_ddr1_clk.common,
-	&cpux_clk.common,
-	&axi_clk.common,
-	&ahb1_clk.common,
-	&apb1_clk.common,
-	&apb2_clk.common,
-	&ahb2_clk.common,
-	&bus_mipi_dsi_clk.common,
-	&bus_ce_clk.common,
-	&bus_dma_clk.common,
-	&bus_mmc0_clk.common,
-	&bus_mmc1_clk.common,
-	&bus_mmc2_clk.common,
-	&bus_nand_clk.common,
-	&bus_dram_clk.common,
-	&bus_emac_clk.common,
-	&bus_ts_clk.common,
-	&bus_hstimer_clk.common,
-	&bus_spi0_clk.common,
-	&bus_spi1_clk.common,
-	&bus_otg_clk.common,
-	&bus_ehci0_clk.common,
-	&bus_ehci1_clk.common,
-	&bus_ohci0_clk.common,
-	&bus_ohci1_clk.common,
-	&bus_ve_clk.common,
-	&bus_tcon0_clk.common,
-	&bus_tcon1_clk.common,
-	&bus_deinterlace_clk.common,
-	&bus_csi_clk.common,
-	&bus_hdmi_clk.common,
-	&bus_de_clk.common,
-	&bus_gpu_clk.common,
-	&bus_msgbox_clk.common,
-	&bus_spinlock_clk.common,
-	&bus_codec_clk.common,
-	&bus_spdif_clk.common,
-	&bus_pio_clk.common,
-	&bus_ths_clk.common,
-	&bus_i2s0_clk.common,
-	&bus_i2s1_clk.common,
-	&bus_i2s2_clk.common,
-	&bus_i2c0_clk.common,
-	&bus_i2c1_clk.common,
-	&bus_i2c2_clk.common,
-	&bus_scr_clk.common,
-	&bus_uart0_clk.common,
-	&bus_uart1_clk.common,
-	&bus_uart2_clk.common,
-	&bus_uart3_clk.common,
-	&bus_uart4_clk.common,
-	&bus_dbg_clk.common,
-	&ths_clk.common,
-	&nand_clk.common,
-	&mmc0_clk.common,
-	&mmc1_clk.common,
-	&mmc2_clk.common,
-	&ts_clk.common,
-	&ce_clk.common,
-	&spi0_clk.common,
-	&spi1_clk.common,
-	&i2s0_clk.common,
-	&i2s1_clk.common,
-	&i2s2_clk.common,
-	&spdif_clk.common,
-	&usb_phy0_clk.common,
-	&usb_phy1_clk.common,
-	&usb_hsic_clk.common,
-	&usb_hsic_12m_clk.common,
-	&usb_ohci0_clk.common,
-	&usb_ohci1_clk.common,
-	&dram_clk.common,
-	&dram_ve_clk.common,
-	&dram_csi_clk.common,
-	&dram_deinterlace_clk.common,
-	&dram_ts_clk.common,
-	&de_clk.common,
-	&tcon0_clk.common,
-	&tcon1_clk.common,
-	&deinterlace_clk.common,
-	&csi_misc_clk.common,
-	&csi_sclk_clk.common,
-	&csi_mclk_clk.common,
-	&ve_clk.common,
-	&ac_dig_clk.common,
-	&ac_dig_4x_clk.common,
-	&avs_clk.common,
-	&hdmi_clk.common,
-	&hdmi_ddc_clk.common,
-	&mbus_clk.common,
-	&dsi_dphy_clk.common,
-	&gpu_clk.common,
-};
-
-static struct clk_hw_onecell_data sun50i_a64_hw_clks = {
-	.hws	= {
-		[CLK_OSC_12M]		= &osc12M_clk.hw,
-		[CLK_PLL_CPUX]		= &pll_cpux_clk.common.hw,
-		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
-		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
-		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
-		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
-		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
-		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
-		[CLK_PLL_VIDEO0_2X]	= &pll_video0_2x_clk.hw,
-		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
-		[CLK_PLL_DDR0]		= &pll_ddr0_clk.common.hw,
-		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
-		[CLK_PLL_PERIPH0_2X]	= &pll_periph0_2x_clk.hw,
-		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
-		[CLK_PLL_PERIPH1_2X]	= &pll_periph1_2x_clk.hw,
-		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
-		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
-		[CLK_PLL_MIPI]  	= &pll_mipi_clk.common.hw,
-		[CLK_PLL_HSIC]		= &pll_hsic_clk.common.hw,
-		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
-		[CLK_PLL_DDR1]		= &pll_ddr1_clk.common.hw,
-		[CLK_CPUX]		= &cpux_clk.common.hw,
-		[CLK_AXI]		= &axi_clk.common.hw,
-		[CLK_AHB1]		= &ahb1_clk.common.hw,
-		[CLK_APB1]		= &apb1_clk.common.hw,
-		[CLK_APB2]		= &apb2_clk.common.hw,
-		[CLK_AHB2]		= &ahb2_clk.common.hw,
-		[CLK_BUS_MIPI_DSI]	= &bus_mipi_dsi_clk.common.hw,
-		[CLK_BUS_CE]		= &bus_ce_clk.common.hw,
-		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
-		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
-		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
-		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
-		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
-		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
-		[CLK_BUS_EMAC]		= &bus_emac_clk.common.hw,
-		[CLK_BUS_TS]		= &bus_ts_clk.common.hw,
-		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
-		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
-		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
-		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
-		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
-		[CLK_BUS_EHCI1]		= &bus_ehci1_clk.common.hw,
-		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
-		[CLK_BUS_OHCI1]		= &bus_ohci1_clk.common.hw,
-		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
-		[CLK_BUS_TCON0]		= &bus_tcon0_clk.common.hw,
-		[CLK_BUS_TCON1]		= &bus_tcon1_clk.common.hw,
-		[CLK_BUS_DEINTERLACE]	= &bus_deinterlace_clk.common.hw,
-		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
-		[CLK_BUS_HDMI]		= &bus_hdmi_clk.common.hw,
-		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
-		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
-		[CLK_BUS_MSGBOX]	= &bus_msgbox_clk.common.hw,
-		[CLK_BUS_SPINLOCK]	= &bus_spinlock_clk.common.hw,
-		[CLK_BUS_CODEC]		= &bus_codec_clk.common.hw,
-		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
-		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
-		[CLK_BUS_THS]		= &bus_ths_clk.common.hw,
-		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
-		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
-		[CLK_BUS_I2S2]		= &bus_i2s2_clk.common.hw,
-		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
-		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
-		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
-		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
-		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
-		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
-		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
-		[CLK_BUS_UART4]		= &bus_uart4_clk.common.hw,
-		[CLK_BUS_SCR]		= &bus_scr_clk.common.hw,
-		[CLK_BUS_DBG]		= &bus_dbg_clk.common.hw,
-		[CLK_THS]		= &ths_clk.common.hw,
-		[CLK_NAND]		= &nand_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC2]		= &mmc2_clk.common.hw,
-		[CLK_TS]		= &ts_clk.common.hw,
-		[CLK_CE]		= &ce_clk.common.hw,
-		[CLK_SPI0]		= &spi0_clk.common.hw,
-		[CLK_SPI1]		= &spi1_clk.common.hw,
-		[CLK_I2S0]		= &i2s0_clk.common.hw,
-		[CLK_I2S1]		= &i2s1_clk.common.hw,
-		[CLK_I2S2]		= &i2s2_clk.common.hw,
-		[CLK_SPDIF]		= &spdif_clk.common.hw,
-		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
-		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
-		[CLK_USB_HSIC]		= &usb_hsic_clk.common.hw,
-		[CLK_USB_HSIC_12M]	= &usb_hsic_12m_clk.common.hw,
-		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
-		[CLK_USB_OHCI1]		= &usb_ohci1_clk.common.hw,
-		[CLK_DRAM]		= &dram_clk.common.hw,
-		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
-		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
-		[CLK_DRAM_DEINTERLACE]	= &dram_deinterlace_clk.common.hw,
-		[CLK_DRAM_TS]		= &dram_ts_clk.common.hw,
-		[CLK_DE]		= &de_clk.common.hw,
-		[CLK_TCON0]		= &tcon0_clk.common.hw,
-		[CLK_TCON1]		= &tcon1_clk.common.hw,
-		[CLK_DEINTERLACE]	= &deinterlace_clk.common.hw,
-		[CLK_CSI_MISC]		= &csi_misc_clk.common.hw,
-		[CLK_CSI_SCLK]		= &csi_sclk_clk.common.hw,
-		[CLK_CSI_MCLK]		= &csi_mclk_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_AC_DIG]		= &ac_dig_clk.common.hw,
-		[CLK_AC_DIG_4X]		= &ac_dig_4x_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-		[CLK_HDMI]		= &hdmi_clk.common.hw,
-		[CLK_HDMI_DDC]		= &hdmi_ddc_clk.common.hw,
-		[CLK_MBUS]		= &mbus_clk.common.hw,
-		[CLK_DSI_DPHY]		= &dsi_dphy_clk.common.hw,
-		[CLK_GPU]		= &gpu_clk.common.hw,
-	},
-	.num	= CLK_NUMBER,
-};
-
-static struct ccu_reset_map sun50i_a64_ccu_resets[] = {
-	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
-	[RST_USB_PHY1]		=  { 0x0cc, BIT(1) },
-	[RST_USB_HSIC]		=  { 0x0cc, BIT(2) },
-
-	[RST_DRAM]		=  { 0x0f4, BIT(31) },
-	[RST_MBUS]		=  { 0x0fc, BIT(31) },
-
-	[RST_BUS_MIPI_DSI]	=  { 0x2c0, BIT(1) },
-	[RST_BUS_CE]		=  { 0x2c0, BIT(5) },
-	[RST_BUS_DMA]		=  { 0x2c0, BIT(6) },
-	[RST_BUS_MMC0]		=  { 0x2c0, BIT(8) },
-	[RST_BUS_MMC1]		=  { 0x2c0, BIT(9) },
-	[RST_BUS_MMC2]		=  { 0x2c0, BIT(10) },
-	[RST_BUS_NAND]		=  { 0x2c0, BIT(13) },
-	[RST_BUS_DRAM]		=  { 0x2c0, BIT(14) },
-	[RST_BUS_EMAC]		=  { 0x2c0, BIT(17) },
-	[RST_BUS_TS]		=  { 0x2c0, BIT(18) },
-	[RST_BUS_HSTIMER]	=  { 0x2c0, BIT(19) },
-	[RST_BUS_SPI0]		=  { 0x2c0, BIT(20) },
-	[RST_BUS_SPI1]		=  { 0x2c0, BIT(21) },
-	[RST_BUS_OTG]		=  { 0x2c0, BIT(23) },
-	[RST_BUS_EHCI0]		=  { 0x2c0, BIT(24) },
-	[RST_BUS_EHCI1]		=  { 0x2c0, BIT(25) },
-	[RST_BUS_OHCI0]		=  { 0x2c0, BIT(28) },
-	[RST_BUS_OHCI1]		=  { 0x2c0, BIT(29) },
-
-	[RST_BUS_VE]		=  { 0x2c4, BIT(0) },
-	[RST_BUS_TCON0]		=  { 0x2c4, BIT(3) },
-	[RST_BUS_TCON1]		=  { 0x2c4, BIT(4) },
-	[RST_BUS_DEINTERLACE]	=  { 0x2c4, BIT(5) },
-	[RST_BUS_CSI]		=  { 0x2c4, BIT(8) },
-	[RST_BUS_HDMI0]		=  { 0x2c4, BIT(10) },
-	[RST_BUS_HDMI1]		=  { 0x2c4, BIT(11) },
-	[RST_BUS_DE]		=  { 0x2c4, BIT(12) },
-	[RST_BUS_GPU]		=  { 0x2c4, BIT(20) },
-	[RST_BUS_MSGBOX]	=  { 0x2c4, BIT(21) },
-	[RST_BUS_SPINLOCK]	=  { 0x2c4, BIT(22) },
-	[RST_BUS_DBG]		=  { 0x2c4, BIT(31) },
-
-	[RST_BUS_LVDS]		=  { 0x2c8, BIT(0) },
-
-	[RST_BUS_CODEC]		=  { 0x2d0, BIT(0) },
-	[RST_BUS_SPDIF]		=  { 0x2d0, BIT(1) },
-	[RST_BUS_THS]		=  { 0x2d0, BIT(8) },
-	[RST_BUS_I2S0]		=  { 0x2d0, BIT(12) },
-	[RST_BUS_I2S1]		=  { 0x2d0, BIT(13) },
-	[RST_BUS_I2S2]		=  { 0x2d0, BIT(14) },
-
-	[RST_BUS_I2C0]		=  { 0x2d8, BIT(0) },
-	[RST_BUS_I2C1]		=  { 0x2d8, BIT(1) },
-	[RST_BUS_I2C2]		=  { 0x2d8, BIT(2) },
-	[RST_BUS_SCR]		=  { 0x2d8, BIT(5) },
-	[RST_BUS_UART0]		=  { 0x2d8, BIT(16) },
-	[RST_BUS_UART1]		=  { 0x2d8, BIT(17) },
-	[RST_BUS_UART2]		=  { 0x2d8, BIT(18) },
-	[RST_BUS_UART3]		=  { 0x2d8, BIT(19) },
-	[RST_BUS_UART4]		=  { 0x2d8, BIT(20) },
-};
-
-static const struct sunxi_ccu_desc sun50i_a64_ccu_desc = {
-	.ccu_clks	= sun50i_a64_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun50i_a64_ccu_clks),
-
-	.hw_clks	= &sun50i_a64_hw_clks,
-
-	.resets		= sun50i_a64_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun50i_a64_ccu_resets),
-};
-
-static struct ccu_pll_nb sun50i_a64_pll_cpu_nb = {
-	.common	= &pll_cpux_clk.common,
-	/* copy from pll_cpux_clk */
-	.enable	= BIT(31),
-	.lock	= BIT(28),
-};
-
-static struct ccu_mux_nb sun50i_a64_cpu_nb = {
-	.common		= &cpux_clk.common,
-	.cm		= &cpux_clk.mux,
-	.delay_us	= 1, /* > 8 clock cycles at 24 MHz */
-	.bypass_index	= 1, /* index of 24 MHz oscillator */
-};
-
-static int sun50i_a64_ccu_probe(struct platform_device *pdev)
-{
-	struct resource *res;
-	void __iomem *reg;
-	u32 val;
-	int ret;
-
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	reg = devm_ioremap_resource(&pdev->dev, res);
-	if (IS_ERR(reg))
-		return PTR_ERR(reg);
-
-	/* Force the PLL-Audio-1x divider to 1 */
-	val = readl(reg + SUN50I_A64_PLL_AUDIO_REG);
-	val &= ~GENMASK(19, 16);
-	writel(val | (0 << 16), reg + SUN50I_A64_PLL_AUDIO_REG);
-
-	writel(0x515, reg + SUN50I_A64_PLL_MIPI_REG);
-
-	ret = devm_sunxi_ccu_probe(&pdev->dev, reg, &sun50i_a64_ccu_desc);
-	if (ret)
-		return ret;
-
-	/* Gate then ungate PLL CPU after any rate changes */
-	ccu_pll_notifier_register(&sun50i_a64_pll_cpu_nb);
-
-	/* Reparent CPU during PLL CPU rate changes */
-	ccu_mux_notifier_register(pll_cpux_clk.common.hw.clk,
-				  &sun50i_a64_cpu_nb);
-
-	return 0;
-}
-
-static const struct of_device_id sun50i_a64_ccu_ids[] = {
-	{ .compatible = "allwinner,sun50i-a64-ccu" },
-	{ }
-};
-
-static struct platform_driver sun50i_a64_ccu_driver = {
-	.probe	= sun50i_a64_ccu_probe,
-	.driver	= {
-		.name	= "sun50i-a64-ccu",
-		.suppress_bind_attrs = true,
-		.of_match_table	= sun50i_a64_ccu_ids,
-	},
-};
-builtin_platform_driver(sun50i_a64_ccu_driver);
diff --git a/drivers/clk/sunxi-ng/ccu-sun50i-a64.h b/drivers/clk/sunxi-ng/ccu-sun50i-a64.h
deleted file mode 100644
index 54d1f96f4b68..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun50i-a64.h
+++ /dev/null
@@ -1,62 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0-or-later */
-/*
- * Copyright 2016 Maxime Ripard
- *
- * Maxime Ripard <maxime.ripard@free-electrons.com>
- */
-
-#ifndef _CCU_SUN50I_A64_H_
-#define _CCU_SUN50I_A64_H_
-
-#include <dt-bindings/clock/sun50i-a64-ccu.h>
-#include <dt-bindings/reset/sun50i-a64-ccu.h>
-
-#define CLK_OSC_12M			0
-#define CLK_PLL_CPUX			1
-#define CLK_PLL_AUDIO_BASE		2
-#define CLK_PLL_AUDIO			3
-#define CLK_PLL_AUDIO_2X		4
-#define CLK_PLL_AUDIO_4X		5
-#define CLK_PLL_AUDIO_8X		6
-
-/* PLL_VIDEO0 exported for HDMI PHY */
-
-#define CLK_PLL_VIDEO0_2X		8
-#define CLK_PLL_VE			9
-#define CLK_PLL_DDR0			10
-
-/* PLL_PERIPH0 exported for PRCM */
-
-#define CLK_PLL_PERIPH0_2X		12
-#define CLK_PLL_PERIPH1			13
-#define CLK_PLL_PERIPH1_2X		14
-#define CLK_PLL_VIDEO1			15
-#define CLK_PLL_GPU			16
-#define CLK_PLL_MIPI			17
-#define CLK_PLL_HSIC			18
-#define CLK_PLL_DE			19
-#define CLK_PLL_DDR1			20
-#define CLK_AXI				22
-#define CLK_APB				23
-#define CLK_AHB1			24
-#define CLK_APB1			25
-#define CLK_APB2			26
-#define CLK_AHB2			27
-
-/* All the bus gates are exported */
-
-/* The first bunch of module clocks are exported */
-
-#define CLK_USB_OHCI0_12M		90
-
-#define CLK_USB_OHCI1_12M		92
-
-#define CLK_DRAM			94
-
-/* All the DRAM gates are exported */
-
-/* And the DSI and GPU module clock is exported */
-
-#define CLK_NUMBER			(CLK_GPU + 1)
-
-#endif /* _CCU_SUN50I_A64_H_ */
diff --git a/drivers/clk/sunxi-ng/ccu-sun50i-h6-r.c b/drivers/clk/sunxi-ng/ccu-sun50i-h6-r.c
deleted file mode 100644
index f30d7eb5424d..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun50i-h6-r.c
+++ /dev/null
@@ -1,250 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0
-/*
- * Copyright (c) 2017 Icenowy Zheng <icenowy@aosc.xyz>
- */
-
-#include <linux/clk-provider.h>
-#include <linux/of_address.h>
-#include <linux/platform_device.h>
-
-#include "ccu_common.h"
-#include "ccu_reset.h"
-
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_mp.h"
-#include "ccu_nm.h"
-
-#include "ccu-sun50i-h6-r.h"
-
-/*
- * Information about AR100 and AHB/APB clocks in R_CCU are gathered from
- * clock definitions in the BSP source code.
- */
-
-static const char * const ar100_r_apb2_parents[] = { "osc24M", "osc32k",
-						     "iosc", "pll-periph0" };
-static const struct ccu_mux_var_prediv ar100_r_apb2_predivs[] = {
-	{ .index = 3, .shift = 0, .width = 5 },
-};
-
-static struct ccu_div ar100_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-
-	.mux		= {
-		.shift	= 24,
-		.width	= 2,
-
-		.var_predivs	= ar100_r_apb2_predivs,
-		.n_var_predivs	= ARRAY_SIZE(ar100_r_apb2_predivs),
-	},
-
-	.common		= {
-		.reg		= 0x000,
-		.features	= CCU_FEATURE_VARIABLE_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("ar100",
-						      ar100_r_apb2_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static CLK_FIXED_FACTOR_HW(r_ahb_clk, "r-ahb", &ar100_clk.common.hw, 1, 1, 0);
-
-static SUNXI_CCU_M(r_apb1_clk, "r-apb1", "r-ahb", 0x00c, 0, 2, 0);
-
-static struct ccu_div r_apb2_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-
-	.mux		= {
-		.shift	= 24,
-		.width	= 2,
-
-		.var_predivs	= ar100_r_apb2_predivs,
-		.n_var_predivs	= ARRAY_SIZE(ar100_r_apb2_predivs),
-	},
-
-	.common		= {
-		.reg		= 0x010,
-		.features	= CCU_FEATURE_VARIABLE_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("r-apb2",
-						      ar100_r_apb2_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-/*
- * Information about the gate/resets are gathered from the clock header file
- * in the BSP source code, although most of them are unused. The existence
- * of the hardware block is verified with "3.1 Memory Mapping" chapter in
- * "Allwinner H6 V200 User Manual V1.1"; and the parent APB buses are verified
- * with "3.3.2.1 System Bus Tree" chapter inthe same document.
- */
-static SUNXI_CCU_GATE(r_apb1_timer_clk,	"r-apb1-timer",	"r-apb1",
-		      0x11c, BIT(0), 0);
-static SUNXI_CCU_GATE(r_apb1_twd_clk,	"r-apb1-twd",	"r-apb1",
-		      0x12c, BIT(0), 0);
-static SUNXI_CCU_GATE(r_apb1_pwm_clk,	"r-apb1-pwm",	"r-apb1",
-		      0x13c, BIT(0), 0);
-static SUNXI_CCU_GATE(r_apb2_uart_clk,	"r-apb2-uart",	"r-apb2",
-		      0x18c, BIT(0), 0);
-static SUNXI_CCU_GATE(r_apb2_i2c_clk,	"r-apb2-i2c",	"r-apb2",
-		      0x19c, BIT(0), 0);
-static SUNXI_CCU_GATE(r_apb2_rsb_clk,	"r-apb2-rsb",	"r-apb2",
-		      0x1bc, BIT(0), 0);
-static SUNXI_CCU_GATE(r_apb1_ir_clk,	"r-apb1-ir",	"r-apb1",
-		      0x1cc, BIT(0), 0);
-static SUNXI_CCU_GATE(r_apb1_w1_clk,	"r-apb1-w1",	"r-apb1",
-		      0x1ec, BIT(0), 0);
-
-/* Information of IR(RX) mod clock is gathered from BSP source code */
-static const char * const r_mod0_default_parents[] = { "osc32k", "osc24M" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(ir_clk, "ir",
-				  r_mod0_default_parents, 0x1c0,
-				  0, 5,		/* M */
-				  8, 2,		/* P */
-				  24, 1,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-/*
- * BSP didn't use the 1-wire function at all now, and the information about
- * this mod clock is guessed from the IR mod clock above. The existence of
- * this mod clock is proven by BSP clock header, and the dividers are verified
- * by contents in the 1-wire related chapter of the User Manual.
- */
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(w1_clk, "w1",
-				  r_mod0_default_parents, 0x1e0,
-				  0, 5,		/* M */
-				  8, 2,		/* P */
-				  24, 1,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static struct ccu_common *sun50i_h6_r_ccu_clks[] = {
-	&ar100_clk.common,
-	&r_apb1_clk.common,
-	&r_apb2_clk.common,
-	&r_apb1_timer_clk.common,
-	&r_apb1_twd_clk.common,
-	&r_apb1_pwm_clk.common,
-	&r_apb2_uart_clk.common,
-	&r_apb2_i2c_clk.common,
-	&r_apb2_rsb_clk.common,
-	&r_apb1_ir_clk.common,
-	&r_apb1_w1_clk.common,
-	&ir_clk.common,
-	&w1_clk.common,
-};
-
-static struct ccu_common *sun50i_h616_r_ccu_clks[] = {
-	&r_apb1_clk.common,
-	&r_apb2_clk.common,
-	&r_apb1_twd_clk.common,
-	&r_apb2_i2c_clk.common,
-	&r_apb2_rsb_clk.common,
-	&r_apb1_ir_clk.common,
-	&ir_clk.common,
-};
-
-static struct clk_hw_onecell_data sun50i_h6_r_hw_clks = {
-	.hws	= {
-		[CLK_AR100]		= &ar100_clk.common.hw,
-		[CLK_R_AHB]		= &r_ahb_clk.hw,
-		[CLK_R_APB1]		= &r_apb1_clk.common.hw,
-		[CLK_R_APB2]		= &r_apb2_clk.common.hw,
-		[CLK_R_APB1_TIMER]	= &r_apb1_timer_clk.common.hw,
-		[CLK_R_APB1_TWD]	= &r_apb1_twd_clk.common.hw,
-		[CLK_R_APB1_PWM]	= &r_apb1_pwm_clk.common.hw,
-		[CLK_R_APB2_UART]	= &r_apb2_uart_clk.common.hw,
-		[CLK_R_APB2_I2C]	= &r_apb2_i2c_clk.common.hw,
-		[CLK_R_APB2_RSB]	= &r_apb2_rsb_clk.common.hw,
-		[CLK_R_APB1_IR]		= &r_apb1_ir_clk.common.hw,
-		[CLK_R_APB1_W1]		= &r_apb1_w1_clk.common.hw,
-		[CLK_IR]		= &ir_clk.common.hw,
-		[CLK_W1]		= &w1_clk.common.hw,
-	},
-	.num	= CLK_NUMBER,
-};
-
-static struct clk_hw_onecell_data sun50i_h616_r_hw_clks = {
-	.hws	= {
-		[CLK_R_AHB]		= &r_ahb_clk.hw,
-		[CLK_R_APB1]		= &r_apb1_clk.common.hw,
-		[CLK_R_APB2]		= &r_apb2_clk.common.hw,
-		[CLK_R_APB1_TWD]	= &r_apb1_twd_clk.common.hw,
-		[CLK_R_APB2_I2C]	= &r_apb2_i2c_clk.common.hw,
-		[CLK_R_APB2_RSB]	= &r_apb2_rsb_clk.common.hw,
-		[CLK_R_APB1_IR]		= &r_apb1_ir_clk.common.hw,
-		[CLK_IR]		= &ir_clk.common.hw,
-	},
-	.num	= CLK_NUMBER,
-};
-
-static struct ccu_reset_map sun50i_h6_r_ccu_resets[] = {
-	[RST_R_APB1_TIMER]	=  { 0x11c, BIT(16) },
-	[RST_R_APB1_TWD]	=  { 0x12c, BIT(16) },
-	[RST_R_APB1_PWM]	=  { 0x13c, BIT(16) },
-	[RST_R_APB2_UART]	=  { 0x18c, BIT(16) },
-	[RST_R_APB2_I2C]	=  { 0x19c, BIT(16) },
-	[RST_R_APB2_RSB]	=  { 0x1bc, BIT(16) },
-	[RST_R_APB1_IR]		=  { 0x1cc, BIT(16) },
-	[RST_R_APB1_W1]		=  { 0x1ec, BIT(16) },
-};
-
-static struct ccu_reset_map sun50i_h616_r_ccu_resets[] = {
-	[RST_R_APB1_TWD]	=  { 0x12c, BIT(16) },
-	[RST_R_APB2_I2C]	=  { 0x19c, BIT(16) },
-	[RST_R_APB2_RSB]	=  { 0x1bc, BIT(16) },
-	[RST_R_APB1_IR]		=  { 0x1cc, BIT(16) },
-};
-
-static const struct sunxi_ccu_desc sun50i_h6_r_ccu_desc = {
-	.ccu_clks	= sun50i_h6_r_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun50i_h6_r_ccu_clks),
-
-	.hw_clks	= &sun50i_h6_r_hw_clks,
-
-	.resets		= sun50i_h6_r_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun50i_h6_r_ccu_resets),
-};
-
-static const struct sunxi_ccu_desc sun50i_h616_r_ccu_desc = {
-	.ccu_clks	= sun50i_h616_r_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun50i_h616_r_ccu_clks),
-
-	.hw_clks	= &sun50i_h616_r_hw_clks,
-
-	.resets		= sun50i_h616_r_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun50i_h616_r_ccu_resets),
-};
-
-static void __init sunxi_r_ccu_init(struct device_node *node,
-				    const struct sunxi_ccu_desc *desc)
-{
-	void __iomem *reg;
-
-	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
-	if (IS_ERR(reg)) {
-		pr_err("%pOF: Could not map the clock registers\n", node);
-		return;
-	}
-
-	of_sunxi_ccu_probe(node, reg, desc);
-}
-
-static void __init sun50i_h6_r_ccu_setup(struct device_node *node)
-{
-	sunxi_r_ccu_init(node, &sun50i_h6_r_ccu_desc);
-}
-CLK_OF_DECLARE(sun50i_h6_r_ccu, "allwinner,sun50i-h6-r-ccu",
-	       sun50i_h6_r_ccu_setup);
-
-static void __init sun50i_h616_r_ccu_setup(struct device_node *node)
-{
-	sunxi_r_ccu_init(node, &sun50i_h616_r_ccu_desc);
-}
-CLK_OF_DECLARE(sun50i_h616_r_ccu, "allwinner,sun50i-h616-r-ccu",
-	       sun50i_h616_r_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/ccu-sun50i-h6-r.h b/drivers/clk/sunxi-ng/ccu-sun50i-h6-r.h
deleted file mode 100644
index 7e290b840803..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun50i-h6-r.h
+++ /dev/null
@@ -1,19 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0 */
-/*
- * Copyright 2017 Icenowy Zheng <icenowy@aosc.xyz>
- */
-
-#ifndef _CCU_SUN50I_H6_R_H
-#define _CCU_SUN50I_H6_R_H
-
-#include <dt-bindings/clock/sun50i-h6-r-ccu.h>
-#include <dt-bindings/reset/sun50i-h6-r-ccu.h>
-
-/* AHB/APB bus clocks are not exported except APB1 for R_PIO */
-#define CLK_R_AHB	1
-
-#define CLK_R_APB2	3
-
-#define CLK_NUMBER	(CLK_R_APB2_RSB + 1)
-
-#endif /* _CCU_SUN50I_H6_R_H */
diff --git a/drivers/clk/sunxi-ng/ccu-sun50i-h6.c b/drivers/clk/sunxi-ng/ccu-sun50i-h6.c
deleted file mode 100644
index 9a8902f702c5..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun50i-h6.c
+++ /dev/null
@@ -1,1259 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0
-/*
- * Copyright (c) 2017 Icenowy Zheng <icenowy@aosc.io>
- */
-
-#include <linux/clk-provider.h>
-#include <linux/io.h>
-#include <linux/of_address.h>
-#include <linux/platform_device.h>
-
-#include "ccu_common.h"
-#include "ccu_reset.h"
-
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_mp.h"
-#include "ccu_mult.h"
-#include "ccu_nk.h"
-#include "ccu_nkm.h"
-#include "ccu_nkmp.h"
-#include "ccu_nm.h"
-
-#include "ccu-sun50i-h6.h"
-
-/*
- * The CPU PLL is actually NP clock, with P being /1, /2 or /4. However
- * P should only be used for output frequencies lower than 288 MHz.
- *
- * For now we can just model it as a multiplier clock, and force P to /1.
- *
- * The M factor is present in the register's description, but not in the
- * frequency formula, and it's documented as "M is only used for backdoor
- * testing", so it's not modelled and then force to 0.
- */
-#define SUN50I_H6_PLL_CPUX_REG		0x000
-static struct ccu_mult pll_cpux_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.mult		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.common		= {
-		.reg		= 0x000,
-		.hw.init	= CLK_HW_INIT("pll-cpux", "osc24M",
-					      &ccu_mult_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-/* Some PLLs are input * N / div1 / P. Model them as NKMP with no K */
-#define SUN50I_H6_PLL_DDR0_REG		0x010
-static struct ccu_nkmp pll_ddr0_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
-	.common		= {
-		.reg		= 0x010,
-		.hw.init	= CLK_HW_INIT("pll-ddr0", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_H6_PLL_PERIPH0_REG	0x020
-static struct ccu_nkmp pll_periph0_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
-	.fixed_post_div	= 4,
-	.common		= {
-		.reg		= 0x020,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-periph0", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_H6_PLL_PERIPH1_REG	0x028
-static struct ccu_nkmp pll_periph1_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
-	.fixed_post_div	= 4,
-	.common		= {
-		.reg		= 0x028,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-periph1", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_H6_PLL_GPU_REG		0x030
-static struct ccu_nkmp pll_gpu_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
-	.common		= {
-		.reg		= 0x030,
-		.hw.init	= CLK_HW_INIT("pll-gpu", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-/*
- * For Video PLLs, the output divider is described as "used for testing"
- * in the user manual. So it's not modelled and forced to 0.
- */
-#define SUN50I_H6_PLL_VIDEO0_REG	0x040
-static struct ccu_nm pll_video0_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.fixed_post_div	= 4,
-	.min_rate	= 288000000,
-	.max_rate	= 2400000000UL,
-	.common		= {
-		.reg		= 0x040,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-video0", "osc24M",
-					      &ccu_nm_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_H6_PLL_VIDEO1_REG	0x048
-static struct ccu_nm pll_video1_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.fixed_post_div	= 4,
-	.min_rate	= 288000000,
-	.max_rate	= 2400000000UL,
-	.common		= {
-		.reg		= 0x048,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-video1", "osc24M",
-					      &ccu_nm_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_H6_PLL_VE_REG		0x058
-static struct ccu_nkmp pll_ve_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
-	.common		= {
-		.reg		= 0x058,
-		.hw.init	= CLK_HW_INIT("pll-ve", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_H6_PLL_DE_REG		0x060
-static struct ccu_nkmp pll_de_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
-	.common		= {
-		.reg		= 0x060,
-		.hw.init	= CLK_HW_INIT("pll-de", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_H6_PLL_HSIC_REG		0x070
-static struct ccu_nkmp pll_hsic_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
-	.common		= {
-		.reg		= 0x070,
-		.hw.init	= CLK_HW_INIT("pll-hsic", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-/*
- * The Audio PLL is supposed to have 3 outputs: 2 fixed factors from
- * the base (2x and 4x), and one variable divider (the one true pll audio).
- *
- * We don't have any need for the variable divider for now, so we just
- * hardcode it to match with the clock names.
- */
-#define SUN50I_H6_PLL_AUDIO_REG		0x078
-
-static struct ccu_sdm_setting pll_audio_sdm_table[] = {
-	{ .rate = 541900800, .pattern = 0xc001288d, .m = 1, .n = 22 },
-	{ .rate = 589824000, .pattern = 0xc00126e9, .m = 1, .n = 24 },
-};
-
-static struct ccu_nm pll_audio_base_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.sdm		= _SUNXI_CCU_SDM(pll_audio_sdm_table,
-					 BIT(24), 0x178, BIT(31)),
-	.common		= {
-		.features	= CCU_FEATURE_SIGMA_DELTA_MOD,
-		.reg		= 0x078,
-		.hw.init	= CLK_HW_INIT("pll-audio-base", "osc24M",
-					      &ccu_nm_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static const char * const cpux_parents[] = { "osc24M", "osc32k",
-					     "iosc", "pll-cpux" };
-static SUNXI_CCU_MUX(cpux_clk, "cpux", cpux_parents,
-		     0x500, 24, 2, CLK_SET_RATE_PARENT | CLK_IS_CRITICAL);
-static SUNXI_CCU_M(axi_clk, "axi", "cpux", 0x500, 0, 2, 0);
-static SUNXI_CCU_M(cpux_apb_clk, "cpux-apb", "cpux", 0x500, 8, 2, 0);
-
-static const char * const psi_ahb1_ahb2_parents[] = { "osc24M", "osc32k",
-						      "iosc", "pll-periph0" };
-static SUNXI_CCU_MP_WITH_MUX(psi_ahb1_ahb2_clk, "psi-ahb1-ahb2",
-			     psi_ahb1_ahb2_parents,
-			     0x510,
-			     0, 2,	/* M */
-			     8, 2,	/* P */
-			     24, 2,	/* mux */
-			     0);
-
-static const char * const ahb3_apb1_apb2_parents[] = { "osc24M", "osc32k",
-						       "psi-ahb1-ahb2",
-						       "pll-periph0" };
-static SUNXI_CCU_MP_WITH_MUX(ahb3_clk, "ahb3", ahb3_apb1_apb2_parents, 0x51c,
-			     0, 2,	/* M */
-			     8, 2,	/* P */
-			     24, 2,	/* mux */
-			     0);
-
-static SUNXI_CCU_MP_WITH_MUX(apb1_clk, "apb1", ahb3_apb1_apb2_parents, 0x520,
-			     0, 2,	/* M */
-			     8, 2,	/* P */
-			     24, 2,	/* mux */
-			     0);
-
-static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", ahb3_apb1_apb2_parents, 0x524,
-			     0, 2,	/* M */
-			     8, 2,	/* P */
-			     24, 2,	/* mux */
-			     0);
-
-static const char * const mbus_parents[] = { "osc24M", "pll-periph0-2x",
-					     "pll-ddr0", "pll-periph0-4x" };
-static SUNXI_CCU_M_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents, 0x540,
-				       0, 3,	/* M */
-				       24, 2,	/* mux */
-				       BIT(31),	/* gate */
-				       CLK_IS_CRITICAL);
-
-static const char * const de_parents[] = { "pll-de", "pll-periph0-2x" };
-static SUNXI_CCU_M_WITH_MUX_GATE(de_clk, "de", de_parents, 0x600,
-				       0, 4,	/* M */
-				       24, 1,	/* mux */
-				       BIT(31),	/* gate */
-				       CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(bus_de_clk, "bus-de", "psi-ahb1-ahb2",
-		      0x60c, BIT(0), 0);
-
-static const char * const deinterlace_parents[] = { "pll-periph0",
-						    "pll-periph1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(deinterlace_clk, "deinterlace",
-				       deinterlace_parents,
-				       0x620,
-				       0, 4,	/* M */
-				       24, 1,	/* mux */
-				       BIT(31),	/* gate */
-				       0);
-
-static SUNXI_CCU_GATE(bus_deinterlace_clk, "bus-deinterlace", "psi-ahb1-ahb2",
-		      0x62c, BIT(0), 0);
-
-static const char * const gpu_parents[] = { "pll-gpu" };
-static SUNXI_CCU_M_WITH_MUX_GATE(gpu_clk, "gpu", gpu_parents, 0x670,
-				       0, 3,	/* M */
-				       24, 1,	/* mux */
-				       BIT(31),	/* gate */
-				       CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(bus_gpu_clk, "bus-gpu", "psi-ahb1-ahb2",
-		      0x67c, BIT(0), 0);
-
-/* Also applies to EMCE */
-static const char * const ce_parents[] = { "osc24M", "pll-periph0-2x" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(ce_clk, "ce", ce_parents, 0x680,
-					0, 4,	/* M */
-					8, 2,	/* N */
-					24, 1,	/* mux */
-					BIT(31),/* gate */
-					0);
-
-static SUNXI_CCU_GATE(bus_ce_clk, "bus-ce", "psi-ahb1-ahb2",
-		      0x68c, BIT(0), 0);
-
-static const char * const ve_parents[] = { "pll-ve" };
-static SUNXI_CCU_M_WITH_MUX_GATE(ve_clk, "ve", ve_parents, 0x690,
-				       0, 3,	/* M */
-				       24, 1,	/* mux */
-				       BIT(31),	/* gate */
-				       CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(bus_ve_clk, "bus-ve", "psi-ahb1-ahb2",
-		      0x69c, BIT(0), 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(emce_clk, "emce", ce_parents, 0x6b0,
-					0, 4,	/* M */
-					8, 2,	/* N */
-					24, 1,	/* mux */
-					BIT(31),/* gate */
-					0);
-
-static SUNXI_CCU_GATE(bus_emce_clk, "bus-emce", "psi-ahb1-ahb2",
-		      0x6bc, BIT(0), 0);
-
-static const char * const vp9_parents[] = { "pll-ve", "pll-periph0-2x" };
-static SUNXI_CCU_M_WITH_MUX_GATE(vp9_clk, "vp9", vp9_parents, 0x6c0,
-				       0, 3,	/* M */
-				       24, 1,	/* mux */
-				       BIT(31),	/* gate */
-				       0);
-
-static SUNXI_CCU_GATE(bus_vp9_clk, "bus-vp9", "psi-ahb1-ahb2",
-		      0x6cc, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_dma_clk, "bus-dma", "psi-ahb1-ahb2",
-		      0x70c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_msgbox_clk, "bus-msgbox", "psi-ahb1-ahb2",
-		      0x71c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_spinlock_clk, "bus-spinlock", "psi-ahb1-ahb2",
-		      0x72c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_hstimer_clk, "bus-hstimer", "psi-ahb1-ahb2",
-		      0x73c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(avs_clk, "avs", "osc24M", 0x740, BIT(31), 0);
-
-static SUNXI_CCU_GATE(bus_dbg_clk, "bus-dbg", "psi-ahb1-ahb2",
-		      0x78c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_psi_clk, "bus-psi", "psi-ahb1-ahb2",
-		      0x79c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_pwm_clk, "bus-pwm", "apb1", 0x7ac, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_iommu_clk, "bus-iommu", "apb1", 0x7bc, BIT(0), 0);
-
-static const char * const dram_parents[] = { "pll-ddr0" };
-static struct ccu_div dram_clk = {
-	.div		= _SUNXI_CCU_DIV(0, 2),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common	= {
-		.reg		= 0x800,
-		.hw.init	= CLK_HW_INIT_PARENTS("dram",
-						      dram_parents,
-						      &ccu_div_ops,
-						      CLK_IS_CRITICAL),
-	},
-};
-
-static SUNXI_CCU_GATE(mbus_dma_clk, "mbus-dma", "mbus",
-		      0x804, BIT(0), 0);
-static SUNXI_CCU_GATE(mbus_ve_clk, "mbus-ve", "mbus",
-		      0x804, BIT(1), 0);
-static SUNXI_CCU_GATE(mbus_ce_clk, "mbus-ce", "mbus",
-		      0x804, BIT(2), 0);
-static SUNXI_CCU_GATE(mbus_ts_clk, "mbus-ts", "mbus",
-		      0x804, BIT(3), 0);
-static SUNXI_CCU_GATE(mbus_nand_clk, "mbus-nand", "mbus",
-		      0x804, BIT(5), 0);
-static SUNXI_CCU_GATE(mbus_csi_clk, "mbus-csi", "mbus",
-		      0x804, BIT(8), 0);
-static SUNXI_CCU_GATE(mbus_deinterlace_clk, "mbus-deinterlace", "mbus",
-		      0x804, BIT(11), 0);
-
-static SUNXI_CCU_GATE(bus_dram_clk, "bus-dram", "psi-ahb1-ahb2",
-		      0x80c, BIT(0), CLK_IS_CRITICAL);
-
-static const char * const nand_spi_parents[] = { "osc24M", "pll-periph0",
-					     "pll-periph1", "pll-periph0-2x",
-					     "pll-periph1-2x" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand0_clk, "nand0", nand_spi_parents, 0x810,
-					0, 4,	/* M */
-					8, 2,	/* N */
-					24, 3,	/* mux */
-					BIT(31),/* gate */
-					0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand1_clk, "nand1", nand_spi_parents, 0x814,
-					0, 4,	/* M */
-					8, 2,	/* N */
-					24, 3,	/* mux */
-					BIT(31),/* gate */
-					0);
-
-static SUNXI_CCU_GATE(bus_nand_clk, "bus-nand", "ahb3", 0x82c, BIT(0), 0);
-
-static const char * const mmc_parents[] = { "osc24M", "pll-periph0-2x",
-					    "pll-periph1-2x" };
-static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc0_clk, "mmc0", mmc_parents, 0x830,
-					  0, 4,		/* M */
-					  8, 2,		/* N */
-					  24, 2,	/* mux */
-					  BIT(31),	/* gate */
-					  2,		/* post-div */
-					  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc1_clk, "mmc1", mmc_parents, 0x834,
-					  0, 4,		/* M */
-					  8, 2,		/* N */
-					  24, 2,	/* mux */
-					  BIT(31),	/* gate */
-					  2,		/* post-div */
-					  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc2_clk, "mmc2", mmc_parents, 0x838,
-					  0, 4,		/* M */
-					  8, 2,		/* N */
-					  24, 2,	/* mux */
-					  BIT(31),	/* gate */
-					  2,		/* post-div */
-					  0);
-
-static SUNXI_CCU_GATE(bus_mmc0_clk, "bus-mmc0", "ahb3", 0x84c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_mmc1_clk, "bus-mmc1", "ahb3", 0x84c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_mmc2_clk, "bus-mmc2", "ahb3", 0x84c, BIT(2), 0);
-
-static SUNXI_CCU_GATE(bus_uart0_clk, "bus-uart0", "apb2", 0x90c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_uart1_clk, "bus-uart1", "apb2", 0x90c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_uart2_clk, "bus-uart2", "apb2", 0x90c, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_uart3_clk, "bus-uart3", "apb2", 0x90c, BIT(3), 0);
-
-static SUNXI_CCU_GATE(bus_i2c0_clk, "bus-i2c0", "apb2", 0x91c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_i2c1_clk, "bus-i2c1", "apb2", 0x91c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_i2c2_clk, "bus-i2c2", "apb2", 0x91c, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_i2c3_clk, "bus-i2c3", "apb2", 0x91c, BIT(3), 0);
-
-static SUNXI_CCU_GATE(bus_scr0_clk, "bus-scr0", "apb2", 0x93c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_scr1_clk, "bus-scr1", "apb2", 0x93c, BIT(1), 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", nand_spi_parents, 0x940,
-					0, 4,	/* M */
-					8, 2,	/* N */
-					24, 3,	/* mux */
-					BIT(31),/* gate */
-					0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", nand_spi_parents, 0x944,
-					0, 4,	/* M */
-					8, 2,	/* N */
-					24, 3,	/* mux */
-					BIT(31),/* gate */
-					0);
-
-static SUNXI_CCU_GATE(bus_spi0_clk, "bus-spi0", "ahb3", 0x96c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_spi1_clk, "bus-spi1", "ahb3", 0x96c, BIT(1), 0);
-
-static SUNXI_CCU_GATE(bus_emac_clk, "bus-emac", "ahb3", 0x97c, BIT(0), 0);
-
-static const char * const ts_parents[] = { "osc24M", "pll-periph0" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(ts_clk, "ts", ts_parents, 0x9b0,
-					0, 4,	/* M */
-					8, 2,	/* N */
-					24, 1,	/* mux */
-					BIT(31),/* gate */
-					0);
-
-static SUNXI_CCU_GATE(bus_ts_clk, "bus-ts", "ahb3", 0x9bc, BIT(0), 0);
-
-static const char * const ir_tx_parents[] = { "osc32k", "osc24M" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(ir_tx_clk, "ir-tx", ir_tx_parents, 0x9c0,
-					0, 4,	/* M */
-					8, 2,	/* N */
-					24, 1,	/* mux */
-					BIT(31),/* gate */
-					0);
-
-static SUNXI_CCU_GATE(bus_ir_tx_clk, "bus-ir-tx", "apb1", 0x9cc, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_ths_clk, "bus-ths", "apb1", 0x9fc, BIT(0), 0);
-
-static const char * const audio_parents[] = { "pll-audio", "pll-audio-2x", "pll-audio-4x" };
-static struct ccu_div i2s3_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0xa0c,
-		.hw.init	= CLK_HW_INIT_PARENTS("i2s3",
-						      audio_parents,
-						      &ccu_div_ops,
-						      CLK_SET_RATE_PARENT),
-	},
-};
-
-static struct ccu_div i2s0_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0xa10,
-		.hw.init	= CLK_HW_INIT_PARENTS("i2s0",
-						      audio_parents,
-						      &ccu_div_ops,
-						      CLK_SET_RATE_PARENT),
-	},
-};
-
-static struct ccu_div i2s1_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0xa14,
-		.hw.init	= CLK_HW_INIT_PARENTS("i2s1",
-						      audio_parents,
-						      &ccu_div_ops,
-						      CLK_SET_RATE_PARENT),
-	},
-};
-
-static struct ccu_div i2s2_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0xa18,
-		.hw.init	= CLK_HW_INIT_PARENTS("i2s2",
-						      audio_parents,
-						      &ccu_div_ops,
-						      CLK_SET_RATE_PARENT),
-	},
-};
-
-static SUNXI_CCU_GATE(bus_i2s0_clk, "bus-i2s0", "apb1", 0xa1c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_i2s1_clk, "bus-i2s1", "apb1", 0xa1c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_i2s2_clk, "bus-i2s2", "apb1", 0xa1c, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_i2s3_clk, "bus-i2s3", "apb1", 0xa1c, BIT(3), 0);
-
-static struct ccu_div spdif_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0xa20,
-		.hw.init	= CLK_HW_INIT_PARENTS("spdif",
-						      audio_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static SUNXI_CCU_GATE(bus_spdif_clk, "bus-spdif", "apb1", 0xa2c, BIT(0), 0);
-
-static struct ccu_div dmic_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0xa40,
-		.hw.init	= CLK_HW_INIT_PARENTS("dmic",
-						      audio_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static SUNXI_CCU_GATE(bus_dmic_clk, "bus-dmic", "apb1", 0xa4c, BIT(0), 0);
-
-static struct ccu_div audio_hub_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0xa60,
-		.hw.init	= CLK_HW_INIT_PARENTS("audio-hub",
-						      audio_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static SUNXI_CCU_GATE(bus_audio_hub_clk, "bus-audio-hub", "apb1", 0xa6c, BIT(0), 0);
-
-/*
- * There are OHCI 12M clock source selection bits for 2 USB 2.0 ports.
- * We will force them to 0 (12M divided from 48M).
- */
-#define SUN50I_H6_USB0_CLK_REG		0xa70
-#define SUN50I_H6_USB3_CLK_REG		0xa7c
-
-static SUNXI_CCU_GATE(usb_ohci0_clk, "usb-ohci0", "osc12M", 0xa70, BIT(31), 0);
-static SUNXI_CCU_GATE(usb_phy0_clk, "usb-phy0", "osc24M", 0xa70, BIT(29), 0);
-
-static SUNXI_CCU_GATE(usb_phy1_clk, "usb-phy1", "osc24M", 0xa74, BIT(29), 0);
-
-static SUNXI_CCU_GATE(usb_ohci3_clk, "usb-ohci3", "osc12M", 0xa7c, BIT(31), 0);
-static SUNXI_CCU_GATE(usb_phy3_clk, "usb-phy3", "osc12M", 0xa7c, BIT(29), 0);
-static SUNXI_CCU_GATE(usb_hsic_12m_clk, "usb-hsic-12M", "osc12M", 0xa7c, BIT(27), 0);
-static SUNXI_CCU_GATE(usb_hsic_clk, "usb-hsic", "pll-hsic", 0xa7c, BIT(26), 0);
-
-static SUNXI_CCU_GATE(bus_ohci0_clk, "bus-ohci0", "ahb3", 0xa8c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_ohci3_clk, "bus-ohci3", "ahb3", 0xa8c, BIT(3), 0);
-static SUNXI_CCU_GATE(bus_ehci0_clk, "bus-ehci0", "ahb3", 0xa8c, BIT(4), 0);
-static SUNXI_CCU_GATE(bus_xhci_clk, "bus-xhci", "ahb3", 0xa8c, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_ehci3_clk, "bus-ehci3", "ahb3", 0xa8c, BIT(7), 0);
-static SUNXI_CCU_GATE(bus_otg_clk, "bus-otg", "ahb3", 0xa8c, BIT(8), 0);
-
-static struct clk_fixed_factor pll_periph0_4x_clk;
-static CLK_FIXED_FACTOR_HW(pcie_ref_100m_clk, "pcie-ref-100M",
-			   &pll_periph0_4x_clk.hw, 24, 1, 0);
-static SUNXI_CCU_GATE(pcie_ref_clk, "pcie-ref", "pcie-ref-100M",
-		      0xab0, BIT(31), 0);
-static SUNXI_CCU_GATE(pcie_ref_out_clk, "pcie-ref-out", "pcie-ref",
-		      0xab0, BIT(30), 0);
-
-static SUNXI_CCU_M_WITH_GATE(pcie_maxi_clk, "pcie-maxi",
-			     "pll-periph0", 0xab4,
-			     0, 4,	/* M */
-			     BIT(31),	/* gate */
-			     0);
-
-static SUNXI_CCU_M_WITH_GATE(pcie_aux_clk, "pcie-aux", "osc24M", 0xab8,
-			     0, 5,	/* M */
-			     BIT(31),	/* gate */
-			     0);
-
-static SUNXI_CCU_GATE(bus_pcie_clk, "bus-pcie", "psi-ahb1-ahb2",
-		      0xabc, BIT(0), 0);
-
-static const char * const hdmi_parents[] = { "pll-video0", "pll-video1",
-					      "pll-video1-4x" };
-static SUNXI_CCU_M_WITH_MUX_GATE(hdmi_clk, "hdmi", hdmi_parents, 0xb00,
-				 0, 4,		/* M */
-				 24, 2,		/* mux */
-				 BIT(31),	/* gate */
-				 0);
-
-static SUNXI_CCU_GATE(hdmi_slow_clk, "hdmi-slow", "osc24M", 0xb04, BIT(31), 0);
-
-static const char * const hdmi_cec_parents[] = { "osc32k", "pll-periph0-2x" };
-static const struct ccu_mux_fixed_prediv hdmi_cec_predivs[] = {
-	{ .index = 1, .div = 36621 },
-};
-
-#define SUN50I_H6_HDMI_CEC_CLK_REG		0xb10
-static struct ccu_mux hdmi_cec_clk = {
-	.enable		= BIT(31),
-
-	.mux		= {
-		.shift	= 24,
-		.width	= 2,
-
-		.fixed_predivs	= hdmi_cec_predivs,
-		.n_predivs	= ARRAY_SIZE(hdmi_cec_predivs),
-	},
-
-	.common		= {
-		.reg		= 0xb10,
-		.features	= CCU_FEATURE_FIXED_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("hdmi-cec",
-						      hdmi_cec_parents,
-						      &ccu_mux_ops,
-						      0),
-	},
-};
-
-static SUNXI_CCU_GATE(bus_hdmi_clk, "bus-hdmi", "ahb3", 0xb1c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_tcon_top_clk, "bus-tcon-top", "ahb3",
-		      0xb5c, BIT(0), 0);
-
-static const char * const tcon_lcd0_parents[] = { "pll-video0",
-						  "pll-video0-4x",
-						  "pll-video1" };
-static SUNXI_CCU_MUX_WITH_GATE(tcon_lcd0_clk, "tcon-lcd0",
-			       tcon_lcd0_parents, 0xb60,
-			       24, 3,	/* mux */
-			       BIT(31),	/* gate */
-			       CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(bus_tcon_lcd0_clk, "bus-tcon-lcd0", "ahb3",
-		      0xb7c, BIT(0), 0);
-
-static const char * const tcon_tv0_parents[] = { "pll-video0",
-						 "pll-video0-4x",
-						 "pll-video1",
-						 "pll-video1-4x" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(tcon_tv0_clk, "tcon-tv0",
-				  tcon_tv0_parents, 0xb80,
-				  0, 4,		/* M */
-				  8, 2,		/* P */
-				  24, 3,	/* mux */
-				  BIT(31),	/* gate */
-				  CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(bus_tcon_tv0_clk, "bus-tcon-tv0", "ahb3",
-		      0xb9c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(csi_cci_clk, "csi-cci", "osc24M", 0xc00, BIT(0), 0);
-
-static const char * const csi_top_parents[] = { "pll-video0", "pll-ve",
-					      "pll-periph0" };
-static const u8 csi_top_table[] = { 0, 2, 3 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi_top_clk, "csi-top",
-				       csi_top_parents, csi_top_table, 0xc04,
-				       0, 4,	/* M */
-				       24, 3,	/* mux */
-				       BIT(31),	/* gate */
-				       0);
-
-static const char * const csi_mclk_parents[] = { "osc24M", "pll-video0",
-					       "pll-periph0", "pll-periph1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(csi_mclk_clk, "csi-mclk",
-				 csi_mclk_parents, 0xc08,
-				 0, 5,		/* M */
-				 24, 3,		/* mux */
-				 BIT(31),	/* gate */
-				 0);
-
-static SUNXI_CCU_GATE(bus_csi_clk, "bus-csi", "ahb3", 0xc2c, BIT(0), 0);
-
-static const char * const hdcp_parents[] = { "pll-periph0", "pll-periph1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(hdcp_clk, "hdcp", hdcp_parents, 0xc40,
-				 0, 4,		/* M */
-				 24, 2,		/* mux */
-				 BIT(31),	/* gate */
-				 0);
-
-static SUNXI_CCU_GATE(bus_hdcp_clk, "bus-hdcp", "ahb3", 0xc4c, BIT(0), 0);
-
-/* Fixed factor clocks */
-static CLK_FIXED_FACTOR_FW_NAME(osc12M_clk, "osc12M", "hosc", 2, 1, 0);
-
-static const struct clk_hw *clk_parent_pll_audio[] = {
-	&pll_audio_base_clk.common.hw
-};
-
-/*
- * The divider of pll-audio is fixed to 24 for now, so 24576000 and 22579200
- * rates can be set exactly in conjunction with sigma-delta modulation.
- */
-static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
-			    clk_parent_pll_audio,
-			    24, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
-			    clk_parent_pll_audio,
-			    4, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
-			    clk_parent_pll_audio,
-			    2, 1, CLK_SET_RATE_PARENT);
-
-static const struct clk_hw *pll_periph0_parents[] = {
-	&pll_periph0_clk.common.hw
-};
-static CLK_FIXED_FACTOR_HWS(pll_periph0_4x_clk, "pll-periph0-4x",
-			    pll_periph0_parents,
-			    1, 4, 0);
-static CLK_FIXED_FACTOR_HWS(pll_periph0_2x_clk, "pll-periph0-2x",
-			    pll_periph0_parents,
-			    1, 2, 0);
-
-static const struct clk_hw *pll_periph1_parents[] = {
-	&pll_periph1_clk.common.hw
-};
-static CLK_FIXED_FACTOR_HWS(pll_periph1_4x_clk, "pll-periph1-4x",
-			    pll_periph1_parents,
-			    1, 4, 0);
-static CLK_FIXED_FACTOR_HWS(pll_periph1_2x_clk, "pll-periph1-2x",
-			    pll_periph1_parents,
-			    1, 2, 0);
-
-static CLK_FIXED_FACTOR_HW(pll_video0_4x_clk, "pll-video0-4x",
-			   &pll_video0_clk.common.hw,
-			   1, 4, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HW(pll_video1_4x_clk, "pll-video1-4x",
-			   &pll_video1_clk.common.hw,
-			   1, 4, CLK_SET_RATE_PARENT);
-
-static struct ccu_common *sun50i_h6_ccu_clks[] = {
-	&pll_cpux_clk.common,
-	&pll_ddr0_clk.common,
-	&pll_periph0_clk.common,
-	&pll_periph1_clk.common,
-	&pll_gpu_clk.common,
-	&pll_video0_clk.common,
-	&pll_video1_clk.common,
-	&pll_ve_clk.common,
-	&pll_de_clk.common,
-	&pll_hsic_clk.common,
-	&pll_audio_base_clk.common,
-	&cpux_clk.common,
-	&axi_clk.common,
-	&cpux_apb_clk.common,
-	&psi_ahb1_ahb2_clk.common,
-	&ahb3_clk.common,
-	&apb1_clk.common,
-	&apb2_clk.common,
-	&mbus_clk.common,
-	&de_clk.common,
-	&bus_de_clk.common,
-	&deinterlace_clk.common,
-	&bus_deinterlace_clk.common,
-	&gpu_clk.common,
-	&bus_gpu_clk.common,
-	&ce_clk.common,
-	&bus_ce_clk.common,
-	&ve_clk.common,
-	&bus_ve_clk.common,
-	&emce_clk.common,
-	&bus_emce_clk.common,
-	&vp9_clk.common,
-	&bus_vp9_clk.common,
-	&bus_dma_clk.common,
-	&bus_msgbox_clk.common,
-	&bus_spinlock_clk.common,
-	&bus_hstimer_clk.common,
-	&avs_clk.common,
-	&bus_dbg_clk.common,
-	&bus_psi_clk.common,
-	&bus_pwm_clk.common,
-	&bus_iommu_clk.common,
-	&dram_clk.common,
-	&mbus_dma_clk.common,
-	&mbus_ve_clk.common,
-	&mbus_ce_clk.common,
-	&mbus_ts_clk.common,
-	&mbus_nand_clk.common,
-	&mbus_csi_clk.common,
-	&mbus_deinterlace_clk.common,
-	&bus_dram_clk.common,
-	&nand0_clk.common,
-	&nand1_clk.common,
-	&bus_nand_clk.common,
-	&mmc0_clk.common,
-	&mmc1_clk.common,
-	&mmc2_clk.common,
-	&bus_mmc0_clk.common,
-	&bus_mmc1_clk.common,
-	&bus_mmc2_clk.common,
-	&bus_uart0_clk.common,
-	&bus_uart1_clk.common,
-	&bus_uart2_clk.common,
-	&bus_uart3_clk.common,
-	&bus_i2c0_clk.common,
-	&bus_i2c1_clk.common,
-	&bus_i2c2_clk.common,
-	&bus_i2c3_clk.common,
-	&bus_scr0_clk.common,
-	&bus_scr1_clk.common,
-	&spi0_clk.common,
-	&spi1_clk.common,
-	&bus_spi0_clk.common,
-	&bus_spi1_clk.common,
-	&bus_emac_clk.common,
-	&ts_clk.common,
-	&bus_ts_clk.common,
-	&ir_tx_clk.common,
-	&bus_ir_tx_clk.common,
-	&bus_ths_clk.common,
-	&i2s3_clk.common,
-	&i2s0_clk.common,
-	&i2s1_clk.common,
-	&i2s2_clk.common,
-	&bus_i2s0_clk.common,
-	&bus_i2s1_clk.common,
-	&bus_i2s2_clk.common,
-	&bus_i2s3_clk.common,
-	&spdif_clk.common,
-	&bus_spdif_clk.common,
-	&dmic_clk.common,
-	&bus_dmic_clk.common,
-	&audio_hub_clk.common,
-	&bus_audio_hub_clk.common,
-	&usb_ohci0_clk.common,
-	&usb_phy0_clk.common,
-	&usb_phy1_clk.common,
-	&usb_ohci3_clk.common,
-	&usb_phy3_clk.common,
-	&usb_hsic_12m_clk.common,
-	&usb_hsic_clk.common,
-	&bus_ohci0_clk.common,
-	&bus_ohci3_clk.common,
-	&bus_ehci0_clk.common,
-	&bus_xhci_clk.common,
-	&bus_ehci3_clk.common,
-	&bus_otg_clk.common,
-	&pcie_ref_clk.common,
-	&pcie_ref_out_clk.common,
-	&pcie_maxi_clk.common,
-	&pcie_aux_clk.common,
-	&bus_pcie_clk.common,
-	&hdmi_clk.common,
-	&hdmi_slow_clk.common,
-	&hdmi_cec_clk.common,
-	&bus_hdmi_clk.common,
-	&bus_tcon_top_clk.common,
-	&tcon_lcd0_clk.common,
-	&bus_tcon_lcd0_clk.common,
-	&tcon_tv0_clk.common,
-	&bus_tcon_tv0_clk.common,
-	&csi_cci_clk.common,
-	&csi_top_clk.common,
-	&csi_mclk_clk.common,
-	&bus_csi_clk.common,
-	&hdcp_clk.common,
-	&bus_hdcp_clk.common,
-};
-
-static struct clk_hw_onecell_data sun50i_h6_hw_clks = {
-	.hws	= {
-		[CLK_OSC12M]		= &osc12M_clk.hw,
-		[CLK_PLL_CPUX]		= &pll_cpux_clk.common.hw,
-		[CLK_PLL_DDR0]		= &pll_ddr0_clk.common.hw,
-		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
-		[CLK_PLL_PERIPH0_2X]	= &pll_periph0_2x_clk.hw,
-		[CLK_PLL_PERIPH0_4X]	= &pll_periph0_4x_clk.hw,
-		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
-		[CLK_PLL_PERIPH1_2X]	= &pll_periph1_2x_clk.hw,
-		[CLK_PLL_PERIPH1_4X]	= &pll_periph1_4x_clk.hw,
-		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
-		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
-		[CLK_PLL_VIDEO0_4X]	= &pll_video0_4x_clk.hw,
-		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
-		[CLK_PLL_VIDEO1_4X]	= &pll_video1_4x_clk.hw,
-		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
-		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
-		[CLK_PLL_HSIC]		= &pll_hsic_clk.common.hw,
-		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
-		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
-		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
-		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
-		[CLK_CPUX]		= &cpux_clk.common.hw,
-		[CLK_AXI]		= &axi_clk.common.hw,
-		[CLK_CPUX_APB]		= &cpux_apb_clk.common.hw,
-		[CLK_PSI_AHB1_AHB2]	= &psi_ahb1_ahb2_clk.common.hw,
-		[CLK_AHB3]		= &ahb3_clk.common.hw,
-		[CLK_APB1]		= &apb1_clk.common.hw,
-		[CLK_APB2]		= &apb2_clk.common.hw,
-		[CLK_MBUS]		= &mbus_clk.common.hw,
-		[CLK_DE]		= &de_clk.common.hw,
-		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
-		[CLK_DEINTERLACE]	= &deinterlace_clk.common.hw,
-		[CLK_BUS_DEINTERLACE]	= &bus_deinterlace_clk.common.hw,
-		[CLK_GPU]		= &gpu_clk.common.hw,
-		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
-		[CLK_CE]		= &ce_clk.common.hw,
-		[CLK_BUS_CE]		= &bus_ce_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
-		[CLK_EMCE]		= &emce_clk.common.hw,
-		[CLK_BUS_EMCE]		= &bus_emce_clk.common.hw,
-		[CLK_VP9]		= &vp9_clk.common.hw,
-		[CLK_BUS_VP9]		= &bus_vp9_clk.common.hw,
-		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
-		[CLK_BUS_MSGBOX]	= &bus_msgbox_clk.common.hw,
-		[CLK_BUS_SPINLOCK]	= &bus_spinlock_clk.common.hw,
-		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-		[CLK_BUS_DBG]		= &bus_dbg_clk.common.hw,
-		[CLK_BUS_PSI]		= &bus_psi_clk.common.hw,
-		[CLK_BUS_PWM]		= &bus_pwm_clk.common.hw,
-		[CLK_BUS_IOMMU]		= &bus_iommu_clk.common.hw,
-		[CLK_DRAM]		= &dram_clk.common.hw,
-		[CLK_MBUS_DMA]		= &mbus_dma_clk.common.hw,
-		[CLK_MBUS_VE]		= &mbus_ve_clk.common.hw,
-		[CLK_MBUS_CE]		= &mbus_ce_clk.common.hw,
-		[CLK_MBUS_TS]		= &mbus_ts_clk.common.hw,
-		[CLK_MBUS_NAND]		= &mbus_nand_clk.common.hw,
-		[CLK_MBUS_CSI]		= &mbus_csi_clk.common.hw,
-		[CLK_MBUS_DEINTERLACE]	= &mbus_deinterlace_clk.common.hw,
-		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
-		[CLK_NAND0]		= &nand0_clk.common.hw,
-		[CLK_NAND1]		= &nand1_clk.common.hw,
-		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC2]		= &mmc2_clk.common.hw,
-		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
-		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
-		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
-		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
-		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
-		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
-		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
-		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
-		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
-		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
-		[CLK_BUS_I2C3]		= &bus_i2c3_clk.common.hw,
-		[CLK_BUS_SCR0]		= &bus_scr0_clk.common.hw,
-		[CLK_BUS_SCR1]		= &bus_scr1_clk.common.hw,
-		[CLK_SPI0]		= &spi0_clk.common.hw,
-		[CLK_SPI1]		= &spi1_clk.common.hw,
-		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
-		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
-		[CLK_BUS_EMAC]		= &bus_emac_clk.common.hw,
-		[CLK_TS]		= &ts_clk.common.hw,
-		[CLK_BUS_TS]		= &bus_ts_clk.common.hw,
-		[CLK_IR_TX]		= &ir_tx_clk.common.hw,
-		[CLK_BUS_IR_TX]		= &bus_ir_tx_clk.common.hw,
-		[CLK_BUS_THS]		= &bus_ths_clk.common.hw,
-		[CLK_I2S3]		= &i2s3_clk.common.hw,
-		[CLK_I2S0]		= &i2s0_clk.common.hw,
-		[CLK_I2S1]		= &i2s1_clk.common.hw,
-		[CLK_I2S2]		= &i2s2_clk.common.hw,
-		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
-		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
-		[CLK_BUS_I2S2]		= &bus_i2s2_clk.common.hw,
-		[CLK_BUS_I2S3]		= &bus_i2s3_clk.common.hw,
-		[CLK_SPDIF]		= &spdif_clk.common.hw,
-		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
-		[CLK_DMIC]		= &dmic_clk.common.hw,
-		[CLK_BUS_DMIC]		= &bus_dmic_clk.common.hw,
-		[CLK_AUDIO_HUB]		= &audio_hub_clk.common.hw,
-		[CLK_BUS_AUDIO_HUB]	= &bus_audio_hub_clk.common.hw,
-		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
-		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
-		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
-		[CLK_USB_OHCI3]		= &usb_ohci3_clk.common.hw,
-		[CLK_USB_PHY3]		= &usb_phy3_clk.common.hw,
-		[CLK_USB_HSIC_12M]	= &usb_hsic_12m_clk.common.hw,
-		[CLK_USB_HSIC]		= &usb_hsic_clk.common.hw,
-		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
-		[CLK_BUS_OHCI3]		= &bus_ohci3_clk.common.hw,
-		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
-		[CLK_BUS_XHCI]		= &bus_xhci_clk.common.hw,
-		[CLK_BUS_EHCI3]		= &bus_ehci3_clk.common.hw,
-		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
-		[CLK_PCIE_REF_100M]	= &pcie_ref_100m_clk.hw,
-		[CLK_PCIE_REF]		= &pcie_ref_clk.common.hw,
-		[CLK_PCIE_REF_OUT]	= &pcie_ref_out_clk.common.hw,
-		[CLK_PCIE_MAXI]		= &pcie_maxi_clk.common.hw,
-		[CLK_PCIE_AUX]		= &pcie_aux_clk.common.hw,
-		[CLK_BUS_PCIE]		= &bus_pcie_clk.common.hw,
-		[CLK_HDMI]		= &hdmi_clk.common.hw,
-		[CLK_HDMI_SLOW]		= &hdmi_slow_clk.common.hw,
-		[CLK_HDMI_CEC]		= &hdmi_cec_clk.common.hw,
-		[CLK_BUS_HDMI]		= &bus_hdmi_clk.common.hw,
-		[CLK_BUS_TCON_TOP]	= &bus_tcon_top_clk.common.hw,
-		[CLK_TCON_LCD0]		= &tcon_lcd0_clk.common.hw,
-		[CLK_BUS_TCON_LCD0]	= &bus_tcon_lcd0_clk.common.hw,
-		[CLK_TCON_TV0]		= &tcon_tv0_clk.common.hw,
-		[CLK_BUS_TCON_TV0]	= &bus_tcon_tv0_clk.common.hw,
-		[CLK_CSI_CCI]		= &csi_cci_clk.common.hw,
-		[CLK_CSI_TOP]		= &csi_top_clk.common.hw,
-		[CLK_CSI_MCLK]		= &csi_mclk_clk.common.hw,
-		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
-		[CLK_HDCP]		= &hdcp_clk.common.hw,
-		[CLK_BUS_HDCP]		= &bus_hdcp_clk.common.hw,
-	},
-	.num = CLK_NUMBER,
-};
-
-static struct ccu_reset_map sun50i_h6_ccu_resets[] = {
-	[RST_MBUS]		= { 0x540, BIT(30) },
-
-	[RST_BUS_DE]		= { 0x60c, BIT(16) },
-	[RST_BUS_DEINTERLACE]	= { 0x62c, BIT(16) },
-	[RST_BUS_GPU]		= { 0x67c, BIT(16) },
-	[RST_BUS_CE]		= { 0x68c, BIT(16) },
-	[RST_BUS_VE]		= { 0x69c, BIT(16) },
-	[RST_BUS_EMCE]		= { 0x6bc, BIT(16) },
-	[RST_BUS_VP9]		= { 0x6cc, BIT(16) },
-	[RST_BUS_DMA]		= { 0x70c, BIT(16) },
-	[RST_BUS_MSGBOX]	= { 0x71c, BIT(16) },
-	[RST_BUS_SPINLOCK]	= { 0x72c, BIT(16) },
-	[RST_BUS_HSTIMER]	= { 0x73c, BIT(16) },
-	[RST_BUS_DBG]		= { 0x78c, BIT(16) },
-	[RST_BUS_PSI]		= { 0x79c, BIT(16) },
-	[RST_BUS_PWM]		= { 0x7ac, BIT(16) },
-	[RST_BUS_IOMMU]		= { 0x7bc, BIT(16) },
-	[RST_BUS_DRAM]		= { 0x80c, BIT(16) },
-	[RST_BUS_NAND]		= { 0x82c, BIT(16) },
-	[RST_BUS_MMC0]		= { 0x84c, BIT(16) },
-	[RST_BUS_MMC1]		= { 0x84c, BIT(17) },
-	[RST_BUS_MMC2]		= { 0x84c, BIT(18) },
-	[RST_BUS_UART0]		= { 0x90c, BIT(16) },
-	[RST_BUS_UART1]		= { 0x90c, BIT(17) },
-	[RST_BUS_UART2]		= { 0x90c, BIT(18) },
-	[RST_BUS_UART3]		= { 0x90c, BIT(19) },
-	[RST_BUS_I2C0]		= { 0x91c, BIT(16) },
-	[RST_BUS_I2C1]		= { 0x91c, BIT(17) },
-	[RST_BUS_I2C2]		= { 0x91c, BIT(18) },
-	[RST_BUS_I2C3]		= { 0x91c, BIT(19) },
-	[RST_BUS_SCR0]		= { 0x93c, BIT(16) },
-	[RST_BUS_SCR1]		= { 0x93c, BIT(17) },
-	[RST_BUS_SPI0]		= { 0x96c, BIT(16) },
-	[RST_BUS_SPI1]		= { 0x96c, BIT(17) },
-	[RST_BUS_EMAC]		= { 0x97c, BIT(16) },
-	[RST_BUS_TS]		= { 0x9bc, BIT(16) },
-	[RST_BUS_IR_TX]		= { 0x9cc, BIT(16) },
-	[RST_BUS_THS]		= { 0x9fc, BIT(16) },
-	[RST_BUS_I2S0]		= { 0xa1c, BIT(16) },
-	[RST_BUS_I2S1]		= { 0xa1c, BIT(17) },
-	[RST_BUS_I2S2]		= { 0xa1c, BIT(18) },
-	[RST_BUS_I2S3]		= { 0xa1c, BIT(19) },
-	[RST_BUS_SPDIF]		= { 0xa2c, BIT(16) },
-	[RST_BUS_DMIC]		= { 0xa4c, BIT(16) },
-	[RST_BUS_AUDIO_HUB]	= { 0xa6c, BIT(16) },
-
-	[RST_USB_PHY0]		= { 0xa70, BIT(30) },
-	[RST_USB_PHY1]		= { 0xa74, BIT(30) },
-	[RST_USB_PHY3]		= { 0xa7c, BIT(30) },
-	[RST_USB_HSIC]		= { 0xa7c, BIT(28) },
-
-	[RST_BUS_OHCI0]		= { 0xa8c, BIT(16) },
-	[RST_BUS_OHCI3]		= { 0xa8c, BIT(19) },
-	[RST_BUS_EHCI0]		= { 0xa8c, BIT(20) },
-	[RST_BUS_XHCI]		= { 0xa8c, BIT(21) },
-	[RST_BUS_EHCI3]		= { 0xa8c, BIT(23) },
-	[RST_BUS_OTG]		= { 0xa8c, BIT(24) },
-	[RST_BUS_PCIE]		= { 0xabc, BIT(16) },
-
-	[RST_PCIE_POWERUP]	= { 0xabc, BIT(17) },
-
-	[RST_BUS_HDMI]		= { 0xb1c, BIT(16) },
-	[RST_BUS_HDMI_SUB]	= { 0xb1c, BIT(17) },
-	[RST_BUS_TCON_TOP]	= { 0xb5c, BIT(16) },
-	[RST_BUS_TCON_LCD0]	= { 0xb7c, BIT(16) },
-	[RST_BUS_TCON_TV0]	= { 0xb9c, BIT(16) },
-	[RST_BUS_CSI]		= { 0xc2c, BIT(16) },
-	[RST_BUS_HDCP]		= { 0xc4c, BIT(16) },
-};
-
-static const struct sunxi_ccu_desc sun50i_h6_ccu_desc = {
-	.ccu_clks	= sun50i_h6_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun50i_h6_ccu_clks),
-
-	.hw_clks	= &sun50i_h6_hw_clks,
-
-	.resets		= sun50i_h6_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun50i_h6_ccu_resets),
-};
-
-static const u32 pll_regs[] = {
-	SUN50I_H6_PLL_CPUX_REG,
-	SUN50I_H6_PLL_DDR0_REG,
-	SUN50I_H6_PLL_PERIPH0_REG,
-	SUN50I_H6_PLL_PERIPH1_REG,
-	SUN50I_H6_PLL_GPU_REG,
-	SUN50I_H6_PLL_VIDEO0_REG,
-	SUN50I_H6_PLL_VIDEO1_REG,
-	SUN50I_H6_PLL_VE_REG,
-	SUN50I_H6_PLL_DE_REG,
-	SUN50I_H6_PLL_HSIC_REG,
-	SUN50I_H6_PLL_AUDIO_REG,
-};
-
-static const u32 pll_video_regs[] = {
-	SUN50I_H6_PLL_VIDEO0_REG,
-	SUN50I_H6_PLL_VIDEO1_REG,
-};
-
-static const u32 usb2_clk_regs[] = {
-	SUN50I_H6_USB0_CLK_REG,
-	SUN50I_H6_USB3_CLK_REG,
-};
-
-static int sun50i_h6_ccu_probe(struct platform_device *pdev)
-{
-	struct resource *res;
-	void __iomem *reg;
-	u32 val;
-	int i;
-
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	reg = devm_ioremap_resource(&pdev->dev, res);
-	if (IS_ERR(reg))
-		return PTR_ERR(reg);
-
-	/* Enable the lock bits on all PLLs */
-	for (i = 0; i < ARRAY_SIZE(pll_regs); i++) {
-		val = readl(reg + pll_regs[i]);
-		val |= BIT(29);
-		writel(val, reg + pll_regs[i]);
-	}
-
-	/*
-	 * Force the output divider of video PLLs to 0.
-	 *
-	 * See the comment before pll-video0 definition for the reason.
-	 */
-	for (i = 0; i < ARRAY_SIZE(pll_video_regs); i++) {
-		val = readl(reg + pll_video_regs[i]);
-		val &= ~BIT(0);
-		writel(val, reg + pll_video_regs[i]);
-	}
-
-	/*
-	 * Force OHCI 12M clock sources to 00 (12MHz divided from 48MHz)
-	 *
-	 * This clock mux is still mysterious, and the code just enforces
-	 * it to have a valid clock parent.
-	 */
-	for (i = 0; i < ARRAY_SIZE(usb2_clk_regs); i++) {
-		val = readl(reg + usb2_clk_regs[i]);
-		val &= ~GENMASK(25, 24);
-		writel (val, reg + usb2_clk_regs[i]);
-	}
-
-	/*
-	 * Force the post-divider of pll-audio to 12 and the output divider
-	 * of it to 2, so 24576000 and 22579200 rates can be set exactly.
-	 */
-	val = readl(reg + SUN50I_H6_PLL_AUDIO_REG);
-	val &= ~(GENMASK(21, 16) | BIT(0));
-	writel(val | (11 << 16) | BIT(0), reg + SUN50I_H6_PLL_AUDIO_REG);
-
-	/*
-	 * First clock parent (osc32K) is unusable for CEC. But since there
-	 * is no good way to force parent switch (both run with same frequency),
-	 * just set second clock parent here.
-	 */
-	val = readl(reg + SUN50I_H6_HDMI_CEC_CLK_REG);
-	val |= BIT(24);
-	writel(val, reg + SUN50I_H6_HDMI_CEC_CLK_REG);
-
-	return devm_sunxi_ccu_probe(&pdev->dev, reg, &sun50i_h6_ccu_desc);
-}
-
-static const struct of_device_id sun50i_h6_ccu_ids[] = {
-	{ .compatible = "allwinner,sun50i-h6-ccu" },
-	{ }
-};
-
-static struct platform_driver sun50i_h6_ccu_driver = {
-	.probe	= sun50i_h6_ccu_probe,
-	.driver	= {
-		.name	= "sun50i-h6-ccu",
-		.suppress_bind_attrs = true,
-		.of_match_table	= sun50i_h6_ccu_ids,
-	},
-};
-builtin_platform_driver(sun50i_h6_ccu_driver);
diff --git a/drivers/clk/sunxi-ng/ccu-sun50i-h6.h b/drivers/clk/sunxi-ng/ccu-sun50i-h6.h
deleted file mode 100644
index 9406f9a6a8aa..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun50i-h6.h
+++ /dev/null
@@ -1,56 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0 */
-/*
- * Copyright 2016 Icenowy Zheng <icenowy@aosc.io>
- */
-
-#ifndef _CCU_SUN50I_H6_H_
-#define _CCU_SUN50I_H6_H_
-
-#include <dt-bindings/clock/sun50i-h6-ccu.h>
-#include <dt-bindings/reset/sun50i-h6-ccu.h>
-
-#define CLK_OSC12M		0
-#define CLK_PLL_CPUX		1
-#define CLK_PLL_DDR0		2
-
-/* PLL_PERIPH0 exported for PRCM */
-
-#define CLK_PLL_PERIPH0_2X	4
-#define CLK_PLL_PERIPH0_4X	5
-#define CLK_PLL_PERIPH1		6
-#define CLK_PLL_PERIPH1_2X	7
-#define CLK_PLL_PERIPH1_4X	8
-#define CLK_PLL_GPU		9
-#define CLK_PLL_VIDEO0		10
-#define CLK_PLL_VIDEO0_4X	11
-#define CLK_PLL_VIDEO1		12
-#define CLK_PLL_VIDEO1_4X	13
-#define CLK_PLL_VE		14
-#define CLK_PLL_DE		15
-#define CLK_PLL_HSIC		16
-#define CLK_PLL_AUDIO_BASE	17
-#define CLK_PLL_AUDIO		18
-#define CLK_PLL_AUDIO_2X	19
-#define CLK_PLL_AUDIO_4X	20
-
-/* CPUX clock exported for DVFS */
-
-#define CLK_AXI			22
-#define CLK_CPUX_APB		23
-#define CLK_PSI_AHB1_AHB2	24
-#define CLK_AHB3		25
-
-/* APB1 clock exported for PIO */
-
-#define CLK_APB2		27
-#define CLK_MBUS		28
-
-/* All module clocks and bus gates are exported except DRAM */
-
-#define CLK_DRAM		52
-
-#define CLK_BUS_DRAM		60
-
-#define CLK_NUMBER		(CLK_BUS_HDCP + 1)
-
-#endif /* _CCU_SUN50I_H6_H_ */
diff --git a/drivers/clk/sunxi-ng/ccu-sun50i-h616.c b/drivers/clk/sunxi-ng/ccu-sun50i-h616.c
deleted file mode 100644
index 22eb18079a15..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun50i-h616.c
+++ /dev/null
@@ -1,1148 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0
-/*
- * Copyright (c) 2020 Arm Ltd.
- * Based on the H6 CCU driver, which is:
- *   Copyright (c) 2017 Icenowy Zheng <icenowy@aosc.io>
- */
-
-#include <linux/clk-provider.h>
-#include <linux/io.h>
-#include <linux/of_address.h>
-#include <linux/platform_device.h>
-
-#include "ccu_common.h"
-#include "ccu_reset.h"
-
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_mp.h"
-#include "ccu_mult.h"
-#include "ccu_nk.h"
-#include "ccu_nkm.h"
-#include "ccu_nkmp.h"
-#include "ccu_nm.h"
-
-#include "ccu-sun50i-h616.h"
-
-/*
- * The CPU PLL is actually NP clock, with P being /1, /2 or /4. However
- * P should only be used for output frequencies lower than 288 MHz.
- *
- * For now we can just model it as a multiplier clock, and force P to /1.
- *
- * The M factor is present in the register's description, but not in the
- * frequency formula, and it's documented as "M is only used for backdoor
- * testing", so it's not modelled and then force to 0.
- */
-#define SUN50I_H616_PLL_CPUX_REG	0x000
-static struct ccu_mult pll_cpux_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.mult		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.common		= {
-		.reg		= 0x000,
-		.hw.init	= CLK_HW_INIT("pll-cpux", "osc24M",
-					      &ccu_mult_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-/* Some PLLs are input * N / div1 / P. Model them as NKMP with no K */
-#define SUN50I_H616_PLL_DDR0_REG	0x010
-static struct ccu_nkmp pll_ddr0_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
-	.common		= {
-		.reg		= 0x010,
-		.hw.init	= CLK_HW_INIT("pll-ddr0", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_H616_PLL_DDR1_REG	0x018
-static struct ccu_nkmp pll_ddr1_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
-	.common		= {
-		.reg		= 0x018,
-		.hw.init	= CLK_HW_INIT("pll-ddr1", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_H616_PLL_PERIPH0_REG	0x020
-static struct ccu_nkmp pll_periph0_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
-	.fixed_post_div	= 2,
-	.common		= {
-		.reg		= 0x020,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-periph0", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_H616_PLL_PERIPH1_REG	0x028
-static struct ccu_nkmp pll_periph1_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
-	.fixed_post_div	= 2,
-	.common		= {
-		.reg		= 0x028,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-periph1", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_H616_PLL_GPU_REG		0x030
-static struct ccu_nkmp pll_gpu_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
-	.common		= {
-		.reg		= 0x030,
-		.hw.init	= CLK_HW_INIT("pll-gpu", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-/*
- * For Video PLLs, the output divider is described as "used for testing"
- * in the user manual. So it's not modelled and forced to 0.
- */
-#define SUN50I_H616_PLL_VIDEO0_REG	0x040
-static struct ccu_nm pll_video0_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.fixed_post_div	= 4,
-	.min_rate	= 288000000,
-	.max_rate	= 2400000000UL,
-	.common		= {
-		.reg		= 0x040,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-video0", "osc24M",
-					      &ccu_nm_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_H616_PLL_VIDEO1_REG	0x048
-static struct ccu_nm pll_video1_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.fixed_post_div	= 4,
-	.min_rate	= 288000000,
-	.max_rate	= 2400000000UL,
-	.common		= {
-		.reg		= 0x048,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-video1", "osc24M",
-					      &ccu_nm_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_H616_PLL_VIDEO2_REG	0x050
-static struct ccu_nm pll_video2_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.fixed_post_div	= 4,
-	.min_rate	= 288000000,
-	.max_rate	= 2400000000UL,
-	.common		= {
-		.reg		= 0x050,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-video2", "osc24M",
-					      &ccu_nm_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_H616_PLL_VE_REG		0x058
-static struct ccu_nkmp pll_ve_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
-	.common		= {
-		.reg		= 0x058,
-		.hw.init	= CLK_HW_INIT("pll-ve", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-#define SUN50I_H616_PLL_DE_REG		0x060
-static struct ccu_nkmp pll_de_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
-	.common		= {
-		.reg		= 0x060,
-		.hw.init	= CLK_HW_INIT("pll-de", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-/*
- * TODO: Determine SDM settings for the audio PLL. The manual suggests
- * PLL_FACTOR_N=16, PLL_POST_DIV_P=2, OUTPUT_DIV=2, pattern=0xe000c49b
- * for 24.576 MHz, and PLL_FACTOR_N=22, PLL_POST_DIV_P=3, OUTPUT_DIV=2,
- * pattern=0xe001288c for 22.5792 MHz.
- * This clashes with our fixed PLL_POST_DIV_P.
- */
-#define SUN50I_H616_PLL_AUDIO_REG	0x078
-static struct ccu_nm pll_audio_hs_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
-	.common		= {
-		.reg		= 0x078,
-		.hw.init	= CLK_HW_INIT("pll-audio-hs", "osc24M",
-					      &ccu_nm_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static const char * const cpux_parents[] = { "osc24M", "osc32k",
-					"iosc", "pll-cpux", "pll-periph0" };
-static SUNXI_CCU_MUX(cpux_clk, "cpux", cpux_parents,
-		     0x500, 24, 3, CLK_SET_RATE_PARENT | CLK_IS_CRITICAL);
-static SUNXI_CCU_M(axi_clk, "axi", "cpux", 0x500, 0, 2, 0);
-static SUNXI_CCU_M(cpux_apb_clk, "cpux-apb", "cpux", 0x500, 8, 2, 0);
-
-static const char * const psi_ahb1_ahb2_parents[] = { "osc24M", "osc32k",
-						      "iosc", "pll-periph0" };
-static SUNXI_CCU_MP_WITH_MUX(psi_ahb1_ahb2_clk, "psi-ahb1-ahb2",
-			     psi_ahb1_ahb2_parents,
-			     0x510,
-			     0, 2,	/* M */
-			     8, 2,	/* P */
-			     24, 2,	/* mux */
-			     0);
-
-static const char * const ahb3_apb1_apb2_parents[] = { "osc24M", "osc32k",
-						       "psi-ahb1-ahb2",
-						       "pll-periph0" };
-static SUNXI_CCU_MP_WITH_MUX(ahb3_clk, "ahb3", ahb3_apb1_apb2_parents, 0x51c,
-			     0, 2,	/* M */
-			     8, 2,	/* P */
-			     24, 2,	/* mux */
-			     0);
-
-static SUNXI_CCU_MP_WITH_MUX(apb1_clk, "apb1", ahb3_apb1_apb2_parents, 0x520,
-			     0, 2,	/* M */
-			     8, 2,	/* P */
-			     24, 2,	/* mux */
-			     0);
-
-static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", ahb3_apb1_apb2_parents, 0x524,
-			     0, 2,	/* M */
-			     8, 2,	/* P */
-			     24, 2,	/* mux */
-			     0);
-
-static const char * const mbus_parents[] = { "osc24M", "pll-periph0-2x",
-					     "pll-ddr0", "pll-ddr1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents, 0x540,
-					0, 3,	/* M */
-					24, 2,	/* mux */
-					BIT(31),	/* gate */
-					CLK_IS_CRITICAL);
-
-static const char * const de_parents[] = { "pll-de", "pll-periph0-2x" };
-static SUNXI_CCU_M_WITH_MUX_GATE(de_clk, "de", de_parents, 0x600,
-				       0, 4,	/* M */
-				       24, 1,	/* mux */
-				       BIT(31),	/* gate */
-				       CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(bus_de_clk, "bus-de", "psi-ahb1-ahb2",
-		      0x60c, BIT(0), 0);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(deinterlace_clk, "deinterlace",
-				       de_parents,
-				       0x620,
-				       0, 4,	/* M */
-				       24, 1,	/* mux */
-				       BIT(31),	/* gate */
-				       0);
-
-static SUNXI_CCU_GATE(bus_deinterlace_clk, "bus-deinterlace", "psi-ahb1-ahb2",
-		      0x62c, BIT(0), 0);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(g2d_clk, "g2d", de_parents, 0x630,
-				       0, 4,	/* M */
-				       24, 1,	/* mux */
-				       BIT(31),	/* gate */
-				       0);
-
-static SUNXI_CCU_GATE(bus_g2d_clk, "bus-g2d", "psi-ahb1-ahb2",
-		      0x63c, BIT(0), 0);
-
-static const char * const gpu0_parents[] = { "pll-gpu", "gpu1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(gpu0_clk, "gpu0", gpu0_parents, 0x670,
-				       0, 2,	/* M */
-				       24, 1,	/* mux */
-				       BIT(31),	/* gate */
-				       CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M_WITH_GATE(gpu1_clk, "gpu1", "pll-periph0-2x", 0x674,
-					0, 2,	/* M */
-					BIT(31),/* gate */
-					0);
-
-static SUNXI_CCU_GATE(bus_gpu_clk, "bus-gpu", "psi-ahb1-ahb2",
-		      0x67c, BIT(0), 0);
-
-static const char * const ce_parents[] = { "osc24M", "pll-periph0-2x" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(ce_clk, "ce", ce_parents, 0x680,
-					0, 4,	/* M */
-					8, 2,	/* N */
-					24, 1,	/* mux */
-					BIT(31),/* gate */
-					0);
-
-static SUNXI_CCU_GATE(bus_ce_clk, "bus-ce", "psi-ahb1-ahb2",
-		      0x68c, BIT(0), 0);
-
-static const char * const ve_parents[] = { "pll-ve" };
-static SUNXI_CCU_M_WITH_MUX_GATE(ve_clk, "ve", ve_parents, 0x690,
-				       0, 3,	/* M */
-				       24, 1,	/* mux */
-				       BIT(31),	/* gate */
-				       CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(bus_ve_clk, "bus-ve", "psi-ahb1-ahb2",
-		      0x69c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_dma_clk, "bus-dma", "psi-ahb1-ahb2",
-		      0x70c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_hstimer_clk, "bus-hstimer", "psi-ahb1-ahb2",
-		      0x73c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(avs_clk, "avs", "osc24M", 0x740, BIT(31), 0);
-
-static SUNXI_CCU_GATE(bus_dbg_clk, "bus-dbg", "psi-ahb1-ahb2",
-		      0x78c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_psi_clk, "bus-psi", "psi-ahb1-ahb2",
-		      0x79c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_pwm_clk, "bus-pwm", "apb1", 0x7ac, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_iommu_clk, "bus-iommu", "apb1", 0x7bc, BIT(0), 0);
-
-static const char * const dram_parents[] = { "pll-ddr0", "pll-ddr1" };
-static struct ccu_div dram_clk = {
-	.div		= _SUNXI_CCU_DIV(0, 2),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common	= {
-		.reg		= 0x800,
-		.hw.init	= CLK_HW_INIT_PARENTS("dram",
-						      dram_parents,
-						      &ccu_div_ops,
-						      CLK_IS_CRITICAL),
-	},
-};
-
-static SUNXI_CCU_GATE(mbus_dma_clk, "mbus-dma", "mbus",
-		      0x804, BIT(0), 0);
-static SUNXI_CCU_GATE(mbus_ve_clk, "mbus-ve", "mbus",
-		      0x804, BIT(1), 0);
-static SUNXI_CCU_GATE(mbus_ce_clk, "mbus-ce", "mbus",
-		      0x804, BIT(2), 0);
-static SUNXI_CCU_GATE(mbus_ts_clk, "mbus-ts", "mbus",
-		      0x804, BIT(3), 0);
-static SUNXI_CCU_GATE(mbus_nand_clk, "mbus-nand", "mbus",
-		      0x804, BIT(5), 0);
-static SUNXI_CCU_GATE(mbus_g2d_clk, "mbus-g2d", "mbus",
-		      0x804, BIT(10), 0);
-
-static SUNXI_CCU_GATE(bus_dram_clk, "bus-dram", "psi-ahb1-ahb2",
-		      0x80c, BIT(0), CLK_IS_CRITICAL);
-
-static const char * const nand_spi_parents[] = { "osc24M", "pll-periph0",
-					     "pll-periph1", "pll-periph0-2x",
-					     "pll-periph1-2x" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand0_clk, "nand0", nand_spi_parents, 0x810,
-					0, 4,	/* M */
-					8, 2,	/* N */
-					24, 3,	/* mux */
-					BIT(31),/* gate */
-					0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand1_clk, "nand1", nand_spi_parents, 0x814,
-					0, 4,	/* M */
-					8, 2,	/* N */
-					24, 3,	/* mux */
-					BIT(31),/* gate */
-					0);
-
-static SUNXI_CCU_GATE(bus_nand_clk, "bus-nand", "ahb3", 0x82c, BIT(0), 0);
-
-static const char * const mmc_parents[] = { "osc24M", "pll-periph0-2x",
-					    "pll-periph1-2x" };
-static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc0_clk, "mmc0", mmc_parents, 0x830,
-					  0, 4,		/* M */
-					  8, 2,		/* N */
-					  24, 2,	/* mux */
-					  BIT(31),	/* gate */
-					  2,		/* post-div */
-					  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc1_clk, "mmc1", mmc_parents, 0x834,
-					  0, 4,		/* M */
-					  8, 2,		/* N */
-					  24, 2,	/* mux */
-					  BIT(31),	/* gate */
-					  2,		/* post-div */
-					  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc2_clk, "mmc2", mmc_parents, 0x838,
-					  0, 4,		/* M */
-					  8, 2,		/* N */
-					  24, 2,	/* mux */
-					  BIT(31),	/* gate */
-					  2,		/* post-div */
-					  0);
-
-static SUNXI_CCU_GATE(bus_mmc0_clk, "bus-mmc0", "ahb3", 0x84c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_mmc1_clk, "bus-mmc1", "ahb3", 0x84c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_mmc2_clk, "bus-mmc2", "ahb3", 0x84c, BIT(2), 0);
-
-static SUNXI_CCU_GATE(bus_uart0_clk, "bus-uart0", "apb2", 0x90c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_uart1_clk, "bus-uart1", "apb2", 0x90c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_uart2_clk, "bus-uart2", "apb2", 0x90c, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_uart3_clk, "bus-uart3", "apb2", 0x90c, BIT(3), 0);
-static SUNXI_CCU_GATE(bus_uart4_clk, "bus-uart4", "apb2", 0x90c, BIT(4), 0);
-static SUNXI_CCU_GATE(bus_uart5_clk, "bus-uart5", "apb2", 0x90c, BIT(5), 0);
-
-static SUNXI_CCU_GATE(bus_i2c0_clk, "bus-i2c0", "apb2", 0x91c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_i2c1_clk, "bus-i2c1", "apb2", 0x91c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_i2c2_clk, "bus-i2c2", "apb2", 0x91c, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_i2c3_clk, "bus-i2c3", "apb2", 0x91c, BIT(3), 0);
-static SUNXI_CCU_GATE(bus_i2c4_clk, "bus-i2c4", "apb2", 0x91c, BIT(4), 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", nand_spi_parents, 0x940,
-					0, 4,	/* M */
-					8, 2,	/* N */
-					24, 3,	/* mux */
-					BIT(31),/* gate */
-					0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", nand_spi_parents, 0x944,
-					0, 4,	/* M */
-					8, 2,	/* N */
-					24, 3,	/* mux */
-					BIT(31),/* gate */
-					0);
-
-static SUNXI_CCU_GATE(bus_spi0_clk, "bus-spi0", "ahb3", 0x96c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_spi1_clk, "bus-spi1", "ahb3", 0x96c, BIT(1), 0);
-
-static SUNXI_CCU_GATE(emac_25m_clk, "emac-25m", "ahb3", 0x970,
-		      BIT(31) | BIT(30), 0);
-
-static SUNXI_CCU_GATE(bus_emac0_clk, "bus-emac0", "ahb3", 0x97c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_emac1_clk, "bus-emac1", "ahb3", 0x97c, BIT(1), 0);
-
-static const char * const ts_parents[] = { "osc24M", "pll-periph0" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(ts_clk, "ts", ts_parents, 0x9b0,
-					0, 4,	/* M */
-					8, 2,	/* N */
-					24, 1,	/* mux */
-					BIT(31),/* gate */
-					0);
-
-static SUNXI_CCU_GATE(bus_ts_clk, "bus-ts", "ahb3", 0x9bc, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_ths_clk, "bus-ths", "apb1", 0x9fc, BIT(0), 0);
-
-static const char * const audio_parents[] = { "pll-audio-1x", "pll-audio-2x",
-					      "pll-audio-4x", "pll-audio-hs" };
-static struct ccu_div spdif_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0xa20,
-		.hw.init	= CLK_HW_INIT_PARENTS("spdif",
-						      audio_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static SUNXI_CCU_GATE(bus_spdif_clk, "bus-spdif", "apb1", 0xa2c, BIT(0), 0);
-
-static struct ccu_div dmic_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0xa40,
-		.hw.init	= CLK_HW_INIT_PARENTS("dmic",
-						      audio_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static SUNXI_CCU_GATE(bus_dmic_clk, "bus-dmic", "apb1", 0xa4c, BIT(0), 0);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(audio_codec_1x_clk, "audio-codec-1x",
-				 audio_parents, 0xa50,
-				 0, 4,	/* M */
-				 24, 2,	/* mux */
-				 BIT(31),	/* gate */
-				 CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M_WITH_MUX_GATE(audio_codec_4x_clk, "audio-codec-4x",
-				 audio_parents, 0xa54,
-				 0, 4,	/* M */
-				 24, 2,	/* mux */
-				 BIT(31),	/* gate */
-				 CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(bus_audio_codec_clk, "bus-audio-codec", "apb1", 0xa5c,
-		BIT(0), 0);
-
-static struct ccu_div audio_hub_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0xa60,
-		.hw.init	= CLK_HW_INIT_PARENTS("audio-hub",
-						      audio_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static SUNXI_CCU_GATE(bus_audio_hub_clk, "bus-audio-hub", "apb1", 0xa6c, BIT(0), 0);
-
-/*
- * There are OHCI 12M clock source selection bits for the four USB 2.0 ports.
- * We will force them to 0 (12M divided from 48M).
- */
-#define SUN50I_H616_USB0_CLK_REG		0xa70
-#define SUN50I_H616_USB1_CLK_REG		0xa74
-#define SUN50I_H616_USB2_CLK_REG		0xa78
-#define SUN50I_H616_USB3_CLK_REG		0xa7c
-
-static SUNXI_CCU_GATE(usb_ohci0_clk, "usb-ohci0", "osc12M", 0xa70, BIT(31), 0);
-static SUNXI_CCU_GATE(usb_phy0_clk, "usb-phy0", "osc24M", 0xa70, BIT(29), 0);
-
-static SUNXI_CCU_GATE(usb_ohci1_clk, "usb-ohci1", "osc12M", 0xa74, BIT(31), 0);
-static SUNXI_CCU_GATE(usb_phy1_clk, "usb-phy1", "osc24M", 0xa74, BIT(29), 0);
-
-static SUNXI_CCU_GATE(usb_ohci2_clk, "usb-ohci2", "osc12M", 0xa78, BIT(31), 0);
-static SUNXI_CCU_GATE(usb_phy2_clk, "usb-phy2", "osc24M", 0xa78, BIT(29), 0);
-
-static SUNXI_CCU_GATE(usb_ohci3_clk, "usb-ohci3", "osc12M", 0xa7c, BIT(31), 0);
-static SUNXI_CCU_GATE(usb_phy3_clk, "usb-phy3", "osc24M", 0xa7c, BIT(29), 0);
-
-static SUNXI_CCU_GATE(bus_ohci0_clk, "bus-ohci0", "ahb3", 0xa8c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_ohci1_clk, "bus-ohci1", "ahb3", 0xa8c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_ohci2_clk, "bus-ohci2", "ahb3", 0xa8c, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_ohci3_clk, "bus-ohci3", "ahb3", 0xa8c, BIT(3), 0);
-static SUNXI_CCU_GATE(bus_ehci0_clk, "bus-ehci0", "ahb3", 0xa8c, BIT(4), 0);
-static SUNXI_CCU_GATE(bus_ehci1_clk, "bus-ehci1", "ahb3", 0xa8c, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_ehci2_clk, "bus-ehci2", "ahb3", 0xa8c, BIT(6), 0);
-static SUNXI_CCU_GATE(bus_ehci3_clk, "bus-ehci3", "ahb3", 0xa8c, BIT(7), 0);
-static SUNXI_CCU_GATE(bus_otg_clk, "bus-otg", "ahb3", 0xa8c, BIT(8), 0);
-
-static SUNXI_CCU_GATE(bus_keyadc_clk, "bus-keyadc", "apb1", 0xa9c, BIT(0), 0);
-
-static const char * const hdmi_parents[] = { "pll-video0", "pll-video0-4x",
-					     "pll-video2", "pll-video2-4x" };
-static SUNXI_CCU_M_WITH_MUX_GATE(hdmi_clk, "hdmi", hdmi_parents, 0xb00,
-				 0, 4,		/* M */
-				 24, 2,		/* mux */
-				 BIT(31),	/* gate */
-				 0);
-
-static SUNXI_CCU_GATE(hdmi_slow_clk, "hdmi-slow", "osc24M", 0xb04, BIT(31), 0);
-
-static const char * const hdmi_cec_parents[] = { "osc32k", "pll-periph0-2x" };
-static const struct ccu_mux_fixed_prediv hdmi_cec_predivs[] = {
-	{ .index = 1, .div = 36621 },
-};
-
-#define SUN50I_H616_HDMI_CEC_CLK_REG		0xb10
-static struct ccu_mux hdmi_cec_clk = {
-	.enable		= BIT(31) | BIT(30),
-
-	.mux		= {
-		.shift	= 24,
-		.width	= 2,
-
-		.fixed_predivs	= hdmi_cec_predivs,
-		.n_predivs	= ARRAY_SIZE(hdmi_cec_predivs),
-	},
-
-	.common		= {
-		.reg		= 0xb10,
-		.features	= CCU_FEATURE_FIXED_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("hdmi-cec",
-						      hdmi_cec_parents,
-						      &ccu_mux_ops,
-						      0),
-	},
-};
-
-static SUNXI_CCU_GATE(bus_hdmi_clk, "bus-hdmi", "ahb3", 0xb1c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(bus_tcon_top_clk, "bus-tcon-top", "ahb3",
-		      0xb5c, BIT(0), 0);
-
-static const char * const tcon_tv_parents[] = { "pll-video0",
-						"pll-video0-4x",
-						"pll-video1",
-						"pll-video1-4x" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(tcon_tv0_clk, "tcon-tv0",
-				  tcon_tv_parents, 0xb80,
-				  0, 4,		/* M */
-				  8, 2,		/* P */
-				  24, 3,	/* mux */
-				  BIT(31),	/* gate */
-				  CLK_SET_RATE_PARENT);
-static SUNXI_CCU_MP_WITH_MUX_GATE(tcon_tv1_clk, "tcon-tv1",
-				  tcon_tv_parents, 0xb84,
-				  0, 4,		/* M */
-				  8, 2,		/* P */
-				  24, 3,	/* mux */
-				  BIT(31),	/* gate */
-				  CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(bus_tcon_tv0_clk, "bus-tcon-tv0", "ahb3",
-		      0xb9c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_tcon_tv1_clk, "bus-tcon-tv1", "ahb3",
-		      0xb9c, BIT(1), 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(tve0_clk, "tve0",
-				  tcon_tv_parents, 0xbb0,
-				  0, 4,		/* M */
-				  8, 2,		/* P */
-				  24, 3,	/* mux */
-				  BIT(31),	/* gate */
-				  CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(bus_tve_top_clk, "bus-tve-top", "ahb3",
-		      0xbbc, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_tve0_clk, "bus-tve0", "ahb3",
-		      0xbbc, BIT(1), 0);
-
-static const char * const hdcp_parents[] = { "pll-periph0", "pll-periph1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(hdcp_clk, "hdcp", hdcp_parents, 0xc40,
-				 0, 4,		/* M */
-				 24, 2,		/* mux */
-				 BIT(31),	/* gate */
-				 0);
-
-static SUNXI_CCU_GATE(bus_hdcp_clk, "bus-hdcp", "ahb3", 0xc4c, BIT(0), 0);
-
-/* Fixed factor clocks */
-static CLK_FIXED_FACTOR_FW_NAME(osc12M_clk, "osc12M", "hosc", 2, 1, 0);
-
-static const struct clk_hw *clk_parent_pll_audio[] = {
-	&pll_audio_hs_clk.common.hw
-};
-
-/*
- * The divider of pll-audio is fixed to 24 for now, so 24576000 and 22579200
- * rates can be set exactly in conjunction with sigma-delta modulation.
- */
-static CLK_FIXED_FACTOR_HWS(pll_audio_1x_clk, "pll-audio-1x",
-			    clk_parent_pll_audio,
-			    96, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
-			    clk_parent_pll_audio,
-			    48, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
-			    clk_parent_pll_audio,
-			    24, 1, CLK_SET_RATE_PARENT);
-
-static const struct clk_hw *pll_periph0_parents[] = {
-	&pll_periph0_clk.common.hw
-};
-
-static CLK_FIXED_FACTOR_HWS(pll_periph0_2x_clk, "pll-periph0-2x",
-			    pll_periph0_parents,
-			    1, 2, 0);
-
-static const struct clk_hw *pll_periph1_parents[] = {
-	&pll_periph1_clk.common.hw
-};
-
-static CLK_FIXED_FACTOR_HWS(pll_periph1_2x_clk, "pll-periph1-2x",
-			    pll_periph1_parents,
-			    1, 2, 0);
-
-static CLK_FIXED_FACTOR_HW(pll_video0_4x_clk, "pll-video0-4x",
-			   &pll_video0_clk.common.hw,
-			   1, 4, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HW(pll_video1_4x_clk, "pll-video1-4x",
-			   &pll_video1_clk.common.hw,
-			   1, 4, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HW(pll_video2_4x_clk, "pll-video2-4x",
-			   &pll_video2_clk.common.hw,
-			   1, 4, CLK_SET_RATE_PARENT);
-
-static struct ccu_common *sun50i_h616_ccu_clks[] = {
-	&pll_cpux_clk.common,
-	&pll_ddr0_clk.common,
-	&pll_ddr1_clk.common,
-	&pll_periph0_clk.common,
-	&pll_periph1_clk.common,
-	&pll_gpu_clk.common,
-	&pll_video0_clk.common,
-	&pll_video1_clk.common,
-	&pll_video2_clk.common,
-	&pll_ve_clk.common,
-	&pll_de_clk.common,
-	&pll_audio_hs_clk.common,
-	&cpux_clk.common,
-	&axi_clk.common,
-	&cpux_apb_clk.common,
-	&psi_ahb1_ahb2_clk.common,
-	&ahb3_clk.common,
-	&apb1_clk.common,
-	&apb2_clk.common,
-	&mbus_clk.common,
-	&de_clk.common,
-	&bus_de_clk.common,
-	&deinterlace_clk.common,
-	&bus_deinterlace_clk.common,
-	&g2d_clk.common,
-	&bus_g2d_clk.common,
-	&gpu0_clk.common,
-	&bus_gpu_clk.common,
-	&gpu1_clk.common,
-	&ce_clk.common,
-	&bus_ce_clk.common,
-	&ve_clk.common,
-	&bus_ve_clk.common,
-	&bus_dma_clk.common,
-	&bus_hstimer_clk.common,
-	&avs_clk.common,
-	&bus_dbg_clk.common,
-	&bus_psi_clk.common,
-	&bus_pwm_clk.common,
-	&bus_iommu_clk.common,
-	&dram_clk.common,
-	&mbus_dma_clk.common,
-	&mbus_ve_clk.common,
-	&mbus_ce_clk.common,
-	&mbus_ts_clk.common,
-	&mbus_nand_clk.common,
-	&mbus_g2d_clk.common,
-	&bus_dram_clk.common,
-	&nand0_clk.common,
-	&nand1_clk.common,
-	&bus_nand_clk.common,
-	&mmc0_clk.common,
-	&mmc1_clk.common,
-	&mmc2_clk.common,
-	&bus_mmc0_clk.common,
-	&bus_mmc1_clk.common,
-	&bus_mmc2_clk.common,
-	&bus_uart0_clk.common,
-	&bus_uart1_clk.common,
-	&bus_uart2_clk.common,
-	&bus_uart3_clk.common,
-	&bus_uart4_clk.common,
-	&bus_uart5_clk.common,
-	&bus_i2c0_clk.common,
-	&bus_i2c1_clk.common,
-	&bus_i2c2_clk.common,
-	&bus_i2c3_clk.common,
-	&bus_i2c4_clk.common,
-	&spi0_clk.common,
-	&spi1_clk.common,
-	&bus_spi0_clk.common,
-	&bus_spi1_clk.common,
-	&emac_25m_clk.common,
-	&bus_emac0_clk.common,
-	&bus_emac1_clk.common,
-	&ts_clk.common,
-	&bus_ts_clk.common,
-	&bus_ths_clk.common,
-	&spdif_clk.common,
-	&bus_spdif_clk.common,
-	&dmic_clk.common,
-	&bus_dmic_clk.common,
-	&audio_codec_1x_clk.common,
-	&audio_codec_4x_clk.common,
-	&bus_audio_codec_clk.common,
-	&audio_hub_clk.common,
-	&bus_audio_hub_clk.common,
-	&usb_ohci0_clk.common,
-	&usb_phy0_clk.common,
-	&usb_ohci1_clk.common,
-	&usb_phy1_clk.common,
-	&usb_ohci2_clk.common,
-	&usb_phy2_clk.common,
-	&usb_ohci3_clk.common,
-	&usb_phy3_clk.common,
-	&bus_ohci0_clk.common,
-	&bus_ohci1_clk.common,
-	&bus_ohci2_clk.common,
-	&bus_ohci3_clk.common,
-	&bus_ehci0_clk.common,
-	&bus_ehci1_clk.common,
-	&bus_ehci2_clk.common,
-	&bus_ehci3_clk.common,
-	&bus_otg_clk.common,
-	&bus_keyadc_clk.common,
-	&hdmi_clk.common,
-	&hdmi_slow_clk.common,
-	&hdmi_cec_clk.common,
-	&bus_hdmi_clk.common,
-	&bus_tcon_top_clk.common,
-	&tcon_tv0_clk.common,
-	&tcon_tv1_clk.common,
-	&bus_tcon_tv0_clk.common,
-	&bus_tcon_tv1_clk.common,
-	&tve0_clk.common,
-	&bus_tve_top_clk.common,
-	&bus_tve0_clk.common,
-	&hdcp_clk.common,
-	&bus_hdcp_clk.common,
-};
-
-static struct clk_hw_onecell_data sun50i_h616_hw_clks = {
-	.hws	= {
-		[CLK_OSC12M]		= &osc12M_clk.hw,
-		[CLK_PLL_CPUX]		= &pll_cpux_clk.common.hw,
-		[CLK_PLL_DDR0]		= &pll_ddr0_clk.common.hw,
-		[CLK_PLL_DDR1]		= &pll_ddr1_clk.common.hw,
-		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
-		[CLK_PLL_PERIPH0_2X]	= &pll_periph0_2x_clk.hw,
-		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
-		[CLK_PLL_PERIPH1_2X]	= &pll_periph1_2x_clk.hw,
-		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
-		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
-		[CLK_PLL_VIDEO0_4X]	= &pll_video0_4x_clk.hw,
-		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
-		[CLK_PLL_VIDEO1_4X]	= &pll_video1_4x_clk.hw,
-		[CLK_PLL_VIDEO2]	= &pll_video2_clk.common.hw,
-		[CLK_PLL_VIDEO2_4X]	= &pll_video2_4x_clk.hw,
-		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
-		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
-		[CLK_PLL_AUDIO_HS]	= &pll_audio_hs_clk.common.hw,
-		[CLK_PLL_AUDIO_1X]	= &pll_audio_1x_clk.hw,
-		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
-		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
-		[CLK_CPUX]		= &cpux_clk.common.hw,
-		[CLK_AXI]		= &axi_clk.common.hw,
-		[CLK_CPUX_APB]		= &cpux_apb_clk.common.hw,
-		[CLK_PSI_AHB1_AHB2]	= &psi_ahb1_ahb2_clk.common.hw,
-		[CLK_AHB3]		= &ahb3_clk.common.hw,
-		[CLK_APB1]		= &apb1_clk.common.hw,
-		[CLK_APB2]		= &apb2_clk.common.hw,
-		[CLK_MBUS]		= &mbus_clk.common.hw,
-		[CLK_DE]		= &de_clk.common.hw,
-		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
-		[CLK_DEINTERLACE]	= &deinterlace_clk.common.hw,
-		[CLK_BUS_DEINTERLACE]	= &bus_deinterlace_clk.common.hw,
-		[CLK_G2D]		= &g2d_clk.common.hw,
-		[CLK_BUS_G2D]		= &bus_g2d_clk.common.hw,
-		[CLK_GPU0]		= &gpu0_clk.common.hw,
-		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
-		[CLK_GPU1]		= &gpu1_clk.common.hw,
-		[CLK_CE]		= &ce_clk.common.hw,
-		[CLK_BUS_CE]		= &bus_ce_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
-		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
-		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-		[CLK_BUS_DBG]		= &bus_dbg_clk.common.hw,
-		[CLK_BUS_PSI]		= &bus_psi_clk.common.hw,
-		[CLK_BUS_PWM]		= &bus_pwm_clk.common.hw,
-		[CLK_BUS_IOMMU]		= &bus_iommu_clk.common.hw,
-		[CLK_DRAM]		= &dram_clk.common.hw,
-		[CLK_MBUS_DMA]		= &mbus_dma_clk.common.hw,
-		[CLK_MBUS_VE]		= &mbus_ve_clk.common.hw,
-		[CLK_MBUS_CE]		= &mbus_ce_clk.common.hw,
-		[CLK_MBUS_TS]		= &mbus_ts_clk.common.hw,
-		[CLK_MBUS_NAND]		= &mbus_nand_clk.common.hw,
-		[CLK_MBUS_G2D]		= &mbus_g2d_clk.common.hw,
-		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
-		[CLK_NAND0]		= &nand0_clk.common.hw,
-		[CLK_NAND1]		= &nand1_clk.common.hw,
-		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC2]		= &mmc2_clk.common.hw,
-		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
-		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
-		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
-		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
-		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
-		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
-		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
-		[CLK_BUS_UART4]		= &bus_uart4_clk.common.hw,
-		[CLK_BUS_UART5]		= &bus_uart5_clk.common.hw,
-		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
-		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
-		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
-		[CLK_BUS_I2C3]		= &bus_i2c3_clk.common.hw,
-		[CLK_BUS_I2C4]		= &bus_i2c4_clk.common.hw,
-		[CLK_SPI0]		= &spi0_clk.common.hw,
-		[CLK_SPI1]		= &spi1_clk.common.hw,
-		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
-		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
-		[CLK_EMAC_25M]		= &emac_25m_clk.common.hw,
-		[CLK_BUS_EMAC0]		= &bus_emac0_clk.common.hw,
-		[CLK_BUS_EMAC1]		= &bus_emac1_clk.common.hw,
-		[CLK_TS]		= &ts_clk.common.hw,
-		[CLK_BUS_TS]		= &bus_ts_clk.common.hw,
-		[CLK_BUS_THS]		= &bus_ths_clk.common.hw,
-		[CLK_SPDIF]		= &spdif_clk.common.hw,
-		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
-		[CLK_DMIC]		= &dmic_clk.common.hw,
-		[CLK_BUS_DMIC]		= &bus_dmic_clk.common.hw,
-		[CLK_AUDIO_CODEC_1X]	= &audio_codec_1x_clk.common.hw,
-		[CLK_AUDIO_CODEC_4X]	= &audio_codec_4x_clk.common.hw,
-		[CLK_BUS_AUDIO_CODEC]	= &bus_audio_codec_clk.common.hw,
-		[CLK_AUDIO_HUB]		= &audio_hub_clk.common.hw,
-		[CLK_BUS_AUDIO_HUB]	= &bus_audio_hub_clk.common.hw,
-		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
-		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
-		[CLK_USB_OHCI1]		= &usb_ohci1_clk.common.hw,
-		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
-		[CLK_USB_OHCI2]		= &usb_ohci2_clk.common.hw,
-		[CLK_USB_PHY2]		= &usb_phy2_clk.common.hw,
-		[CLK_USB_OHCI3]		= &usb_ohci3_clk.common.hw,
-		[CLK_USB_PHY3]		= &usb_phy3_clk.common.hw,
-		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
-		[CLK_BUS_OHCI1]		= &bus_ohci1_clk.common.hw,
-		[CLK_BUS_OHCI2]		= &bus_ohci2_clk.common.hw,
-		[CLK_BUS_OHCI3]		= &bus_ohci3_clk.common.hw,
-		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
-		[CLK_BUS_EHCI1]		= &bus_ehci1_clk.common.hw,
-		[CLK_BUS_EHCI2]		= &bus_ehci2_clk.common.hw,
-		[CLK_BUS_EHCI3]		= &bus_ehci3_clk.common.hw,
-		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
-		[CLK_BUS_KEYADC]	= &bus_keyadc_clk.common.hw,
-		[CLK_HDMI]		= &hdmi_clk.common.hw,
-		[CLK_HDMI_SLOW]		= &hdmi_slow_clk.common.hw,
-		[CLK_HDMI_CEC]		= &hdmi_cec_clk.common.hw,
-		[CLK_BUS_HDMI]		= &bus_hdmi_clk.common.hw,
-		[CLK_BUS_TCON_TOP]	= &bus_tcon_top_clk.common.hw,
-		[CLK_TCON_TV0]		= &tcon_tv0_clk.common.hw,
-		[CLK_TCON_TV1]		= &tcon_tv1_clk.common.hw,
-		[CLK_BUS_TCON_TV0]	= &bus_tcon_tv0_clk.common.hw,
-		[CLK_BUS_TCON_TV1]	= &bus_tcon_tv1_clk.common.hw,
-		[CLK_TVE0]		= &tve0_clk.common.hw,
-		[CLK_BUS_TVE_TOP]	= &bus_tve_top_clk.common.hw,
-		[CLK_BUS_TVE0]		= &bus_tve0_clk.common.hw,
-		[CLK_HDCP]		= &hdcp_clk.common.hw,
-		[CLK_BUS_HDCP]		= &bus_hdcp_clk.common.hw,
-	},
-	.num = CLK_NUMBER,
-};
-
-static struct ccu_reset_map sun50i_h616_ccu_resets[] = {
-	[RST_MBUS]		= { 0x540, BIT(30) },
-
-	[RST_BUS_DE]		= { 0x60c, BIT(16) },
-	[RST_BUS_DEINTERLACE]	= { 0x62c, BIT(16) },
-	[RST_BUS_GPU]		= { 0x67c, BIT(16) },
-	[RST_BUS_CE]		= { 0x68c, BIT(16) },
-	[RST_BUS_VE]		= { 0x69c, BIT(16) },
-	[RST_BUS_DMA]		= { 0x70c, BIT(16) },
-	[RST_BUS_HSTIMER]	= { 0x73c, BIT(16) },
-	[RST_BUS_DBG]		= { 0x78c, BIT(16) },
-	[RST_BUS_PSI]		= { 0x79c, BIT(16) },
-	[RST_BUS_PWM]		= { 0x7ac, BIT(16) },
-	[RST_BUS_IOMMU]		= { 0x7bc, BIT(16) },
-	[RST_BUS_DRAM]		= { 0x80c, BIT(16) },
-	[RST_BUS_NAND]		= { 0x82c, BIT(16) },
-	[RST_BUS_MMC0]		= { 0x84c, BIT(16) },
-	[RST_BUS_MMC1]		= { 0x84c, BIT(17) },
-	[RST_BUS_MMC2]		= { 0x84c, BIT(18) },
-	[RST_BUS_UART0]		= { 0x90c, BIT(16) },
-	[RST_BUS_UART1]		= { 0x90c, BIT(17) },
-	[RST_BUS_UART2]		= { 0x90c, BIT(18) },
-	[RST_BUS_UART3]		= { 0x90c, BIT(19) },
-	[RST_BUS_UART4]		= { 0x90c, BIT(20) },
-	[RST_BUS_UART5]		= { 0x90c, BIT(21) },
-	[RST_BUS_I2C0]		= { 0x91c, BIT(16) },
-	[RST_BUS_I2C1]		= { 0x91c, BIT(17) },
-	[RST_BUS_I2C2]		= { 0x91c, BIT(18) },
-	[RST_BUS_I2C3]		= { 0x91c, BIT(19) },
-	[RST_BUS_I2C4]		= { 0x91c, BIT(20) },
-	[RST_BUS_SPI0]		= { 0x96c, BIT(16) },
-	[RST_BUS_SPI1]		= { 0x96c, BIT(17) },
-	[RST_BUS_EMAC0]		= { 0x97c, BIT(16) },
-	[RST_BUS_EMAC1]		= { 0x97c, BIT(17) },
-	[RST_BUS_TS]		= { 0x9bc, BIT(16) },
-	[RST_BUS_THS]		= { 0x9fc, BIT(16) },
-	[RST_BUS_SPDIF]		= { 0xa2c, BIT(16) },
-	[RST_BUS_DMIC]		= { 0xa4c, BIT(16) },
-	[RST_BUS_AUDIO_CODEC]	= { 0xa5c, BIT(16) },
-	[RST_BUS_AUDIO_HUB]	= { 0xa6c, BIT(16) },
-
-	[RST_USB_PHY0]		= { 0xa70, BIT(30) },
-	[RST_USB_PHY1]		= { 0xa74, BIT(30) },
-	[RST_USB_PHY2]		= { 0xa78, BIT(30) },
-	[RST_USB_PHY3]		= { 0xa7c, BIT(30) },
-	[RST_BUS_OHCI0]		= { 0xa8c, BIT(16) },
-	[RST_BUS_OHCI1]		= { 0xa8c, BIT(17) },
-	[RST_BUS_OHCI2]		= { 0xa8c, BIT(18) },
-	[RST_BUS_OHCI3]		= { 0xa8c, BIT(19) },
-	[RST_BUS_EHCI0]		= { 0xa8c, BIT(20) },
-	[RST_BUS_EHCI1]		= { 0xa8c, BIT(21) },
-	[RST_BUS_EHCI2]		= { 0xa8c, BIT(22) },
-	[RST_BUS_EHCI3]		= { 0xa8c, BIT(23) },
-	[RST_BUS_OTG]		= { 0xa8c, BIT(24) },
-	[RST_BUS_KEYADC]	= { 0xa9c, BIT(16) },
-
-	[RST_BUS_HDMI]		= { 0xb1c, BIT(16) },
-	[RST_BUS_HDMI_SUB]	= { 0xb1c, BIT(17) },
-	[RST_BUS_TCON_TOP]	= { 0xb5c, BIT(16) },
-	[RST_BUS_TCON_TV0]	= { 0xb9c, BIT(16) },
-	[RST_BUS_TCON_TV1]	= { 0xb9c, BIT(17) },
-	[RST_BUS_TVE_TOP]	= { 0xbbc, BIT(16) },
-	[RST_BUS_TVE0]		= { 0xbbc, BIT(17) },
-	[RST_BUS_HDCP]		= { 0xc4c, BIT(16) },
-};
-
-static const struct sunxi_ccu_desc sun50i_h616_ccu_desc = {
-	.ccu_clks	= sun50i_h616_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun50i_h616_ccu_clks),
-
-	.hw_clks	= &sun50i_h616_hw_clks,
-
-	.resets		= sun50i_h616_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun50i_h616_ccu_resets),
-};
-
-static const u32 pll_regs[] = {
-	SUN50I_H616_PLL_CPUX_REG,
-	SUN50I_H616_PLL_DDR0_REG,
-	SUN50I_H616_PLL_DDR1_REG,
-	SUN50I_H616_PLL_PERIPH0_REG,
-	SUN50I_H616_PLL_PERIPH1_REG,
-	SUN50I_H616_PLL_GPU_REG,
-	SUN50I_H616_PLL_VIDEO0_REG,
-	SUN50I_H616_PLL_VIDEO1_REG,
-	SUN50I_H616_PLL_VIDEO2_REG,
-	SUN50I_H616_PLL_VE_REG,
-	SUN50I_H616_PLL_DE_REG,
-	SUN50I_H616_PLL_AUDIO_REG,
-};
-
-static const u32 pll_video_regs[] = {
-	SUN50I_H616_PLL_VIDEO0_REG,
-	SUN50I_H616_PLL_VIDEO1_REG,
-	SUN50I_H616_PLL_VIDEO2_REG,
-};
-
-static const u32 usb2_clk_regs[] = {
-	SUN50I_H616_USB0_CLK_REG,
-	SUN50I_H616_USB1_CLK_REG,
-	SUN50I_H616_USB2_CLK_REG,
-	SUN50I_H616_USB3_CLK_REG,
-};
-
-static void __init sun50i_h616_ccu_setup(struct device_node *node)
-{
-	void __iomem *reg;
-	u32 val;
-	int i;
-
-	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
-	if (IS_ERR(reg)) {
-		pr_err("%pOF: Could not map clock registers\n", node);
-		return;
-	}
-
-	/* Enable the lock bits and the output enable bits on all PLLs */
-	for (i = 0; i < ARRAY_SIZE(pll_regs); i++) {
-		val = readl(reg + pll_regs[i]);
-		val |= BIT(29) | BIT(27);
-		writel(val, reg + pll_regs[i]);
-	}
-
-	/*
-	 * Force the output divider of video PLLs to 0.
-	 *
-	 * See the comment before pll-video0 definition for the reason.
-	 */
-	for (i = 0; i < ARRAY_SIZE(pll_video_regs); i++) {
-		val = readl(reg + pll_video_regs[i]);
-		val &= ~BIT(0);
-		writel(val, reg + pll_video_regs[i]);
-	}
-
-	/*
-	 * Force OHCI 12M clock sources to 00 (12MHz divided from 48MHz)
-	 *
-	 * This clock mux is still mysterious, and the code just enforces
-	 * it to have a valid clock parent.
-	 */
-	for (i = 0; i < ARRAY_SIZE(usb2_clk_regs); i++) {
-		val = readl(reg + usb2_clk_regs[i]);
-		val &= ~GENMASK(25, 24);
-		writel(val, reg + usb2_clk_regs[i]);
-	}
-
-	/*
-	 * Force the post-divider of pll-audio to 12 and the output divider
-	 * of it to 2, so 24576000 and 22579200 rates can be set exactly.
-	 */
-	val = readl(reg + SUN50I_H616_PLL_AUDIO_REG);
-	val &= ~(GENMASK(21, 16) | BIT(0));
-	writel(val | (11 << 16) | BIT(0), reg + SUN50I_H616_PLL_AUDIO_REG);
-
-	/*
-	 * First clock parent (osc32K) is unusable for CEC. But since there
-	 * is no good way to force parent switch (both run with same frequency),
-	 * just set second clock parent here.
-	 */
-	val = readl(reg + SUN50I_H616_HDMI_CEC_CLK_REG);
-	val |= BIT(24);
-	writel(val, reg + SUN50I_H616_HDMI_CEC_CLK_REG);
-
-	of_sunxi_ccu_probe(node, reg, &sun50i_h616_ccu_desc);
-}
-
-CLK_OF_DECLARE(sun50i_h616_ccu, "allwinner,sun50i-h616-ccu",
-	       sun50i_h616_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/ccu-sun50i-h616.h b/drivers/clk/sunxi-ng/ccu-sun50i-h616.h
deleted file mode 100644
index dd671b413f22..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun50i-h616.h
+++ /dev/null
@@ -1,56 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0 */
-/*
- * Copyright 2020 Arm Ltd.
- */
-
-#ifndef _CCU_SUN50I_H616_H_
-#define _CCU_SUN50I_H616_H_
-
-#include <dt-bindings/clock/sun50i-h616-ccu.h>
-#include <dt-bindings/reset/sun50i-h616-ccu.h>
-
-#define CLK_OSC12M		0
-#define CLK_PLL_CPUX		1
-#define CLK_PLL_DDR0		2
-#define CLK_PLL_DDR1		3
-
-/* PLL_PERIPH0 exported for PRCM */
-
-#define CLK_PLL_PERIPH0_2X	5
-#define CLK_PLL_PERIPH1		6
-#define CLK_PLL_PERIPH1_2X	7
-#define CLK_PLL_GPU		8
-#define CLK_PLL_VIDEO0		9
-#define CLK_PLL_VIDEO0_4X	10
-#define CLK_PLL_VIDEO1		11
-#define CLK_PLL_VIDEO1_4X	12
-#define CLK_PLL_VIDEO2		13
-#define CLK_PLL_VIDEO2_4X	14
-#define CLK_PLL_VE		15
-#define CLK_PLL_DE		16
-#define CLK_PLL_AUDIO_HS	17
-#define CLK_PLL_AUDIO_1X	18
-#define CLK_PLL_AUDIO_2X	19
-#define CLK_PLL_AUDIO_4X	20
-
-/* CPUX clock exported for DVFS */
-
-#define CLK_AXI			22
-#define CLK_CPUX_APB		23
-#define CLK_PSI_AHB1_AHB2	24
-#define CLK_AHB3		25
-
-/* APB1 clock exported for PIO */
-
-#define CLK_APB2		27
-#define CLK_MBUS		28
-
-/* All module clocks and bus gates are exported except DRAM */
-
-#define CLK_DRAM		49
-
-#define CLK_BUS_DRAM		56
-
-#define CLK_NUMBER		(CLK_BUS_HDCP + 1)
-
-#endif /* _CCU_SUN50I_H616_H_ */
diff --git a/drivers/clk/sunxi-ng/ccu-sun5i.c b/drivers/clk/sunxi-ng/ccu-sun5i.c
deleted file mode 100644
index 1f4bc0e773a7..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun5i.c
+++ /dev/null
@@ -1,1037 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-only
-/*
- * Copyright (c) 2016 Maxime Ripard. All rights reserved.
- */
-
-#include <linux/clk-provider.h>
-#include <linux/io.h>
-#include <linux/of_address.h>
-
-#include "ccu_common.h"
-#include "ccu_reset.h"
-
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_mp.h"
-#include "ccu_mult.h"
-#include "ccu_nk.h"
-#include "ccu_nkm.h"
-#include "ccu_nkmp.h"
-#include "ccu_nm.h"
-#include "ccu_phase.h"
-#include "ccu_sdm.h"
-
-#include "ccu-sun5i.h"
-
-static struct ccu_nkmp pll_core_clk = {
-	.enable		= BIT(31),
-	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
-	.k		= _SUNXI_CCU_MULT(4, 2),
-	.m		= _SUNXI_CCU_DIV(0, 2),
-	.p		= _SUNXI_CCU_DIV(16, 2),
-	.common		= {
-		.reg		= 0x000,
-		.hw.init	= CLK_HW_INIT("pll-core",
-					      "hosc",
-					      &ccu_nkmp_ops,
-					      0),
-	},
-};
-
-/*
- * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
- * the base (2x, 4x and 8x), and one variable divider (the one true
- * pll audio).
- *
- * With sigma-delta modulation for fractional-N on the audio PLL,
- * we have to use specific dividers. This means the variable divider
- * can no longer be used, as the audio codec requests the exact clock
- * rates we support through this mechanism. So we now hard code the
- * variable divider to 1. This means the clock rates will no longer
- * match the clock names.
- */
-#define SUN5I_PLL_AUDIO_REG	0x008
-
-static struct ccu_sdm_setting pll_audio_sdm_table[] = {
-	{ .rate = 22579200, .pattern = 0xc0010d84, .m = 8, .n = 7 },
-	{ .rate = 24576000, .pattern = 0xc000ac02, .m = 14, .n = 14 },
-};
-
-static struct ccu_nm pll_audio_base_clk = {
-	.enable		= BIT(31),
-	.n		= _SUNXI_CCU_MULT_OFFSET(8, 7, 0),
-
-	/*
-	 * The datasheet is wrong here, this doesn't have any
-	 * offset
-	 */
-	.m		= _SUNXI_CCU_DIV_OFFSET(0, 5, 0),
-	.sdm		= _SUNXI_CCU_SDM(pll_audio_sdm_table, 0,
-					 0x00c, BIT(31)),
-	.common		= {
-		.reg		= 0x008,
-		.features	= CCU_FEATURE_SIGMA_DELTA_MOD,
-		.hw.init	= CLK_HW_INIT("pll-audio-base",
-					      "hosc",
-					      &ccu_nm_ops,
-					      0),
-	},
-};
-
-static struct ccu_mult pll_video0_clk = {
-	.enable		= BIT(31),
-	.mult		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(0, 7, 0, 9, 127),
-	.frac		= _SUNXI_CCU_FRAC(BIT(15), BIT(14),
-					  270000000, 297000000),
-	.common		= {
-		.reg		= 0x010,
-		.features	= (CCU_FEATURE_FRACTIONAL |
-				   CCU_FEATURE_ALL_PREDIV),
-		.prediv		= 8,
-		.hw.init	= CLK_HW_INIT("pll-video0",
-					      "hosc",
-					      &ccu_mult_ops,
-					      0),
-	},
-};
-
-static struct ccu_nkmp pll_ve_clk = {
-	.enable		= BIT(31),
-	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
-	.k		= _SUNXI_CCU_MULT(4, 2),
-	.m		= _SUNXI_CCU_DIV(0, 2),
-	.p		= _SUNXI_CCU_DIV(16, 2),
-	.common		= {
-		.reg		= 0x018,
-		.hw.init	= CLK_HW_INIT("pll-ve",
-					      "hosc",
-					      &ccu_nkmp_ops,
-					      0),
-	},
-};
-
-static struct ccu_nk pll_ddr_base_clk = {
-	.enable		= BIT(31),
-	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
-	.k		= _SUNXI_CCU_MULT(4, 2),
-	.common		= {
-		.reg		= 0x020,
-		.hw.init	= CLK_HW_INIT("pll-ddr-base",
-					      "hosc",
-					      &ccu_nk_ops,
-					      0),
-	},
-};
-
-static SUNXI_CCU_M(pll_ddr_clk, "pll-ddr", "pll-ddr-base", 0x020, 0, 2,
-		   CLK_IS_CRITICAL);
-
-static struct ccu_div pll_ddr_other_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(16, 2, CLK_DIVIDER_POWER_OF_TWO),
-
-	.common		= {
-		.reg		= 0x020,
-		.hw.init	= CLK_HW_INIT("pll-ddr-other", "pll-ddr-base",
-					      &ccu_div_ops,
-					      0),
-	},
-};
-
-static struct ccu_nk pll_periph_clk = {
-	.enable		= BIT(31),
-	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
-	.k		= _SUNXI_CCU_MULT(4, 2),
-	.fixed_post_div	= 2,
-	.common		= {
-		.reg		= 0x028,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-periph",
-					      "hosc",
-					      &ccu_nk_ops,
-					      0),
-	},
-};
-
-static struct ccu_mult pll_video1_clk = {
-	.enable		= BIT(31),
-	.mult		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(0, 7, 0, 9, 127),
-	.frac		= _SUNXI_CCU_FRAC(BIT(15), BIT(14),
-				  270000000, 297000000),
-	.common		= {
-		.reg		= 0x030,
-		.features	= (CCU_FEATURE_FRACTIONAL |
-				   CCU_FEATURE_ALL_PREDIV),
-		.prediv		= 8,
-		.hw.init	= CLK_HW_INIT("pll-video1",
-					      "hosc",
-					      &ccu_mult_ops,
-					      0),
-	},
-};
-
-static SUNXI_CCU_GATE(hosc_clk,	"hosc",	"osc24M", 0x050, BIT(0), 0);
-
-#define SUN5I_AHB_REG	0x054
-static const char * const cpu_parents[] = { "osc32k", "hosc",
-					    "pll-core" , "pll-periph" };
-static const struct ccu_mux_fixed_prediv cpu_predivs[] = {
-	{ .index = 3, .div = 3, },
-};
-static struct ccu_mux cpu_clk = {
-	.mux		= {
-		.shift		= 16,
-		.width		= 2,
-		.fixed_predivs	= cpu_predivs,
-		.n_predivs	= ARRAY_SIZE(cpu_predivs),
-	},
-	.common		= {
-		.reg		= 0x054,
-		.features	= CCU_FEATURE_FIXED_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("cpu",
-						      cpu_parents,
-						      &ccu_mux_ops,
-						      CLK_SET_RATE_PARENT | CLK_IS_CRITICAL),
-	}
-};
-
-static SUNXI_CCU_M(axi_clk, "axi", "cpu", 0x054, 0, 2, 0);
-
-static const char * const ahb_parents[] = { "axi" , "cpu", "pll-periph" };
-static const struct ccu_mux_fixed_prediv ahb_predivs[] = {
-	{ .index = 2, .div = 2, },
-};
-static struct ccu_div ahb_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= {
-		.shift		= 6,
-		.width		= 2,
-		.fixed_predivs	= ahb_predivs,
-		.n_predivs	= ARRAY_SIZE(ahb_predivs),
-	},
-
-	.common		= {
-		.reg		= 0x054,
-		.hw.init	= CLK_HW_INIT_PARENTS("ahb",
-						      ahb_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static struct clk_div_table apb0_div_table[] = {
-	{ .val = 0, .div = 2 },
-	{ .val = 1, .div = 2 },
-	{ .val = 2, .div = 4 },
-	{ .val = 3, .div = 8 },
-	{ /* Sentinel */ },
-};
-static SUNXI_CCU_DIV_TABLE(apb0_clk, "apb0", "ahb",
-			   0x054, 8, 2, apb0_div_table, 0);
-
-static const char * const apb1_parents[] = { "hosc", "pll-periph", "osc32k" };
-static SUNXI_CCU_MP_WITH_MUX(apb1_clk, "apb1", apb1_parents, 0x058,
-			     0, 5,	/* M */
-			     16, 2,	/* P */
-			     24, 2,	/* mux */
-			     0);
-
-static SUNXI_CCU_GATE(axi_dram_clk,	"axi-dram",	"axi",
-		      0x05c, BIT(0), 0);
-
-static SUNXI_CCU_GATE(ahb_otg_clk,	"ahb-otg",	"ahb",
-		      0x060, BIT(0), 0);
-static SUNXI_CCU_GATE(ahb_ehci_clk,	"ahb-ehci",	"ahb",
-		      0x060, BIT(1), 0);
-static SUNXI_CCU_GATE(ahb_ohci_clk,	"ahb-ohci",	"ahb",
-		      0x060, BIT(2), 0);
-static SUNXI_CCU_GATE(ahb_ss_clk,	"ahb-ss",	"ahb",
-		      0x060, BIT(5), 0);
-static SUNXI_CCU_GATE(ahb_dma_clk,	"ahb-dma",	"ahb",
-		      0x060, BIT(6), 0);
-static SUNXI_CCU_GATE(ahb_bist_clk,	"ahb-bist",	"ahb",
-		      0x060, BIT(7), 0);
-static SUNXI_CCU_GATE(ahb_mmc0_clk,	"ahb-mmc0",	"ahb",
-		      0x060, BIT(8), 0);
-static SUNXI_CCU_GATE(ahb_mmc1_clk,	"ahb-mmc1",	"ahb",
-		      0x060, BIT(9), 0);
-static SUNXI_CCU_GATE(ahb_mmc2_clk,	"ahb-mmc2",	"ahb",
-		      0x060, BIT(10), 0);
-static SUNXI_CCU_GATE(ahb_nand_clk,	"ahb-nand",	"ahb",
-		      0x060, BIT(13), 0);
-static SUNXI_CCU_GATE(ahb_sdram_clk,	"ahb-sdram",	"ahb",
-		      0x060, BIT(14), CLK_IS_CRITICAL);
-static SUNXI_CCU_GATE(ahb_emac_clk,	"ahb-emac",	"ahb",
-		      0x060, BIT(17), 0);
-static SUNXI_CCU_GATE(ahb_ts_clk,	"ahb-ts",	"ahb",
-		      0x060, BIT(18), 0);
-static SUNXI_CCU_GATE(ahb_spi0_clk,	"ahb-spi0",	"ahb",
-		      0x060, BIT(20), 0);
-static SUNXI_CCU_GATE(ahb_spi1_clk,	"ahb-spi1",	"ahb",
-		      0x060, BIT(21), 0);
-static SUNXI_CCU_GATE(ahb_spi2_clk,	"ahb-spi2",	"ahb",
-		      0x060, BIT(22), 0);
-static SUNXI_CCU_GATE(ahb_gps_clk,	"ahb-gps",	"ahb",
-		      0x060, BIT(26), 0);
-static SUNXI_CCU_GATE(ahb_hstimer_clk,	"ahb-hstimer",	"ahb",
-		      0x060, BIT(28), 0);
-
-static SUNXI_CCU_GATE(ahb_ve_clk,	"ahb-ve",	"ahb",
-		      0x064, BIT(0), 0);
-static SUNXI_CCU_GATE(ahb_tve_clk,	"ahb-tve",	"ahb",
-		      0x064, BIT(2), 0);
-static SUNXI_CCU_GATE(ahb_lcd_clk,	"ahb-lcd",	"ahb",
-		      0x064, BIT(4), 0);
-static SUNXI_CCU_GATE(ahb_csi_clk,	"ahb-csi",	"ahb",
-		      0x064, BIT(8), 0);
-static SUNXI_CCU_GATE(ahb_hdmi_clk,	"ahb-hdmi",	"ahb",
-		      0x064, BIT(11), 0);
-static SUNXI_CCU_GATE(ahb_de_be_clk,	"ahb-de-be",	"ahb",
-		      0x064, BIT(12), 0);
-static SUNXI_CCU_GATE(ahb_de_fe_clk,	"ahb-de-fe",	"ahb",
-		      0x064, BIT(14), 0);
-static SUNXI_CCU_GATE(ahb_iep_clk,	"ahb-iep",	"ahb",
-		      0x064, BIT(19), 0);
-static SUNXI_CCU_GATE(ahb_gpu_clk,	"ahb-gpu",	"ahb",
-		      0x064, BIT(20), 0);
-
-static SUNXI_CCU_GATE(apb0_codec_clk,	"apb0-codec",	"apb0",
-		      0x068, BIT(0), 0);
-static SUNXI_CCU_GATE(apb0_spdif_clk,	"apb0-spdif",	"apb0",
-		      0x068, BIT(1), 0);
-static SUNXI_CCU_GATE(apb0_i2s_clk,	"apb0-i2s",	"apb0",
-		      0x068, BIT(3), 0);
-static SUNXI_CCU_GATE(apb0_pio_clk,	"apb0-pio",	"apb0",
-		      0x068, BIT(5), 0);
-static SUNXI_CCU_GATE(apb0_ir_clk,	"apb0-ir",	"apb0",
-		      0x068, BIT(6), 0);
-static SUNXI_CCU_GATE(apb0_keypad_clk,	"apb0-keypad",	"apb0",
-		      0x068, BIT(10), 0);
-
-static SUNXI_CCU_GATE(apb1_i2c0_clk,	"apb1-i2c0",	"apb1",
-		      0x06c, BIT(0), 0);
-static SUNXI_CCU_GATE(apb1_i2c1_clk,	"apb1-i2c1",	"apb1",
-		      0x06c, BIT(1), 0);
-static SUNXI_CCU_GATE(apb1_i2c2_clk,	"apb1-i2c2",	"apb1",
-		      0x06c, BIT(2), 0);
-static SUNXI_CCU_GATE(apb1_uart0_clk,	"apb1-uart0",	"apb1",
-		      0x06c, BIT(16), 0);
-static SUNXI_CCU_GATE(apb1_uart1_clk,	"apb1-uart1",	"apb1",
-		      0x06c, BIT(17), 0);
-static SUNXI_CCU_GATE(apb1_uart2_clk,	"apb1-uart2",	"apb1",
-		      0x06c, BIT(18), 0);
-static SUNXI_CCU_GATE(apb1_uart3_clk,	"apb1-uart3",	"apb1",
-		      0x06c, BIT(19), 0);
-
-static const char * const mod0_default_parents[] = { "hosc", "pll-periph",
-						     "pll-ddr-other" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand_clk, "nand", mod0_default_parents, 0x080,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents, 0x088,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents, 0x08c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents, 0x090,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(ts_clk, "ts", mod0_default_parents, 0x098,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(ss_clk, "ss", mod0_default_parents, 0x09c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents, 0x0a0,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents, 0x0a4,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi2_clk, "spi2", mod0_default_parents, 0x0a8,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(ir_clk, "ir", mod0_default_parents, 0x0b0,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static const char * const i2s_parents[] = { "pll-audio-8x", "pll-audio-4x",
-					    "pll-audio-2x", "pll-audio" };
-static SUNXI_CCU_MUX_WITH_GATE(i2s_clk, "i2s", i2s_parents,
-			       0x0b8, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static const char * const spdif_parents[] = { "pll-audio-8x", "pll-audio-4x",
-					    "pll-audio-2x", "pll-audio" };
-static SUNXI_CCU_MUX_WITH_GATE(spdif_clk, "spdif", spdif_parents,
-			       0x0c0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static const char * const keypad_parents[] = { "hosc", "losc"};
-static const u8 keypad_table[] = { 0, 2 };
-static struct ccu_mp keypad_clk = {
-	.enable		= BIT(31),
-	.m		= _SUNXI_CCU_DIV(8, 5),
-	.p		= _SUNXI_CCU_DIV(20, 2),
-	.mux		= _SUNXI_CCU_MUX_TABLE(24, 2, keypad_table),
-
-	.common		= {
-		.reg		= 0x0c4,
-		.hw.init	= CLK_HW_INIT_PARENTS("keypad",
-						      keypad_parents,
-						      &ccu_mp_ops,
-						      0),
-	},
-};
-
-static SUNXI_CCU_GATE(usb_ohci_clk,	"usb-ohci",	"pll-periph",
-		      0x0cc, BIT(6), 0);
-static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"pll-periph",
-		      0x0cc, BIT(8), 0);
-static SUNXI_CCU_GATE(usb_phy1_clk,	"usb-phy1",	"pll-periph",
-		      0x0cc, BIT(9), 0);
-
-static const char * const gps_parents[] = { "hosc", "pll-periph",
-					    "pll-video1", "pll-ve" };
-static SUNXI_CCU_M_WITH_MUX_GATE(gps_clk, "gps", gps_parents,
-				 0x0d0, 0, 3, 24, 2, BIT(31), 0);
-
-static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"pll-ddr",
-		      0x100, BIT(0), 0);
-static SUNXI_CCU_GATE(dram_csi_clk,	"dram-csi",	"pll-ddr",
-		      0x100, BIT(1), 0);
-static SUNXI_CCU_GATE(dram_ts_clk,	"dram-ts",	"pll-ddr",
-		      0x100, BIT(3), 0);
-static SUNXI_CCU_GATE(dram_tve_clk,	"dram-tve",	"pll-ddr",
-		      0x100, BIT(5), 0);
-static SUNXI_CCU_GATE(dram_de_fe_clk,	"dram-de-fe",	"pll-ddr",
-		      0x100, BIT(25), 0);
-static SUNXI_CCU_GATE(dram_de_be_clk,	"dram-de-be",	"pll-ddr",
-		      0x100, BIT(26), 0);
-static SUNXI_CCU_GATE(dram_ace_clk,	"dram-ace",	"pll-ddr",
-		      0x100, BIT(29), 0);
-static SUNXI_CCU_GATE(dram_iep_clk,	"dram-iep",	"pll-ddr",
-		      0x100, BIT(31), 0);
-
-static const char * const de_parents[] = { "pll-video0", "pll-video1",
-					   "pll-ddr-other" };
-static SUNXI_CCU_M_WITH_MUX_GATE(de_be_clk, "de-be", de_parents,
-				 0x104, 0, 4, 24, 2, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(de_fe_clk, "de-fe", de_parents,
-				 0x10c, 0, 4, 24, 2, BIT(31), 0);
-
-static const char * const tcon_parents[] = { "pll-video0", "pll-video1",
-					     "pll-video0-2x", "pll-video1-2x" };
-static SUNXI_CCU_MUX_WITH_GATE(tcon_ch0_clk, "tcon-ch0-sclk", tcon_parents,
-			       0x118, 24, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(tcon_ch1_sclk2_clk, "tcon-ch1-sclk2",
-				 tcon_parents,
-				 0x12c, 0, 4, 24, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M_WITH_GATE(tcon_ch1_sclk1_clk, "tcon-ch1-sclk1", "tcon-ch1-sclk2",
-			     0x12c, 11, 1, BIT(15), CLK_SET_RATE_PARENT);
-
-static const char * const csi_parents[] = { "hosc", "pll-video0", "pll-video1",
-					    "pll-video0-2x", "pll-video1-2x" };
-static const u8 csi_table[] = { 0, 1, 2, 5, 6 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi_clk, "csi",
-				       csi_parents, csi_table,
-				       0x134, 0, 5, 24, 3, BIT(31), 0);
-
-static SUNXI_CCU_GATE(ve_clk,		"ve",		"pll-ve",
-		      0x13c, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(codec_clk,	"codec",	"pll-audio",
-		      0x140, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(avs_clk,		"avs",		"hosc",
-		      0x144, BIT(31), 0);
-
-static const char * const hdmi_parents[] = { "pll-video0", "pll-video0-2x" };
-static const u8 hdmi_table[] = { 0, 2 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(hdmi_clk, "hdmi",
-				       hdmi_parents, hdmi_table,
-				       0x150, 0, 4, 24, 2, BIT(31),
-				       CLK_SET_RATE_PARENT);
-
-static const char * const gpu_parents[] = { "pll-video0", "pll-ve",
-					    "pll-ddr-other", "pll-video1",
-					    "pll-video1-2x" };
-static SUNXI_CCU_M_WITH_MUX_GATE(gpu_clk, "gpu", gpu_parents,
-				 0x154, 0, 4, 24, 3, BIT(31), 0);
-
-static const char * const mbus_parents[] = { "hosc", "pll-periph", "pll-ddr" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents,
-				  0x15c, 0, 4, 16, 2, 24, 2, BIT(31), CLK_IS_CRITICAL);
-
-static SUNXI_CCU_GATE(iep_clk,		"iep",		"de-be",
-		      0x160, BIT(31), 0);
-
-static struct ccu_common *sun5i_a10s_ccu_clks[] = {
-	&hosc_clk.common,
-	&pll_core_clk.common,
-	&pll_audio_base_clk.common,
-	&pll_video0_clk.common,
-	&pll_ve_clk.common,
-	&pll_ddr_base_clk.common,
-	&pll_ddr_clk.common,
-	&pll_ddr_other_clk.common,
-	&pll_periph_clk.common,
-	&pll_video1_clk.common,
-	&cpu_clk.common,
-	&axi_clk.common,
-	&ahb_clk.common,
-	&apb0_clk.common,
-	&apb1_clk.common,
-	&axi_dram_clk.common,
-	&ahb_otg_clk.common,
-	&ahb_ehci_clk.common,
-	&ahb_ohci_clk.common,
-	&ahb_ss_clk.common,
-	&ahb_dma_clk.common,
-	&ahb_bist_clk.common,
-	&ahb_mmc0_clk.common,
-	&ahb_mmc1_clk.common,
-	&ahb_mmc2_clk.common,
-	&ahb_nand_clk.common,
-	&ahb_sdram_clk.common,
-	&ahb_emac_clk.common,
-	&ahb_ts_clk.common,
-	&ahb_spi0_clk.common,
-	&ahb_spi1_clk.common,
-	&ahb_spi2_clk.common,
-	&ahb_gps_clk.common,
-	&ahb_hstimer_clk.common,
-	&ahb_ve_clk.common,
-	&ahb_tve_clk.common,
-	&ahb_lcd_clk.common,
-	&ahb_csi_clk.common,
-	&ahb_hdmi_clk.common,
-	&ahb_de_be_clk.common,
-	&ahb_de_fe_clk.common,
-	&ahb_iep_clk.common,
-	&ahb_gpu_clk.common,
-	&apb0_codec_clk.common,
-	&apb0_spdif_clk.common,
-	&apb0_i2s_clk.common,
-	&apb0_pio_clk.common,
-	&apb0_ir_clk.common,
-	&apb0_keypad_clk.common,
-	&apb1_i2c0_clk.common,
-	&apb1_i2c1_clk.common,
-	&apb1_i2c2_clk.common,
-	&apb1_uart0_clk.common,
-	&apb1_uart1_clk.common,
-	&apb1_uart2_clk.common,
-	&apb1_uart3_clk.common,
-	&nand_clk.common,
-	&mmc0_clk.common,
-	&mmc1_clk.common,
-	&mmc2_clk.common,
-	&ts_clk.common,
-	&ss_clk.common,
-	&spi0_clk.common,
-	&spi1_clk.common,
-	&spi2_clk.common,
-	&ir_clk.common,
-	&i2s_clk.common,
-	&spdif_clk.common,
-	&keypad_clk.common,
-	&usb_ohci_clk.common,
-	&usb_phy0_clk.common,
-	&usb_phy1_clk.common,
-	&gps_clk.common,
-	&dram_ve_clk.common,
-	&dram_csi_clk.common,
-	&dram_ts_clk.common,
-	&dram_tve_clk.common,
-	&dram_de_fe_clk.common,
-	&dram_de_be_clk.common,
-	&dram_ace_clk.common,
-	&dram_iep_clk.common,
-	&de_be_clk.common,
-	&de_fe_clk.common,
-	&tcon_ch0_clk.common,
-	&tcon_ch1_sclk2_clk.common,
-	&tcon_ch1_sclk1_clk.common,
-	&csi_clk.common,
-	&ve_clk.common,
-	&codec_clk.common,
-	&avs_clk.common,
-	&hdmi_clk.common,
-	&gpu_clk.common,
-	&mbus_clk.common,
-	&iep_clk.common,
-};
-
-static const struct clk_hw *clk_parent_pll_audio[] = {
-	&pll_audio_base_clk.common.hw
-};
-
-/* We hardcode the divider to 1 for now */
-static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
-			    clk_parent_pll_audio,
-			    1, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
-			    clk_parent_pll_audio,
-			    2, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
-			    clk_parent_pll_audio,
-			    1, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
-			    clk_parent_pll_audio,
-			    1, 2, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HW(pll_video0_2x_clk, "pll-video0-2x",
-			   &pll_video0_clk.common.hw,
-			   1, 2, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HW(pll_video1_2x_clk, "pll-video1-2x",
-			   &pll_video1_clk.common.hw,
-			   1, 2, CLK_SET_RATE_PARENT);
-
-static struct clk_hw_onecell_data sun5i_a10s_hw_clks = {
-	.hws	= {
-		[CLK_HOSC]		= &hosc_clk.common.hw,
-		[CLK_PLL_CORE]		= &pll_core_clk.common.hw,
-		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
-		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
-		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
-		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
-		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
-		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
-		[CLK_PLL_VIDEO0_2X]	= &pll_video0_2x_clk.hw,
-		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
-		[CLK_PLL_DDR_BASE]	= &pll_ddr_base_clk.common.hw,
-		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
-		[CLK_PLL_DDR_OTHER]	= &pll_ddr_other_clk.common.hw,
-		[CLK_PLL_PERIPH]	= &pll_periph_clk.common.hw,
-		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
-		[CLK_PLL_VIDEO1_2X]	= &pll_video1_2x_clk.hw,
-		[CLK_CPU]		= &cpu_clk.common.hw,
-		[CLK_AXI]		= &axi_clk.common.hw,
-		[CLK_AHB]		= &ahb_clk.common.hw,
-		[CLK_APB0]		= &apb0_clk.common.hw,
-		[CLK_APB1]		= &apb1_clk.common.hw,
-		[CLK_DRAM_AXI]		= &axi_dram_clk.common.hw,
-		[CLK_AHB_OTG]		= &ahb_otg_clk.common.hw,
-		[CLK_AHB_EHCI]		= &ahb_ehci_clk.common.hw,
-		[CLK_AHB_OHCI]		= &ahb_ohci_clk.common.hw,
-		[CLK_AHB_SS]		= &ahb_ss_clk.common.hw,
-		[CLK_AHB_DMA]		= &ahb_dma_clk.common.hw,
-		[CLK_AHB_BIST]		= &ahb_bist_clk.common.hw,
-		[CLK_AHB_MMC0]		= &ahb_mmc0_clk.common.hw,
-		[CLK_AHB_MMC1]		= &ahb_mmc1_clk.common.hw,
-		[CLK_AHB_MMC2]		= &ahb_mmc2_clk.common.hw,
-		[CLK_AHB_NAND]		= &ahb_nand_clk.common.hw,
-		[CLK_AHB_SDRAM]		= &ahb_sdram_clk.common.hw,
-		[CLK_AHB_EMAC]		= &ahb_emac_clk.common.hw,
-		[CLK_AHB_TS]		= &ahb_ts_clk.common.hw,
-		[CLK_AHB_SPI0]		= &ahb_spi0_clk.common.hw,
-		[CLK_AHB_SPI1]		= &ahb_spi1_clk.common.hw,
-		[CLK_AHB_SPI2]		= &ahb_spi2_clk.common.hw,
-		[CLK_AHB_GPS]		= &ahb_gps_clk.common.hw,
-		[CLK_AHB_HSTIMER]	= &ahb_hstimer_clk.common.hw,
-		[CLK_AHB_VE]		= &ahb_ve_clk.common.hw,
-		[CLK_AHB_TVE]		= &ahb_tve_clk.common.hw,
-		[CLK_AHB_LCD]		= &ahb_lcd_clk.common.hw,
-		[CLK_AHB_CSI]		= &ahb_csi_clk.common.hw,
-		[CLK_AHB_HDMI]		= &ahb_hdmi_clk.common.hw,
-		[CLK_AHB_DE_BE]		= &ahb_de_be_clk.common.hw,
-		[CLK_AHB_DE_FE]		= &ahb_de_fe_clk.common.hw,
-		[CLK_AHB_IEP]		= &ahb_iep_clk.common.hw,
-		[CLK_AHB_GPU]		= &ahb_gpu_clk.common.hw,
-		[CLK_APB0_CODEC]	= &apb0_codec_clk.common.hw,
-		[CLK_APB0_I2S]		= &apb0_i2s_clk.common.hw,
-		[CLK_APB0_PIO]		= &apb0_pio_clk.common.hw,
-		[CLK_APB0_IR]		= &apb0_ir_clk.common.hw,
-		[CLK_APB0_KEYPAD]	= &apb0_keypad_clk.common.hw,
-		[CLK_APB1_I2C0]		= &apb1_i2c0_clk.common.hw,
-		[CLK_APB1_I2C1]		= &apb1_i2c1_clk.common.hw,
-		[CLK_APB1_I2C2]		= &apb1_i2c2_clk.common.hw,
-		[CLK_APB1_UART0]	= &apb1_uart0_clk.common.hw,
-		[CLK_APB1_UART1]	= &apb1_uart1_clk.common.hw,
-		[CLK_APB1_UART2]	= &apb1_uart2_clk.common.hw,
-		[CLK_APB1_UART3]	= &apb1_uart3_clk.common.hw,
-		[CLK_NAND]		= &nand_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC2]		= &mmc2_clk.common.hw,
-		[CLK_TS]		= &ts_clk.common.hw,
-		[CLK_SS]		= &ss_clk.common.hw,
-		[CLK_SPI0]		= &spi0_clk.common.hw,
-		[CLK_SPI1]		= &spi1_clk.common.hw,
-		[CLK_SPI2]		= &spi2_clk.common.hw,
-		[CLK_IR]		= &ir_clk.common.hw,
-		[CLK_I2S]		= &i2s_clk.common.hw,
-		[CLK_KEYPAD]		= &keypad_clk.common.hw,
-		[CLK_USB_OHCI]		= &usb_ohci_clk.common.hw,
-		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
-		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
-		[CLK_GPS]		= &gps_clk.common.hw,
-		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
-		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
-		[CLK_DRAM_TS]		= &dram_ts_clk.common.hw,
-		[CLK_DRAM_TVE]		= &dram_tve_clk.common.hw,
-		[CLK_DRAM_DE_FE]	= &dram_de_fe_clk.common.hw,
-		[CLK_DRAM_DE_BE]	= &dram_de_be_clk.common.hw,
-		[CLK_DRAM_ACE]		= &dram_ace_clk.common.hw,
-		[CLK_DRAM_IEP]		= &dram_iep_clk.common.hw,
-		[CLK_DE_BE]		= &de_be_clk.common.hw,
-		[CLK_DE_FE]		= &de_fe_clk.common.hw,
-		[CLK_TCON_CH0]		= &tcon_ch0_clk.common.hw,
-		[CLK_TCON_CH1_SCLK]	= &tcon_ch1_sclk2_clk.common.hw,
-		[CLK_TCON_CH1]		= &tcon_ch1_sclk1_clk.common.hw,
-		[CLK_CSI]		= &csi_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_CODEC]		= &codec_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-		[CLK_HDMI]		= &hdmi_clk.common.hw,
-		[CLK_GPU]		= &gpu_clk.common.hw,
-		[CLK_MBUS]		= &mbus_clk.common.hw,
-		[CLK_IEP]		= &iep_clk.common.hw,
-	},
-	.num	= CLK_NUMBER,
-};
-
-static struct ccu_reset_map sun5i_a10s_ccu_resets[] = {
-	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
-	[RST_USB_PHY1]		=  { 0x0cc, BIT(1) },
-
-	[RST_GPS]		=  { 0x0d0, BIT(30) },
-
-	[RST_DE_BE]		=  { 0x104, BIT(30) },
-
-	[RST_DE_FE]		=  { 0x10c, BIT(30) },
-
-	[RST_TVE]		=  { 0x118, BIT(29) },
-	[RST_LCD]		=  { 0x118, BIT(30) },
-
-	[RST_CSI]		=  { 0x134, BIT(30) },
-
-	[RST_VE]		=  { 0x13c, BIT(0) },
-
-	[RST_GPU]		=  { 0x154, BIT(30) },
-
-	[RST_IEP]		=  { 0x160, BIT(30) },
-};
-
-static const struct sunxi_ccu_desc sun5i_a10s_ccu_desc = {
-	.ccu_clks	= sun5i_a10s_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun5i_a10s_ccu_clks),
-
-	.hw_clks	= &sun5i_a10s_hw_clks,
-
-	.resets		= sun5i_a10s_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun5i_a10s_ccu_resets),
-};
-
-/*
- * The A13 is the A10s minus the TS, GPS, HDMI, I2S and the keypad
- */
-static struct clk_hw_onecell_data sun5i_a13_hw_clks = {
-	.hws	= {
-		[CLK_HOSC]		= &hosc_clk.common.hw,
-		[CLK_PLL_CORE]		= &pll_core_clk.common.hw,
-		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
-		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
-		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
-		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
-		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
-		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
-		[CLK_PLL_VIDEO0_2X]	= &pll_video0_2x_clk.hw,
-		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
-		[CLK_PLL_DDR_BASE]	= &pll_ddr_base_clk.common.hw,
-		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
-		[CLK_PLL_DDR_OTHER]	= &pll_ddr_other_clk.common.hw,
-		[CLK_PLL_PERIPH]	= &pll_periph_clk.common.hw,
-		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
-		[CLK_PLL_VIDEO1_2X]	= &pll_video1_2x_clk.hw,
-		[CLK_CPU]		= &cpu_clk.common.hw,
-		[CLK_AXI]		= &axi_clk.common.hw,
-		[CLK_AHB]		= &ahb_clk.common.hw,
-		[CLK_APB0]		= &apb0_clk.common.hw,
-		[CLK_APB1]		= &apb1_clk.common.hw,
-		[CLK_DRAM_AXI]		= &axi_dram_clk.common.hw,
-		[CLK_AHB_OTG]		= &ahb_otg_clk.common.hw,
-		[CLK_AHB_EHCI]		= &ahb_ehci_clk.common.hw,
-		[CLK_AHB_OHCI]		= &ahb_ohci_clk.common.hw,
-		[CLK_AHB_SS]		= &ahb_ss_clk.common.hw,
-		[CLK_AHB_DMA]		= &ahb_dma_clk.common.hw,
-		[CLK_AHB_BIST]		= &ahb_bist_clk.common.hw,
-		[CLK_AHB_MMC0]		= &ahb_mmc0_clk.common.hw,
-		[CLK_AHB_MMC1]		= &ahb_mmc1_clk.common.hw,
-		[CLK_AHB_MMC2]		= &ahb_mmc2_clk.common.hw,
-		[CLK_AHB_NAND]		= &ahb_nand_clk.common.hw,
-		[CLK_AHB_SDRAM]		= &ahb_sdram_clk.common.hw,
-		[CLK_AHB_EMAC]		= &ahb_emac_clk.common.hw,
-		[CLK_AHB_SPI0]		= &ahb_spi0_clk.common.hw,
-		[CLK_AHB_SPI1]		= &ahb_spi1_clk.common.hw,
-		[CLK_AHB_SPI2]		= &ahb_spi2_clk.common.hw,
-		[CLK_AHB_HSTIMER]	= &ahb_hstimer_clk.common.hw,
-		[CLK_AHB_VE]		= &ahb_ve_clk.common.hw,
-		[CLK_AHB_TVE]		= &ahb_tve_clk.common.hw,
-		[CLK_AHB_LCD]		= &ahb_lcd_clk.common.hw,
-		[CLK_AHB_CSI]		= &ahb_csi_clk.common.hw,
-		[CLK_AHB_DE_BE]		= &ahb_de_be_clk.common.hw,
-		[CLK_AHB_DE_FE]		= &ahb_de_fe_clk.common.hw,
-		[CLK_AHB_IEP]		= &ahb_iep_clk.common.hw,
-		[CLK_AHB_GPU]		= &ahb_gpu_clk.common.hw,
-		[CLK_APB0_CODEC]	= &apb0_codec_clk.common.hw,
-		[CLK_APB0_PIO]		= &apb0_pio_clk.common.hw,
-		[CLK_APB0_IR]		= &apb0_ir_clk.common.hw,
-		[CLK_APB1_I2C0]		= &apb1_i2c0_clk.common.hw,
-		[CLK_APB1_I2C1]		= &apb1_i2c1_clk.common.hw,
-		[CLK_APB1_I2C2]		= &apb1_i2c2_clk.common.hw,
-		[CLK_APB1_UART0]	= &apb1_uart0_clk.common.hw,
-		[CLK_APB1_UART1]	= &apb1_uart1_clk.common.hw,
-		[CLK_APB1_UART2]	= &apb1_uart2_clk.common.hw,
-		[CLK_APB1_UART3]	= &apb1_uart3_clk.common.hw,
-		[CLK_NAND]		= &nand_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC2]		= &mmc2_clk.common.hw,
-		[CLK_SS]		= &ss_clk.common.hw,
-		[CLK_SPI0]		= &spi0_clk.common.hw,
-		[CLK_SPI1]		= &spi1_clk.common.hw,
-		[CLK_SPI2]		= &spi2_clk.common.hw,
-		[CLK_IR]		= &ir_clk.common.hw,
-		[CLK_USB_OHCI]		= &usb_ohci_clk.common.hw,
-		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
-		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
-		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
-		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
-		[CLK_DRAM_TVE]		= &dram_tve_clk.common.hw,
-		[CLK_DRAM_DE_FE]	= &dram_de_fe_clk.common.hw,
-		[CLK_DRAM_DE_BE]	= &dram_de_be_clk.common.hw,
-		[CLK_DRAM_ACE]		= &dram_ace_clk.common.hw,
-		[CLK_DRAM_IEP]		= &dram_iep_clk.common.hw,
-		[CLK_DE_BE]		= &de_be_clk.common.hw,
-		[CLK_DE_FE]		= &de_fe_clk.common.hw,
-		[CLK_TCON_CH0]		= &tcon_ch0_clk.common.hw,
-		[CLK_TCON_CH1_SCLK]	= &tcon_ch1_sclk2_clk.common.hw,
-		[CLK_TCON_CH1]		= &tcon_ch1_sclk1_clk.common.hw,
-		[CLK_CSI]		= &csi_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_CODEC]		= &codec_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-		[CLK_GPU]		= &gpu_clk.common.hw,
-		[CLK_MBUS]		= &mbus_clk.common.hw,
-		[CLK_IEP]		= &iep_clk.common.hw,
-	},
-	.num	= CLK_NUMBER,
-};
-
-static const struct sunxi_ccu_desc sun5i_a13_ccu_desc = {
-	.ccu_clks	= sun5i_a10s_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun5i_a10s_ccu_clks),
-
-	.hw_clks	= &sun5i_a13_hw_clks,
-
-	.resets		= sun5i_a10s_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun5i_a10s_ccu_resets),
-};
-
-/*
- * The GR8 is the A10s CCU minus the HDMI and keypad, plus SPDIF
- */
-static struct clk_hw_onecell_data sun5i_gr8_hw_clks = {
-	.hws	= {
-		[CLK_HOSC]		= &hosc_clk.common.hw,
-		[CLK_PLL_CORE]		= &pll_core_clk.common.hw,
-		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
-		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
-		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
-		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
-		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
-		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
-		[CLK_PLL_VIDEO0_2X]	= &pll_video0_2x_clk.hw,
-		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
-		[CLK_PLL_DDR_BASE]	= &pll_ddr_base_clk.common.hw,
-		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
-		[CLK_PLL_DDR_OTHER]	= &pll_ddr_other_clk.common.hw,
-		[CLK_PLL_PERIPH]	= &pll_periph_clk.common.hw,
-		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
-		[CLK_PLL_VIDEO1_2X]	= &pll_video1_2x_clk.hw,
-		[CLK_CPU]		= &cpu_clk.common.hw,
-		[CLK_AXI]		= &axi_clk.common.hw,
-		[CLK_AHB]		= &ahb_clk.common.hw,
-		[CLK_APB0]		= &apb0_clk.common.hw,
-		[CLK_APB1]		= &apb1_clk.common.hw,
-		[CLK_DRAM_AXI]		= &axi_dram_clk.common.hw,
-		[CLK_AHB_OTG]		= &ahb_otg_clk.common.hw,
-		[CLK_AHB_EHCI]		= &ahb_ehci_clk.common.hw,
-		[CLK_AHB_OHCI]		= &ahb_ohci_clk.common.hw,
-		[CLK_AHB_SS]		= &ahb_ss_clk.common.hw,
-		[CLK_AHB_DMA]		= &ahb_dma_clk.common.hw,
-		[CLK_AHB_BIST]		= &ahb_bist_clk.common.hw,
-		[CLK_AHB_MMC0]		= &ahb_mmc0_clk.common.hw,
-		[CLK_AHB_MMC1]		= &ahb_mmc1_clk.common.hw,
-		[CLK_AHB_MMC2]		= &ahb_mmc2_clk.common.hw,
-		[CLK_AHB_NAND]		= &ahb_nand_clk.common.hw,
-		[CLK_AHB_SDRAM]		= &ahb_sdram_clk.common.hw,
-		[CLK_AHB_EMAC]		= &ahb_emac_clk.common.hw,
-		[CLK_AHB_TS]		= &ahb_ts_clk.common.hw,
-		[CLK_AHB_SPI0]		= &ahb_spi0_clk.common.hw,
-		[CLK_AHB_SPI1]		= &ahb_spi1_clk.common.hw,
-		[CLK_AHB_SPI2]		= &ahb_spi2_clk.common.hw,
-		[CLK_AHB_GPS]		= &ahb_gps_clk.common.hw,
-		[CLK_AHB_HSTIMER]	= &ahb_hstimer_clk.common.hw,
-		[CLK_AHB_VE]		= &ahb_ve_clk.common.hw,
-		[CLK_AHB_TVE]		= &ahb_tve_clk.common.hw,
-		[CLK_AHB_LCD]		= &ahb_lcd_clk.common.hw,
-		[CLK_AHB_CSI]		= &ahb_csi_clk.common.hw,
-		[CLK_AHB_DE_BE]		= &ahb_de_be_clk.common.hw,
-		[CLK_AHB_DE_FE]		= &ahb_de_fe_clk.common.hw,
-		[CLK_AHB_IEP]		= &ahb_iep_clk.common.hw,
-		[CLK_AHB_GPU]		= &ahb_gpu_clk.common.hw,
-		[CLK_APB0_CODEC]	= &apb0_codec_clk.common.hw,
-		[CLK_APB0_SPDIF]	= &apb0_spdif_clk.common.hw,
-		[CLK_APB0_I2S]		= &apb0_i2s_clk.common.hw,
-		[CLK_APB0_PIO]		= &apb0_pio_clk.common.hw,
-		[CLK_APB0_IR]		= &apb0_ir_clk.common.hw,
-		[CLK_APB1_I2C0]		= &apb1_i2c0_clk.common.hw,
-		[CLK_APB1_I2C1]		= &apb1_i2c1_clk.common.hw,
-		[CLK_APB1_I2C2]		= &apb1_i2c2_clk.common.hw,
-		[CLK_APB1_UART0]	= &apb1_uart0_clk.common.hw,
-		[CLK_APB1_UART1]	= &apb1_uart1_clk.common.hw,
-		[CLK_APB1_UART2]	= &apb1_uart2_clk.common.hw,
-		[CLK_APB1_UART3]	= &apb1_uart3_clk.common.hw,
-		[CLK_NAND]		= &nand_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC2]		= &mmc2_clk.common.hw,
-		[CLK_TS]		= &ts_clk.common.hw,
-		[CLK_SS]		= &ss_clk.common.hw,
-		[CLK_SPI0]		= &spi0_clk.common.hw,
-		[CLK_SPI1]		= &spi1_clk.common.hw,
-		[CLK_SPI2]		= &spi2_clk.common.hw,
-		[CLK_IR]		= &ir_clk.common.hw,
-		[CLK_I2S]		= &i2s_clk.common.hw,
-		[CLK_SPDIF]		= &spdif_clk.common.hw,
-		[CLK_USB_OHCI]		= &usb_ohci_clk.common.hw,
-		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
-		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
-		[CLK_GPS]		= &gps_clk.common.hw,
-		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
-		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
-		[CLK_DRAM_TS]		= &dram_ts_clk.common.hw,
-		[CLK_DRAM_TVE]		= &dram_tve_clk.common.hw,
-		[CLK_DRAM_DE_FE]	= &dram_de_fe_clk.common.hw,
-		[CLK_DRAM_DE_BE]	= &dram_de_be_clk.common.hw,
-		[CLK_DRAM_ACE]		= &dram_ace_clk.common.hw,
-		[CLK_DRAM_IEP]		= &dram_iep_clk.common.hw,
-		[CLK_DE_BE]		= &de_be_clk.common.hw,
-		[CLK_DE_FE]		= &de_fe_clk.common.hw,
-		[CLK_TCON_CH0]		= &tcon_ch0_clk.common.hw,
-		[CLK_TCON_CH1_SCLK]	= &tcon_ch1_sclk2_clk.common.hw,
-		[CLK_TCON_CH1]		= &tcon_ch1_sclk1_clk.common.hw,
-		[CLK_CSI]		= &csi_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_CODEC]		= &codec_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-		[CLK_GPU]		= &gpu_clk.common.hw,
-		[CLK_MBUS]		= &mbus_clk.common.hw,
-		[CLK_IEP]		= &iep_clk.common.hw,
-	},
-	.num	= CLK_NUMBER,
-};
-
-static const struct sunxi_ccu_desc sun5i_gr8_ccu_desc = {
-	.ccu_clks	= sun5i_a10s_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun5i_a10s_ccu_clks),
-
-	.hw_clks	= &sun5i_gr8_hw_clks,
-
-	.resets		= sun5i_a10s_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun5i_a10s_ccu_resets),
-};
-
-static void __init sun5i_ccu_init(struct device_node *node,
-				  const struct sunxi_ccu_desc *desc)
-{
-	void __iomem *reg;
-	u32 val;
-
-	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
-	if (IS_ERR(reg)) {
-		pr_err("%pOF: Could not map the clock registers\n", node);
-		return;
-	}
-
-	/* Force the PLL-Audio-1x divider to 1 */
-	val = readl(reg + SUN5I_PLL_AUDIO_REG);
-	val &= ~GENMASK(29, 26);
-	writel(val | (0 << 26), reg + SUN5I_PLL_AUDIO_REG);
-
-	/*
-	 * Use the peripheral PLL as the AHB parent, instead of CPU /
-	 * AXI which have rate changes due to cpufreq.
-	 *
-	 * This is especially a big deal for the HS timer whose parent
-	 * clock is AHB.
-	 */
-	val = readl(reg + SUN5I_AHB_REG);
-	val &= ~GENMASK(7, 6);
-	writel(val | (2 << 6), reg + SUN5I_AHB_REG);
-
-	of_sunxi_ccu_probe(node, reg, desc);
-}
-
-static void __init sun5i_a10s_ccu_setup(struct device_node *node)
-{
-	sun5i_ccu_init(node, &sun5i_a10s_ccu_desc);
-}
-CLK_OF_DECLARE(sun5i_a10s_ccu, "allwinner,sun5i-a10s-ccu",
-	       sun5i_a10s_ccu_setup);
-
-static void __init sun5i_a13_ccu_setup(struct device_node *node)
-{
-	sun5i_ccu_init(node, &sun5i_a13_ccu_desc);
-}
-CLK_OF_DECLARE(sun5i_a13_ccu, "allwinner,sun5i-a13-ccu",
-	       sun5i_a13_ccu_setup);
-
-static void __init sun5i_gr8_ccu_setup(struct device_node *node)
-{
-	sun5i_ccu_init(node, &sun5i_gr8_ccu_desc);
-}
-CLK_OF_DECLARE(sun5i_gr8_ccu, "nextthing,gr8-ccu",
-	       sun5i_gr8_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/ccu-sun5i.h b/drivers/clk/sunxi-ng/ccu-sun5i.h
deleted file mode 100644
index f06b7a09d69d..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun5i.h
+++ /dev/null
@@ -1,56 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0-or-later */
-/*
- * Copyright 2016 Maxime Ripard
- *
- * Maxime Ripard <maxime.ripard@free-electrons.com>
- */
-
-#ifndef _CCU_SUN5I_H_
-#define _CCU_SUN5I_H_
-
-#include <dt-bindings/clock/sun5i-ccu.h>
-#include <dt-bindings/reset/sun5i-ccu.h>
-
-/* The HOSC is exported */
-#define CLK_PLL_CORE		2
-#define CLK_PLL_AUDIO_BASE	3
-#define CLK_PLL_AUDIO		4
-#define CLK_PLL_AUDIO_2X	5
-#define CLK_PLL_AUDIO_4X	6
-#define CLK_PLL_AUDIO_8X	7
-#define CLK_PLL_VIDEO0		8
-
-/* The PLL_VIDEO0_2X is exported for HDMI */
-
-#define CLK_PLL_VE		10
-#define CLK_PLL_DDR_BASE	11
-#define CLK_PLL_DDR		12
-#define CLK_PLL_DDR_OTHER	13
-#define CLK_PLL_PERIPH		14
-#define CLK_PLL_VIDEO1		15
-
-/* The PLL_VIDEO1_2X is exported for HDMI */
-/* The CPU clock is exported */
-
-#define CLK_AXI			18
-#define CLK_AHB			19
-#define CLK_APB0		20
-#define CLK_APB1		21
-#define CLK_DRAM_AXI		22
-
-/* AHB gates are exported */
-/* APB0 gates are exported */
-/* APB1 gates are exported */
-/* Modules clocks are exported */
-/* USB clocks are exported */
-/* GPS clock is exported */
-/* DRAM gates are exported */
-/* More display modules clocks are exported */
-
-#define CLK_TCON_CH1_SCLK	91
-
-/* The rest of the module clocks are exported */
-
-#define CLK_NUMBER		(CLK_IEP + 1)
-
-#endif /* _CCU_SUN5I_H_ */
diff --git a/drivers/clk/sunxi-ng/ccu-sun6i-a31.c b/drivers/clk/sunxi-ng/ccu-sun6i-a31.c
deleted file mode 100644
index 3df5c0b41580..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun6i-a31.c
+++ /dev/null
@@ -1,1266 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-only
-/*
- * Copyright (c) 2016 Chen-Yu Tsai
- *
- * Chen-Yu Tsai <wens@csie.org>
- *
- * Based on ccu-sun8i-h3.c by Maxime Ripard.
- */
-
-#include <linux/clk-provider.h>
-#include <linux/io.h>
-#include <linux/of_address.h>
-
-#include "ccu_common.h"
-#include "ccu_reset.h"
-
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_mp.h"
-#include "ccu_mult.h"
-#include "ccu_mux.h"
-#include "ccu_nk.h"
-#include "ccu_nkm.h"
-#include "ccu_nkmp.h"
-#include "ccu_nm.h"
-#include "ccu_phase.h"
-#include "ccu_sdm.h"
-
-#include "ccu-sun6i-a31.h"
-
-static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_cpu_clk, "pll-cpu",
-				     "osc24M", 0x000,
-				     8, 5,	/* N */
-				     4, 2,	/* K */
-				     0, 2,	/* M */
-				     BIT(31),	/* gate */
-				     BIT(28),	/* lock */
-				     0);
-
-/*
- * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
- * the base (2x, 4x and 8x), and one variable divider (the one true
- * pll audio).
- *
- * With sigma-delta modulation for fractional-N on the audio PLL,
- * we have to use specific dividers. This means the variable divider
- * can no longer be used, as the audio codec requests the exact clock
- * rates we support through this mechanism. So we now hard code the
- * variable divider to 1. This means the clock rates will no longer
- * match the clock names.
- */
-#define SUN6I_A31_PLL_AUDIO_REG	0x008
-
-static struct ccu_sdm_setting pll_audio_sdm_table[] = {
-	{ .rate = 22579200, .pattern = 0xc0010d84, .m = 8, .n = 7 },
-	{ .rate = 24576000, .pattern = 0xc000ac02, .m = 14, .n = 14 },
-};
-
-static SUNXI_CCU_NM_WITH_SDM_GATE_LOCK(pll_audio_base_clk, "pll-audio-base",
-				       "osc24M", 0x008,
-				       8, 7,	/* N */
-				       0, 5,	/* M */
-				       pll_audio_sdm_table, BIT(24),
-				       0x284, BIT(31),
-				       BIT(31),	/* gate */
-				       BIT(28),	/* lock */
-				       CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_video0_clk, "pll-video0",
-					"osc24M", 0x010,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_ve_clk, "pll-ve",
-					"osc24M", 0x018,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_ddr_clk, "pll-ddr",
-				    "osc24M", 0x020,
-				    8, 5,	/* N */
-				    4, 2,	/* K */
-				    0, 2,	/* M */
-				    BIT(31),	/* gate */
-				    BIT(28),	/* lock */
-				    CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NK_WITH_GATE_LOCK_POSTDIV(pll_periph_clk, "pll-periph",
-					   "osc24M", 0x028,
-					   8, 5,	/* N */
-					   4, 2,	/* K */
-					   BIT(31),	/* gate */
-					   BIT(28),	/* lock */
-					   2,		/* post-div */
-					   CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_video1_clk, "pll-video1",
-					"osc24M", 0x030,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_gpu_clk, "pll-gpu",
-					"osc24M", 0x038,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-/*
- * The MIPI PLL has 2 modes: "MIPI" and "HDMI".
- *
- * The MIPI mode is a standard NKM-style clock. The HDMI mode is an
- * integer / fractional clock with switchable multipliers and dividers.
- * This is not supported here. We hardcode the PLL to MIPI mode.
- */
-#define SUN6I_A31_PLL_MIPI_REG	0x040
-
-static const char * const pll_mipi_parents[] = { "pll-video0", "pll-video1" };
-static SUNXI_CCU_NKM_WITH_MUX_GATE_LOCK(pll_mipi_clk, "pll-mipi",
-					pll_mipi_parents, 0x040,
-					8, 4,	/* N */
-					4, 2,	/* K */
-					0, 4,	/* M */
-					21, 0,	/* mux */
-					BIT(31) | BIT(23) | BIT(22), /* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll9_clk, "pll9",
-					"osc24M", 0x044,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll10_clk, "pll10",
-					"osc24M", 0x048,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static const char * const cpux_parents[] = { "osc32k", "osc24M",
-					     "pll-cpu", "pll-cpu" };
-static SUNXI_CCU_MUX(cpu_clk, "cpu", cpux_parents,
-		     0x050, 16, 2, CLK_SET_RATE_PARENT | CLK_IS_CRITICAL);
-
-static struct clk_div_table axi_div_table[] = {
-	{ .val = 0, .div = 1 },
-	{ .val = 1, .div = 2 },
-	{ .val = 2, .div = 3 },
-	{ .val = 3, .div = 4 },
-	{ .val = 4, .div = 4 },
-	{ .val = 5, .div = 4 },
-	{ .val = 6, .div = 4 },
-	{ .val = 7, .div = 4 },
-	{ /* Sentinel */ },
-};
-
-static SUNXI_CCU_DIV_TABLE(axi_clk, "axi", "cpu",
-			   0x050, 0, 3, axi_div_table, 0);
-
-#define SUN6I_A31_AHB1_REG  0x054
-
-static const char * const ahb1_parents[] = { "osc32k", "osc24M",
-					     "axi", "pll-periph" };
-static const struct ccu_mux_var_prediv ahb1_predivs[] = {
-	{ .index = 3, .shift = 6, .width = 2 },
-};
-
-static struct ccu_div ahb1_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
-
-	.mux		= {
-		.shift	= 12,
-		.width	= 2,
-
-		.var_predivs	= ahb1_predivs,
-		.n_var_predivs	= ARRAY_SIZE(ahb1_predivs),
-	},
-
-	.common		= {
-		.reg		= 0x054,
-		.features	= CCU_FEATURE_VARIABLE_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("ahb1",
-						      ahb1_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static struct clk_div_table apb1_div_table[] = {
-	{ .val = 0, .div = 2 },
-	{ .val = 1, .div = 2 },
-	{ .val = 2, .div = 4 },
-	{ .val = 3, .div = 8 },
-	{ /* Sentinel */ },
-};
-
-static SUNXI_CCU_DIV_TABLE(apb1_clk, "apb1", "ahb1",
-			   0x054, 8, 2, apb1_div_table, 0);
-
-static const char * const apb2_parents[] = { "osc32k", "osc24M",
-					     "pll-periph", "pll-periph" };
-static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", apb2_parents, 0x058,
-			     0, 5,	/* M */
-			     16, 2,	/* P */
-			     24, 2,	/* mux */
-			     0);
-
-static SUNXI_CCU_GATE(ahb1_mipidsi_clk,	"ahb1-mipidsi",	"ahb1",
-		      0x060, BIT(1), 0);
-static SUNXI_CCU_GATE(ahb1_ss_clk,	"ahb1-ss",	"ahb1",
-		      0x060, BIT(5), 0);
-static SUNXI_CCU_GATE(ahb1_dma_clk,	"ahb1-dma",	"ahb1",
-		      0x060, BIT(6), 0);
-static SUNXI_CCU_GATE(ahb1_mmc0_clk,	"ahb1-mmc0",	"ahb1",
-		      0x060, BIT(8), 0);
-static SUNXI_CCU_GATE(ahb1_mmc1_clk,	"ahb1-mmc1",	"ahb1",
-		      0x060, BIT(9), 0);
-static SUNXI_CCU_GATE(ahb1_mmc2_clk,	"ahb1-mmc2",	"ahb1",
-		      0x060, BIT(10), 0);
-static SUNXI_CCU_GATE(ahb1_mmc3_clk,	"ahb1-mmc3",	"ahb1",
-		      0x060, BIT(11), 0);
-static SUNXI_CCU_GATE(ahb1_nand1_clk,	"ahb1-nand1",	"ahb1",
-		      0x060, BIT(12), 0);
-static SUNXI_CCU_GATE(ahb1_nand0_clk,	"ahb1-nand0",	"ahb1",
-		      0x060, BIT(13), 0);
-static SUNXI_CCU_GATE(ahb1_sdram_clk,	"ahb1-sdram",	"ahb1",
-		      0x060, BIT(14), 0);
-static SUNXI_CCU_GATE(ahb1_emac_clk,	"ahb1-emac",	"ahb1",
-		      0x060, BIT(17), 0);
-static SUNXI_CCU_GATE(ahb1_ts_clk,	"ahb1-ts",	"ahb1",
-		      0x060, BIT(18), 0);
-static SUNXI_CCU_GATE(ahb1_hstimer_clk,	"ahb1-hstimer",	"ahb1",
-		      0x060, BIT(19), 0);
-static SUNXI_CCU_GATE(ahb1_spi0_clk,	"ahb1-spi0",	"ahb1",
-		      0x060, BIT(20), 0);
-static SUNXI_CCU_GATE(ahb1_spi1_clk,	"ahb1-spi1",	"ahb1",
-		      0x060, BIT(21), 0);
-static SUNXI_CCU_GATE(ahb1_spi2_clk,	"ahb1-spi2",	"ahb1",
-		      0x060, BIT(22), 0);
-static SUNXI_CCU_GATE(ahb1_spi3_clk,	"ahb1-spi3",	"ahb1",
-		      0x060, BIT(23), 0);
-static SUNXI_CCU_GATE(ahb1_otg_clk,	"ahb1-otg",	"ahb1",
-		      0x060, BIT(24), 0);
-static SUNXI_CCU_GATE(ahb1_ehci0_clk,	"ahb1-ehci0",	"ahb1",
-		      0x060, BIT(26), 0);
-static SUNXI_CCU_GATE(ahb1_ehci1_clk,	"ahb1-ehci1",	"ahb1",
-		      0x060, BIT(27), 0);
-static SUNXI_CCU_GATE(ahb1_ohci0_clk,	"ahb1-ohci0",	"ahb1",
-		      0x060, BIT(29), 0);
-static SUNXI_CCU_GATE(ahb1_ohci1_clk,	"ahb1-ohci1",	"ahb1",
-		      0x060, BIT(30), 0);
-static SUNXI_CCU_GATE(ahb1_ohci2_clk,	"ahb1-ohci2",	"ahb1",
-		      0x060, BIT(31), 0);
-
-static SUNXI_CCU_GATE(ahb1_ve_clk,	"ahb1-ve",	"ahb1",
-		      0x064, BIT(0), 0);
-static SUNXI_CCU_GATE(ahb1_lcd0_clk,	"ahb1-lcd0",	"ahb1",
-		      0x064, BIT(4), 0);
-static SUNXI_CCU_GATE(ahb1_lcd1_clk,	"ahb1-lcd1",	"ahb1",
-		      0x064, BIT(5), 0);
-static SUNXI_CCU_GATE(ahb1_csi_clk,	"ahb1-csi",	"ahb1",
-		      0x064, BIT(8), 0);
-static SUNXI_CCU_GATE(ahb1_hdmi_clk,	"ahb1-hdmi",	"ahb1",
-		      0x064, BIT(11), 0);
-static SUNXI_CCU_GATE(ahb1_be0_clk,	"ahb1-be0",	"ahb1",
-		      0x064, BIT(12), 0);
-static SUNXI_CCU_GATE(ahb1_be1_clk,	"ahb1-be1",	"ahb1",
-		      0x064, BIT(13), 0);
-static SUNXI_CCU_GATE(ahb1_fe0_clk,	"ahb1-fe0",	"ahb1",
-		      0x064, BIT(14), 0);
-static SUNXI_CCU_GATE(ahb1_fe1_clk,	"ahb1-fe1",	"ahb1",
-		      0x064, BIT(15), 0);
-static SUNXI_CCU_GATE(ahb1_mp_clk,	"ahb1-mp",	"ahb1",
-		      0x064, BIT(18), 0);
-static SUNXI_CCU_GATE(ahb1_gpu_clk,	"ahb1-gpu",	"ahb1",
-		      0x064, BIT(20), 0);
-static SUNXI_CCU_GATE(ahb1_deu0_clk,	"ahb1-deu0",	"ahb1",
-		      0x064, BIT(23), 0);
-static SUNXI_CCU_GATE(ahb1_deu1_clk,	"ahb1-deu1",	"ahb1",
-		      0x064, BIT(24), 0);
-static SUNXI_CCU_GATE(ahb1_drc0_clk,	"ahb1-drc0",	"ahb1",
-		      0x064, BIT(25), 0);
-static SUNXI_CCU_GATE(ahb1_drc1_clk,	"ahb1-drc1",	"ahb1",
-		      0x064, BIT(26), 0);
-
-static SUNXI_CCU_GATE(apb1_codec_clk,	"apb1-codec",	"apb1",
-		      0x068, BIT(0), 0);
-static SUNXI_CCU_GATE(apb1_spdif_clk,	"apb1-spdif",	"apb1",
-		      0x068, BIT(1), 0);
-static SUNXI_CCU_GATE(apb1_digital_mic_clk,	"apb1-digital-mic",	"apb1",
-		      0x068, BIT(4), 0);
-static SUNXI_CCU_GATE(apb1_pio_clk,	"apb1-pio",	"apb1",
-		      0x068, BIT(5), 0);
-static SUNXI_CCU_GATE(apb1_daudio0_clk,	"apb1-daudio0",	"apb1",
-		      0x068, BIT(12), 0);
-static SUNXI_CCU_GATE(apb1_daudio1_clk,	"apb1-daudio1",	"apb1",
-		      0x068, BIT(13), 0);
-
-static SUNXI_CCU_GATE(apb2_i2c0_clk,	"apb2-i2c0",	"apb2",
-		      0x06c, BIT(0), 0);
-static SUNXI_CCU_GATE(apb2_i2c1_clk,	"apb2-i2c1",	"apb2",
-		      0x06c, BIT(1), 0);
-static SUNXI_CCU_GATE(apb2_i2c2_clk,	"apb2-i2c2",	"apb2",
-		      0x06c, BIT(2), 0);
-static SUNXI_CCU_GATE(apb2_i2c3_clk,	"apb2-i2c3",	"apb2",
-		      0x06c, BIT(3), 0);
-static SUNXI_CCU_GATE(apb2_uart0_clk,	"apb2-uart0",	"apb2",
-		      0x06c, BIT(16), 0);
-static SUNXI_CCU_GATE(apb2_uart1_clk,	"apb2-uart1",	"apb2",
-		      0x06c, BIT(17), 0);
-static SUNXI_CCU_GATE(apb2_uart2_clk,	"apb2-uart2",	"apb2",
-		      0x06c, BIT(18), 0);
-static SUNXI_CCU_GATE(apb2_uart3_clk,	"apb2-uart3",	"apb2",
-		      0x06c, BIT(19), 0);
-static SUNXI_CCU_GATE(apb2_uart4_clk,	"apb2-uart4",	"apb2",
-		      0x06c, BIT(20), 0);
-static SUNXI_CCU_GATE(apb2_uart5_clk,	"apb2-uart5",	"apb2",
-		      0x06c, BIT(21), 0);
-
-static const char * const mod0_default_parents[] = { "osc24M", "pll-periph" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand0_clk, "nand0", mod0_default_parents,
-				  0x080,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand1_clk, "nand1", mod0_default_parents,
-				  0x084,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents,
-				  0x088,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc0_sample_clk, "mmc0_sample", "mmc0",
-		       0x088, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc0_output_clk, "mmc0_output", "mmc0",
-		       0x088, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents,
-				  0x08c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc1_sample_clk, "mmc1_sample", "mmc1",
-		       0x08c, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc1_output_clk, "mmc1_output", "mmc1",
-		       0x08c, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents,
-				  0x090,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc2_sample_clk, "mmc2_sample", "mmc2",
-		       0x090, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc2_output_clk, "mmc2_output", "mmc2",
-		       0x090, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc3_clk, "mmc3", mod0_default_parents,
-				  0x094,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc3_sample_clk, "mmc3_sample", "mmc3",
-		       0x094, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc3_output_clk, "mmc3_output", "mmc3",
-		       0x094, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(ts_clk, "ts", mod0_default_parents, 0x098,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(ss_clk, "ss", mod0_default_parents, 0x09c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents, 0x0a0,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents, 0x0a4,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi2_clk, "spi2", mod0_default_parents, 0x0a8,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi3_clk, "spi3", mod0_default_parents, 0x0ac,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static const char * const daudio_parents[] = { "pll-audio-8x", "pll-audio-4x",
-					       "pll-audio-2x", "pll-audio" };
-static SUNXI_CCU_MUX_WITH_GATE(daudio0_clk, "daudio0", daudio_parents,
-			       0x0b0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_MUX_WITH_GATE(daudio1_clk, "daudio1", daudio_parents,
-			       0x0b4, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_MUX_WITH_GATE(spdif_clk, "spdif", daudio_parents,
-			       0x0c0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"osc24M",
-		      0x0cc, BIT(8), 0);
-static SUNXI_CCU_GATE(usb_phy1_clk,	"usb-phy1",	"osc24M",
-		      0x0cc, BIT(9), 0);
-static SUNXI_CCU_GATE(usb_phy2_clk,	"usb-phy2",	"osc24M",
-		      0x0cc, BIT(10), 0);
-static SUNXI_CCU_GATE(usb_ohci0_clk,	"usb-ohci0",	"osc24M",
-		      0x0cc, BIT(16), 0);
-static SUNXI_CCU_GATE(usb_ohci1_clk,	"usb-ohci1",	"osc24M",
-		      0x0cc, BIT(17), 0);
-static SUNXI_CCU_GATE(usb_ohci2_clk,	"usb-ohci2",	"osc24M",
-		      0x0cc, BIT(18), 0);
-
-/* TODO emac clk not supported yet */
-
-static const char * const dram_parents[] = { "pll-ddr", "pll-periph" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(mdfs_clk, "mdfs", dram_parents, 0x0f0,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  CLK_IS_CRITICAL);
-
-static SUNXI_CCU_M_WITH_MUX(sdram0_clk, "sdram0", dram_parents,
-			    0x0f4, 0, 4, 4, 1, CLK_IS_CRITICAL);
-static SUNXI_CCU_M_WITH_MUX(sdram1_clk, "sdram1", dram_parents,
-			    0x0f4, 8, 4, 12, 1, CLK_IS_CRITICAL);
-
-static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"mdfs",
-		      0x100, BIT(0), 0);
-static SUNXI_CCU_GATE(dram_csi_isp_clk,	"dram-csi-isp",	"mdfs",
-		      0x100, BIT(1), 0);
-static SUNXI_CCU_GATE(dram_ts_clk,	"dram-ts",	"mdfs",
-		      0x100, BIT(3), 0);
-static SUNXI_CCU_GATE(dram_drc0_clk,	"dram-drc0",	"mdfs",
-		      0x100, BIT(16), 0);
-static SUNXI_CCU_GATE(dram_drc1_clk,	"dram-drc1",	"mdfs",
-		      0x100, BIT(17), 0);
-static SUNXI_CCU_GATE(dram_deu0_clk,	"dram-deu0",	"mdfs",
-		      0x100, BIT(18), 0);
-static SUNXI_CCU_GATE(dram_deu1_clk,	"dram-deu1",	"mdfs",
-		      0x100, BIT(19), 0);
-static SUNXI_CCU_GATE(dram_fe0_clk,	"dram-fe0",	"mdfs",
-		      0x100, BIT(24), 0);
-static SUNXI_CCU_GATE(dram_fe1_clk,	"dram-fe1",	"mdfs",
-		      0x100, BIT(25), 0);
-static SUNXI_CCU_GATE(dram_be0_clk,	"dram-be0",	"mdfs",
-		      0x100, BIT(26), 0);
-static SUNXI_CCU_GATE(dram_be1_clk,	"dram-be1",	"mdfs",
-		      0x100, BIT(27), 0);
-static SUNXI_CCU_GATE(dram_mp_clk,	"dram-mp",	"mdfs",
-		      0x100, BIT(28), 0);
-
-static const char * const de_parents[] = { "pll-video0", "pll-video1",
-					   "pll-periph-2x", "pll-gpu",
-					   "pll9", "pll10" };
-static SUNXI_CCU_M_WITH_MUX_GATE(be0_clk, "be0", de_parents,
-				 0x104, 0, 4, 24, 3, BIT(31), 0);
-static SUNXI_CCU_M_WITH_MUX_GATE(be1_clk, "be1", de_parents,
-				 0x108, 0, 4, 24, 3, BIT(31), 0);
-static SUNXI_CCU_M_WITH_MUX_GATE(fe0_clk, "fe0", de_parents,
-				 0x10c, 0, 4, 24, 3, BIT(31), 0);
-static SUNXI_CCU_M_WITH_MUX_GATE(fe1_clk, "fe1", de_parents,
-				 0x110, 0, 4, 24, 3, BIT(31), 0);
-
-static const char * const mp_parents[] = { "pll-video0", "pll-video1",
-					   "pll9", "pll10" };
-static SUNXI_CCU_M_WITH_MUX_GATE(mp_clk, "mp", mp_parents,
-				 0x114, 0, 4, 24, 3, BIT(31), 0);
-
-static const char * const lcd_ch0_parents[] = { "pll-video0", "pll-video1",
-						"pll-video0-2x",
-						"pll-video1-2x", "pll-mipi" };
-static SUNXI_CCU_MUX_WITH_GATE(lcd0_ch0_clk, "lcd0-ch0", lcd_ch0_parents,
-			       0x118, 24, 2, BIT(31), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_MUX_WITH_GATE(lcd1_ch0_clk, "lcd1-ch0", lcd_ch0_parents,
-			       0x11c, 24, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static const char * const lcd_ch1_parents[] = { "pll-video0", "pll-video1",
-						"pll-video0-2x",
-						"pll-video1-2x" };
-static SUNXI_CCU_M_WITH_MUX_GATE(lcd0_ch1_clk, "lcd0-ch1", lcd_ch1_parents,
-				 0x12c, 0, 4, 24, 3, BIT(31),
-				 CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M_WITH_MUX_GATE(lcd1_ch1_clk, "lcd1-ch1", lcd_ch1_parents,
-				 0x130, 0, 4, 24, 3, BIT(31),
-				 CLK_SET_RATE_PARENT);
-
-static const char * const csi_sclk_parents[] = { "pll-video0", "pll-video1",
-						 "pll9", "pll10", "pll-mipi",
-						 "pll-ve" };
-static SUNXI_CCU_M_WITH_MUX_GATE(csi0_sclk_clk, "csi0-sclk", csi_sclk_parents,
-				 0x134, 16, 4, 24, 3, BIT(31), 0);
-
-static const char * const csi_mclk_parents[] = { "pll-video0", "pll-video1",
-						 "osc24M" };
-static const u8 csi_mclk_table[] = { 0, 1, 5 };
-static struct ccu_div csi0_mclk_clk = {
-	.enable		= BIT(15),
-	.div		= _SUNXI_CCU_DIV(0, 4),
-	.mux		= _SUNXI_CCU_MUX_TABLE(8, 3, csi_mclk_table),
-	.common		= {
-		.reg		= 0x134,
-		.hw.init	= CLK_HW_INIT_PARENTS("csi0-mclk",
-						      csi_mclk_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static struct ccu_div csi1_mclk_clk = {
-	.enable		= BIT(15),
-	.div		= _SUNXI_CCU_DIV(0, 4),
-	.mux		= _SUNXI_CCU_MUX_TABLE(8, 3, csi_mclk_table),
-	.common		= {
-		.reg		= 0x138,
-		.hw.init	= CLK_HW_INIT_PARENTS("csi1-mclk",
-						      csi_mclk_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve",
-			     0x13c, 16, 3, BIT(31), 0);
-
-static SUNXI_CCU_GATE(codec_clk,	"codec",	"pll-audio",
-		      0x140, BIT(31), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_GATE(avs_clk,		"avs",		"osc24M",
-		      0x144, BIT(31), 0);
-static SUNXI_CCU_GATE(digital_mic_clk,	"digital-mic",	"pll-audio",
-		      0x148, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(hdmi_clk, "hdmi", lcd_ch1_parents,
-				 0x150, 0, 4, 24, 2, BIT(31),
-				 CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(hdmi_ddc_clk, "ddc", "osc24M", 0x150, BIT(30), 0);
-
-static SUNXI_CCU_GATE(ps_clk, "ps", "lcd1-ch1", 0x140, BIT(31), 0);
-
-static const char * const mbus_parents[] = { "osc24M", "pll-periph",
-					     "pll-ddr" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(mbus0_clk, "mbus0", mbus_parents, 0x15c,
-				  0, 3,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  CLK_IS_CRITICAL);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mbus1_clk, "mbus1", mbus_parents, 0x160,
-				  0, 3,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  CLK_IS_CRITICAL);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(mipi_dsi_clk, "mipi-dsi", lcd_ch1_parents,
-				 0x168, 16, 3, 24, 2, BIT(31),
-				 CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M_WITH_MUX_GATE(mipi_dsi_dphy_clk, "mipi-dsi-dphy",
-				 lcd_ch1_parents, 0x168, 0, 3, 8, 2,
-				 BIT(15), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M_WITH_MUX_GATE(mipi_csi_dphy_clk, "mipi-csi-dphy",
-				 lcd_ch1_parents, 0x16c, 0, 3, 8, 2,
-				 BIT(15), 0);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(iep_drc0_clk, "iep-drc0", de_parents,
-				 0x180, 0, 3, 24, 2, BIT(31), 0);
-static SUNXI_CCU_M_WITH_MUX_GATE(iep_drc1_clk, "iep-drc1", de_parents,
-				 0x184, 0, 3, 24, 2, BIT(31), 0);
-static SUNXI_CCU_M_WITH_MUX_GATE(iep_deu0_clk, "iep-deu0", de_parents,
-				 0x188, 0, 3, 24, 2, BIT(31), 0);
-static SUNXI_CCU_M_WITH_MUX_GATE(iep_deu1_clk, "iep-deu1", de_parents,
-				 0x18c, 0, 3, 24, 2, BIT(31), 0);
-
-static const char * const gpu_parents[] = { "pll-gpu", "pll-periph-2x",
-					    "pll-video0", "pll-video1",
-					    "pll9", "pll10" };
-static const struct ccu_mux_fixed_prediv gpu_predivs[] = {
-	{ .index = 1, .div = 3, },
-};
-
-static struct ccu_div gpu_core_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV(0, 3),
-	.mux		= {
-		.shift		= 24,
-		.width		= 3,
-		.fixed_predivs	= gpu_predivs,
-		.n_predivs	= ARRAY_SIZE(gpu_predivs),
-	},
-	.common		= {
-		.reg		= 0x1a0,
-		.features	= CCU_FEATURE_FIXED_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("gpu-core",
-						      gpu_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static struct ccu_div gpu_memory_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV(0, 3),
-	.mux		= {
-		.shift		= 24,
-		.width		= 3,
-		.fixed_predivs	= gpu_predivs,
-		.n_predivs	= ARRAY_SIZE(gpu_predivs),
-	},
-	.common		= {
-		.reg		= 0x1a4,
-		.features	= CCU_FEATURE_FIXED_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("gpu-memory",
-						      gpu_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static struct ccu_div gpu_hyd_clk = {
-	.enable		= BIT(31),
-	.div		= _SUNXI_CCU_DIV(0, 3),
-	.mux		= {
-		.shift		= 24,
-		.width		= 3,
-		.fixed_predivs	= gpu_predivs,
-		.n_predivs	= ARRAY_SIZE(gpu_predivs),
-	},
-	.common		= {
-		.reg		= 0x1a8,
-		.features	= CCU_FEATURE_FIXED_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("gpu-hyd",
-						      gpu_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static SUNXI_CCU_M_WITH_MUX_GATE(ats_clk, "ats", mod0_default_parents, 0x1b0,
-				 0, 3,		/* M */
-				 24, 2,		/* mux */
-				 BIT(31),	/* gate */
-				 0);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(trace_clk, "trace", mod0_default_parents,
-				 0x1b0,
-				 0, 3,		/* M */
-				 24, 2,		/* mux */
-				 BIT(31),	/* gate */
-				 0);
-
-static const char * const clk_out_parents[] = { "osc24M", "osc32k", "osc24M",
-						"axi", "ahb1" };
-static const u8 clk_out_table[] = { 0, 1, 2, 11, 13 };
-
-static const struct ccu_mux_fixed_prediv clk_out_predivs[] = {
-	{ .index = 0, .div = 750, },
-	{ .index = 3, .div = 4, },
-	{ .index = 4, .div = 4, },
-};
-
-static struct ccu_mp out_a_clk = {
-	.enable		= BIT(31),
-	.m		= _SUNXI_CCU_DIV(8, 5),
-	.p		= _SUNXI_CCU_DIV(20, 2),
-	.mux		= {
-		.shift		= 24,
-		.width		= 4,
-		.table		= clk_out_table,
-		.fixed_predivs	= clk_out_predivs,
-		.n_predivs	= ARRAY_SIZE(clk_out_predivs),
-	},
-	.common		= {
-		.reg		= 0x300,
-		.features	= CCU_FEATURE_FIXED_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("out-a",
-						      clk_out_parents,
-						      &ccu_mp_ops,
-						      0),
-	},
-};
-
-static struct ccu_mp out_b_clk = {
-	.enable		= BIT(31),
-	.m		= _SUNXI_CCU_DIV(8, 5),
-	.p		= _SUNXI_CCU_DIV(20, 2),
-	.mux		= {
-		.shift		= 24,
-		.width		= 4,
-		.table		= clk_out_table,
-		.fixed_predivs	= clk_out_predivs,
-		.n_predivs	= ARRAY_SIZE(clk_out_predivs),
-	},
-	.common		= {
-		.reg		= 0x304,
-		.features	= CCU_FEATURE_FIXED_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("out-b",
-						      clk_out_parents,
-						      &ccu_mp_ops,
-						      0),
-	},
-};
-
-static struct ccu_mp out_c_clk = {
-	.enable		= BIT(31),
-	.m		= _SUNXI_CCU_DIV(8, 5),
-	.p		= _SUNXI_CCU_DIV(20, 2),
-	.mux		= {
-		.shift		= 24,
-		.width		= 4,
-		.table		= clk_out_table,
-		.fixed_predivs	= clk_out_predivs,
-		.n_predivs	= ARRAY_SIZE(clk_out_predivs),
-	},
-	.common		= {
-		.reg		= 0x308,
-		.features	= CCU_FEATURE_FIXED_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("out-c",
-						      clk_out_parents,
-						      &ccu_mp_ops,
-						      0),
-	},
-};
-
-static struct ccu_common *sun6i_a31_ccu_clks[] = {
-	&pll_cpu_clk.common,
-	&pll_audio_base_clk.common,
-	&pll_video0_clk.common,
-	&pll_ve_clk.common,
-	&pll_ddr_clk.common,
-	&pll_periph_clk.common,
-	&pll_video1_clk.common,
-	&pll_gpu_clk.common,
-	&pll_mipi_clk.common,
-	&pll9_clk.common,
-	&pll10_clk.common,
-	&cpu_clk.common,
-	&axi_clk.common,
-	&ahb1_clk.common,
-	&apb1_clk.common,
-	&apb2_clk.common,
-	&ahb1_mipidsi_clk.common,
-	&ahb1_ss_clk.common,
-	&ahb1_dma_clk.common,
-	&ahb1_mmc0_clk.common,
-	&ahb1_mmc1_clk.common,
-	&ahb1_mmc2_clk.common,
-	&ahb1_mmc3_clk.common,
-	&ahb1_nand1_clk.common,
-	&ahb1_nand0_clk.common,
-	&ahb1_sdram_clk.common,
-	&ahb1_emac_clk.common,
-	&ahb1_ts_clk.common,
-	&ahb1_hstimer_clk.common,
-	&ahb1_spi0_clk.common,
-	&ahb1_spi1_clk.common,
-	&ahb1_spi2_clk.common,
-	&ahb1_spi3_clk.common,
-	&ahb1_otg_clk.common,
-	&ahb1_ehci0_clk.common,
-	&ahb1_ehci1_clk.common,
-	&ahb1_ohci0_clk.common,
-	&ahb1_ohci1_clk.common,
-	&ahb1_ohci2_clk.common,
-	&ahb1_ve_clk.common,
-	&ahb1_lcd0_clk.common,
-	&ahb1_lcd1_clk.common,
-	&ahb1_csi_clk.common,
-	&ahb1_hdmi_clk.common,
-	&ahb1_be0_clk.common,
-	&ahb1_be1_clk.common,
-	&ahb1_fe0_clk.common,
-	&ahb1_fe1_clk.common,
-	&ahb1_mp_clk.common,
-	&ahb1_gpu_clk.common,
-	&ahb1_deu0_clk.common,
-	&ahb1_deu1_clk.common,
-	&ahb1_drc0_clk.common,
-	&ahb1_drc1_clk.common,
-	&apb1_codec_clk.common,
-	&apb1_spdif_clk.common,
-	&apb1_digital_mic_clk.common,
-	&apb1_pio_clk.common,
-	&apb1_daudio0_clk.common,
-	&apb1_daudio1_clk.common,
-	&apb2_i2c0_clk.common,
-	&apb2_i2c1_clk.common,
-	&apb2_i2c2_clk.common,
-	&apb2_i2c3_clk.common,
-	&apb2_uart0_clk.common,
-	&apb2_uart1_clk.common,
-	&apb2_uart2_clk.common,
-	&apb2_uart3_clk.common,
-	&apb2_uart4_clk.common,
-	&apb2_uart5_clk.common,
-	&nand0_clk.common,
-	&nand1_clk.common,
-	&mmc0_clk.common,
-	&mmc0_sample_clk.common,
-	&mmc0_output_clk.common,
-	&mmc1_clk.common,
-	&mmc1_sample_clk.common,
-	&mmc1_output_clk.common,
-	&mmc2_clk.common,
-	&mmc2_sample_clk.common,
-	&mmc2_output_clk.common,
-	&mmc3_clk.common,
-	&mmc3_sample_clk.common,
-	&mmc3_output_clk.common,
-	&ts_clk.common,
-	&ss_clk.common,
-	&spi0_clk.common,
-	&spi1_clk.common,
-	&spi2_clk.common,
-	&spi3_clk.common,
-	&daudio0_clk.common,
-	&daudio1_clk.common,
-	&spdif_clk.common,
-	&usb_phy0_clk.common,
-	&usb_phy1_clk.common,
-	&usb_phy2_clk.common,
-	&usb_ohci0_clk.common,
-	&usb_ohci1_clk.common,
-	&usb_ohci2_clk.common,
-	&mdfs_clk.common,
-	&sdram0_clk.common,
-	&sdram1_clk.common,
-	&dram_ve_clk.common,
-	&dram_csi_isp_clk.common,
-	&dram_ts_clk.common,
-	&dram_drc0_clk.common,
-	&dram_drc1_clk.common,
-	&dram_deu0_clk.common,
-	&dram_deu1_clk.common,
-	&dram_fe0_clk.common,
-	&dram_fe1_clk.common,
-	&dram_be0_clk.common,
-	&dram_be1_clk.common,
-	&dram_mp_clk.common,
-	&be0_clk.common,
-	&be1_clk.common,
-	&fe0_clk.common,
-	&fe1_clk.common,
-	&mp_clk.common,
-	&lcd0_ch0_clk.common,
-	&lcd1_ch0_clk.common,
-	&lcd0_ch1_clk.common,
-	&lcd1_ch1_clk.common,
-	&csi0_sclk_clk.common,
-	&csi0_mclk_clk.common,
-	&csi1_mclk_clk.common,
-	&ve_clk.common,
-	&codec_clk.common,
-	&avs_clk.common,
-	&digital_mic_clk.common,
-	&hdmi_clk.common,
-	&hdmi_ddc_clk.common,
-	&ps_clk.common,
-	&mbus0_clk.common,
-	&mbus1_clk.common,
-	&mipi_dsi_clk.common,
-	&mipi_dsi_dphy_clk.common,
-	&mipi_csi_dphy_clk.common,
-	&iep_drc0_clk.common,
-	&iep_drc1_clk.common,
-	&iep_deu0_clk.common,
-	&iep_deu1_clk.common,
-	&gpu_core_clk.common,
-	&gpu_memory_clk.common,
-	&gpu_hyd_clk.common,
-	&ats_clk.common,
-	&trace_clk.common,
-	&out_a_clk.common,
-	&out_b_clk.common,
-	&out_c_clk.common,
-};
-
-static const struct clk_hw *clk_parent_pll_audio[] = {
-	&pll_audio_base_clk.common.hw
-};
-
-/* We hardcode the divider to 1 for now */
-static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
-			    clk_parent_pll_audio,
-			    1, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
-			    clk_parent_pll_audio,
-			    2, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
-			    clk_parent_pll_audio,
-			    1, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
-			    clk_parent_pll_audio,
-			    1, 2, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HW(pll_periph_2x_clk, "pll-periph-2x",
-			   &pll_periph_clk.common.hw,
-			   1, 2, 0);
-static CLK_FIXED_FACTOR_HW(pll_video0_2x_clk, "pll-video0-2x",
-			   &pll_video0_clk.common.hw,
-			   1, 2, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HW(pll_video1_2x_clk, "pll-video1-2x",
-			   &pll_video1_clk.common.hw,
-			   1, 2, CLK_SET_RATE_PARENT);
-
-static struct clk_hw_onecell_data sun6i_a31_hw_clks = {
-	.hws	= {
-		[CLK_PLL_CPU]		= &pll_cpu_clk.common.hw,
-		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
-		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
-		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
-		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
-		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
-		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
-		[CLK_PLL_VIDEO0_2X]	= &pll_video0_2x_clk.hw,
-		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
-		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
-		[CLK_PLL_PERIPH]	= &pll_periph_clk.common.hw,
-		[CLK_PLL_PERIPH_2X]	= &pll_periph_2x_clk.hw,
-		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
-		[CLK_PLL_VIDEO1_2X]	= &pll_video1_2x_clk.hw,
-		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
-		[CLK_PLL_MIPI]		= &pll_mipi_clk.common.hw,
-		[CLK_PLL9]		= &pll9_clk.common.hw,
-		[CLK_PLL10]		= &pll10_clk.common.hw,
-		[CLK_CPU]		= &cpu_clk.common.hw,
-		[CLK_AXI]		= &axi_clk.common.hw,
-		[CLK_AHB1]		= &ahb1_clk.common.hw,
-		[CLK_APB1]		= &apb1_clk.common.hw,
-		[CLK_APB2]		= &apb2_clk.common.hw,
-		[CLK_AHB1_MIPIDSI]	= &ahb1_mipidsi_clk.common.hw,
-		[CLK_AHB1_SS]		= &ahb1_ss_clk.common.hw,
-		[CLK_AHB1_DMA]		= &ahb1_dma_clk.common.hw,
-		[CLK_AHB1_MMC0]		= &ahb1_mmc0_clk.common.hw,
-		[CLK_AHB1_MMC1]		= &ahb1_mmc1_clk.common.hw,
-		[CLK_AHB1_MMC2]		= &ahb1_mmc2_clk.common.hw,
-		[CLK_AHB1_MMC3]		= &ahb1_mmc3_clk.common.hw,
-		[CLK_AHB1_NAND1]	= &ahb1_nand1_clk.common.hw,
-		[CLK_AHB1_NAND0]	= &ahb1_nand0_clk.common.hw,
-		[CLK_AHB1_SDRAM]	= &ahb1_sdram_clk.common.hw,
-		[CLK_AHB1_EMAC]		= &ahb1_emac_clk.common.hw,
-		[CLK_AHB1_TS]		= &ahb1_ts_clk.common.hw,
-		[CLK_AHB1_HSTIMER]	= &ahb1_hstimer_clk.common.hw,
-		[CLK_AHB1_SPI0]		= &ahb1_spi0_clk.common.hw,
-		[CLK_AHB1_SPI1]		= &ahb1_spi1_clk.common.hw,
-		[CLK_AHB1_SPI2]		= &ahb1_spi2_clk.common.hw,
-		[CLK_AHB1_SPI3]		= &ahb1_spi3_clk.common.hw,
-		[CLK_AHB1_OTG]		= &ahb1_otg_clk.common.hw,
-		[CLK_AHB1_EHCI0]	= &ahb1_ehci0_clk.common.hw,
-		[CLK_AHB1_EHCI1]	= &ahb1_ehci1_clk.common.hw,
-		[CLK_AHB1_OHCI0]	= &ahb1_ohci0_clk.common.hw,
-		[CLK_AHB1_OHCI1]	= &ahb1_ohci1_clk.common.hw,
-		[CLK_AHB1_OHCI2]	= &ahb1_ohci2_clk.common.hw,
-		[CLK_AHB1_VE]		= &ahb1_ve_clk.common.hw,
-		[CLK_AHB1_LCD0]		= &ahb1_lcd0_clk.common.hw,
-		[CLK_AHB1_LCD1]		= &ahb1_lcd1_clk.common.hw,
-		[CLK_AHB1_CSI]		= &ahb1_csi_clk.common.hw,
-		[CLK_AHB1_HDMI]		= &ahb1_hdmi_clk.common.hw,
-		[CLK_AHB1_BE0]		= &ahb1_be0_clk.common.hw,
-		[CLK_AHB1_BE1]		= &ahb1_be1_clk.common.hw,
-		[CLK_AHB1_FE0]		= &ahb1_fe0_clk.common.hw,
-		[CLK_AHB1_FE1]		= &ahb1_fe1_clk.common.hw,
-		[CLK_AHB1_MP]		= &ahb1_mp_clk.common.hw,
-		[CLK_AHB1_GPU]		= &ahb1_gpu_clk.common.hw,
-		[CLK_AHB1_DEU0]		= &ahb1_deu0_clk.common.hw,
-		[CLK_AHB1_DEU1]		= &ahb1_deu1_clk.common.hw,
-		[CLK_AHB1_DRC0]		= &ahb1_drc0_clk.common.hw,
-		[CLK_AHB1_DRC1]		= &ahb1_drc1_clk.common.hw,
-		[CLK_APB1_CODEC]	= &apb1_codec_clk.common.hw,
-		[CLK_APB1_SPDIF]	= &apb1_spdif_clk.common.hw,
-		[CLK_APB1_DIGITAL_MIC]	= &apb1_digital_mic_clk.common.hw,
-		[CLK_APB1_PIO]		= &apb1_pio_clk.common.hw,
-		[CLK_APB1_DAUDIO0]	= &apb1_daudio0_clk.common.hw,
-		[CLK_APB1_DAUDIO1]	= &apb1_daudio1_clk.common.hw,
-		[CLK_APB2_I2C0]		= &apb2_i2c0_clk.common.hw,
-		[CLK_APB2_I2C1]		= &apb2_i2c1_clk.common.hw,
-		[CLK_APB2_I2C2]		= &apb2_i2c2_clk.common.hw,
-		[CLK_APB2_I2C3]		= &apb2_i2c3_clk.common.hw,
-		[CLK_APB2_UART0]	= &apb2_uart0_clk.common.hw,
-		[CLK_APB2_UART1]	= &apb2_uart1_clk.common.hw,
-		[CLK_APB2_UART2]	= &apb2_uart2_clk.common.hw,
-		[CLK_APB2_UART3]	= &apb2_uart3_clk.common.hw,
-		[CLK_APB2_UART4]	= &apb2_uart4_clk.common.hw,
-		[CLK_APB2_UART5]	= &apb2_uart5_clk.common.hw,
-		[CLK_NAND0]		= &nand0_clk.common.hw,
-		[CLK_NAND1]		= &nand1_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
-		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
-		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
-		[CLK_MMC2]		= &mmc2_clk.common.hw,
-		[CLK_MMC2_SAMPLE]	= &mmc2_sample_clk.common.hw,
-		[CLK_MMC2_OUTPUT]	= &mmc2_output_clk.common.hw,
-		[CLK_MMC3]		= &mmc3_clk.common.hw,
-		[CLK_MMC3_SAMPLE]	= &mmc3_sample_clk.common.hw,
-		[CLK_MMC3_OUTPUT]	= &mmc3_output_clk.common.hw,
-		[CLK_TS]		= &ts_clk.common.hw,
-		[CLK_SS]		= &ss_clk.common.hw,
-		[CLK_SPI0]		= &spi0_clk.common.hw,
-		[CLK_SPI1]		= &spi1_clk.common.hw,
-		[CLK_SPI2]		= &spi2_clk.common.hw,
-		[CLK_SPI3]		= &spi3_clk.common.hw,
-		[CLK_DAUDIO0]		= &daudio0_clk.common.hw,
-		[CLK_DAUDIO1]		= &daudio1_clk.common.hw,
-		[CLK_SPDIF]		= &spdif_clk.common.hw,
-		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
-		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
-		[CLK_USB_PHY2]		= &usb_phy2_clk.common.hw,
-		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
-		[CLK_USB_OHCI1]		= &usb_ohci1_clk.common.hw,
-		[CLK_USB_OHCI2]		= &usb_ohci2_clk.common.hw,
-		[CLK_MDFS]		= &mdfs_clk.common.hw,
-		[CLK_SDRAM0]		= &sdram0_clk.common.hw,
-		[CLK_SDRAM1]		= &sdram1_clk.common.hw,
-		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
-		[CLK_DRAM_CSI_ISP]	= &dram_csi_isp_clk.common.hw,
-		[CLK_DRAM_TS]		= &dram_ts_clk.common.hw,
-		[CLK_DRAM_DRC0]		= &dram_drc0_clk.common.hw,
-		[CLK_DRAM_DRC1]		= &dram_drc1_clk.common.hw,
-		[CLK_DRAM_DEU0]		= &dram_deu0_clk.common.hw,
-		[CLK_DRAM_DEU1]		= &dram_deu1_clk.common.hw,
-		[CLK_DRAM_FE0]		= &dram_fe0_clk.common.hw,
-		[CLK_DRAM_FE1]		= &dram_fe1_clk.common.hw,
-		[CLK_DRAM_BE0]		= &dram_be0_clk.common.hw,
-		[CLK_DRAM_BE1]		= &dram_be1_clk.common.hw,
-		[CLK_DRAM_MP]		= &dram_mp_clk.common.hw,
-		[CLK_BE0]		= &be0_clk.common.hw,
-		[CLK_BE1]		= &be1_clk.common.hw,
-		[CLK_FE0]		= &fe0_clk.common.hw,
-		[CLK_FE1]		= &fe1_clk.common.hw,
-		[CLK_MP]		= &mp_clk.common.hw,
-		[CLK_LCD0_CH0]		= &lcd0_ch0_clk.common.hw,
-		[CLK_LCD1_CH0]		= &lcd1_ch0_clk.common.hw,
-		[CLK_LCD0_CH1]		= &lcd0_ch1_clk.common.hw,
-		[CLK_LCD1_CH1]		= &lcd1_ch1_clk.common.hw,
-		[CLK_CSI0_SCLK]		= &csi0_sclk_clk.common.hw,
-		[CLK_CSI0_MCLK]		= &csi0_mclk_clk.common.hw,
-		[CLK_CSI1_MCLK]		= &csi1_mclk_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_CODEC]		= &codec_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-		[CLK_DIGITAL_MIC]	= &digital_mic_clk.common.hw,
-		[CLK_HDMI]		= &hdmi_clk.common.hw,
-		[CLK_HDMI_DDC]		= &hdmi_ddc_clk.common.hw,
-		[CLK_PS]		= &ps_clk.common.hw,
-		[CLK_MBUS0]		= &mbus0_clk.common.hw,
-		[CLK_MBUS1]		= &mbus1_clk.common.hw,
-		[CLK_MIPI_DSI]		= &mipi_dsi_clk.common.hw,
-		[CLK_MIPI_DSI_DPHY]	= &mipi_dsi_dphy_clk.common.hw,
-		[CLK_MIPI_CSI_DPHY]	= &mipi_csi_dphy_clk.common.hw,
-		[CLK_IEP_DRC0]		= &iep_drc0_clk.common.hw,
-		[CLK_IEP_DRC1]		= &iep_drc1_clk.common.hw,
-		[CLK_IEP_DEU0]		= &iep_deu0_clk.common.hw,
-		[CLK_IEP_DEU1]		= &iep_deu1_clk.common.hw,
-		[CLK_GPU_CORE]		= &gpu_core_clk.common.hw,
-		[CLK_GPU_MEMORY]	= &gpu_memory_clk.common.hw,
-		[CLK_GPU_HYD]		= &gpu_hyd_clk.common.hw,
-		[CLK_ATS]		= &ats_clk.common.hw,
-		[CLK_TRACE]		= &trace_clk.common.hw,
-		[CLK_OUT_A]		= &out_a_clk.common.hw,
-		[CLK_OUT_B]		= &out_b_clk.common.hw,
-		[CLK_OUT_C]		= &out_c_clk.common.hw,
-	},
-	.num	= CLK_NUMBER,
-};
-
-static struct ccu_reset_map sun6i_a31_ccu_resets[] = {
-	[RST_USB_PHY0]		= { 0x0cc, BIT(0) },
-	[RST_USB_PHY1]		= { 0x0cc, BIT(1) },
-	[RST_USB_PHY2]		= { 0x0cc, BIT(2) },
-
-	[RST_AHB1_MIPI_DSI]	= { 0x2c0, BIT(1) },
-	[RST_AHB1_SS]		= { 0x2c0, BIT(5) },
-	[RST_AHB1_DMA]		= { 0x2c0, BIT(6) },
-	[RST_AHB1_MMC0]		= { 0x2c0, BIT(8) },
-	[RST_AHB1_MMC1]		= { 0x2c0, BIT(9) },
-	[RST_AHB1_MMC2]		= { 0x2c0, BIT(10) },
-	[RST_AHB1_MMC3]		= { 0x2c0, BIT(11) },
-	[RST_AHB1_NAND1]	= { 0x2c0, BIT(12) },
-	[RST_AHB1_NAND0]	= { 0x2c0, BIT(13) },
-	[RST_AHB1_SDRAM]	= { 0x2c0, BIT(14) },
-	[RST_AHB1_EMAC]		= { 0x2c0, BIT(17) },
-	[RST_AHB1_TS]		= { 0x2c0, BIT(18) },
-	[RST_AHB1_HSTIMER]	= { 0x2c0, BIT(19) },
-	[RST_AHB1_SPI0]		= { 0x2c0, BIT(20) },
-	[RST_AHB1_SPI1]		= { 0x2c0, BIT(21) },
-	[RST_AHB1_SPI2]		= { 0x2c0, BIT(22) },
-	[RST_AHB1_SPI3]		= { 0x2c0, BIT(23) },
-	[RST_AHB1_OTG]		= { 0x2c0, BIT(24) },
-	[RST_AHB1_EHCI0]	= { 0x2c0, BIT(26) },
-	[RST_AHB1_EHCI1]	= { 0x2c0, BIT(27) },
-	[RST_AHB1_OHCI0]	= { 0x2c0, BIT(29) },
-	[RST_AHB1_OHCI1]	= { 0x2c0, BIT(30) },
-	[RST_AHB1_OHCI2]	= { 0x2c0, BIT(31) },
-
-	[RST_AHB1_VE]		= { 0x2c4, BIT(0) },
-	[RST_AHB1_LCD0]		= { 0x2c4, BIT(4) },
-	[RST_AHB1_LCD1]		= { 0x2c4, BIT(5) },
-	[RST_AHB1_CSI]		= { 0x2c4, BIT(8) },
-	[RST_AHB1_HDMI]		= { 0x2c4, BIT(11) },
-	[RST_AHB1_BE0]		= { 0x2c4, BIT(12) },
-	[RST_AHB1_BE1]		= { 0x2c4, BIT(13) },
-	[RST_AHB1_FE0]		= { 0x2c4, BIT(14) },
-	[RST_AHB1_FE1]		= { 0x2c4, BIT(15) },
-	[RST_AHB1_MP]		= { 0x2c4, BIT(18) },
-	[RST_AHB1_GPU]		= { 0x2c4, BIT(20) },
-	[RST_AHB1_DEU0]		= { 0x2c4, BIT(23) },
-	[RST_AHB1_DEU1]		= { 0x2c4, BIT(24) },
-	[RST_AHB1_DRC0]		= { 0x2c4, BIT(25) },
-	[RST_AHB1_DRC1]		= { 0x2c4, BIT(26) },
-	[RST_AHB1_LVDS]		= { 0x2c8, BIT(0) },
-
-	[RST_APB1_CODEC]	= { 0x2d0, BIT(0) },
-	[RST_APB1_SPDIF]	= { 0x2d0, BIT(1) },
-	[RST_APB1_DIGITAL_MIC]	= { 0x2d0, BIT(4) },
-	[RST_APB1_DAUDIO0]	= { 0x2d0, BIT(12) },
-	[RST_APB1_DAUDIO1]	= { 0x2d0, BIT(13) },
-
-	[RST_APB2_I2C0]		= { 0x2d8, BIT(0) },
-	[RST_APB2_I2C1]		= { 0x2d8, BIT(1) },
-	[RST_APB2_I2C2]		= { 0x2d8, BIT(2) },
-	[RST_APB2_I2C3]		= { 0x2d8, BIT(3) },
-	[RST_APB2_UART0]	= { 0x2d8, BIT(16) },
-	[RST_APB2_UART1]	= { 0x2d8, BIT(17) },
-	[RST_APB2_UART2]	= { 0x2d8, BIT(18) },
-	[RST_APB2_UART3]	= { 0x2d8, BIT(19) },
-	[RST_APB2_UART4]	= { 0x2d8, BIT(20) },
-	[RST_APB2_UART5]	= { 0x2d8, BIT(21) },
-};
-
-static const struct sunxi_ccu_desc sun6i_a31_ccu_desc = {
-	.ccu_clks	= sun6i_a31_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun6i_a31_ccu_clks),
-
-	.hw_clks	= &sun6i_a31_hw_clks,
-
-	.resets		= sun6i_a31_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun6i_a31_ccu_resets),
-};
-
-static struct ccu_mux_nb sun6i_a31_cpu_nb = {
-	.common		= &cpu_clk.common,
-	.cm		= &cpu_clk.mux,
-	.delay_us	= 1, /* > 8 clock cycles at 24 MHz */
-	.bypass_index	= 1, /* index of 24 MHz oscillator */
-};
-
-static void __init sun6i_a31_ccu_setup(struct device_node *node)
-{
-	void __iomem *reg;
-	u32 val;
-
-	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
-	if (IS_ERR(reg)) {
-		pr_err("%pOF: Could not map the clock registers\n", node);
-		return;
-	}
-
-	/* Force the PLL-Audio-1x divider to 1 */
-	val = readl(reg + SUN6I_A31_PLL_AUDIO_REG);
-	val &= ~GENMASK(19, 16);
-	writel(val | (0 << 16), reg + SUN6I_A31_PLL_AUDIO_REG);
-
-	/* Force PLL-MIPI to MIPI mode */
-	val = readl(reg + SUN6I_A31_PLL_MIPI_REG);
-	val &= BIT(16);
-	writel(val, reg + SUN6I_A31_PLL_MIPI_REG);
-
-	/* Force AHB1 to PLL6 / 3 */
-	val = readl(reg + SUN6I_A31_AHB1_REG);
-	/* set PLL6 pre-div = 3 */
-	val &= ~GENMASK(7, 6);
-	val |= 0x2 << 6;
-	/* select PLL6 / pre-div */
-	val &= ~GENMASK(13, 12);
-	val |= 0x3 << 12;
-	writel(val, reg + SUN6I_A31_AHB1_REG);
-
-	of_sunxi_ccu_probe(node, reg, &sun6i_a31_ccu_desc);
-
-	ccu_mux_notifier_register(pll_cpu_clk.common.hw.clk,
-				  &sun6i_a31_cpu_nb);
-}
-CLK_OF_DECLARE(sun6i_a31_ccu, "allwinner,sun6i-a31-ccu",
-	       sun6i_a31_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/ccu-sun6i-a31.h b/drivers/clk/sunxi-ng/ccu-sun6i-a31.h
deleted file mode 100644
index 3ed2a59b0dc6..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun6i-a31.h
+++ /dev/null
@@ -1,69 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0-or-later */
-/*
- * Copyright 2016 Chen-Yu Tsai
- *
- * Chen-Yu Tsai <wens@csie.org>
- */
-
-#ifndef _CCU_SUN6I_A31_H_
-#define _CCU_SUN6I_A31_H_
-
-#include <dt-bindings/clock/sun6i-a31-ccu.h>
-#include <dt-bindings/reset/sun6i-a31-ccu.h>
-
-#define CLK_PLL_CPU		0
-#define CLK_PLL_AUDIO_BASE	1
-#define CLK_PLL_AUDIO		2
-#define CLK_PLL_AUDIO_2X	3
-#define CLK_PLL_AUDIO_4X	4
-#define CLK_PLL_AUDIO_8X	5
-#define CLK_PLL_VIDEO0		6
-
-/* The PLL_VIDEO0_2X clock is exported */
-
-#define CLK_PLL_VE		8
-#define CLK_PLL_DDR		9
-
-/* The PLL_PERIPH clock is exported */
-
-#define CLK_PLL_PERIPH_2X	11
-#define CLK_PLL_VIDEO1		12
-
-/* The PLL_VIDEO1_2X clock is exported */
-
-#define CLK_PLL_GPU		14
-
-/* The PLL_VIDEO1_2X clock is exported */
-
-#define CLK_PLL9		16
-#define CLK_PLL10		17
-
-/* The CPUX clock is exported */
-
-#define CLK_AXI			19
-#define CLK_AHB1		20
-#define CLK_APB1		21
-#define CLK_APB2		22
-
-/* All the bus gates are exported */
-
-/* The first bunch of module clocks are exported */
-
-/* EMAC clock is not implemented */
-
-#define CLK_MDFS		107
-#define CLK_SDRAM0		108
-#define CLK_SDRAM1		109
-
-/* All the DRAM gates are exported */
-
-/* Some more module clocks are exported */
-
-#define CLK_MBUS0		141
-#define CLK_MBUS1		142
-
-/* Some more module clocks and external clock outputs are exported */
-
-#define CLK_NUMBER		(CLK_OUT_C + 1)
-
-#endif /* _CCU_SUN6I_A31_H_ */
diff --git a/drivers/clk/sunxi-ng/ccu-sun8i-a23-a33.h b/drivers/clk/sunxi-ng/ccu-sun8i-a23-a33.h
deleted file mode 100644
index 5bf5c4d13b4c..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun8i-a23-a33.h
+++ /dev/null
@@ -1,56 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0-or-later */
-/*
- * Copyright 2016 Maxime Ripard
- *
- * Maxime Ripard <maxime.ripard@free-electrons.com>
- */
-
-#ifndef _CCU_SUN8I_A23_A33_H_
-#define _CCU_SUN8I_A23_A33_H_
-
-#include <dt-bindings/clock/sun8i-a23-a33-ccu.h>
-#include <dt-bindings/reset/sun8i-a23-a33-ccu.h>
-
-#define CLK_PLL_CPUX		0
-#define CLK_PLL_AUDIO_BASE	1
-#define CLK_PLL_AUDIO		2
-#define CLK_PLL_AUDIO_2X	3
-#define CLK_PLL_AUDIO_4X	4
-#define CLK_PLL_AUDIO_8X	5
-#define CLK_PLL_VIDEO		6
-#define CLK_PLL_VIDEO_2X	7
-#define CLK_PLL_VE		8
-#define CLK_PLL_DDR0		9
-#define CLK_PLL_PERIPH		10
-#define CLK_PLL_PERIPH_2X	11
-#define CLK_PLL_GPU		12
-
-/* The PLL MIPI clock is exported */
-
-#define CLK_PLL_HSIC		14
-#define CLK_PLL_DE		15
-#define CLK_PLL_DDR1		16
-#define CLK_PLL_DDR		17
-
-/* The CPUX clock is exported */
-
-#define CLK_AXI			19
-#define CLK_AHB1		20
-#define CLK_APB1		21
-#define CLK_APB2		22
-
-/* All the bus gates are exported */
-
-/* The first part of the mod clocks is exported */
-
-#define CLK_DRAM		79
-
-/* Some more module clocks are exported */
-
-#define CLK_MBUS		95
-
-/* And the last module clocks are exported */
-
-#define CLK_NUMBER		(CLK_ATS + 1)
-
-#endif /* _CCU_SUN8I_A23_A33_H_ */
diff --git a/drivers/clk/sunxi-ng/ccu-sun8i-a23.c b/drivers/clk/sunxi-ng/ccu-sun8i-a23.c
deleted file mode 100644
index 577bb235d658..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun8i-a23.c
+++ /dev/null
@@ -1,751 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-only
-/*
- * Copyright (c) 2016 Maxime Ripard. All rights reserved.
- */
-
-#include <linux/clk-provider.h>
-#include <linux/io.h>
-#include <linux/of_address.h>
-
-#include "ccu_common.h"
-#include "ccu_reset.h"
-
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_mp.h"
-#include "ccu_mult.h"
-#include "ccu_nk.h"
-#include "ccu_nkm.h"
-#include "ccu_nkmp.h"
-#include "ccu_nm.h"
-#include "ccu_phase.h"
-#include "ccu_sdm.h"
-
-#include "ccu-sun8i-a23-a33.h"
-
-
-static struct ccu_nkmp pll_cpux_clk = {
-	.enable = BIT(31),
-	.lock	= BIT(28),
-
-	.n	= _SUNXI_CCU_MULT(8, 5),
-	.k	= _SUNXI_CCU_MULT(4, 2),
-	.m	= _SUNXI_CCU_DIV(0, 2),
-	.p	= _SUNXI_CCU_DIV_MAX(16, 2, 4),
-
-	.common	= {
-		.reg		= 0x000,
-		.hw.init	= CLK_HW_INIT("pll-cpux", "osc24M",
-					      &ccu_nkmp_ops,
-					      0),
-	},
-};
-
-/*
- * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
- * the base (2x, 4x and 8x), and one variable divider (the one true
- * pll audio).
- *
- * With sigma-delta modulation for fractional-N on the audio PLL,
- * we have to use specific dividers. This means the variable divider
- * can no longer be used, as the audio codec requests the exact clock
- * rates we support through this mechanism. So we now hard code the
- * variable divider to 1. This means the clock rates will no longer
- * match the clock names.
- */
-#define SUN8I_A23_PLL_AUDIO_REG	0x008
-
-static struct ccu_sdm_setting pll_audio_sdm_table[] = {
-	{ .rate = 22579200, .pattern = 0xc0010d84, .m = 8, .n = 7 },
-	{ .rate = 24576000, .pattern = 0xc000ac02, .m = 14, .n = 14 },
-};
-
-static SUNXI_CCU_NM_WITH_SDM_GATE_LOCK(pll_audio_base_clk, "pll-audio-base",
-				       "osc24M", 0x008,
-				       8, 7,	/* N */
-				       0, 5,	/* M */
-				       pll_audio_sdm_table, BIT(24),
-				       0x284, BIT(31),
-				       BIT(31),	/* gate */
-				       BIT(28),	/* lock */
-				       CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_video_clk, "pll-video",
-					"osc24M", 0x010,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_ve_clk, "pll-ve",
-					"osc24M", 0x018,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_ddr_clk, "pll-ddr",
-				    "osc24M", 0x020,
-				    8, 5,		/* N */
-				    4, 2,		/* K */
-				    0, 2,		/* M */
-				    BIT(31),		/* gate */
-				    BIT(28),		/* lock */
-				    0);
-
-static SUNXI_CCU_NK_WITH_GATE_LOCK_POSTDIV(pll_periph_clk, "pll-periph",
-					   "osc24M", 0x028,
-					   8, 5,	/* N */
-					   4, 2,	/* K */
-					   BIT(31),	/* gate */
-					   BIT(28),	/* lock */
-					   2,		/* post-div */
-					   CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_gpu_clk, "pll-gpu",
-					"osc24M", 0x038,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-/*
- * The MIPI PLL has 2 modes: "MIPI" and "HDMI".
- *
- * The MIPI mode is a standard NKM-style clock. The HDMI mode is an
- * integer / fractional clock with switchable multipliers and dividers.
- * This is not supported here. We hardcode the PLL to MIPI mode.
- */
-#define SUN8I_A23_PLL_MIPI_REG	0x040
-static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_mipi_clk, "pll-mipi",
-				    "pll-video", 0x040,
-				    8, 4,		/* N */
-				    4, 2,		/* K */
-				    0, 4,		/* M */
-				    BIT(31) | BIT(23) | BIT(22), /* gate */
-				    BIT(28),		/* lock */
-				    CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_hsic_clk, "pll-hsic",
-					"osc24M", 0x044,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_de_clk, "pll-de",
-					"osc24M", 0x048,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static const char * const cpux_parents[] = { "osc32k", "osc24M",
-					     "pll-cpux" , "pll-cpux" };
-static SUNXI_CCU_MUX(cpux_clk, "cpux", cpux_parents,
-		     0x050, 16, 2, CLK_IS_CRITICAL);
-
-static SUNXI_CCU_M(axi_clk, "axi", "cpux", 0x050, 0, 2, 0);
-
-static const char * const ahb1_parents[] = { "osc32k", "osc24M",
-					     "axi" , "pll-periph" };
-static const struct ccu_mux_var_prediv ahb1_predivs[] = {
-	{ .index = 3, .shift = 6, .width = 2 },
-};
-static struct ccu_div ahb1_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
-
-	.mux		= {
-		.shift	= 12,
-		.width	= 2,
-
-		.var_predivs	= ahb1_predivs,
-		.n_var_predivs	= ARRAY_SIZE(ahb1_predivs),
-	},
-
-	.common		= {
-		.reg		= 0x054,
-		.features	= CCU_FEATURE_VARIABLE_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("ahb1",
-						      ahb1_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static struct clk_div_table apb1_div_table[] = {
-	{ .val = 0, .div = 2 },
-	{ .val = 1, .div = 2 },
-	{ .val = 2, .div = 4 },
-	{ .val = 3, .div = 8 },
-	{ /* Sentinel */ },
-};
-static SUNXI_CCU_DIV_TABLE(apb1_clk, "apb1", "ahb1",
-			   0x054, 8, 2, apb1_div_table, 0);
-
-static const char * const apb2_parents[] = { "osc32k", "osc24M",
-					     "pll-periph" , "pll-periph" };
-static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", apb2_parents, 0x058,
-			     0, 5,	/* M */
-			     16, 2,	/* P */
-			     24, 2,	/* mux */
-			     0);
-
-static SUNXI_CCU_GATE(bus_mipi_dsi_clk,	"bus-mipi-dsi",	"ahb1",
-		      0x060, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_dma_clk,	"bus-dma",	"ahb1",
-		      0x060, BIT(6), 0);
-static SUNXI_CCU_GATE(bus_mmc0_clk,	"bus-mmc0",	"ahb1",
-		      0x060, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_mmc1_clk,	"bus-mmc1",	"ahb1",
-		      0x060, BIT(9), 0);
-static SUNXI_CCU_GATE(bus_mmc2_clk,	"bus-mmc2",	"ahb1",
-		      0x060, BIT(10), 0);
-static SUNXI_CCU_GATE(bus_nand_clk,	"bus-nand",	"ahb1",
-		      0x060, BIT(13), 0);
-static SUNXI_CCU_GATE(bus_dram_clk,	"bus-dram",	"ahb1",
-		      0x060, BIT(14), 0);
-static SUNXI_CCU_GATE(bus_hstimer_clk,	"bus-hstimer",	"ahb1",
-		      0x060, BIT(19), 0);
-static SUNXI_CCU_GATE(bus_spi0_clk,	"bus-spi0",	"ahb1",
-		      0x060, BIT(20), 0);
-static SUNXI_CCU_GATE(bus_spi1_clk,	"bus-spi1",	"ahb1",
-		      0x060, BIT(21), 0);
-static SUNXI_CCU_GATE(bus_otg_clk,	"bus-otg",	"ahb1",
-		      0x060, BIT(24), 0);
-static SUNXI_CCU_GATE(bus_ehci_clk,	"bus-ehci",	"ahb1",
-		      0x060, BIT(26), 0);
-static SUNXI_CCU_GATE(bus_ohci_clk,	"bus-ohci",	"ahb1",
-		      0x060, BIT(29), 0);
-
-static SUNXI_CCU_GATE(bus_ve_clk,	"bus-ve",	"ahb1",
-		      0x064, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_lcd_clk,	"bus-lcd",	"ahb1",
-		      0x064, BIT(4), 0);
-static SUNXI_CCU_GATE(bus_csi_clk,	"bus-csi",	"ahb1",
-		      0x064, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_de_be_clk,	"bus-de-be",	"ahb1",
-		      0x064, BIT(12), 0);
-static SUNXI_CCU_GATE(bus_de_fe_clk,	"bus-de-fe",	"ahb1",
-		      0x064, BIT(14), 0);
-static SUNXI_CCU_GATE(bus_gpu_clk,	"bus-gpu",	"ahb1",
-		      0x064, BIT(20), 0);
-static SUNXI_CCU_GATE(bus_msgbox_clk,	"bus-msgbox",	"ahb1",
-		      0x064, BIT(21), 0);
-static SUNXI_CCU_GATE(bus_spinlock_clk,	"bus-spinlock",	"ahb1",
-		      0x064, BIT(22), 0);
-static SUNXI_CCU_GATE(bus_drc_clk,	"bus-drc",	"ahb1",
-		      0x064, BIT(25), 0);
-
-static SUNXI_CCU_GATE(bus_codec_clk,	"bus-codec",	"apb1",
-		      0x068, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_pio_clk,	"bus-pio",	"apb1",
-		      0x068, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_i2s0_clk,	"bus-i2s0",	"apb1",
-		      0x068, BIT(12), 0);
-static SUNXI_CCU_GATE(bus_i2s1_clk,	"bus-i2s1",	"apb1",
-		      0x068, BIT(13), 0);
-
-static SUNXI_CCU_GATE(bus_i2c0_clk,	"bus-i2c0",	"apb2",
-		      0x06c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_i2c1_clk,	"bus-i2c1",	"apb2",
-		      0x06c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_i2c2_clk,	"bus-i2c2",	"apb2",
-		      0x06c, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_uart0_clk,	"bus-uart0",	"apb2",
-		      0x06c, BIT(16), 0);
-static SUNXI_CCU_GATE(bus_uart1_clk,	"bus-uart1",	"apb2",
-		      0x06c, BIT(17), 0);
-static SUNXI_CCU_GATE(bus_uart2_clk,	"bus-uart2",	"apb2",
-		      0x06c, BIT(18), 0);
-static SUNXI_CCU_GATE(bus_uart3_clk,	"bus-uart3",	"apb2",
-		      0x06c, BIT(19), 0);
-static SUNXI_CCU_GATE(bus_uart4_clk,	"bus-uart4",	"apb2",
-		      0x06c, BIT(20), 0);
-
-static const char * const mod0_default_parents[] = { "osc24M", "pll-periph" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand_clk, "nand", mod0_default_parents, 0x080,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents, 0x088,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc0_sample_clk, "mmc0_sample", "mmc0",
-		       0x088, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc0_output_clk, "mmc0_output", "mmc0",
-		       0x088, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents, 0x08c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc1_sample_clk, "mmc1_sample", "mmc1",
-		       0x08c, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc1_output_clk, "mmc1_output", "mmc1",
-		       0x08c, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents, 0x090,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc2_sample_clk, "mmc2_sample", "mmc2",
-		       0x090, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc2_output_clk, "mmc2_output", "mmc2",
-		       0x090, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents, 0x0a0,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents, 0x0a4,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static const char * const i2s_parents[] = { "pll-audio-8x", "pll-audio-4x",
-					    "pll-audio-2x", "pll-audio" };
-static SUNXI_CCU_MUX_WITH_GATE(i2s0_clk, "i2s0", i2s_parents,
-			       0x0b0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_MUX_WITH_GATE(i2s1_clk, "i2s1", i2s_parents,
-			       0x0b4, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-/* TODO: the parent for most of the USB clocks is not known */
-static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"osc24M",
-		      0x0cc, BIT(8), 0);
-static SUNXI_CCU_GATE(usb_phy1_clk,	"usb-phy1",	"osc24M",
-		      0x0cc, BIT(9), 0);
-static SUNXI_CCU_GATE(usb_hsic_clk,	"usb-hsic",	"pll-hsic",
-		      0x0cc, BIT(10), 0);
-static SUNXI_CCU_GATE(usb_hsic_12M_clk,	"usb-hsic-12M",	"osc24M",
-		      0x0cc, BIT(11), 0);
-static SUNXI_CCU_GATE(usb_ohci_clk,	"usb-ohci",	"osc24M",
-		      0x0cc, BIT(16), 0);
-
-static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"pll-ddr",
-		      0x100, BIT(0), 0);
-static SUNXI_CCU_GATE(dram_csi_clk,	"dram-csi",	"pll-ddr",
-		      0x100, BIT(1), 0);
-static SUNXI_CCU_GATE(dram_drc_clk,	"dram-drc",	"pll-ddr",
-		      0x100, BIT(16), 0);
-static SUNXI_CCU_GATE(dram_de_fe_clk,	"dram-de-fe",	"pll-ddr",
-		      0x100, BIT(24), 0);
-static SUNXI_CCU_GATE(dram_de_be_clk,	"dram-de-be",	"pll-ddr",
-		      0x100, BIT(26), 0);
-
-static const char * const de_parents[] = { "pll-video", "pll-periph-2x",
-					   "pll-gpu", "pll-de" };
-static const u8 de_table[] = { 0, 2, 3, 5 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(de_be_clk, "de-be",
-				       de_parents, de_table,
-				       0x104, 0, 4, 24, 3, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(de_fe_clk, "de-fe",
-				       de_parents, de_table,
-				       0x10c, 0, 4, 24, 3, BIT(31), 0);
-
-static const char * const lcd_ch0_parents[] = { "pll-video", "pll-video-2x",
-						"pll-mipi" };
-static const u8 lcd_ch0_table[] = { 0, 2, 4 };
-static SUNXI_CCU_MUX_TABLE_WITH_GATE(lcd_ch0_clk, "lcd-ch0",
-				     lcd_ch0_parents, lcd_ch0_table,
-				     0x118, 24, 3, BIT(31),
-				     CLK_SET_RATE_PARENT);
-
-static const char * const lcd_ch1_parents[] = { "pll-video", "pll-video-2x" };
-static const u8 lcd_ch1_table[] = { 0, 2 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(lcd_ch1_clk, "lcd-ch1",
-				       lcd_ch1_parents, lcd_ch1_table,
-				       0x12c, 0, 4, 24, 2, BIT(31), 0);
-
-static const char * const csi_sclk_parents[] = { "pll-video", "pll-de",
-						 "pll-mipi", "pll-ve" };
-static const u8 csi_sclk_table[] = { 0, 3, 4, 5 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi_sclk_clk, "csi-sclk",
-				       csi_sclk_parents, csi_sclk_table,
-				       0x134, 16, 4, 24, 3, BIT(31), 0);
-
-static const char * const csi_mclk_parents[] = { "pll-video", "pll-de",
-						 "osc24M" };
-static const u8 csi_mclk_table[] = { 0, 3, 5 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi_mclk_clk, "csi-mclk",
-				       csi_mclk_parents, csi_mclk_table,
-				       0x134, 0, 5, 8, 3, BIT(15), 0);
-
-static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve",
-			     0x13c, 16, 3, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(ac_dig_clk,	"ac-dig",	"pll-audio",
-		      0x140, BIT(31), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_GATE(avs_clk,		"avs",		"osc24M",
-		      0x144, BIT(31), 0);
-
-static const char * const mbus_parents[] = { "osc24M", "pll-periph-2x",
-					     "pll-ddr" };
-static SUNXI_CCU_M_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents,
-				 0x15c, 0, 3, 24, 2, BIT(31), CLK_IS_CRITICAL);
-
-static const char * const dsi_sclk_parents[] = { "pll-video", "pll-video-2x" };
-static const u8 dsi_sclk_table[] = { 0, 2 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(dsi_sclk_clk, "dsi-sclk",
-				       dsi_sclk_parents, dsi_sclk_table,
-				       0x168, 16, 4, 24, 2, BIT(31), 0);
-
-static const char * const dsi_dphy_parents[] = { "pll-video", "pll-periph" };
-static const u8 dsi_dphy_table[] = { 0, 2 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(dsi_dphy_clk, "dsi-dphy",
-				       dsi_dphy_parents, dsi_dphy_table,
-				       0x168, 0, 4, 8, 2, BIT(15), 0);
-
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(drc_clk, "drc",
-				       de_parents, de_table,
-				       0x180, 0, 4, 24, 3, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_GATE(gpu_clk, "gpu", "pll-gpu",
-			     0x1a0, 0, 3, BIT(31), 0);
-
-static const char * const ats_parents[] = { "osc24M", "pll-periph" };
-static SUNXI_CCU_M_WITH_MUX_GATE(ats_clk, "ats", ats_parents,
-				 0x1b0, 0, 3, 24, 2, BIT(31), 0);
-
-static struct ccu_common *sun8i_a23_ccu_clks[] = {
-	&pll_cpux_clk.common,
-	&pll_audio_base_clk.common,
-	&pll_video_clk.common,
-	&pll_ve_clk.common,
-	&pll_ddr_clk.common,
-	&pll_periph_clk.common,
-	&pll_gpu_clk.common,
-	&pll_mipi_clk.common,
-	&pll_hsic_clk.common,
-	&pll_de_clk.common,
-	&cpux_clk.common,
-	&axi_clk.common,
-	&ahb1_clk.common,
-	&apb1_clk.common,
-	&apb2_clk.common,
-	&bus_mipi_dsi_clk.common,
-	&bus_dma_clk.common,
-	&bus_mmc0_clk.common,
-	&bus_mmc1_clk.common,
-	&bus_mmc2_clk.common,
-	&bus_nand_clk.common,
-	&bus_dram_clk.common,
-	&bus_hstimer_clk.common,
-	&bus_spi0_clk.common,
-	&bus_spi1_clk.common,
-	&bus_otg_clk.common,
-	&bus_ehci_clk.common,
-	&bus_ohci_clk.common,
-	&bus_ve_clk.common,
-	&bus_lcd_clk.common,
-	&bus_csi_clk.common,
-	&bus_de_fe_clk.common,
-	&bus_de_be_clk.common,
-	&bus_gpu_clk.common,
-	&bus_msgbox_clk.common,
-	&bus_spinlock_clk.common,
-	&bus_drc_clk.common,
-	&bus_codec_clk.common,
-	&bus_pio_clk.common,
-	&bus_i2s0_clk.common,
-	&bus_i2s1_clk.common,
-	&bus_i2c0_clk.common,
-	&bus_i2c1_clk.common,
-	&bus_i2c2_clk.common,
-	&bus_uart0_clk.common,
-	&bus_uart1_clk.common,
-	&bus_uart2_clk.common,
-	&bus_uart3_clk.common,
-	&bus_uart4_clk.common,
-	&nand_clk.common,
-	&mmc0_clk.common,
-	&mmc0_sample_clk.common,
-	&mmc0_output_clk.common,
-	&mmc1_clk.common,
-	&mmc1_sample_clk.common,
-	&mmc1_output_clk.common,
-	&mmc2_clk.common,
-	&mmc2_sample_clk.common,
-	&mmc2_output_clk.common,
-	&spi0_clk.common,
-	&spi1_clk.common,
-	&i2s0_clk.common,
-	&i2s1_clk.common,
-	&usb_phy0_clk.common,
-	&usb_phy1_clk.common,
-	&usb_hsic_clk.common,
-	&usb_hsic_12M_clk.common,
-	&usb_ohci_clk.common,
-	&dram_ve_clk.common,
-	&dram_csi_clk.common,
-	&dram_drc_clk.common,
-	&dram_de_fe_clk.common,
-	&dram_de_be_clk.common,
-	&de_be_clk.common,
-	&de_fe_clk.common,
-	&lcd_ch0_clk.common,
-	&lcd_ch1_clk.common,
-	&csi_sclk_clk.common,
-	&csi_mclk_clk.common,
-	&ve_clk.common,
-	&ac_dig_clk.common,
-	&avs_clk.common,
-	&mbus_clk.common,
-	&dsi_sclk_clk.common,
-	&dsi_dphy_clk.common,
-	&drc_clk.common,
-	&gpu_clk.common,
-	&ats_clk.common,
-};
-
-static const struct clk_hw *clk_parent_pll_audio[] = {
-	&pll_audio_base_clk.common.hw
-};
-
-/* We hardcode the divider to 1 for now */
-static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
-			    clk_parent_pll_audio,
-			    1, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
-			    clk_parent_pll_audio,
-			    2, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
-			    clk_parent_pll_audio,
-			    1, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
-			    clk_parent_pll_audio,
-			    1, 2, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HW(pll_periph_2x_clk, "pll-periph-2x",
-			   &pll_periph_clk.common.hw,
-			   1, 2, 0);
-static CLK_FIXED_FACTOR_HW(pll_video_2x_clk, "pll-video-2x",
-			   &pll_video_clk.common.hw,
-			   1, 2, 0);
-
-static struct clk_hw_onecell_data sun8i_a23_hw_clks = {
-	.hws	= {
-		[CLK_PLL_CPUX]		= &pll_cpux_clk.common.hw,
-		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
-		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
-		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
-		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
-		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
-		[CLK_PLL_VIDEO]		= &pll_video_clk.common.hw,
-		[CLK_PLL_VIDEO_2X]	= &pll_video_2x_clk.hw,
-		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
-		[CLK_PLL_DDR0]		= &pll_ddr_clk.common.hw,
-		[CLK_PLL_PERIPH]	= &pll_periph_clk.common.hw,
-		[CLK_PLL_PERIPH_2X]	= &pll_periph_2x_clk.hw,
-		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
-		[CLK_PLL_MIPI]		= &pll_mipi_clk.common.hw,
-		[CLK_PLL_HSIC]		= &pll_hsic_clk.common.hw,
-		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
-		[CLK_CPUX]		= &cpux_clk.common.hw,
-		[CLK_AXI]		= &axi_clk.common.hw,
-		[CLK_AHB1]		= &ahb1_clk.common.hw,
-		[CLK_APB1]		= &apb1_clk.common.hw,
-		[CLK_APB2]		= &apb2_clk.common.hw,
-		[CLK_BUS_MIPI_DSI]	= &bus_mipi_dsi_clk.common.hw,
-		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
-		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
-		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
-		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
-		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
-		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
-		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
-		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
-		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
-		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
-		[CLK_BUS_EHCI]		= &bus_ehci_clk.common.hw,
-		[CLK_BUS_OHCI]		= &bus_ohci_clk.common.hw,
-		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
-		[CLK_BUS_LCD]		= &bus_lcd_clk.common.hw,
-		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
-		[CLK_BUS_DE_BE]		= &bus_de_be_clk.common.hw,
-		[CLK_BUS_DE_FE]		= &bus_de_fe_clk.common.hw,
-		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
-		[CLK_BUS_MSGBOX]	= &bus_msgbox_clk.common.hw,
-		[CLK_BUS_SPINLOCK]	= &bus_spinlock_clk.common.hw,
-		[CLK_BUS_DRC]		= &bus_drc_clk.common.hw,
-		[CLK_BUS_CODEC]		= &bus_codec_clk.common.hw,
-		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
-		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
-		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
-		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
-		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
-		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
-		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
-		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
-		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
-		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
-		[CLK_BUS_UART4]		= &bus_uart4_clk.common.hw,
-		[CLK_NAND]		= &nand_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
-		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
-		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
-		[CLK_MMC2]		= &mmc2_clk.common.hw,
-		[CLK_MMC2_SAMPLE]	= &mmc2_sample_clk.common.hw,
-		[CLK_MMC2_OUTPUT]	= &mmc2_output_clk.common.hw,
-		[CLK_SPI0]		= &spi0_clk.common.hw,
-		[CLK_SPI1]		= &spi1_clk.common.hw,
-		[CLK_I2S0]		= &i2s0_clk.common.hw,
-		[CLK_I2S1]		= &i2s1_clk.common.hw,
-		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
-		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
-		[CLK_USB_HSIC]		= &usb_hsic_clk.common.hw,
-		[CLK_USB_HSIC_12M]	= &usb_hsic_12M_clk.common.hw,
-		[CLK_USB_OHCI]		= &usb_ohci_clk.common.hw,
-		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
-		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
-		[CLK_DRAM_DRC]		= &dram_drc_clk.common.hw,
-		[CLK_DRAM_DE_FE]	= &dram_de_fe_clk.common.hw,
-		[CLK_DRAM_DE_BE]	= &dram_de_be_clk.common.hw,
-		[CLK_DE_BE]		= &de_be_clk.common.hw,
-		[CLK_DE_FE]		= &de_fe_clk.common.hw,
-		[CLK_LCD_CH0]		= &lcd_ch0_clk.common.hw,
-		[CLK_LCD_CH1]		= &lcd_ch1_clk.common.hw,
-		[CLK_CSI_SCLK]		= &csi_sclk_clk.common.hw,
-		[CLK_CSI_MCLK]		= &csi_mclk_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_AC_DIG]		= &ac_dig_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-		[CLK_MBUS]		= &mbus_clk.common.hw,
-		[CLK_DSI_SCLK]		= &dsi_sclk_clk.common.hw,
-		[CLK_DSI_DPHY]		= &dsi_dphy_clk.common.hw,
-		[CLK_DRC]		= &drc_clk.common.hw,
-		[CLK_GPU]		= &gpu_clk.common.hw,
-		[CLK_ATS]		= &ats_clk.common.hw,
-	},
-	.num	= CLK_NUMBER,
-};
-
-static struct ccu_reset_map sun8i_a23_ccu_resets[] = {
-	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
-	[RST_USB_PHY1]		=  { 0x0cc, BIT(1) },
-	[RST_USB_HSIC]		=  { 0x0cc, BIT(2) },
-
-	[RST_MBUS]		=  { 0x0fc, BIT(31) },
-
-	[RST_BUS_MIPI_DSI]	=  { 0x2c0, BIT(1) },
-	[RST_BUS_DMA]		=  { 0x2c0, BIT(6) },
-	[RST_BUS_MMC0]		=  { 0x2c0, BIT(8) },
-	[RST_BUS_MMC1]		=  { 0x2c0, BIT(9) },
-	[RST_BUS_MMC2]		=  { 0x2c0, BIT(10) },
-	[RST_BUS_NAND]		=  { 0x2c0, BIT(13) },
-	[RST_BUS_DRAM]		=  { 0x2c0, BIT(14) },
-	[RST_BUS_HSTIMER]	=  { 0x2c0, BIT(19) },
-	[RST_BUS_SPI0]		=  { 0x2c0, BIT(20) },
-	[RST_BUS_SPI1]		=  { 0x2c0, BIT(21) },
-	[RST_BUS_OTG]		=  { 0x2c0, BIT(24) },
-	[RST_BUS_EHCI]		=  { 0x2c0, BIT(26) },
-	[RST_BUS_OHCI]		=  { 0x2c0, BIT(29) },
-
-	[RST_BUS_VE]		=  { 0x2c4, BIT(0) },
-	[RST_BUS_LCD]		=  { 0x2c4, BIT(4) },
-	[RST_BUS_CSI]		=  { 0x2c4, BIT(8) },
-	[RST_BUS_DE_BE]		=  { 0x2c4, BIT(12) },
-	[RST_BUS_DE_FE]		=  { 0x2c4, BIT(14) },
-	[RST_BUS_GPU]		=  { 0x2c4, BIT(20) },
-	[RST_BUS_MSGBOX]	=  { 0x2c4, BIT(21) },
-	[RST_BUS_SPINLOCK]	=  { 0x2c4, BIT(22) },
-	[RST_BUS_DRC]		=  { 0x2c4, BIT(25) },
-
-	[RST_BUS_LVDS]		=  { 0x2c8, BIT(0) },
-
-	[RST_BUS_CODEC]		=  { 0x2d0, BIT(0) },
-	[RST_BUS_I2S0]		=  { 0x2d0, BIT(12) },
-	[RST_BUS_I2S1]		=  { 0x2d0, BIT(13) },
-
-	[RST_BUS_I2C0]		=  { 0x2d8, BIT(0) },
-	[RST_BUS_I2C1]		=  { 0x2d8, BIT(1) },
-	[RST_BUS_I2C2]		=  { 0x2d8, BIT(2) },
-	[RST_BUS_UART0]		=  { 0x2d8, BIT(16) },
-	[RST_BUS_UART1]		=  { 0x2d8, BIT(17) },
-	[RST_BUS_UART2]		=  { 0x2d8, BIT(18) },
-	[RST_BUS_UART3]		=  { 0x2d8, BIT(19) },
-	[RST_BUS_UART4]		=  { 0x2d8, BIT(20) },
-};
-
-static const struct sunxi_ccu_desc sun8i_a23_ccu_desc = {
-	.ccu_clks	= sun8i_a23_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun8i_a23_ccu_clks),
-
-	.hw_clks	= &sun8i_a23_hw_clks,
-
-	.resets		= sun8i_a23_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun8i_a23_ccu_resets),
-};
-
-static void __init sun8i_a23_ccu_setup(struct device_node *node)
-{
-	void __iomem *reg;
-	u32 val;
-
-	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
-	if (IS_ERR(reg)) {
-		pr_err("%pOF: Could not map the clock registers\n", node);
-		return;
-	}
-
-	/* Force the PLL-Audio-1x divider to 1 */
-	val = readl(reg + SUN8I_A23_PLL_AUDIO_REG);
-	val &= ~GENMASK(19, 16);
-	writel(val | (0 << 16), reg + SUN8I_A23_PLL_AUDIO_REG);
-
-	/* Force PLL-MIPI to MIPI mode */
-	val = readl(reg + SUN8I_A23_PLL_MIPI_REG);
-	val &= ~BIT(16);
-	writel(val, reg + SUN8I_A23_PLL_MIPI_REG);
-
-	of_sunxi_ccu_probe(node, reg, &sun8i_a23_ccu_desc);
-}
-CLK_OF_DECLARE(sun8i_a23_ccu, "allwinner,sun8i-a23-ccu",
-	       sun8i_a23_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/ccu-sun8i-a33.c b/drivers/clk/sunxi-ng/ccu-sun8i-a33.c
deleted file mode 100644
index 8f65cd03f5ac..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun8i-a33.c
+++ /dev/null
@@ -1,818 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-only
-/*
- * Copyright (c) 2016 Maxime Ripard. All rights reserved.
- */
-
-#include <linux/clk-provider.h>
-#include <linux/io.h>
-#include <linux/of_address.h>
-
-#include "ccu_common.h"
-#include "ccu_reset.h"
-
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_mp.h"
-#include "ccu_mult.h"
-#include "ccu_nk.h"
-#include "ccu_nkm.h"
-#include "ccu_nkmp.h"
-#include "ccu_nm.h"
-#include "ccu_phase.h"
-
-#include "ccu-sun8i-a23-a33.h"
-
-static struct ccu_nkmp pll_cpux_clk = {
-	.enable = BIT(31),
-	.lock	= BIT(28),
-
-	.n	= _SUNXI_CCU_MULT(8, 5),
-	.k	= _SUNXI_CCU_MULT(4, 2),
-	.m	= _SUNXI_CCU_DIV(0, 2),
-	.p	= _SUNXI_CCU_DIV_MAX(16, 2, 4),
-
-	.common	= {
-		.reg		= 0x000,
-		.hw.init	= CLK_HW_INIT("pll-cpux", "osc24M",
-					      &ccu_nkmp_ops,
-					      0),
-	},
-};
-
-/*
- * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
- * the base (2x, 4x and 8x), and one variable divider (the one true
- * pll audio).
- *
- * With sigma-delta modulation for fractional-N on the audio PLL,
- * we have to use specific dividers. This means the variable divider
- * can no longer be used, as the audio codec requests the exact clock
- * rates we support through this mechanism. So we now hard code the
- * variable divider to 1. This means the clock rates will no longer
- * match the clock names.
- */
-#define SUN8I_A33_PLL_AUDIO_REG	0x008
-
-static struct ccu_sdm_setting pll_audio_sdm_table[] = {
-	{ .rate = 22579200, .pattern = 0xc0010d84, .m = 8, .n = 7 },
-	{ .rate = 24576000, .pattern = 0xc000ac02, .m = 14, .n = 14 },
-};
-
-static SUNXI_CCU_NM_WITH_SDM_GATE_LOCK(pll_audio_base_clk, "pll-audio-base",
-				       "osc24M", 0x008,
-				       8, 7,	/* N */
-				       0, 5,	/* M */
-				       pll_audio_sdm_table, BIT(24),
-				       0x284, BIT(31),
-				       BIT(31),	/* gate */
-				       BIT(28),	/* lock */
-				       CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_video_clk, "pll-video",
-					"osc24M", 0x010,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_ve_clk, "pll-ve",
-					"osc24M", 0x018,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_ddr0_clk, "pll-ddr0",
-				    "osc24M", 0x020,
-				    8, 5,		/* N */
-				    4, 2,		/* K */
-				    0, 2,		/* M */
-				    BIT(31),		/* gate */
-				    BIT(28),		/* lock */
-				    0);
-
-static SUNXI_CCU_NK_WITH_GATE_LOCK_POSTDIV(pll_periph_clk, "pll-periph",
-					   "osc24M", 0x028,
-					   8, 5,	/* N */
-					   4, 2,	/* K */
-					   BIT(31),	/* gate */
-					   BIT(28),	/* lock */
-					   2,		/* post-div */
-					   CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_gpu_clk, "pll-gpu",
-					"osc24M", 0x038,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-/*
- * The MIPI PLL has 2 modes: "MIPI" and "HDMI".
- *
- * The MIPI mode is a standard NKM-style clock. The HDMI mode is an
- * integer / fractional clock with switchable multipliers and dividers.
- * This is not supported here. We hardcode the PLL to MIPI mode.
- */
-#define SUN8I_A33_PLL_MIPI_REG	0x040
-static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_mipi_clk, "pll-mipi",
-				    "pll-video", 0x040,
-				    8, 4,		/* N */
-				    4, 2,		/* K */
-				    0, 4,		/* M */
-				    BIT(31) | BIT(23) | BIT(22), /* gate */
-				    BIT(28),		/* lock */
-				    CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_hsic_clk, "pll-hsic",
-					"osc24M", 0x044,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_de_clk, "pll-de",
-					"osc24M", 0x048,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static struct ccu_mult pll_ddr1_clk = {
-	.enable	= BIT(31),
-	.lock	= BIT(28),
-	.mult	= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 6, 0, 12, 0),
-	.common	= {
-		.reg		= 0x04c,
-		.hw.init	= CLK_HW_INIT("pll-ddr1", "osc24M",
-					      &ccu_mult_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static const char * const cpux_parents[] = { "osc32k", "osc24M",
-					     "pll-cpux" , "pll-cpux" };
-static SUNXI_CCU_MUX(cpux_clk, "cpux", cpux_parents,
-		     0x050, 16, 2, CLK_IS_CRITICAL | CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M(axi_clk, "axi", "cpux", 0x050, 0, 2, 0);
-
-static const char * const ahb1_parents[] = { "osc32k", "osc24M",
-					     "axi" , "pll-periph" };
-static const struct ccu_mux_var_prediv ahb1_predivs[] = {
-	{ .index = 3, .shift = 6, .width = 2 },
-};
-static struct ccu_div ahb1_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
-
-	.mux		= {
-		.shift	= 12,
-		.width	= 2,
-
-		.var_predivs	= ahb1_predivs,
-		.n_var_predivs	= ARRAY_SIZE(ahb1_predivs),
-	},
-
-	.common		= {
-		.reg		= 0x054,
-		.features	= CCU_FEATURE_VARIABLE_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("ahb1",
-						      ahb1_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static struct clk_div_table apb1_div_table[] = {
-	{ .val = 0, .div = 2 },
-	{ .val = 1, .div = 2 },
-	{ .val = 2, .div = 4 },
-	{ .val = 3, .div = 8 },
-	{ /* Sentinel */ },
-};
-static SUNXI_CCU_DIV_TABLE(apb1_clk, "apb1", "ahb1",
-			   0x054, 8, 2, apb1_div_table, 0);
-
-static const char * const apb2_parents[] = { "osc32k", "osc24M",
-					     "pll-periph" , "pll-periph" };
-static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", apb2_parents, 0x058,
-			     0, 5,	/* M */
-			     16, 2,	/* P */
-			     24, 2,	/* mux */
-			     0);
-
-static SUNXI_CCU_GATE(bus_mipi_dsi_clk,	"bus-mipi-dsi",	"ahb1",
-		      0x060, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_ss_clk,	"bus-ss",	"ahb1",
-		      0x060, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_dma_clk,	"bus-dma",	"ahb1",
-		      0x060, BIT(6), 0);
-static SUNXI_CCU_GATE(bus_mmc0_clk,	"bus-mmc0",	"ahb1",
-		      0x060, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_mmc1_clk,	"bus-mmc1",	"ahb1",
-		      0x060, BIT(9), 0);
-static SUNXI_CCU_GATE(bus_mmc2_clk,	"bus-mmc2",	"ahb1",
-		      0x060, BIT(10), 0);
-static SUNXI_CCU_GATE(bus_nand_clk,	"bus-nand",	"ahb1",
-		      0x060, BIT(13), 0);
-static SUNXI_CCU_GATE(bus_dram_clk,	"bus-dram",	"ahb1",
-		      0x060, BIT(14), 0);
-static SUNXI_CCU_GATE(bus_hstimer_clk,	"bus-hstimer",	"ahb1",
-		      0x060, BIT(19), 0);
-static SUNXI_CCU_GATE(bus_spi0_clk,	"bus-spi0",	"ahb1",
-		      0x060, BIT(20), 0);
-static SUNXI_CCU_GATE(bus_spi1_clk,	"bus-spi1",	"ahb1",
-		      0x060, BIT(21), 0);
-static SUNXI_CCU_GATE(bus_otg_clk,	"bus-otg",	"ahb1",
-		      0x060, BIT(24), 0);
-static SUNXI_CCU_GATE(bus_ehci_clk,	"bus-ehci",	"ahb1",
-		      0x060, BIT(26), 0);
-static SUNXI_CCU_GATE(bus_ohci_clk,	"bus-ohci",	"ahb1",
-		      0x060, BIT(29), 0);
-
-static SUNXI_CCU_GATE(bus_ve_clk,	"bus-ve",	"ahb1",
-		      0x064, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_lcd_clk,	"bus-lcd",	"ahb1",
-		      0x064, BIT(4), 0);
-static SUNXI_CCU_GATE(bus_csi_clk,	"bus-csi",	"ahb1",
-		      0x064, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_de_be_clk,	"bus-de-be",	"ahb1",
-		      0x064, BIT(12), 0);
-static SUNXI_CCU_GATE(bus_de_fe_clk,	"bus-de-fe",	"ahb1",
-		      0x064, BIT(14), 0);
-static SUNXI_CCU_GATE(bus_gpu_clk,	"bus-gpu",	"ahb1",
-		      0x064, BIT(20), 0);
-static SUNXI_CCU_GATE(bus_msgbox_clk,	"bus-msgbox",	"ahb1",
-		      0x064, BIT(21), 0);
-static SUNXI_CCU_GATE(bus_spinlock_clk,	"bus-spinlock",	"ahb1",
-		      0x064, BIT(22), 0);
-static SUNXI_CCU_GATE(bus_drc_clk,	"bus-drc",	"ahb1",
-		      0x064, BIT(25), 0);
-static SUNXI_CCU_GATE(bus_sat_clk,	"bus-sat",	"ahb1",
-		      0x064, BIT(26), 0);
-
-static SUNXI_CCU_GATE(bus_codec_clk,	"bus-codec",	"apb1",
-		      0x068, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_pio_clk,	"bus-pio",	"apb1",
-		      0x068, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_i2s0_clk,	"bus-i2s0",	"apb1",
-		      0x068, BIT(12), 0);
-static SUNXI_CCU_GATE(bus_i2s1_clk,	"bus-i2s1",	"apb1",
-		      0x068, BIT(13), 0);
-
-static SUNXI_CCU_GATE(bus_i2c0_clk,	"bus-i2c0",	"apb2",
-		      0x06c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_i2c1_clk,	"bus-i2c1",	"apb2",
-		      0x06c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_i2c2_clk,	"bus-i2c2",	"apb2",
-		      0x06c, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_uart0_clk,	"bus-uart0",	"apb2",
-		      0x06c, BIT(16), 0);
-static SUNXI_CCU_GATE(bus_uart1_clk,	"bus-uart1",	"apb2",
-		      0x06c, BIT(17), 0);
-static SUNXI_CCU_GATE(bus_uart2_clk,	"bus-uart2",	"apb2",
-		      0x06c, BIT(18), 0);
-static SUNXI_CCU_GATE(bus_uart3_clk,	"bus-uart3",	"apb2",
-		      0x06c, BIT(19), 0);
-static SUNXI_CCU_GATE(bus_uart4_clk,	"bus-uart4",	"apb2",
-		      0x06c, BIT(20), 0);
-
-static const char * const mod0_default_parents[] = { "osc24M", "pll-periph" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand_clk, "nand", mod0_default_parents, 0x080,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents, 0x088,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc0_sample_clk, "mmc0_sample", "mmc0",
-		       0x088, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc0_output_clk, "mmc0_output", "mmc0",
-		       0x088, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents, 0x08c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc1_sample_clk, "mmc1_sample", "mmc1",
-		       0x08c, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc1_output_clk, "mmc1_output", "mmc1",
-		       0x08c, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents, 0x090,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc2_sample_clk, "mmc2_sample", "mmc2",
-		       0x090, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc2_output_clk, "mmc2_output", "mmc2",
-		       0x090, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(ss_clk, "ss", mod0_default_parents, 0x09c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents, 0x0a0,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents, 0x0a4,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static const char * const i2s_parents[] = { "pll-audio-8x", "pll-audio-4x",
-					    "pll-audio-2x", "pll-audio" };
-static SUNXI_CCU_MUX_WITH_GATE(i2s0_clk, "i2s0", i2s_parents,
-			       0x0b0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_MUX_WITH_GATE(i2s1_clk, "i2s1", i2s_parents,
-			       0x0b4, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-/* TODO: the parent for most of the USB clocks is not known */
-static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"osc24M",
-		      0x0cc, BIT(8), 0);
-static SUNXI_CCU_GATE(usb_phy1_clk,	"usb-phy1",	"osc24M",
-		      0x0cc, BIT(9), 0);
-static SUNXI_CCU_GATE(usb_hsic_clk,	"usb-hsic",	"pll-hsic",
-		      0x0cc, BIT(10), 0);
-static SUNXI_CCU_GATE(usb_hsic_12M_clk,	"usb-hsic-12M",	"osc24M",
-		      0x0cc, BIT(11), 0);
-static SUNXI_CCU_GATE(usb_ohci_clk,	"usb-ohci",	"osc24M",
-		      0x0cc, BIT(16), 0);
-
-static SUNXI_CCU_M(dram_clk, "dram", "pll-ddr",
-		   0x0f4, 0, 4, CLK_IS_CRITICAL);
-
-static const char * const pll_ddr_parents[] = { "pll-ddr0", "pll-ddr1" };
-static SUNXI_CCU_MUX(pll_ddr_clk, "pll-ddr", pll_ddr_parents,
-		     0x0f8, 16, 1, 0);
-
-static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"dram",
-		      0x100, BIT(0), 0);
-static SUNXI_CCU_GATE(dram_csi_clk,	"dram-csi",	"dram",
-		      0x100, BIT(1), 0);
-static SUNXI_CCU_GATE(dram_drc_clk,	"dram-drc",	"dram",
-		      0x100, BIT(16), 0);
-static SUNXI_CCU_GATE(dram_de_fe_clk,	"dram-de-fe",	"dram",
-		      0x100, BIT(24), 0);
-static SUNXI_CCU_GATE(dram_de_be_clk,	"dram-de-be",	"dram",
-		      0x100, BIT(26), 0);
-
-static const char * const de_parents[] = { "pll-video", "pll-periph-2x",
-					   "pll-gpu", "pll-de" };
-static const u8 de_table[] = { 0, 2, 3, 5 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(de_be_clk, "de-be",
-				       de_parents, de_table,
-				       0x104, 0, 4, 24, 3, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(de_fe_clk, "de-fe",
-				       de_parents, de_table,
-				       0x10c, 0, 4, 24, 3, BIT(31), 0);
-
-static const char * const lcd_ch0_parents[] = { "pll-video", "pll-video-2x",
-						"pll-mipi" };
-static const u8 lcd_ch0_table[] = { 0, 2, 4 };
-static SUNXI_CCU_MUX_TABLE_WITH_GATE(lcd_ch0_clk, "lcd-ch0",
-				     lcd_ch0_parents, lcd_ch0_table,
-				     0x118, 24, 3, BIT(31),
-				     CLK_SET_RATE_PARENT);
-
-static const char * const lcd_ch1_parents[] = { "pll-video", "pll-video-2x" };
-static const u8 lcd_ch1_table[] = { 0, 2 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(lcd_ch1_clk, "lcd-ch1",
-				       lcd_ch1_parents, lcd_ch1_table,
-				       0x12c, 0, 4, 24, 2, BIT(31), 0);
-
-static const char * const csi_sclk_parents[] = { "pll-video", "pll-de",
-						 "pll-mipi", "pll-ve" };
-static const u8 csi_sclk_table[] = { 0, 3, 4, 5 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi_sclk_clk, "csi-sclk",
-				       csi_sclk_parents, csi_sclk_table,
-				       0x134, 16, 4, 24, 3, BIT(31), 0);
-
-static const char * const csi_mclk_parents[] = { "pll-video", "pll-de",
-						 "osc24M" };
-static const u8 csi_mclk_table[] = { 0, 3, 5 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi_mclk_clk, "csi-mclk",
-				       csi_mclk_parents, csi_mclk_table,
-				       0x134, 0, 5, 8, 3, BIT(15), 0);
-
-static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve",
-			     0x13c, 16, 3, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(ac_dig_clk,	"ac-dig",	"pll-audio",
-		      0x140, BIT(31), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_GATE(ac_dig_4x_clk,	"ac-dig-4x",	"pll-audio-4x",
-		      0x140, BIT(30), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_GATE(avs_clk,		"avs",		"osc24M",
-		      0x144, BIT(31), 0);
-
-static const char * const mbus_parents[] = { "osc24M", "pll-periph-2x",
-					     "pll-ddr0", "pll-ddr1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents,
-				 0x15c, 0, 3, 24, 2, BIT(31), CLK_IS_CRITICAL);
-
-static const char * const dsi_sclk_parents[] = { "pll-video", "pll-video-2x" };
-static const u8 dsi_sclk_table[] = { 0, 2 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(dsi_sclk_clk, "dsi-sclk",
-				       dsi_sclk_parents, dsi_sclk_table,
-				       0x168, 16, 4, 24, 2, BIT(31), 0);
-
-static const char * const dsi_dphy_parents[] = { "pll-video", "pll-periph" };
-static const u8 dsi_dphy_table[] = { 0, 2 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(dsi_dphy_clk, "dsi-dphy",
-				       dsi_dphy_parents, dsi_dphy_table,
-				       0x168, 0, 4, 8, 2, BIT(15), 0);
-
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(drc_clk, "drc",
-				       de_parents, de_table,
-				       0x180, 0, 4, 24, 3, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_GATE(gpu_clk, "gpu", "pll-gpu",
-			     0x1a0, 0, 3, BIT(31), CLK_SET_RATE_PARENT);
-
-static const char * const ats_parents[] = { "osc24M", "pll-periph" };
-static SUNXI_CCU_M_WITH_MUX_GATE(ats_clk, "ats", ats_parents,
-				 0x1b0, 0, 3, 24, 2, BIT(31), 0);
-
-static struct ccu_common *sun8i_a33_ccu_clks[] = {
-	&pll_cpux_clk.common,
-	&pll_audio_base_clk.common,
-	&pll_video_clk.common,
-	&pll_ve_clk.common,
-	&pll_ddr0_clk.common,
-	&pll_periph_clk.common,
-	&pll_gpu_clk.common,
-	&pll_mipi_clk.common,
-	&pll_hsic_clk.common,
-	&pll_de_clk.common,
-	&pll_ddr1_clk.common,
-	&pll_ddr_clk.common,
-	&cpux_clk.common,
-	&axi_clk.common,
-	&ahb1_clk.common,
-	&apb1_clk.common,
-	&apb2_clk.common,
-	&bus_mipi_dsi_clk.common,
-	&bus_ss_clk.common,
-	&bus_dma_clk.common,
-	&bus_mmc0_clk.common,
-	&bus_mmc1_clk.common,
-	&bus_mmc2_clk.common,
-	&bus_nand_clk.common,
-	&bus_dram_clk.common,
-	&bus_hstimer_clk.common,
-	&bus_spi0_clk.common,
-	&bus_spi1_clk.common,
-	&bus_otg_clk.common,
-	&bus_ehci_clk.common,
-	&bus_ohci_clk.common,
-	&bus_ve_clk.common,
-	&bus_lcd_clk.common,
-	&bus_csi_clk.common,
-	&bus_de_fe_clk.common,
-	&bus_de_be_clk.common,
-	&bus_gpu_clk.common,
-	&bus_msgbox_clk.common,
-	&bus_spinlock_clk.common,
-	&bus_drc_clk.common,
-	&bus_sat_clk.common,
-	&bus_codec_clk.common,
-	&bus_pio_clk.common,
-	&bus_i2s0_clk.common,
-	&bus_i2s1_clk.common,
-	&bus_i2c0_clk.common,
-	&bus_i2c1_clk.common,
-	&bus_i2c2_clk.common,
-	&bus_uart0_clk.common,
-	&bus_uart1_clk.common,
-	&bus_uart2_clk.common,
-	&bus_uart3_clk.common,
-	&bus_uart4_clk.common,
-	&nand_clk.common,
-	&mmc0_clk.common,
-	&mmc0_sample_clk.common,
-	&mmc0_output_clk.common,
-	&mmc1_clk.common,
-	&mmc1_sample_clk.common,
-	&mmc1_output_clk.common,
-	&mmc2_clk.common,
-	&mmc2_sample_clk.common,
-	&mmc2_output_clk.common,
-	&ss_clk.common,
-	&spi0_clk.common,
-	&spi1_clk.common,
-	&i2s0_clk.common,
-	&i2s1_clk.common,
-	&usb_phy0_clk.common,
-	&usb_phy1_clk.common,
-	&usb_hsic_clk.common,
-	&usb_hsic_12M_clk.common,
-	&usb_ohci_clk.common,
-	&dram_clk.common,
-	&dram_ve_clk.common,
-	&dram_csi_clk.common,
-	&dram_drc_clk.common,
-	&dram_de_fe_clk.common,
-	&dram_de_be_clk.common,
-	&de_be_clk.common,
-	&de_fe_clk.common,
-	&lcd_ch0_clk.common,
-	&lcd_ch1_clk.common,
-	&csi_sclk_clk.common,
-	&csi_mclk_clk.common,
-	&ve_clk.common,
-	&ac_dig_clk.common,
-	&ac_dig_4x_clk.common,
-	&avs_clk.common,
-	&mbus_clk.common,
-	&dsi_sclk_clk.common,
-	&dsi_dphy_clk.common,
-	&drc_clk.common,
-	&gpu_clk.common,
-	&ats_clk.common,
-};
-
-static const struct clk_hw *clk_parent_pll_audio[] = {
-	&pll_audio_base_clk.common.hw
-};
-
-/* We hardcode the divider to 1 for now */
-static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
-			    clk_parent_pll_audio,
-			    1, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
-			    clk_parent_pll_audio,
-			    2, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
-			    clk_parent_pll_audio,
-			    1, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
-			    clk_parent_pll_audio,
-			    1, 2, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HW(pll_periph_2x_clk, "pll-periph-2x",
-			   &pll_periph_clk.common.hw,
-			   1, 2, 0);
-static CLK_FIXED_FACTOR_HW(pll_video_2x_clk, "pll-video-2x",
-			   &pll_video_clk.common.hw,
-			   1, 2, 0);
-
-static struct clk_hw_onecell_data sun8i_a33_hw_clks = {
-	.hws	= {
-		[CLK_PLL_CPUX]		= &pll_cpux_clk.common.hw,
-		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
-		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
-		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
-		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
-		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
-		[CLK_PLL_VIDEO]		= &pll_video_clk.common.hw,
-		[CLK_PLL_VIDEO_2X]	= &pll_video_2x_clk.hw,
-		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
-		[CLK_PLL_DDR0]		= &pll_ddr0_clk.common.hw,
-		[CLK_PLL_PERIPH]	= &pll_periph_clk.common.hw,
-		[CLK_PLL_PERIPH_2X]	= &pll_periph_2x_clk.hw,
-		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
-		[CLK_PLL_MIPI]		= &pll_mipi_clk.common.hw,
-		[CLK_PLL_HSIC]		= &pll_hsic_clk.common.hw,
-		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
-		[CLK_PLL_DDR1]		= &pll_ddr1_clk.common.hw,
-		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
-		[CLK_CPUX]		= &cpux_clk.common.hw,
-		[CLK_AXI]		= &axi_clk.common.hw,
-		[CLK_AHB1]		= &ahb1_clk.common.hw,
-		[CLK_APB1]		= &apb1_clk.common.hw,
-		[CLK_APB2]		= &apb2_clk.common.hw,
-		[CLK_BUS_MIPI_DSI]	= &bus_mipi_dsi_clk.common.hw,
-		[CLK_BUS_SS]		= &bus_ss_clk.common.hw,
-		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
-		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
-		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
-		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
-		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
-		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
-		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
-		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
-		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
-		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
-		[CLK_BUS_EHCI]		= &bus_ehci_clk.common.hw,
-		[CLK_BUS_OHCI]		= &bus_ohci_clk.common.hw,
-		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
-		[CLK_BUS_LCD]		= &bus_lcd_clk.common.hw,
-		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
-		[CLK_BUS_DE_BE]		= &bus_de_be_clk.common.hw,
-		[CLK_BUS_DE_FE]		= &bus_de_fe_clk.common.hw,
-		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
-		[CLK_BUS_MSGBOX]	= &bus_msgbox_clk.common.hw,
-		[CLK_BUS_SPINLOCK]	= &bus_spinlock_clk.common.hw,
-		[CLK_BUS_DRC]		= &bus_drc_clk.common.hw,
-		[CLK_BUS_SAT]		= &bus_sat_clk.common.hw,
-		[CLK_BUS_CODEC]		= &bus_codec_clk.common.hw,
-		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
-		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
-		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
-		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
-		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
-		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
-		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
-		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
-		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
-		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
-		[CLK_BUS_UART4]		= &bus_uart4_clk.common.hw,
-		[CLK_NAND]		= &nand_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
-		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
-		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
-		[CLK_MMC2]		= &mmc2_clk.common.hw,
-		[CLK_MMC2_SAMPLE]	= &mmc2_sample_clk.common.hw,
-		[CLK_MMC2_OUTPUT]	= &mmc2_output_clk.common.hw,
-		[CLK_SS]		= &ss_clk.common.hw,
-		[CLK_SPI0]		= &spi0_clk.common.hw,
-		[CLK_SPI1]		= &spi1_clk.common.hw,
-		[CLK_I2S0]		= &i2s0_clk.common.hw,
-		[CLK_I2S1]		= &i2s1_clk.common.hw,
-		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
-		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
-		[CLK_USB_HSIC]		= &usb_hsic_clk.common.hw,
-		[CLK_USB_HSIC_12M]	= &usb_hsic_12M_clk.common.hw,
-		[CLK_USB_OHCI]		= &usb_ohci_clk.common.hw,
-		[CLK_DRAM]		= &dram_clk.common.hw,
-		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
-		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
-		[CLK_DRAM_DRC]		= &dram_drc_clk.common.hw,
-		[CLK_DRAM_DE_FE]	= &dram_de_fe_clk.common.hw,
-		[CLK_DRAM_DE_BE]	= &dram_de_be_clk.common.hw,
-		[CLK_DE_BE]		= &de_be_clk.common.hw,
-		[CLK_DE_FE]		= &de_fe_clk.common.hw,
-		[CLK_LCD_CH0]		= &lcd_ch0_clk.common.hw,
-		[CLK_LCD_CH1]		= &lcd_ch1_clk.common.hw,
-		[CLK_CSI_SCLK]		= &csi_sclk_clk.common.hw,
-		[CLK_CSI_MCLK]		= &csi_mclk_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_AC_DIG]		= &ac_dig_clk.common.hw,
-		[CLK_AC_DIG_4X]		= &ac_dig_4x_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-		[CLK_MBUS]		= &mbus_clk.common.hw,
-		[CLK_DSI_SCLK]		= &dsi_sclk_clk.common.hw,
-		[CLK_DSI_DPHY]		= &dsi_dphy_clk.common.hw,
-		[CLK_DRC]		= &drc_clk.common.hw,
-		[CLK_GPU]		= &gpu_clk.common.hw,
-		[CLK_ATS]		= &ats_clk.common.hw,
-	},
-	.num	= CLK_NUMBER,
-};
-
-static struct ccu_reset_map sun8i_a33_ccu_resets[] = {
-	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
-	[RST_USB_PHY1]		=  { 0x0cc, BIT(1) },
-	[RST_USB_HSIC]		=  { 0x0cc, BIT(2) },
-
-	[RST_MBUS]		=  { 0x0fc, BIT(31) },
-
-	[RST_BUS_MIPI_DSI]	=  { 0x2c0, BIT(1) },
-	[RST_BUS_SS]		=  { 0x2c0, BIT(5) },
-	[RST_BUS_DMA]		=  { 0x2c0, BIT(6) },
-	[RST_BUS_MMC0]		=  { 0x2c0, BIT(8) },
-	[RST_BUS_MMC1]		=  { 0x2c0, BIT(9) },
-	[RST_BUS_MMC2]		=  { 0x2c0, BIT(10) },
-	[RST_BUS_NAND]		=  { 0x2c0, BIT(13) },
-	[RST_BUS_DRAM]		=  { 0x2c0, BIT(14) },
-	[RST_BUS_HSTIMER]	=  { 0x2c0, BIT(19) },
-	[RST_BUS_SPI0]		=  { 0x2c0, BIT(20) },
-	[RST_BUS_SPI1]		=  { 0x2c0, BIT(21) },
-	[RST_BUS_OTG]		=  { 0x2c0, BIT(24) },
-	[RST_BUS_EHCI]		=  { 0x2c0, BIT(26) },
-	[RST_BUS_OHCI]		=  { 0x2c0, BIT(29) },
-
-	[RST_BUS_VE]		=  { 0x2c4, BIT(0) },
-	[RST_BUS_LCD]		=  { 0x2c4, BIT(4) },
-	[RST_BUS_CSI]		=  { 0x2c4, BIT(8) },
-	[RST_BUS_DE_BE]		=  { 0x2c4, BIT(12) },
-	[RST_BUS_DE_FE]		=  { 0x2c4, BIT(14) },
-	[RST_BUS_GPU]		=  { 0x2c4, BIT(20) },
-	[RST_BUS_MSGBOX]	=  { 0x2c4, BIT(21) },
-	[RST_BUS_SPINLOCK]	=  { 0x2c4, BIT(22) },
-	[RST_BUS_DRC]		=  { 0x2c4, BIT(25) },
-	[RST_BUS_SAT]		=  { 0x2c4, BIT(26) },
-
-	[RST_BUS_LVDS]		=  { 0x2c8, BIT(0) },
-
-	[RST_BUS_CODEC]		=  { 0x2d0, BIT(0) },
-	[RST_BUS_I2S0]		=  { 0x2d0, BIT(12) },
-	[RST_BUS_I2S1]		=  { 0x2d0, BIT(13) },
-
-	[RST_BUS_I2C0]		=  { 0x2d8, BIT(0) },
-	[RST_BUS_I2C1]		=  { 0x2d8, BIT(1) },
-	[RST_BUS_I2C2]		=  { 0x2d8, BIT(2) },
-	[RST_BUS_UART0]		=  { 0x2d8, BIT(16) },
-	[RST_BUS_UART1]		=  { 0x2d8, BIT(17) },
-	[RST_BUS_UART2]		=  { 0x2d8, BIT(18) },
-	[RST_BUS_UART3]		=  { 0x2d8, BIT(19) },
-	[RST_BUS_UART4]		=  { 0x2d8, BIT(20) },
-};
-
-static const struct sunxi_ccu_desc sun8i_a33_ccu_desc = {
-	.ccu_clks	= sun8i_a33_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun8i_a33_ccu_clks),
-
-	.hw_clks	= &sun8i_a33_hw_clks,
-
-	.resets		= sun8i_a33_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun8i_a33_ccu_resets),
-};
-
-static struct ccu_pll_nb sun8i_a33_pll_cpu_nb = {
-	.common	= &pll_cpux_clk.common,
-	/* copy from pll_cpux_clk */
-	.enable	= BIT(31),
-	.lock	= BIT(28),
-};
-
-static struct ccu_mux_nb sun8i_a33_cpu_nb = {
-	.common		= &cpux_clk.common,
-	.cm		= &cpux_clk.mux,
-	.delay_us	= 1, /* > 8 clock cycles at 24 MHz */
-	.bypass_index	= 1, /* index of 24 MHz oscillator */
-};
-
-static void __init sun8i_a33_ccu_setup(struct device_node *node)
-{
-	void __iomem *reg;
-	u32 val;
-
-	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
-	if (IS_ERR(reg)) {
-		pr_err("%pOF: Could not map the clock registers\n", node);
-		return;
-	}
-
-	/* Force the PLL-Audio-1x divider to 1 */
-	val = readl(reg + SUN8I_A33_PLL_AUDIO_REG);
-	val &= ~GENMASK(19, 16);
-	writel(val | (0 << 16), reg + SUN8I_A33_PLL_AUDIO_REG);
-
-	/* Force PLL-MIPI to MIPI mode */
-	val = readl(reg + SUN8I_A33_PLL_MIPI_REG);
-	val &= ~BIT(16);
-	writel(val, reg + SUN8I_A33_PLL_MIPI_REG);
-
-	of_sunxi_ccu_probe(node, reg, &sun8i_a33_ccu_desc);
-
-	/* Gate then ungate PLL CPU after any rate changes */
-	ccu_pll_notifier_register(&sun8i_a33_pll_cpu_nb);
-
-	/* Reparent CPU during PLL CPU rate changes */
-	ccu_mux_notifier_register(pll_cpux_clk.common.hw.clk,
-				  &sun8i_a33_cpu_nb);
-}
-CLK_OF_DECLARE(sun8i_a33_ccu, "allwinner,sun8i-a33-ccu",
-	       sun8i_a33_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/ccu-sun8i-a83t.c b/drivers/clk/sunxi-ng/ccu-sun8i-a83t.c
deleted file mode 100644
index e663ab0c9935..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun8i-a83t.c
+++ /dev/null
@@ -1,925 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-only
-/*
- * Copyright (c) 2017 Chen-Yu Tsai. All rights reserved.
- */
-
-#include <linux/clk-provider.h>
-#include <linux/io.h>
-#include <linux/of_address.h>
-#include <linux/platform_device.h>
-
-#include "ccu_common.h"
-#include "ccu_reset.h"
-
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_mp.h"
-#include "ccu_mux.h"
-#include "ccu_nkmp.h"
-#include "ccu_nm.h"
-#include "ccu_phase.h"
-
-#include "ccu-sun8i-a83t.h"
-
-#define CCU_SUN8I_A83T_LOCK_REG	0x20c
-
-/*
- * The CPU PLLs are actually NP clocks, with P being /1 or /4. However
- * P should only be used for output frequencies lower than 228 MHz.
- * Neither mainline Linux, U-boot, nor the vendor BSPs use these.
- *
- * For now we can just model it as a multiplier clock, and force P to /1.
- */
-#define SUN8I_A83T_PLL_C0CPUX_REG	0x000
-#define SUN8I_A83T_PLL_C1CPUX_REG	0x004
-
-static struct ccu_mult pll_c0cpux_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(0),
-	.mult		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.common		= {
-		.reg		= SUN8I_A83T_PLL_C0CPUX_REG,
-		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-c0cpux", "osc24M",
-					      &ccu_mult_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static struct ccu_mult pll_c1cpux_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(1),
-	.mult		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.common		= {
-		.reg		= SUN8I_A83T_PLL_C1CPUX_REG,
-		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-c1cpux", "osc24M",
-					      &ccu_mult_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-/*
- * The Audio PLL has d1, d2 dividers in addition to the usual N, M
- * factors. Since we only need 2 frequencies from this PLL: 22.5792 MHz
- * and 24.576 MHz, ignore them for now. Enforce the default for them,
- * which is d1 = 0, d2 = 1.
- */
-#define SUN8I_A83T_PLL_AUDIO_REG	0x008
-
-/* clock rates doubled for post divider */
-static struct ccu_sdm_setting pll_audio_sdm_table[] = {
-	{ .rate = 45158400, .pattern = 0xc00121ff, .m = 29, .n = 54 },
-	{ .rate = 49152000, .pattern = 0xc000e147, .m = 30, .n = 61 },
-};
-
-static struct ccu_nm pll_audio_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(2),
-	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.m		= _SUNXI_CCU_DIV(0, 6),
-	.fixed_post_div	= 2,
-	.sdm		= _SUNXI_CCU_SDM(pll_audio_sdm_table, BIT(24),
-					 0x284, BIT(31)),
-	.common		= {
-		.reg		= SUN8I_A83T_PLL_AUDIO_REG,
-		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG |
-				  CCU_FEATURE_FIXED_POSTDIV |
-				  CCU_FEATURE_SIGMA_DELTA_MOD,
-		.hw.init	= CLK_HW_INIT("pll-audio", "osc24M",
-					      &ccu_nm_ops, CLK_SET_RATE_UNGATE),
-	},
-};
-
-/* Some PLLs are input * N / div1 / P. Model them as NKMP with no K */
-static struct ccu_nkmp pll_video0_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(3),
-	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 2), /* output divider */
-	.max_rate	= 3000000000UL,
-	.common		= {
-		.reg		= 0x010,
-		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-video0", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static struct ccu_nkmp pll_ve_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(4),
-	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
-	.common		= {
-		.reg		= 0x018,
-		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-ve", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static struct ccu_nkmp pll_ddr_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(5),
-	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
-	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
-	.common		= {
-		.reg		= 0x020,
-		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-ddr", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static struct ccu_nkmp pll_periph_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(6),
-	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
-	.common		= {
-		.reg		= 0x028,
-		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-periph", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static struct ccu_nkmp pll_gpu_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(7),
-	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
-	.common		= {
-		.reg		= 0x038,
-		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-gpu", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static struct ccu_nkmp pll_hsic_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(8),
-	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
-	.common		= {
-		.reg		= 0x044,
-		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-hsic", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static struct ccu_nkmp pll_de_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(9),
-	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
-	.common		= {
-		.reg		= 0x048,
-		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-de", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static struct ccu_nkmp pll_video1_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(10),
-	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 2), /* external divider p */
-	.max_rate	= 3000000000UL,
-	.common		= {
-		.reg		= 0x04c,
-		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-video1", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static const char * const c0cpux_parents[] = { "osc24M", "pll-c0cpux" };
-static SUNXI_CCU_MUX(c0cpux_clk, "c0cpux", c0cpux_parents,
-		     0x50, 12, 1, CLK_SET_RATE_PARENT | CLK_IS_CRITICAL);
-
-static const char * const c1cpux_parents[] = { "osc24M", "pll-c1cpux" };
-static SUNXI_CCU_MUX(c1cpux_clk, "c1cpux", c1cpux_parents,
-		     0x50, 28, 1, CLK_SET_RATE_PARENT | CLK_IS_CRITICAL);
-
-static SUNXI_CCU_M(axi0_clk, "axi0", "c0cpux", 0x050, 0, 2, 0);
-static SUNXI_CCU_M(axi1_clk, "axi1", "c1cpux", 0x050, 16, 2, 0);
-
-static const char * const ahb1_parents[] = { "osc16M-d512", "osc24M",
-					     "pll-periph",
-					     "pll-periph" };
-static const struct ccu_mux_var_prediv ahb1_predivs[] = {
-	{ .index = 2, .shift = 6, .width = 2 },
-	{ .index = 3, .shift = 6, .width = 2 },
-};
-static struct ccu_div ahb1_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= {
-		.shift	= 12,
-		.width	= 2,
-
-		.var_predivs	= ahb1_predivs,
-		.n_var_predivs	= ARRAY_SIZE(ahb1_predivs),
-	},
-	.common		= {
-		.reg		= 0x054,
-		.hw.init	= CLK_HW_INIT_PARENTS("ahb1",
-						      ahb1_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static SUNXI_CCU_M(apb1_clk, "apb1", "ahb1", 0x054, 8, 2, 0);
-
-static const char * const apb2_parents[] = { "osc16M-d512", "osc24M",
-					     "pll-periph", "pll-periph" };
-
-static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", apb2_parents, 0x058,
-			     0, 5,	/* M */
-			     16, 2,	/* P */
-			     24, 2,	/* mux */
-			     0);
-
-static const char * const ahb2_parents[] = { "ahb1", "pll-periph" };
-static const struct ccu_mux_fixed_prediv ahb2_prediv = {
-	.index = 1, .div = 2
-};
-static struct ccu_mux ahb2_clk = {
-	.mux		= {
-		.shift		= 0,
-		.width		= 2,
-		.fixed_predivs	= &ahb2_prediv,
-		.n_predivs	= 1,
-	},
-	.common		= {
-		.reg		= 0x05c,
-		.hw.init	= CLK_HW_INIT_PARENTS("ahb2",
-						      ahb2_parents,
-						      &ccu_mux_ops,
-						      0),
-	},
-};
-
-static SUNXI_CCU_GATE(bus_mipi_dsi_clk,	"bus-mipi-dsi",	"ahb1",
-		      0x060, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_ss_clk,	"bus-ss",	"ahb1",
-		      0x060, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_dma_clk,	"bus-dma",	"ahb1",
-		      0x060, BIT(6), 0);
-static SUNXI_CCU_GATE(bus_mmc0_clk,	"bus-mmc0",	"ahb1",
-		      0x060, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_mmc1_clk,	"bus-mmc1",	"ahb1",
-		      0x060, BIT(9), 0);
-static SUNXI_CCU_GATE(bus_mmc2_clk,	"bus-mmc2",	"ahb1",
-		      0x060, BIT(10), 0);
-static SUNXI_CCU_GATE(bus_nand_clk,	"bus-nand",	"ahb1",
-		      0x060, BIT(13), 0);
-static SUNXI_CCU_GATE(bus_dram_clk,	"bus-dram",	"ahb1",
-		      0x060, BIT(14), 0);
-static SUNXI_CCU_GATE(bus_emac_clk,	"bus-emac",	"ahb2",
-		      0x060, BIT(17), 0);
-static SUNXI_CCU_GATE(bus_hstimer_clk,	"bus-hstimer",	"ahb1",
-		      0x060, BIT(19), 0);
-static SUNXI_CCU_GATE(bus_spi0_clk,	"bus-spi0",	"ahb1",
-		      0x060, BIT(20), 0);
-static SUNXI_CCU_GATE(bus_spi1_clk,	"bus-spi1",	"ahb1",
-		      0x060, BIT(21), 0);
-static SUNXI_CCU_GATE(bus_otg_clk,	"bus-otg",	"ahb1",
-		      0x060, BIT(24), 0);
-static SUNXI_CCU_GATE(bus_ehci0_clk,	"bus-ehci0",	"ahb2",
-		      0x060, BIT(26), 0);
-static SUNXI_CCU_GATE(bus_ehci1_clk,	"bus-ehci1",	"ahb2",
-		      0x060, BIT(27), 0);
-static SUNXI_CCU_GATE(bus_ohci0_clk,	"bus-ohci0",	"ahb2",
-		      0x060, BIT(29), 0);
-
-static SUNXI_CCU_GATE(bus_ve_clk,	"bus-ve",	"ahb1",
-		      0x064, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_tcon0_clk,	"bus-tcon0",	"ahb1",
-		      0x064, BIT(4), 0);
-static SUNXI_CCU_GATE(bus_tcon1_clk,	"bus-tcon1",	"ahb1",
-		      0x064, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_csi_clk,	"bus-csi",	"ahb1",
-		      0x064, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_hdmi_clk,	"bus-hdmi",	"ahb1",
-		      0x064, BIT(11), 0);
-static SUNXI_CCU_GATE(bus_de_clk,	"bus-de",	"ahb1",
-		      0x064, BIT(12), 0);
-static SUNXI_CCU_GATE(bus_gpu_clk,	"bus-gpu",	"ahb1",
-		      0x064, BIT(20), 0);
-static SUNXI_CCU_GATE(bus_msgbox_clk,	"bus-msgbox",	"ahb1",
-		      0x064, BIT(21), 0);
-static SUNXI_CCU_GATE(bus_spinlock_clk,	"bus-spinlock",	"ahb1",
-		      0x064, BIT(22), 0);
-
-static SUNXI_CCU_GATE(bus_spdif_clk,	"bus-spdif",	"apb1",
-		      0x068, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_pio_clk,	"bus-pio",	"apb1",
-		      0x068, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_i2s0_clk,	"bus-i2s0",	"apb1",
-		      0x068, BIT(12), 0);
-static SUNXI_CCU_GATE(bus_i2s1_clk,	"bus-i2s1",	"apb1",
-		      0x068, BIT(13), 0);
-static SUNXI_CCU_GATE(bus_i2s2_clk,	"bus-i2s2",	"apb1",
-		      0x068, BIT(14), 0);
-static SUNXI_CCU_GATE(bus_tdm_clk,	"bus-tdm",	"apb1",
-		      0x068, BIT(15), 0);
-
-static SUNXI_CCU_GATE(bus_i2c0_clk,	"bus-i2c0",	"apb2",
-		      0x06c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_i2c1_clk,	"bus-i2c1",	"apb2",
-		      0x06c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_i2c2_clk,	"bus-i2c2",	"apb2",
-		      0x06c, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_uart0_clk,	"bus-uart0",	"apb2",
-		      0x06c, BIT(16), 0);
-static SUNXI_CCU_GATE(bus_uart1_clk,	"bus-uart1",	"apb2",
-		      0x06c, BIT(17), 0);
-static SUNXI_CCU_GATE(bus_uart2_clk,	"bus-uart2",	"apb2",
-		      0x06c, BIT(18), 0);
-static SUNXI_CCU_GATE(bus_uart3_clk,	"bus-uart3",	"apb2",
-		      0x06c, BIT(19), 0);
-static SUNXI_CCU_GATE(bus_uart4_clk,	"bus-uart4",	"apb2",
-		      0x06c, BIT(20), 0);
-
-static const char * const cci400_parents[] = { "osc24M", "pll-periph",
-					       "pll-hsic" };
-static struct ccu_div cci400_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(0, 2, 0),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0x078,
-		.hw.init	= CLK_HW_INIT_PARENTS("cci400",
-						      cci400_parents,
-						      &ccu_div_ops,
-						      CLK_IS_CRITICAL),
-	},
-};
-
-static const char * const mod0_default_parents[] = { "osc24M", "pll-periph" };
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand_clk, "nand", mod0_default_parents,
-				  0x080,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents,
-				  0x088,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc0_sample_clk, "mmc0-sample", "mmc0",
-		       0x088, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc0_output_clk, "mmc0-output", "mmc0",
-		       0x088, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents,
-				  0x08c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc1_sample_clk, "mmc1-sample", "mmc1",
-		       0x08c, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc1_output_clk, "mmc1-output", "mmc1",
-		       0x08c, 8, 3, 0);
-
-static SUNXI_CCU_MP_MMC_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents,
-				      0x090, 0);
-
-static SUNXI_CCU_PHASE(mmc2_sample_clk, "mmc2-sample", "mmc2",
-		       0x090, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc2_output_clk, "mmc2-output", "mmc2",
-		       0x090, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(ss_clk, "ss", mod0_default_parents,
-				  0x09c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents,
-				  0x0a0,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 4,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents,
-				  0x0a4,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 4,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_M_WITH_GATE(i2s0_clk, "i2s0", "pll-audio",
-			     0x0b0, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M_WITH_GATE(i2s1_clk, "i2s1", "pll-audio",
-			     0x0b4, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M_WITH_GATE(i2s2_clk, "i2s2", "pll-audio",
-			     0x0b8, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M_WITH_GATE(tdm_clk, "tdm", "pll-audio",
-			     0x0bc, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M_WITH_GATE(spdif_clk, "spdif", "pll-audio",
-			     0x0c0, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"osc24M",
-		      0x0cc, BIT(8), 0);
-static SUNXI_CCU_GATE(usb_phy1_clk,	"usb-phy1",	"osc24M",
-		      0x0cc, BIT(9), 0);
-static SUNXI_CCU_GATE(usb_hsic_clk,	"usb-hsic",	"pll-hsic",
-		      0x0cc, BIT(10), 0);
-static struct ccu_gate usb_hsic_12m_clk = {
-	.enable	= BIT(11),
-	.common	= {
-		.reg		= 0x0cc,
-		.prediv		= 2,
-		.features	= CCU_FEATURE_ALL_PREDIV,
-		.hw.init	= CLK_HW_INIT("usb-hsic-12m", "osc24M",
-					      &ccu_gate_ops, 0),
-	}
-};
-static SUNXI_CCU_GATE(usb_ohci0_clk,	"usb-ohci0",	"osc24M",
-		      0x0cc, BIT(16), 0);
-
-/* TODO divider has minimum of 2 */
-static SUNXI_CCU_M(dram_clk, "dram", "pll-ddr", 0x0f4, 0, 4, CLK_IS_CRITICAL);
-
-static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"dram",
-		      0x100, BIT(0), 0);
-static SUNXI_CCU_GATE(dram_csi_clk,	"dram-csi",	"dram",
-		      0x100, BIT(1), 0);
-
-static const char * const tcon0_parents[] = { "pll-video0" };
-static SUNXI_CCU_MUX_WITH_GATE(tcon0_clk, "tcon0", tcon0_parents,
-				 0x118, 24, 3, BIT(31), CLK_SET_RATE_PARENT);
-
-static const char * const tcon1_parents[] = { "pll-video1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(tcon1_clk, "tcon1", tcon1_parents,
-				 0x11c, 0, 4, 24, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(csi_misc_clk, "csi-misc", "osc24M", 0x130, BIT(16), 0);
-
-static SUNXI_CCU_GATE(mipi_csi_clk, "mipi-csi", "osc24M", 0x130, BIT(31), 0);
-
-static const char * const csi_mclk_parents[] = { "pll-video0", "pll-de",
-						 "osc24M" };
-static const u8 csi_mclk_table[] = { 0, 3, 5 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi_mclk_clk, "csi-mclk",
-				       csi_mclk_parents, csi_mclk_table,
-				       0x134,
-				       0, 5,	/* M */
-				       8, 3,	/* mux */
-				       BIT(15),	/* gate */
-				       0);
-
-static const char * const csi_sclk_parents[] = { "pll-periph", "pll-ve" };
-static const u8 csi_sclk_table[] = { 0, 5 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi_sclk_clk, "csi-sclk",
-				       csi_sclk_parents, csi_sclk_table,
-				       0x134,
-				       16, 4,	/* M */
-				       24, 3,	/* mux */
-				       BIT(31),	/* gate */
-				       0);
-
-static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve", 0x13c,
-			     16, 3, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(avs_clk, "avs", "osc24M", 0x144, BIT(31), 0);
-
-static const char * const hdmi_parents[] = { "pll-video1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(hdmi_clk, "hdmi", hdmi_parents,
-				 0x150,
-				 0, 4,	/* M */
-				 24, 2,	/* mux */
-				 BIT(31),	/* gate */
-				 CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(hdmi_slow_clk, "hdmi-slow", "osc24M", 0x154, BIT(31), 0);
-
-static const char * const mbus_parents[] = { "osc24M", "pll-periph",
-					     "pll-ddr" };
-static SUNXI_CCU_M_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents,
-				 0x15c,
-				 0, 3,	/* M */
-				 24, 2,	/* mux */
-				 BIT(31),	/* gate */
-				 CLK_IS_CRITICAL);
-
-static const char * const mipi_dsi0_parents[] = { "pll-video0" };
-static const u8 mipi_dsi0_table[] = { 8 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(mipi_dsi0_clk, "mipi-dsi0",
-				       mipi_dsi0_parents, mipi_dsi0_table,
-				       0x168,
-				       0, 4,	/* M */
-				       24, 4,	/* mux */
-				       BIT(31),	/* gate */
-				       CLK_SET_RATE_PARENT);
-
-static const char * const mipi_dsi1_parents[] = { "osc24M", "pll-video0" };
-static const u8 mipi_dsi1_table[] = { 0, 9 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(mipi_dsi1_clk, "mipi-dsi1",
-				       mipi_dsi1_parents, mipi_dsi1_table,
-				       0x16c,
-				       0, 4,	/* M */
-				       24, 4,	/* mux */
-				       BIT(31),	/* gate */
-				       CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M_WITH_GATE(gpu_core_clk, "gpu-core", "pll-gpu", 0x1a0,
-			     0, 3, BIT(31), CLK_SET_RATE_PARENT);
-
-static const char * const gpu_memory_parents[] = { "pll-gpu", "pll-ddr" };
-static SUNXI_CCU_M_WITH_MUX_GATE(gpu_memory_clk, "gpu-memory",
-				 gpu_memory_parents,
-				 0x1a4,
-				 0, 3,		/* M */
-				 24, 1,		/* mux */
-				 BIT(31),	/* gate */
-				 CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M_WITH_GATE(gpu_hyd_clk, "gpu-hyd", "pll-gpu", 0x1a8,
-			     0, 3, BIT(31), CLK_SET_RATE_PARENT);
-
-static struct ccu_common *sun8i_a83t_ccu_clks[] = {
-	&pll_c0cpux_clk.common,
-	&pll_c1cpux_clk.common,
-	&pll_audio_clk.common,
-	&pll_video0_clk.common,
-	&pll_ve_clk.common,
-	&pll_ddr_clk.common,
-	&pll_periph_clk.common,
-	&pll_gpu_clk.common,
-	&pll_hsic_clk.common,
-	&pll_de_clk.common,
-	&pll_video1_clk.common,
-	&c0cpux_clk.common,
-	&c1cpux_clk.common,
-	&axi0_clk.common,
-	&axi1_clk.common,
-	&ahb1_clk.common,
-	&ahb2_clk.common,
-	&apb1_clk.common,
-	&apb2_clk.common,
-	&bus_mipi_dsi_clk.common,
-	&bus_ss_clk.common,
-	&bus_dma_clk.common,
-	&bus_mmc0_clk.common,
-	&bus_mmc1_clk.common,
-	&bus_mmc2_clk.common,
-	&bus_nand_clk.common,
-	&bus_dram_clk.common,
-	&bus_emac_clk.common,
-	&bus_hstimer_clk.common,
-	&bus_spi0_clk.common,
-	&bus_spi1_clk.common,
-	&bus_otg_clk.common,
-	&bus_ehci0_clk.common,
-	&bus_ehci1_clk.common,
-	&bus_ohci0_clk.common,
-	&bus_ve_clk.common,
-	&bus_tcon0_clk.common,
-	&bus_tcon1_clk.common,
-	&bus_csi_clk.common,
-	&bus_hdmi_clk.common,
-	&bus_de_clk.common,
-	&bus_gpu_clk.common,
-	&bus_msgbox_clk.common,
-	&bus_spinlock_clk.common,
-	&bus_spdif_clk.common,
-	&bus_pio_clk.common,
-	&bus_i2s0_clk.common,
-	&bus_i2s1_clk.common,
-	&bus_i2s2_clk.common,
-	&bus_tdm_clk.common,
-	&bus_i2c0_clk.common,
-	&bus_i2c1_clk.common,
-	&bus_i2c2_clk.common,
-	&bus_uart0_clk.common,
-	&bus_uart1_clk.common,
-	&bus_uart2_clk.common,
-	&bus_uart3_clk.common,
-	&bus_uart4_clk.common,
-	&cci400_clk.common,
-	&nand_clk.common,
-	&mmc0_clk.common,
-	&mmc0_sample_clk.common,
-	&mmc0_output_clk.common,
-	&mmc1_clk.common,
-	&mmc1_sample_clk.common,
-	&mmc1_output_clk.common,
-	&mmc2_clk.common,
-	&mmc2_sample_clk.common,
-	&mmc2_output_clk.common,
-	&ss_clk.common,
-	&spi0_clk.common,
-	&spi1_clk.common,
-	&i2s0_clk.common,
-	&i2s1_clk.common,
-	&i2s2_clk.common,
-	&tdm_clk.common,
-	&spdif_clk.common,
-	&usb_phy0_clk.common,
-	&usb_phy1_clk.common,
-	&usb_hsic_clk.common,
-	&usb_hsic_12m_clk.common,
-	&usb_ohci0_clk.common,
-	&dram_clk.common,
-	&dram_ve_clk.common,
-	&dram_csi_clk.common,
-	&tcon0_clk.common,
-	&tcon1_clk.common,
-	&csi_misc_clk.common,
-	&mipi_csi_clk.common,
-	&csi_mclk_clk.common,
-	&csi_sclk_clk.common,
-	&ve_clk.common,
-	&avs_clk.common,
-	&hdmi_clk.common,
-	&hdmi_slow_clk.common,
-	&mbus_clk.common,
-	&mipi_dsi0_clk.common,
-	&mipi_dsi1_clk.common,
-	&gpu_core_clk.common,
-	&gpu_memory_clk.common,
-	&gpu_hyd_clk.common,
-};
-
-static struct clk_hw_onecell_data sun8i_a83t_hw_clks = {
-	.hws	= {
-		[CLK_PLL_C0CPUX]	= &pll_c0cpux_clk.common.hw,
-		[CLK_PLL_C1CPUX]	= &pll_c1cpux_clk.common.hw,
-		[CLK_PLL_AUDIO]		= &pll_audio_clk.common.hw,
-		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
-		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
-		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
-		[CLK_PLL_PERIPH]	= &pll_periph_clk.common.hw,
-		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
-		[CLK_PLL_HSIC]		= &pll_hsic_clk.common.hw,
-		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
-		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
-		[CLK_C0CPUX]		= &c0cpux_clk.common.hw,
-		[CLK_C1CPUX]		= &c1cpux_clk.common.hw,
-		[CLK_AXI0]		= &axi0_clk.common.hw,
-		[CLK_AXI1]		= &axi1_clk.common.hw,
-		[CLK_AHB1]		= &ahb1_clk.common.hw,
-		[CLK_AHB2]		= &ahb2_clk.common.hw,
-		[CLK_APB1]		= &apb1_clk.common.hw,
-		[CLK_APB2]		= &apb2_clk.common.hw,
-		[CLK_BUS_MIPI_DSI]	= &bus_mipi_dsi_clk.common.hw,
-		[CLK_BUS_SS]		= &bus_ss_clk.common.hw,
-		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
-		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
-		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
-		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
-		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
-		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
-		[CLK_BUS_EMAC]		= &bus_emac_clk.common.hw,
-		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
-		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
-		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
-		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
-		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
-		[CLK_BUS_EHCI1]		= &bus_ehci1_clk.common.hw,
-		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
-		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
-		[CLK_BUS_TCON0]		= &bus_tcon0_clk.common.hw,
-		[CLK_BUS_TCON1]		= &bus_tcon1_clk.common.hw,
-		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
-		[CLK_BUS_HDMI]		= &bus_hdmi_clk.common.hw,
-		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
-		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
-		[CLK_BUS_MSGBOX]	= &bus_msgbox_clk.common.hw,
-		[CLK_BUS_SPINLOCK]	= &bus_spinlock_clk.common.hw,
-		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
-		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
-		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
-		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
-		[CLK_BUS_I2S2]		= &bus_i2s2_clk.common.hw,
-		[CLK_BUS_TDM]		= &bus_tdm_clk.common.hw,
-		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
-		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
-		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
-		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
-		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
-		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
-		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
-		[CLK_BUS_UART4]		= &bus_uart4_clk.common.hw,
-		[CLK_CCI400]		= &cci400_clk.common.hw,
-		[CLK_NAND]		= &nand_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
-		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
-		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
-		[CLK_MMC2]		= &mmc2_clk.common.hw,
-		[CLK_MMC2_SAMPLE]	= &mmc2_sample_clk.common.hw,
-		[CLK_MMC2_OUTPUT]	= &mmc2_output_clk.common.hw,
-		[CLK_SS]		= &ss_clk.common.hw,
-		[CLK_SPI0]		= &spi0_clk.common.hw,
-		[CLK_SPI1]		= &spi1_clk.common.hw,
-		[CLK_I2S0]		= &i2s0_clk.common.hw,
-		[CLK_I2S1]		= &i2s1_clk.common.hw,
-		[CLK_I2S2]		= &i2s2_clk.common.hw,
-		[CLK_TDM]		= &tdm_clk.common.hw,
-		[CLK_SPDIF]		= &spdif_clk.common.hw,
-		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
-		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
-		[CLK_USB_HSIC]		= &usb_hsic_clk.common.hw,
-		[CLK_USB_HSIC_12M]	= &usb_hsic_12m_clk.common.hw,
-		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
-		[CLK_DRAM]		= &dram_clk.common.hw,
-		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
-		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
-		[CLK_TCON0]		= &tcon0_clk.common.hw,
-		[CLK_TCON1]		= &tcon1_clk.common.hw,
-		[CLK_CSI_MISC]		= &csi_misc_clk.common.hw,
-		[CLK_MIPI_CSI]		= &mipi_csi_clk.common.hw,
-		[CLK_CSI_MCLK]		= &csi_mclk_clk.common.hw,
-		[CLK_CSI_SCLK]		= &csi_sclk_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-		[CLK_HDMI]		= &hdmi_clk.common.hw,
-		[CLK_HDMI_SLOW]		= &hdmi_slow_clk.common.hw,
-		[CLK_MBUS]		= &mbus_clk.common.hw,
-		[CLK_MIPI_DSI0]		= &mipi_dsi0_clk.common.hw,
-		[CLK_MIPI_DSI1]		= &mipi_dsi1_clk.common.hw,
-		[CLK_GPU_CORE]		= &gpu_core_clk.common.hw,
-		[CLK_GPU_MEMORY]	= &gpu_memory_clk.common.hw,
-		[CLK_GPU_HYD]		= &gpu_hyd_clk.common.hw,
-	},
-	.num	= CLK_NUMBER,
-};
-
-static struct ccu_reset_map sun8i_a83t_ccu_resets[] = {
-	[RST_USB_PHY0]		= { 0x0cc, BIT(0) },
-	[RST_USB_PHY1]		= { 0x0cc, BIT(1) },
-	[RST_USB_HSIC]		= { 0x0cc, BIT(2) },
-	[RST_DRAM]		= { 0x0f4, BIT(31) },
-	[RST_MBUS]		= { 0x0fc, BIT(31) },
-	[RST_BUS_MIPI_DSI]	= { 0x2c0, BIT(1) },
-	[RST_BUS_SS]		= { 0x2c0, BIT(5) },
-	[RST_BUS_DMA]		= { 0x2c0, BIT(6) },
-	[RST_BUS_MMC0]		= { 0x2c0, BIT(8) },
-	[RST_BUS_MMC1]		= { 0x2c0, BIT(9) },
-	[RST_BUS_MMC2]		= { 0x2c0, BIT(10) },
-	[RST_BUS_NAND]		= { 0x2c0, BIT(13) },
-	[RST_BUS_DRAM]		= { 0x2c0, BIT(14) },
-	[RST_BUS_EMAC]		= { 0x2c0, BIT(17) },
-	[RST_BUS_HSTIMER]	= { 0x2c0, BIT(19) },
-	[RST_BUS_SPI0]		= { 0x2c0, BIT(20) },
-	[RST_BUS_SPI1]		= { 0x2c0, BIT(21) },
-	[RST_BUS_OTG]		= { 0x2c0, BIT(24) },
-	[RST_BUS_EHCI0]		= { 0x2c0, BIT(26) },
-	[RST_BUS_EHCI1]		= { 0x2c0, BIT(27) },
-	[RST_BUS_OHCI0]		= { 0x2c0, BIT(29) },
-	[RST_BUS_VE]		= { 0x2c4, BIT(0) },
-	[RST_BUS_TCON0]		= { 0x2c4, BIT(4) },
-	[RST_BUS_TCON1]		= { 0x2c4, BIT(5) },
-	[RST_BUS_CSI]		= { 0x2c4, BIT(8) },
-	[RST_BUS_HDMI0]		= { 0x2c4, BIT(10) },
-	[RST_BUS_HDMI1]		= { 0x2c4, BIT(11) },
-	[RST_BUS_DE]		= { 0x2c4, BIT(12) },
-	[RST_BUS_GPU]		= { 0x2c4, BIT(20) },
-	[RST_BUS_MSGBOX]	= { 0x2c4, BIT(21) },
-	[RST_BUS_SPINLOCK]	= { 0x2c4, BIT(22) },
-	[RST_BUS_LVDS]		= { 0x2c8, BIT(0) },
-	[RST_BUS_SPDIF]		= { 0x2d0, BIT(1) },
-	[RST_BUS_I2S0]		= { 0x2d0, BIT(12) },
-	[RST_BUS_I2S1]		= { 0x2d0, BIT(13) },
-	[RST_BUS_I2S2]		= { 0x2d0, BIT(14) },
-	[RST_BUS_TDM]		= { 0x2d0, BIT(15) },
-	[RST_BUS_I2C0]		= { 0x2d8, BIT(0) },
-	[RST_BUS_I2C1]		= { 0x2d8, BIT(1) },
-	[RST_BUS_I2C2]		= { 0x2d8, BIT(2) },
-	[RST_BUS_UART0]		= { 0x2d8, BIT(16) },
-	[RST_BUS_UART1]		= { 0x2d8, BIT(17) },
-	[RST_BUS_UART2]		= { 0x2d8, BIT(18) },
-	[RST_BUS_UART3]		= { 0x2d8, BIT(19) },
-	[RST_BUS_UART4]		= { 0x2d8, BIT(20) },
-};
-
-static const struct sunxi_ccu_desc sun8i_a83t_ccu_desc = {
-	.ccu_clks	= sun8i_a83t_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun8i_a83t_ccu_clks),
-
-	.hw_clks	= &sun8i_a83t_hw_clks,
-
-	.resets		= sun8i_a83t_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun8i_a83t_ccu_resets),
-};
-
-#define SUN8I_A83T_PLL_P_SHIFT	16
-#define SUN8I_A83T_PLL_N_SHIFT	8
-#define SUN8I_A83T_PLL_N_WIDTH	8
-
-static void sun8i_a83t_cpu_pll_fixup(void __iomem *reg)
-{
-	u32 val = readl(reg);
-
-	/* bail out if P divider is not used */
-	if (!(val & BIT(SUN8I_A83T_PLL_P_SHIFT)))
-		return;
-
-	/*
-	 * If P is used, output should be less than 288 MHz. When we
-	 * set P to 1, we should also decrease the multiplier so the
-	 * output doesn't go out of range, but not too much such that
-	 * the multiplier stays above 12, the minimal operation value.
-	 *
-	 * To keep it simple, set the multiplier to 17, the reset value.
-	 */
-	val &= ~GENMASK(SUN8I_A83T_PLL_N_SHIFT + SUN8I_A83T_PLL_N_WIDTH - 1,
-			SUN8I_A83T_PLL_N_SHIFT);
-	val |= 17 << SUN8I_A83T_PLL_N_SHIFT;
-
-	/* And clear P */
-	val &= ~BIT(SUN8I_A83T_PLL_P_SHIFT);
-
-	writel(val, reg);
-}
-
-static int sun8i_a83t_ccu_probe(struct platform_device *pdev)
-{
-	struct resource *res;
-	void __iomem *reg;
-	u32 val;
-
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	reg = devm_ioremap_resource(&pdev->dev, res);
-	if (IS_ERR(reg))
-		return PTR_ERR(reg);
-
-	/* Enforce d1 = 0, d2 = 1 for Audio PLL */
-	val = readl(reg + SUN8I_A83T_PLL_AUDIO_REG);
-	val &= ~BIT(16);
-	val |= BIT(18);
-	writel(val, reg + SUN8I_A83T_PLL_AUDIO_REG);
-
-	/* Enforce P = 1 for both CPU cluster PLLs */
-	sun8i_a83t_cpu_pll_fixup(reg + SUN8I_A83T_PLL_C0CPUX_REG);
-	sun8i_a83t_cpu_pll_fixup(reg + SUN8I_A83T_PLL_C1CPUX_REG);
-
-	return devm_sunxi_ccu_probe(&pdev->dev, reg, &sun8i_a83t_ccu_desc);
-}
-
-static const struct of_device_id sun8i_a83t_ccu_ids[] = {
-	{ .compatible = "allwinner,sun8i-a83t-ccu" },
-	{ }
-};
-
-static struct platform_driver sun8i_a83t_ccu_driver = {
-	.probe	= sun8i_a83t_ccu_probe,
-	.driver	= {
-		.name	= "sun8i-a83t-ccu",
-		.suppress_bind_attrs = true,
-		.of_match_table	= sun8i_a83t_ccu_ids,
-	},
-};
-builtin_platform_driver(sun8i_a83t_ccu_driver);
diff --git a/drivers/clk/sunxi-ng/ccu-sun8i-a83t.h b/drivers/clk/sunxi-ng/ccu-sun8i-a83t.h
deleted file mode 100644
index 40e575ba51d2..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun8i-a83t.h
+++ /dev/null
@@ -1,55 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0-or-later */
-/*
- * Copyright 2016 Chen-Yu Tsai
- *
- * Chen-Yu Tsai <wens@csie.org>
- */
-
-#ifndef _CCU_SUN8I_A83T_H_
-#define _CCU_SUN8I_A83T_H_
-
-#include <dt-bindings/clock/sun8i-a83t-ccu.h>
-#include <dt-bindings/reset/sun8i-a83t-ccu.h>
-
-#define CLK_PLL_C0CPUX		0
-#define CLK_PLL_C1CPUX		1
-#define CLK_PLL_AUDIO		2
-#define CLK_PLL_VIDEO0		3
-#define CLK_PLL_VE		4
-#define CLK_PLL_DDR		5
-
-/* pll-periph is exported to the PRCM block */
-
-#define CLK_PLL_GPU		7
-#define CLK_PLL_HSIC		8
-
-/* pll-de is exported for the display engine */
-
-#define CLK_PLL_VIDEO1		10
-
-/* The CPUX clocks are exported */
-
-#define CLK_AXI0		13
-#define CLK_AXI1		14
-#define CLK_AHB1		15
-#define CLK_AHB2		16
-#define CLK_APB1		17
-#define CLK_APB2		18
-
-/* bus gates exported */
-
-#define CLK_CCI400		58
-
-/* module and usb clocks exported */
-
-#define CLK_DRAM		82
-
-/* dram gates and more module clocks exported */
-
-#define CLK_MBUS		95
-
-/* more module clocks exported */
-
-#define CLK_NUMBER		(CLK_GPU_HYD + 1)
-
-#endif /* _CCU_SUN8I_A83T_H_ */
diff --git a/drivers/clk/sunxi-ng/ccu-sun8i-de2.c b/drivers/clk/sunxi-ng/ccu-sun8i-de2.c
deleted file mode 100644
index 4b94b6041b27..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun8i-de2.c
+++ /dev/null
@@ -1,399 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-only
-/*
- * Copyright (c) 2017 Icenowy Zheng <icenowy@aosc.io>
- */
-
-#include <linux/clk.h>
-#include <linux/clk-provider.h>
-#include <linux/of_address.h>
-#include <linux/of_platform.h>
-#include <linux/platform_device.h>
-#include <linux/reset.h>
-
-#include "ccu_common.h"
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_reset.h"
-
-#include "ccu-sun8i-de2.h"
-
-static SUNXI_CCU_GATE(bus_mixer0_clk,	"bus-mixer0",	"bus-de",
-		      0x04, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_mixer1_clk,	"bus-mixer1",	"bus-de",
-		      0x04, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_wb_clk,	"bus-wb",	"bus-de",
-		      0x04, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_rot_clk,	"bus-rot",	"bus-de",
-		      0x04, BIT(3), 0);
-
-static SUNXI_CCU_GATE(mixer0_clk,	"mixer0",	"mixer0-div",
-		      0x00, BIT(0), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_GATE(mixer1_clk,	"mixer1",	"mixer1-div",
-		      0x00, BIT(1), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_GATE(wb_clk,		"wb",		"wb-div",
-		      0x00, BIT(2), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_GATE(rot_clk,		"rot",		"rot-div",
-		      0x00, BIT(3), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M(mixer0_div_clk, "mixer0-div", "de", 0x0c, 0, 4,
-		   CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M(mixer1_div_clk, "mixer1-div", "de", 0x0c, 4, 4,
-		   CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M(wb_div_clk, "wb-div", "de", 0x0c, 8, 4,
-		   CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M(rot_div_clk, "rot-div", "de", 0x0c, 0x0c, 4,
-		   CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M(mixer0_div_a83_clk, "mixer0-div", "pll-de", 0x0c, 0, 4,
-		   CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M(mixer1_div_a83_clk, "mixer1-div", "pll-de", 0x0c, 4, 4,
-		   CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M(wb_div_a83_clk, "wb-div", "pll-de", 0x0c, 8, 4,
-		   CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M(rot_div_a83_clk, "rot-div", "pll-de", 0x0c, 0x0c, 4,
-		   CLK_SET_RATE_PARENT);
-
-static struct ccu_common *sun8i_a83t_de2_clks[] = {
-	&mixer0_clk.common,
-	&mixer1_clk.common,
-	&wb_clk.common,
-
-	&bus_mixer0_clk.common,
-	&bus_mixer1_clk.common,
-	&bus_wb_clk.common,
-
-	&mixer0_div_a83_clk.common,
-	&mixer1_div_a83_clk.common,
-	&wb_div_a83_clk.common,
-
-	&bus_rot_clk.common,
-	&rot_clk.common,
-	&rot_div_a83_clk.common,
-};
-
-static struct ccu_common *sun8i_h3_de2_clks[] = {
-	&mixer0_clk.common,
-	&mixer1_clk.common,
-	&wb_clk.common,
-
-	&bus_mixer0_clk.common,
-	&bus_mixer1_clk.common,
-	&bus_wb_clk.common,
-
-	&mixer0_div_clk.common,
-	&mixer1_div_clk.common,
-	&wb_div_clk.common,
-};
-
-static struct ccu_common *sun8i_v3s_de2_clks[] = {
-	&mixer0_clk.common,
-	&wb_clk.common,
-
-	&bus_mixer0_clk.common,
-	&bus_wb_clk.common,
-
-	&mixer0_div_clk.common,
-	&wb_div_clk.common,
-};
-
-static struct ccu_common *sun50i_a64_de2_clks[] = {
-	&mixer0_clk.common,
-	&mixer1_clk.common,
-	&wb_clk.common,
-
-	&bus_mixer0_clk.common,
-	&bus_mixer1_clk.common,
-	&bus_wb_clk.common,
-
-	&mixer0_div_clk.common,
-	&mixer1_div_clk.common,
-	&wb_div_clk.common,
-
-	&bus_rot_clk.common,
-	&rot_clk.common,
-	&rot_div_clk.common,
-};
-
-static struct clk_hw_onecell_data sun8i_a83t_de2_hw_clks = {
-	.hws	= {
-		[CLK_MIXER0]		= &mixer0_clk.common.hw,
-		[CLK_MIXER1]		= &mixer1_clk.common.hw,
-		[CLK_WB]		= &wb_clk.common.hw,
-		[CLK_ROT]		= &rot_clk.common.hw,
-
-		[CLK_BUS_MIXER0]	= &bus_mixer0_clk.common.hw,
-		[CLK_BUS_MIXER1]	= &bus_mixer1_clk.common.hw,
-		[CLK_BUS_WB]		= &bus_wb_clk.common.hw,
-		[CLK_BUS_ROT]		= &bus_rot_clk.common.hw,
-
-		[CLK_MIXER0_DIV]	= &mixer0_div_a83_clk.common.hw,
-		[CLK_MIXER1_DIV]	= &mixer1_div_a83_clk.common.hw,
-		[CLK_WB_DIV]		= &wb_div_a83_clk.common.hw,
-		[CLK_ROT_DIV]		= &rot_div_a83_clk.common.hw,
-	},
-	.num	= CLK_NUMBER_WITH_ROT,
-};
-
-static struct clk_hw_onecell_data sun8i_h3_de2_hw_clks = {
-	.hws	= {
-		[CLK_MIXER0]		= &mixer0_clk.common.hw,
-		[CLK_MIXER1]		= &mixer1_clk.common.hw,
-		[CLK_WB]		= &wb_clk.common.hw,
-
-		[CLK_BUS_MIXER0]	= &bus_mixer0_clk.common.hw,
-		[CLK_BUS_MIXER1]	= &bus_mixer1_clk.common.hw,
-		[CLK_BUS_WB]		= &bus_wb_clk.common.hw,
-
-		[CLK_MIXER0_DIV]	= &mixer0_div_clk.common.hw,
-		[CLK_MIXER1_DIV]	= &mixer1_div_clk.common.hw,
-		[CLK_WB_DIV]		= &wb_div_clk.common.hw,
-	},
-	.num	= CLK_NUMBER_WITHOUT_ROT,
-};
-
-static struct clk_hw_onecell_data sun8i_v3s_de2_hw_clks = {
-	.hws	= {
-		[CLK_MIXER0]		= &mixer0_clk.common.hw,
-		[CLK_WB]		= &wb_clk.common.hw,
-
-		[CLK_BUS_MIXER0]	= &bus_mixer0_clk.common.hw,
-		[CLK_BUS_WB]		= &bus_wb_clk.common.hw,
-
-		[CLK_MIXER0_DIV]	= &mixer0_div_clk.common.hw,
-		[CLK_WB_DIV]		= &wb_div_clk.common.hw,
-	},
-	.num	= CLK_NUMBER_WITHOUT_ROT,
-};
-
-static struct clk_hw_onecell_data sun50i_a64_de2_hw_clks = {
-	.hws	= {
-		[CLK_MIXER0]		= &mixer0_clk.common.hw,
-		[CLK_MIXER1]		= &mixer1_clk.common.hw,
-		[CLK_WB]		= &wb_clk.common.hw,
-		[CLK_ROT]		= &rot_clk.common.hw,
-
-		[CLK_BUS_MIXER0]	= &bus_mixer0_clk.common.hw,
-		[CLK_BUS_MIXER1]	= &bus_mixer1_clk.common.hw,
-		[CLK_BUS_WB]		= &bus_wb_clk.common.hw,
-		[CLK_BUS_ROT]		= &bus_rot_clk.common.hw,
-
-		[CLK_MIXER0_DIV]	= &mixer0_div_clk.common.hw,
-		[CLK_MIXER1_DIV]	= &mixer1_div_clk.common.hw,
-		[CLK_WB_DIV]		= &wb_div_clk.common.hw,
-		[CLK_ROT_DIV]		= &rot_div_clk.common.hw,
-	},
-	.num	= CLK_NUMBER_WITH_ROT,
-};
-
-static struct ccu_reset_map sun8i_a83t_de2_resets[] = {
-	[RST_MIXER0]	= { 0x08, BIT(0) },
-	/*
-	 * Mixer1 reset line is shared with wb, so only RST_WB is
-	 * exported here.
-	 */
-	[RST_WB]	= { 0x08, BIT(2) },
-	[RST_ROT]	= { 0x08, BIT(3) },
-};
-
-static struct ccu_reset_map sun8i_h3_de2_resets[] = {
-	[RST_MIXER0]	= { 0x08, BIT(0) },
-	/*
-	 * Mixer1 reset line is shared with wb, so only RST_WB is
-	 * exported here.
-	 * V3s doesn't have mixer1, so it also shares this struct.
-	 */
-	[RST_WB]	= { 0x08, BIT(2) },
-};
-
-static struct ccu_reset_map sun50i_a64_de2_resets[] = {
-	[RST_MIXER0]	= { 0x08, BIT(0) },
-	[RST_MIXER1]	= { 0x08, BIT(1) },
-	[RST_WB]	= { 0x08, BIT(2) },
-	[RST_ROT]	= { 0x08, BIT(3) },
-};
-
-static struct ccu_reset_map sun50i_h5_de2_resets[] = {
-	[RST_MIXER0]	= { 0x08, BIT(0) },
-	[RST_MIXER1]	= { 0x08, BIT(1) },
-	[RST_WB]	= { 0x08, BIT(2) },
-};
-
-static const struct sunxi_ccu_desc sun8i_a83t_de2_clk_desc = {
-	.ccu_clks	= sun8i_a83t_de2_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun8i_a83t_de2_clks),
-
-	.hw_clks	= &sun8i_a83t_de2_hw_clks,
-
-	.resets		= sun8i_a83t_de2_resets,
-	.num_resets	= ARRAY_SIZE(sun8i_a83t_de2_resets),
-};
-
-static const struct sunxi_ccu_desc sun8i_h3_de2_clk_desc = {
-	.ccu_clks	= sun8i_h3_de2_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun8i_h3_de2_clks),
-
-	.hw_clks	= &sun8i_h3_de2_hw_clks,
-
-	.resets		= sun8i_h3_de2_resets,
-	.num_resets	= ARRAY_SIZE(sun8i_h3_de2_resets),
-};
-
-static const struct sunxi_ccu_desc sun8i_r40_de2_clk_desc = {
-	.ccu_clks	= sun50i_a64_de2_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun50i_a64_de2_clks),
-
-	.hw_clks	= &sun50i_a64_de2_hw_clks,
-
-	.resets		= sun8i_a83t_de2_resets,
-	.num_resets	= ARRAY_SIZE(sun8i_a83t_de2_resets),
-};
-
-static const struct sunxi_ccu_desc sun8i_v3s_de2_clk_desc = {
-	.ccu_clks	= sun8i_v3s_de2_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun8i_v3s_de2_clks),
-
-	.hw_clks	= &sun8i_v3s_de2_hw_clks,
-
-	.resets		= sun8i_a83t_de2_resets,
-	.num_resets	= ARRAY_SIZE(sun8i_a83t_de2_resets),
-};
-
-static const struct sunxi_ccu_desc sun50i_a64_de2_clk_desc = {
-	.ccu_clks	= sun50i_a64_de2_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun50i_a64_de2_clks),
-
-	.hw_clks	= &sun50i_a64_de2_hw_clks,
-
-	.resets		= sun50i_a64_de2_resets,
-	.num_resets	= ARRAY_SIZE(sun50i_a64_de2_resets),
-};
-
-static const struct sunxi_ccu_desc sun50i_h5_de2_clk_desc = {
-	.ccu_clks	= sun8i_h3_de2_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun8i_h3_de2_clks),
-
-	.hw_clks	= &sun8i_h3_de2_hw_clks,
-
-	.resets		= sun50i_h5_de2_resets,
-	.num_resets	= ARRAY_SIZE(sun50i_h5_de2_resets),
-};
-
-static int sunxi_de2_clk_probe(struct platform_device *pdev)
-{
-	struct resource *res;
-	struct clk *bus_clk, *mod_clk;
-	struct reset_control *rstc;
-	void __iomem *reg;
-	const struct sunxi_ccu_desc *ccu_desc;
-	int ret;
-
-	ccu_desc = of_device_get_match_data(&pdev->dev);
-	if (!ccu_desc)
-		return -EINVAL;
-
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	reg = devm_ioremap_resource(&pdev->dev, res);
-	if (IS_ERR(reg))
-		return PTR_ERR(reg);
-
-	bus_clk = devm_clk_get(&pdev->dev, "bus");
-	if (IS_ERR(bus_clk)) {
-		ret = PTR_ERR(bus_clk);
-		if (ret != -EPROBE_DEFER)
-			dev_err(&pdev->dev, "Couldn't get bus clk: %d\n", ret);
-		return ret;
-	}
-
-	mod_clk = devm_clk_get(&pdev->dev, "mod");
-	if (IS_ERR(mod_clk)) {
-		ret = PTR_ERR(mod_clk);
-		if (ret != -EPROBE_DEFER)
-			dev_err(&pdev->dev, "Couldn't get mod clk: %d\n", ret);
-		return ret;
-	}
-
-	rstc = devm_reset_control_get_exclusive(&pdev->dev, NULL);
-	if (IS_ERR(rstc)) {
-		ret = PTR_ERR(rstc);
-		if (ret != -EPROBE_DEFER)
-			dev_err(&pdev->dev,
-				"Couldn't get reset control: %d\n", ret);
-		return ret;
-	}
-
-	/* The clocks need to be enabled for us to access the registers */
-	ret = clk_prepare_enable(bus_clk);
-	if (ret) {
-		dev_err(&pdev->dev, "Couldn't enable bus clk: %d\n", ret);
-		return ret;
-	}
-
-	ret = clk_prepare_enable(mod_clk);
-	if (ret) {
-		dev_err(&pdev->dev, "Couldn't enable mod clk: %d\n", ret);
-		goto err_disable_bus_clk;
-	}
-
-	/* The reset control needs to be asserted for the controls to work */
-	ret = reset_control_deassert(rstc);
-	if (ret) {
-		dev_err(&pdev->dev,
-			"Couldn't deassert reset control: %d\n", ret);
-		goto err_disable_mod_clk;
-	}
-
-	ret = devm_sunxi_ccu_probe(&pdev->dev, reg, ccu_desc);
-	if (ret)
-		goto err_assert_reset;
-
-	return 0;
-
-err_assert_reset:
-	reset_control_assert(rstc);
-err_disable_mod_clk:
-	clk_disable_unprepare(mod_clk);
-err_disable_bus_clk:
-	clk_disable_unprepare(bus_clk);
-	return ret;
-}
-
-static const struct of_device_id sunxi_de2_clk_ids[] = {
-	{
-		.compatible = "allwinner,sun8i-a83t-de2-clk",
-		.data = &sun8i_a83t_de2_clk_desc,
-	},
-	{
-		.compatible = "allwinner,sun8i-h3-de2-clk",
-		.data = &sun8i_h3_de2_clk_desc,
-	},
-	{
-		.compatible = "allwinner,sun8i-r40-de2-clk",
-		.data = &sun8i_r40_de2_clk_desc,
-	},
-	{
-		.compatible = "allwinner,sun8i-v3s-de2-clk",
-		.data = &sun8i_v3s_de2_clk_desc,
-	},
-	{
-		.compatible = "allwinner,sun50i-a64-de2-clk",
-		.data = &sun50i_a64_de2_clk_desc,
-	},
-	{
-		.compatible = "allwinner,sun50i-h5-de2-clk",
-		.data = &sun50i_h5_de2_clk_desc,
-	},
-	{
-		.compatible = "allwinner,sun50i-h6-de3-clk",
-		.data = &sun50i_h5_de2_clk_desc,
-	},
-	{ }
-};
-
-static struct platform_driver sunxi_de2_clk_driver = {
-	.probe	= sunxi_de2_clk_probe,
-	.driver	= {
-		.name	= "sunxi-de2-clks",
-		.of_match_table	= sunxi_de2_clk_ids,
-	},
-};
-builtin_platform_driver(sunxi_de2_clk_driver);
diff --git a/drivers/clk/sunxi-ng/ccu-sun8i-de2.h b/drivers/clk/sunxi-ng/ccu-sun8i-de2.h
deleted file mode 100644
index 499442002f2a..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun8i-de2.h
+++ /dev/null
@@ -1,21 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0-or-later */
-/*
- * Copyright 2016 Icenowy Zheng <icenowy@aosc.io>
- */
-
-#ifndef _CCU_SUN8I_DE2_H_
-#define _CCU_SUN8I_DE2_H_
-
-#include <dt-bindings/clock/sun8i-de2.h>
-#include <dt-bindings/reset/sun8i-de2.h>
-
-/* Intermediary clock dividers are not exported */
-#define CLK_MIXER0_DIV	3
-#define CLK_MIXER1_DIV	4
-#define CLK_WB_DIV	5
-#define CLK_ROT_DIV	11
-
-#define CLK_NUMBER_WITH_ROT	(CLK_ROT_DIV + 1)
-#define CLK_NUMBER_WITHOUT_ROT	(CLK_WB + 1)
-
-#endif /* _CCU_SUN8I_DE2_H_ */
diff --git a/drivers/clk/sunxi-ng/ccu-sun8i-h3.c b/drivers/clk/sunxi-ng/ccu-sun8i-h3.c
deleted file mode 100644
index d2fc2903787d..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun8i-h3.c
+++ /dev/null
@@ -1,1179 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-only
-/*
- * Copyright (c) 2016 Maxime Ripard. All rights reserved.
- */
-
-#include <linux/clk-provider.h>
-#include <linux/io.h>
-#include <linux/of_address.h>
-
-#include "ccu_common.h"
-#include "ccu_reset.h"
-
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_mp.h"
-#include "ccu_mult.h"
-#include "ccu_nk.h"
-#include "ccu_nkm.h"
-#include "ccu_nkmp.h"
-#include "ccu_nm.h"
-#include "ccu_phase.h"
-#include "ccu_sdm.h"
-
-#include "ccu-sun8i-h3.h"
-
-static SUNXI_CCU_NKMP_WITH_GATE_LOCK(pll_cpux_clk, "pll-cpux",
-				     "osc24M", 0x000,
-				     8, 5,	/* N */
-				     4, 2,	/* K */
-				     0, 2,	/* M */
-				     16, 2,	/* P */
-				     BIT(31),	/* gate */
-				     BIT(28),	/* lock */
-				     CLK_SET_RATE_UNGATE);
-
-/*
- * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
- * the base (2x, 4x and 8x), and one variable divider (the one true
- * pll audio).
- *
- * With sigma-delta modulation for fractional-N on the audio PLL,
- * we have to use specific dividers. This means the variable divider
- * can no longer be used, as the audio codec requests the exact clock
- * rates we support through this mechanism. So we now hard code the
- * variable divider to 1. This means the clock rates will no longer
- * match the clock names.
- */
-#define SUN8I_H3_PLL_AUDIO_REG	0x008
-
-static struct ccu_sdm_setting pll_audio_sdm_table[] = {
-	{ .rate = 22579200, .pattern = 0xc0010d84, .m = 8, .n = 7 },
-	{ .rate = 24576000, .pattern = 0xc000ac02, .m = 14, .n = 14 },
-};
-
-static SUNXI_CCU_NM_WITH_SDM_GATE_LOCK(pll_audio_base_clk, "pll-audio-base",
-				       "osc24M", 0x008,
-				       8, 7,	/* N */
-				       0, 5,	/* M */
-				       pll_audio_sdm_table, BIT(24),
-				       0x284, BIT(31),
-				       BIT(31),	/* gate */
-				       BIT(28),	/* lock */
-				       CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK_MIN_MAX(pll_video_clk, "pll-video",
-						"osc24M", 0x0010,
-						192000000, /* Minimum rate */
-						912000000, /* Maximum rate */
-						8, 7,      /* N */
-						0, 4,	   /* M */
-						BIT(24),   /* frac enable */
-						BIT(25),   /* frac select */
-						270000000, /* frac rate 0 */
-						297000000, /* frac rate 1 */
-						BIT(31),   /* gate */
-						BIT(28),   /* lock */
-						CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_ve_clk, "pll-ve",
-					"osc24M", 0x0018,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_ddr_clk, "pll-ddr",
-				    "osc24M", 0x020,
-				    8, 5,	/* N */
-				    4, 2,	/* K */
-				    0, 2,	/* M */
-				    BIT(31),	/* gate */
-				    BIT(28),	/* lock */
-				    CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NK_WITH_GATE_LOCK_POSTDIV(pll_periph0_clk, "pll-periph0",
-					   "osc24M", 0x028,
-					   8, 5,	/* N */
-					   4, 2,	/* K */
-					   BIT(31),	/* gate */
-					   BIT(28),	/* lock */
-					   2,		/* post-div */
-					   CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_gpu_clk, "pll-gpu",
-					"osc24M", 0x0038,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NK_WITH_GATE_LOCK_POSTDIV(pll_periph1_clk, "pll-periph1",
-					   "osc24M", 0x044,
-					   8, 5,	/* N */
-					   4, 2,	/* K */
-					   BIT(31),	/* gate */
-					   BIT(28),	/* lock */
-					   2,		/* post-div */
-					   CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_de_clk, "pll-de",
-					"osc24M", 0x0048,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static const char * const cpux_parents[] = { "osc32k", "osc24M",
-					     "pll-cpux" , "pll-cpux" };
-static SUNXI_CCU_MUX(cpux_clk, "cpux", cpux_parents,
-		     0x050, 16, 2, CLK_IS_CRITICAL | CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M(axi_clk, "axi", "cpux", 0x050, 0, 2, 0);
-
-static const char * const ahb1_parents[] = { "osc32k", "osc24M",
-					     "axi" , "pll-periph0" };
-static const struct ccu_mux_var_prediv ahb1_predivs[] = {
-	{ .index = 3, .shift = 6, .width = 2 },
-};
-static struct ccu_div ahb1_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
-
-	.mux		= {
-		.shift	= 12,
-		.width	= 2,
-
-		.var_predivs	= ahb1_predivs,
-		.n_var_predivs	= ARRAY_SIZE(ahb1_predivs),
-	},
-
-	.common		= {
-		.reg		= 0x054,
-		.features	= CCU_FEATURE_VARIABLE_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("ahb1",
-						      ahb1_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static struct clk_div_table apb1_div_table[] = {
-	{ .val = 0, .div = 2 },
-	{ .val = 1, .div = 2 },
-	{ .val = 2, .div = 4 },
-	{ .val = 3, .div = 8 },
-	{ /* Sentinel */ },
-};
-static SUNXI_CCU_DIV_TABLE(apb1_clk, "apb1", "ahb1",
-			   0x054, 8, 2, apb1_div_table, 0);
-
-static const char * const apb2_parents[] = { "osc32k", "osc24M",
-					     "pll-periph0" , "pll-periph0" };
-static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", apb2_parents, 0x058,
-			     0, 5,	/* M */
-			     16, 2,	/* P */
-			     24, 2,	/* mux */
-			     0);
-
-static const char * const ahb2_parents[] = { "ahb1" , "pll-periph0" };
-static const struct ccu_mux_fixed_prediv ahb2_fixed_predivs[] = {
-	{ .index = 1, .div = 2 },
-};
-static struct ccu_mux ahb2_clk = {
-	.mux		= {
-		.shift	= 0,
-		.width	= 1,
-		.fixed_predivs	= ahb2_fixed_predivs,
-		.n_predivs	= ARRAY_SIZE(ahb2_fixed_predivs),
-	},
-
-	.common		= {
-		.reg		= 0x05c,
-		.features	= CCU_FEATURE_FIXED_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("ahb2",
-						      ahb2_parents,
-						      &ccu_mux_ops,
-						      0),
-	},
-};
-
-static SUNXI_CCU_GATE(bus_ce_clk,	"bus-ce",	"ahb1",
-		      0x060, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_dma_clk,	"bus-dma",	"ahb1",
-		      0x060, BIT(6), 0);
-static SUNXI_CCU_GATE(bus_mmc0_clk,	"bus-mmc0",	"ahb1",
-		      0x060, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_mmc1_clk,	"bus-mmc1",	"ahb1",
-		      0x060, BIT(9), 0);
-static SUNXI_CCU_GATE(bus_mmc2_clk,	"bus-mmc2",	"ahb1",
-		      0x060, BIT(10), 0);
-static SUNXI_CCU_GATE(bus_nand_clk,	"bus-nand",	"ahb1",
-		      0x060, BIT(13), 0);
-static SUNXI_CCU_GATE(bus_dram_clk,	"bus-dram",	"ahb1",
-		      0x060, BIT(14), 0);
-static SUNXI_CCU_GATE(bus_emac_clk,	"bus-emac",	"ahb2",
-		      0x060, BIT(17), 0);
-static SUNXI_CCU_GATE(bus_ts_clk,	"bus-ts",	"ahb1",
-		      0x060, BIT(18), 0);
-static SUNXI_CCU_GATE(bus_hstimer_clk,	"bus-hstimer",	"ahb1",
-		      0x060, BIT(19), 0);
-static SUNXI_CCU_GATE(bus_spi0_clk,	"bus-spi0",	"ahb1",
-		      0x060, BIT(20), 0);
-static SUNXI_CCU_GATE(bus_spi1_clk,	"bus-spi1",	"ahb1",
-		      0x060, BIT(21), 0);
-static SUNXI_CCU_GATE(bus_otg_clk,	"bus-otg",	"ahb1",
-		      0x060, BIT(23), 0);
-static SUNXI_CCU_GATE(bus_ehci0_clk,	"bus-ehci0",	"ahb1",
-		      0x060, BIT(24), 0);
-static SUNXI_CCU_GATE(bus_ehci1_clk,	"bus-ehci1",	"ahb2",
-		      0x060, BIT(25), 0);
-static SUNXI_CCU_GATE(bus_ehci2_clk,	"bus-ehci2",	"ahb2",
-		      0x060, BIT(26), 0);
-static SUNXI_CCU_GATE(bus_ehci3_clk,	"bus-ehci3",	"ahb2",
-		      0x060, BIT(27), 0);
-static SUNXI_CCU_GATE(bus_ohci0_clk,	"bus-ohci0",	"ahb1",
-		      0x060, BIT(28), 0);
-static SUNXI_CCU_GATE(bus_ohci1_clk,	"bus-ohci1",	"ahb2",
-		      0x060, BIT(29), 0);
-static SUNXI_CCU_GATE(bus_ohci2_clk,	"bus-ohci2",	"ahb2",
-		      0x060, BIT(30), 0);
-static SUNXI_CCU_GATE(bus_ohci3_clk,	"bus-ohci3",	"ahb2",
-		      0x060, BIT(31), 0);
-
-static SUNXI_CCU_GATE(bus_ve_clk,	"bus-ve",	"ahb1",
-		      0x064, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_tcon0_clk,	"bus-tcon0",	"ahb1",
-		      0x064, BIT(3), 0);
-static SUNXI_CCU_GATE(bus_tcon1_clk,	"bus-tcon1",	"ahb1",
-		      0x064, BIT(4), 0);
-static SUNXI_CCU_GATE(bus_deinterlace_clk,	"bus-deinterlace",	"ahb1",
-		      0x064, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_csi_clk,	"bus-csi",	"ahb1",
-		      0x064, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_tve_clk,	"bus-tve",	"ahb1",
-		      0x064, BIT(9), 0);
-static SUNXI_CCU_GATE(bus_hdmi_clk,	"bus-hdmi",	"ahb1",
-		      0x064, BIT(11), 0);
-static SUNXI_CCU_GATE(bus_de_clk,	"bus-de",	"ahb1",
-		      0x064, BIT(12), 0);
-static SUNXI_CCU_GATE(bus_gpu_clk,	"bus-gpu",	"ahb1",
-		      0x064, BIT(20), 0);
-static SUNXI_CCU_GATE(bus_msgbox_clk,	"bus-msgbox",	"ahb1",
-		      0x064, BIT(21), 0);
-static SUNXI_CCU_GATE(bus_spinlock_clk,	"bus-spinlock",	"ahb1",
-		      0x064, BIT(22), 0);
-
-static SUNXI_CCU_GATE(bus_codec_clk,	"bus-codec",	"apb1",
-		      0x068, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_spdif_clk,	"bus-spdif",	"apb1",
-		      0x068, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_pio_clk,	"bus-pio",	"apb1",
-		      0x068, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_ths_clk,	"bus-ths",	"apb1",
-		      0x068, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_i2s0_clk,	"bus-i2s0",	"apb1",
-		      0x068, BIT(12), 0);
-static SUNXI_CCU_GATE(bus_i2s1_clk,	"bus-i2s1",	"apb1",
-		      0x068, BIT(13), 0);
-static SUNXI_CCU_GATE(bus_i2s2_clk,	"bus-i2s2",	"apb1",
-		      0x068, BIT(14), 0);
-
-static SUNXI_CCU_GATE(bus_i2c0_clk,	"bus-i2c0",	"apb2",
-		      0x06c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_i2c1_clk,	"bus-i2c1",	"apb2",
-		      0x06c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_i2c2_clk,	"bus-i2c2",	"apb2",
-		      0x06c, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_uart0_clk,	"bus-uart0",	"apb2",
-		      0x06c, BIT(16), 0);
-static SUNXI_CCU_GATE(bus_uart1_clk,	"bus-uart1",	"apb2",
-		      0x06c, BIT(17), 0);
-static SUNXI_CCU_GATE(bus_uart2_clk,	"bus-uart2",	"apb2",
-		      0x06c, BIT(18), 0);
-static SUNXI_CCU_GATE(bus_uart3_clk,	"bus-uart3",	"apb2",
-		      0x06c, BIT(19), 0);
-static SUNXI_CCU_GATE(bus_scr0_clk,	"bus-scr0",	"apb2",
-		      0x06c, BIT(20), 0);
-static SUNXI_CCU_GATE(bus_scr1_clk,	"bus-scr1",	"apb2",
-		      0x06c, BIT(21), 0);
-
-static SUNXI_CCU_GATE(bus_ephy_clk,	"bus-ephy",	"ahb1",
-		      0x070, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_dbg_clk,	"bus-dbg",	"ahb1",
-		      0x070, BIT(7), 0);
-
-static struct clk_div_table ths_div_table[] = {
-	{ .val = 0, .div = 1 },
-	{ .val = 1, .div = 2 },
-	{ .val = 2, .div = 4 },
-	{ .val = 3, .div = 6 },
-	{ /* Sentinel */ },
-};
-static SUNXI_CCU_DIV_TABLE_WITH_GATE(ths_clk, "ths", "osc24M",
-				     0x074, 0, 2, ths_div_table, BIT(31), 0);
-
-static const char * const mod0_default_parents[] = { "osc24M", "pll-periph0",
-						     "pll-periph1" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand_clk, "nand", mod0_default_parents, 0x080,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents, 0x088,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc0_sample_clk, "mmc0_sample", "mmc0",
-		       0x088, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc0_output_clk, "mmc0_output", "mmc0",
-		       0x088, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents, 0x08c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc1_sample_clk, "mmc1_sample", "mmc1",
-		       0x08c, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc1_output_clk, "mmc1_output", "mmc1",
-		       0x08c, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents, 0x090,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc2_sample_clk, "mmc2_sample", "mmc2",
-		       0x090, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc2_output_clk, "mmc2_output", "mmc2",
-		       0x090, 8, 3, 0);
-
-static const char * const ts_parents[] = { "osc24M", "pll-periph0", };
-static SUNXI_CCU_MP_WITH_MUX_GATE(ts_clk, "ts", ts_parents, 0x098,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(ce_clk, "ce", mod0_default_parents, 0x09c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents, 0x0a0,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents, 0x0a4,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static const char * const i2s_parents[] = { "pll-audio-8x", "pll-audio-4x",
-					    "pll-audio-2x", "pll-audio" };
-static SUNXI_CCU_MUX_WITH_GATE(i2s0_clk, "i2s0", i2s_parents,
-			       0x0b0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_MUX_WITH_GATE(i2s1_clk, "i2s1", i2s_parents,
-			       0x0b4, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_MUX_WITH_GATE(i2s2_clk, "i2s2", i2s_parents,
-			       0x0b8, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M_WITH_GATE(spdif_clk, "spdif", "pll-audio",
-			     0x0c0, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"osc24M",
-		      0x0cc, BIT(8), 0);
-static SUNXI_CCU_GATE(usb_phy1_clk,	"usb-phy1",	"osc24M",
-		      0x0cc, BIT(9), 0);
-static SUNXI_CCU_GATE(usb_phy2_clk,	"usb-phy2",	"osc24M",
-		      0x0cc, BIT(10), 0);
-static SUNXI_CCU_GATE(usb_phy3_clk,	"usb-phy3",	"osc24M",
-		      0x0cc, BIT(11), 0);
-static SUNXI_CCU_GATE(usb_ohci0_clk,	"usb-ohci0",	"osc24M",
-		      0x0cc, BIT(16), 0);
-static SUNXI_CCU_GATE(usb_ohci1_clk,	"usb-ohci1",	"osc24M",
-		      0x0cc, BIT(17), 0);
-static SUNXI_CCU_GATE(usb_ohci2_clk,	"usb-ohci2",	"osc24M",
-		      0x0cc, BIT(18), 0);
-static SUNXI_CCU_GATE(usb_ohci3_clk,	"usb-ohci3",	"osc24M",
-		      0x0cc, BIT(19), 0);
-
-static const char * const dram_parents[] = { "pll-ddr", "pll-periph0-2x" };
-static SUNXI_CCU_M_WITH_MUX(dram_clk, "dram", dram_parents,
-			    0x0f4, 0, 4, 20, 2, CLK_IS_CRITICAL);
-
-static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"dram",
-		      0x100, BIT(0), 0);
-static SUNXI_CCU_GATE(dram_csi_clk,	"dram-csi",	"dram",
-		      0x100, BIT(1), 0);
-static SUNXI_CCU_GATE(dram_deinterlace_clk,	"dram-deinterlace",	"dram",
-		      0x100, BIT(2), 0);
-static SUNXI_CCU_GATE(dram_ts_clk,	"dram-ts",	"dram",
-		      0x100, BIT(3), 0);
-
-static const char * const de_parents[] = { "pll-periph0-2x", "pll-de" };
-static SUNXI_CCU_M_WITH_MUX_GATE(de_clk, "de", de_parents,
-				 0x104, 0, 4, 24, 3, BIT(31),
-				 CLK_SET_RATE_PARENT);
-
-static const char * const tcon_parents[] = { "pll-video" };
-static SUNXI_CCU_M_WITH_MUX_GATE(tcon_clk, "tcon", tcon_parents,
-				 0x118, 0, 4, 24, 3, BIT(31),
-				 CLK_SET_RATE_PARENT);
-
-static const char * const tve_parents[] = { "pll-de", "pll-periph1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(tve_clk, "tve", tve_parents,
-				 0x120, 0, 4, 24, 3, BIT(31), 0);
-
-static const char * const deinterlace_parents[] = { "pll-periph0", "pll-periph1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(deinterlace_clk, "deinterlace", deinterlace_parents,
-				 0x124, 0, 4, 24, 3, BIT(31), 0);
-
-static SUNXI_CCU_GATE(csi_misc_clk,	"csi-misc",	"osc24M",
-		      0x130, BIT(31), 0);
-
-static const char * const csi_sclk_parents[] = { "pll-periph0", "pll-periph1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(csi_sclk_clk, "csi-sclk", csi_sclk_parents,
-				 0x134, 16, 4, 24, 3, BIT(31), 0);
-
-static const char * const csi_mclk_parents[] = { "osc24M", "pll-video", "pll-periph1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(csi_mclk_clk, "csi-mclk", csi_mclk_parents,
-				 0x134, 0, 5, 8, 3, BIT(15), 0);
-
-static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve",
-			     0x13c, 16, 3, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(ac_dig_clk,	"ac-dig",	"pll-audio",
-		      0x140, BIT(31), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_GATE(avs_clk,		"avs",		"osc24M",
-		      0x144, BIT(31), 0);
-
-static const char * const hdmi_parents[] = { "pll-video" };
-static SUNXI_CCU_M_WITH_MUX_GATE(hdmi_clk, "hdmi", hdmi_parents,
-				 0x150, 0, 4, 24, 2, BIT(31),
-				 CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(hdmi_ddc_clk,	"hdmi-ddc",	"osc24M",
-		      0x154, BIT(31), 0);
-
-static const char * const mbus_parents[] = { "osc24M", "pll-periph0-2x", "pll-ddr" };
-static SUNXI_CCU_M_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents,
-				 0x15c, 0, 3, 24, 2, BIT(31), CLK_IS_CRITICAL);
-
-static SUNXI_CCU_M_WITH_GATE(gpu_clk, "gpu", "pll-gpu",
-			     0x1a0, 0, 3, BIT(31), CLK_SET_RATE_PARENT);
-
-static struct ccu_common *sun8i_h3_ccu_clks[] = {
-	&pll_cpux_clk.common,
-	&pll_audio_base_clk.common,
-	&pll_video_clk.common,
-	&pll_ve_clk.common,
-	&pll_ddr_clk.common,
-	&pll_periph0_clk.common,
-	&pll_gpu_clk.common,
-	&pll_periph1_clk.common,
-	&pll_de_clk.common,
-	&cpux_clk.common,
-	&axi_clk.common,
-	&ahb1_clk.common,
-	&apb1_clk.common,
-	&apb2_clk.common,
-	&ahb2_clk.common,
-	&bus_ce_clk.common,
-	&bus_dma_clk.common,
-	&bus_mmc0_clk.common,
-	&bus_mmc1_clk.common,
-	&bus_mmc2_clk.common,
-	&bus_nand_clk.common,
-	&bus_dram_clk.common,
-	&bus_emac_clk.common,
-	&bus_ts_clk.common,
-	&bus_hstimer_clk.common,
-	&bus_spi0_clk.common,
-	&bus_spi1_clk.common,
-	&bus_otg_clk.common,
-	&bus_ehci0_clk.common,
-	&bus_ehci1_clk.common,
-	&bus_ehci2_clk.common,
-	&bus_ehci3_clk.common,
-	&bus_ohci0_clk.common,
-	&bus_ohci1_clk.common,
-	&bus_ohci2_clk.common,
-	&bus_ohci3_clk.common,
-	&bus_ve_clk.common,
-	&bus_tcon0_clk.common,
-	&bus_tcon1_clk.common,
-	&bus_deinterlace_clk.common,
-	&bus_csi_clk.common,
-	&bus_tve_clk.common,
-	&bus_hdmi_clk.common,
-	&bus_de_clk.common,
-	&bus_gpu_clk.common,
-	&bus_msgbox_clk.common,
-	&bus_spinlock_clk.common,
-	&bus_codec_clk.common,
-	&bus_spdif_clk.common,
-	&bus_pio_clk.common,
-	&bus_ths_clk.common,
-	&bus_i2s0_clk.common,
-	&bus_i2s1_clk.common,
-	&bus_i2s2_clk.common,
-	&bus_i2c0_clk.common,
-	&bus_i2c1_clk.common,
-	&bus_i2c2_clk.common,
-	&bus_uart0_clk.common,
-	&bus_uart1_clk.common,
-	&bus_uart2_clk.common,
-	&bus_uart3_clk.common,
-	&bus_scr0_clk.common,
-	&bus_ephy_clk.common,
-	&bus_dbg_clk.common,
-	&ths_clk.common,
-	&nand_clk.common,
-	&mmc0_clk.common,
-	&mmc0_sample_clk.common,
-	&mmc0_output_clk.common,
-	&mmc1_clk.common,
-	&mmc1_sample_clk.common,
-	&mmc1_output_clk.common,
-	&mmc2_clk.common,
-	&mmc2_sample_clk.common,
-	&mmc2_output_clk.common,
-	&ts_clk.common,
-	&ce_clk.common,
-	&spi0_clk.common,
-	&spi1_clk.common,
-	&i2s0_clk.common,
-	&i2s1_clk.common,
-	&i2s2_clk.common,
-	&spdif_clk.common,
-	&usb_phy0_clk.common,
-	&usb_phy1_clk.common,
-	&usb_phy2_clk.common,
-	&usb_phy3_clk.common,
-	&usb_ohci0_clk.common,
-	&usb_ohci1_clk.common,
-	&usb_ohci2_clk.common,
-	&usb_ohci3_clk.common,
-	&dram_clk.common,
-	&dram_ve_clk.common,
-	&dram_csi_clk.common,
-	&dram_deinterlace_clk.common,
-	&dram_ts_clk.common,
-	&de_clk.common,
-	&tcon_clk.common,
-	&tve_clk.common,
-	&deinterlace_clk.common,
-	&csi_misc_clk.common,
-	&csi_sclk_clk.common,
-	&csi_mclk_clk.common,
-	&ve_clk.common,
-	&ac_dig_clk.common,
-	&avs_clk.common,
-	&hdmi_clk.common,
-	&hdmi_ddc_clk.common,
-	&mbus_clk.common,
-	&gpu_clk.common,
-};
-
-static struct ccu_common *sun50i_h5_ccu_clks[] = {
-	&pll_cpux_clk.common,
-	&pll_audio_base_clk.common,
-	&pll_video_clk.common,
-	&pll_ve_clk.common,
-	&pll_ddr_clk.common,
-	&pll_periph0_clk.common,
-	&pll_gpu_clk.common,
-	&pll_periph1_clk.common,
-	&pll_de_clk.common,
-	&cpux_clk.common,
-	&axi_clk.common,
-	&ahb1_clk.common,
-	&apb1_clk.common,
-	&apb2_clk.common,
-	&ahb2_clk.common,
-	&bus_ce_clk.common,
-	&bus_dma_clk.common,
-	&bus_mmc0_clk.common,
-	&bus_mmc1_clk.common,
-	&bus_mmc2_clk.common,
-	&bus_nand_clk.common,
-	&bus_dram_clk.common,
-	&bus_emac_clk.common,
-	&bus_ts_clk.common,
-	&bus_hstimer_clk.common,
-	&bus_spi0_clk.common,
-	&bus_spi1_clk.common,
-	&bus_otg_clk.common,
-	&bus_ehci0_clk.common,
-	&bus_ehci1_clk.common,
-	&bus_ehci2_clk.common,
-	&bus_ehci3_clk.common,
-	&bus_ohci0_clk.common,
-	&bus_ohci1_clk.common,
-	&bus_ohci2_clk.common,
-	&bus_ohci3_clk.common,
-	&bus_ve_clk.common,
-	&bus_tcon0_clk.common,
-	&bus_tcon1_clk.common,
-	&bus_deinterlace_clk.common,
-	&bus_csi_clk.common,
-	&bus_tve_clk.common,
-	&bus_hdmi_clk.common,
-	&bus_de_clk.common,
-	&bus_gpu_clk.common,
-	&bus_msgbox_clk.common,
-	&bus_spinlock_clk.common,
-	&bus_codec_clk.common,
-	&bus_spdif_clk.common,
-	&bus_pio_clk.common,
-	&bus_ths_clk.common,
-	&bus_i2s0_clk.common,
-	&bus_i2s1_clk.common,
-	&bus_i2s2_clk.common,
-	&bus_i2c0_clk.common,
-	&bus_i2c1_clk.common,
-	&bus_i2c2_clk.common,
-	&bus_uart0_clk.common,
-	&bus_uart1_clk.common,
-	&bus_uart2_clk.common,
-	&bus_uart3_clk.common,
-	&bus_scr0_clk.common,
-	&bus_scr1_clk.common,
-	&bus_ephy_clk.common,
-	&bus_dbg_clk.common,
-	&ths_clk.common,
-	&nand_clk.common,
-	&mmc0_clk.common,
-	&mmc1_clk.common,
-	&mmc2_clk.common,
-	&ts_clk.common,
-	&ce_clk.common,
-	&spi0_clk.common,
-	&spi1_clk.common,
-	&i2s0_clk.common,
-	&i2s1_clk.common,
-	&i2s2_clk.common,
-	&spdif_clk.common,
-	&usb_phy0_clk.common,
-	&usb_phy1_clk.common,
-	&usb_phy2_clk.common,
-	&usb_phy3_clk.common,
-	&usb_ohci0_clk.common,
-	&usb_ohci1_clk.common,
-	&usb_ohci2_clk.common,
-	&usb_ohci3_clk.common,
-	&dram_clk.common,
-	&dram_ve_clk.common,
-	&dram_csi_clk.common,
-	&dram_deinterlace_clk.common,
-	&dram_ts_clk.common,
-	&de_clk.common,
-	&tcon_clk.common,
-	&tve_clk.common,
-	&deinterlace_clk.common,
-	&csi_misc_clk.common,
-	&csi_sclk_clk.common,
-	&csi_mclk_clk.common,
-	&ve_clk.common,
-	&ac_dig_clk.common,
-	&avs_clk.common,
-	&hdmi_clk.common,
-	&hdmi_ddc_clk.common,
-	&mbus_clk.common,
-	&gpu_clk.common,
-};
-
-static const struct clk_hw *clk_parent_pll_audio[] = {
-	&pll_audio_base_clk.common.hw
-};
-
-/* We hardcode the divider to 1 for now */
-static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
-			    clk_parent_pll_audio,
-			    1, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
-			    clk_parent_pll_audio,
-			    2, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
-			    clk_parent_pll_audio,
-			    1, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
-			    clk_parent_pll_audio,
-			    1, 2, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HW(pll_periph0_2x_clk, "pll-periph0-2x",
-			   &pll_periph0_clk.common.hw,
-			   1, 2, 0);
-
-static struct clk_hw_onecell_data sun8i_h3_hw_clks = {
-	.hws	= {
-		[CLK_PLL_CPUX]		= &pll_cpux_clk.common.hw,
-		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
-		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
-		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
-		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
-		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
-		[CLK_PLL_VIDEO]		= &pll_video_clk.common.hw,
-		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
-		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
-		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
-		[CLK_PLL_PERIPH0_2X]	= &pll_periph0_2x_clk.hw,
-		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
-		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
-		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
-		[CLK_CPUX]		= &cpux_clk.common.hw,
-		[CLK_AXI]		= &axi_clk.common.hw,
-		[CLK_AHB1]		= &ahb1_clk.common.hw,
-		[CLK_APB1]		= &apb1_clk.common.hw,
-		[CLK_APB2]		= &apb2_clk.common.hw,
-		[CLK_AHB2]		= &ahb2_clk.common.hw,
-		[CLK_BUS_CE]		= &bus_ce_clk.common.hw,
-		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
-		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
-		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
-		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
-		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
-		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
-		[CLK_BUS_EMAC]		= &bus_emac_clk.common.hw,
-		[CLK_BUS_TS]		= &bus_ts_clk.common.hw,
-		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
-		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
-		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
-		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
-		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
-		[CLK_BUS_EHCI1]		= &bus_ehci1_clk.common.hw,
-		[CLK_BUS_EHCI2]		= &bus_ehci2_clk.common.hw,
-		[CLK_BUS_EHCI3]		= &bus_ehci3_clk.common.hw,
-		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
-		[CLK_BUS_OHCI1]		= &bus_ohci1_clk.common.hw,
-		[CLK_BUS_OHCI2]		= &bus_ohci2_clk.common.hw,
-		[CLK_BUS_OHCI3]		= &bus_ohci3_clk.common.hw,
-		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
-		[CLK_BUS_TCON0]		= &bus_tcon0_clk.common.hw,
-		[CLK_BUS_TCON1]		= &bus_tcon1_clk.common.hw,
-		[CLK_BUS_DEINTERLACE]	= &bus_deinterlace_clk.common.hw,
-		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
-		[CLK_BUS_TVE]		= &bus_tve_clk.common.hw,
-		[CLK_BUS_HDMI]		= &bus_hdmi_clk.common.hw,
-		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
-		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
-		[CLK_BUS_MSGBOX]	= &bus_msgbox_clk.common.hw,
-		[CLK_BUS_SPINLOCK]	= &bus_spinlock_clk.common.hw,
-		[CLK_BUS_CODEC]		= &bus_codec_clk.common.hw,
-		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
-		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
-		[CLK_BUS_THS]		= &bus_ths_clk.common.hw,
-		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
-		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
-		[CLK_BUS_I2S2]		= &bus_i2s2_clk.common.hw,
-		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
-		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
-		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
-		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
-		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
-		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
-		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
-		[CLK_BUS_SCR0]		= &bus_scr0_clk.common.hw,
-		[CLK_BUS_EPHY]		= &bus_ephy_clk.common.hw,
-		[CLK_BUS_DBG]		= &bus_dbg_clk.common.hw,
-		[CLK_THS]		= &ths_clk.common.hw,
-		[CLK_NAND]		= &nand_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
-		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
-		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
-		[CLK_MMC2]		= &mmc2_clk.common.hw,
-		[CLK_MMC2_SAMPLE]	= &mmc2_sample_clk.common.hw,
-		[CLK_MMC2_OUTPUT]	= &mmc2_output_clk.common.hw,
-		[CLK_TS]		= &ts_clk.common.hw,
-		[CLK_CE]		= &ce_clk.common.hw,
-		[CLK_SPI0]		= &spi0_clk.common.hw,
-		[CLK_SPI1]		= &spi1_clk.common.hw,
-		[CLK_I2S0]		= &i2s0_clk.common.hw,
-		[CLK_I2S1]		= &i2s1_clk.common.hw,
-		[CLK_I2S2]		= &i2s2_clk.common.hw,
-		[CLK_SPDIF]		= &spdif_clk.common.hw,
-		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
-		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
-		[CLK_USB_PHY2]		= &usb_phy2_clk.common.hw,
-		[CLK_USB_PHY3]		= &usb_phy3_clk.common.hw,
-		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
-		[CLK_USB_OHCI1]		= &usb_ohci1_clk.common.hw,
-		[CLK_USB_OHCI2]		= &usb_ohci2_clk.common.hw,
-		[CLK_USB_OHCI3]		= &usb_ohci3_clk.common.hw,
-		[CLK_DRAM]		= &dram_clk.common.hw,
-		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
-		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
-		[CLK_DRAM_DEINTERLACE]	= &dram_deinterlace_clk.common.hw,
-		[CLK_DRAM_TS]		= &dram_ts_clk.common.hw,
-		[CLK_DE]		= &de_clk.common.hw,
-		[CLK_TCON0]		= &tcon_clk.common.hw,
-		[CLK_TVE]		= &tve_clk.common.hw,
-		[CLK_DEINTERLACE]	= &deinterlace_clk.common.hw,
-		[CLK_CSI_MISC]		= &csi_misc_clk.common.hw,
-		[CLK_CSI_SCLK]		= &csi_sclk_clk.common.hw,
-		[CLK_CSI_MCLK]		= &csi_mclk_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_AC_DIG]		= &ac_dig_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-		[CLK_HDMI]		= &hdmi_clk.common.hw,
-		[CLK_HDMI_DDC]		= &hdmi_ddc_clk.common.hw,
-		[CLK_MBUS]		= &mbus_clk.common.hw,
-		[CLK_GPU]		= &gpu_clk.common.hw,
-	},
-	.num	= CLK_NUMBER_H3,
-};
-
-static struct clk_hw_onecell_data sun50i_h5_hw_clks = {
-	.hws	= {
-		[CLK_PLL_CPUX]		= &pll_cpux_clk.common.hw,
-		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
-		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
-		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
-		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
-		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
-		[CLK_PLL_VIDEO]		= &pll_video_clk.common.hw,
-		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
-		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
-		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
-		[CLK_PLL_PERIPH0_2X]	= &pll_periph0_2x_clk.hw,
-		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
-		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
-		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
-		[CLK_CPUX]		= &cpux_clk.common.hw,
-		[CLK_AXI]		= &axi_clk.common.hw,
-		[CLK_AHB1]		= &ahb1_clk.common.hw,
-		[CLK_APB1]		= &apb1_clk.common.hw,
-		[CLK_APB2]		= &apb2_clk.common.hw,
-		[CLK_AHB2]		= &ahb2_clk.common.hw,
-		[CLK_BUS_CE]		= &bus_ce_clk.common.hw,
-		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
-		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
-		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
-		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
-		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
-		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
-		[CLK_BUS_EMAC]		= &bus_emac_clk.common.hw,
-		[CLK_BUS_TS]		= &bus_ts_clk.common.hw,
-		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
-		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
-		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
-		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
-		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
-		[CLK_BUS_EHCI1]		= &bus_ehci1_clk.common.hw,
-		[CLK_BUS_EHCI2]		= &bus_ehci2_clk.common.hw,
-		[CLK_BUS_EHCI3]		= &bus_ehci3_clk.common.hw,
-		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
-		[CLK_BUS_OHCI1]		= &bus_ohci1_clk.common.hw,
-		[CLK_BUS_OHCI2]		= &bus_ohci2_clk.common.hw,
-		[CLK_BUS_OHCI3]		= &bus_ohci3_clk.common.hw,
-		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
-		[CLK_BUS_TCON0]		= &bus_tcon0_clk.common.hw,
-		[CLK_BUS_TCON1]		= &bus_tcon1_clk.common.hw,
-		[CLK_BUS_DEINTERLACE]	= &bus_deinterlace_clk.common.hw,
-		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
-		[CLK_BUS_TVE]		= &bus_tve_clk.common.hw,
-		[CLK_BUS_HDMI]		= &bus_hdmi_clk.common.hw,
-		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
-		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
-		[CLK_BUS_MSGBOX]	= &bus_msgbox_clk.common.hw,
-		[CLK_BUS_SPINLOCK]	= &bus_spinlock_clk.common.hw,
-		[CLK_BUS_CODEC]		= &bus_codec_clk.common.hw,
-		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
-		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
-		[CLK_BUS_THS]		= &bus_ths_clk.common.hw,
-		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
-		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
-		[CLK_BUS_I2S2]		= &bus_i2s2_clk.common.hw,
-		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
-		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
-		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
-		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
-		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
-		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
-		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
-		[CLK_BUS_SCR0]		= &bus_scr0_clk.common.hw,
-		[CLK_BUS_SCR1]		= &bus_scr1_clk.common.hw,
-		[CLK_BUS_EPHY]		= &bus_ephy_clk.common.hw,
-		[CLK_BUS_DBG]		= &bus_dbg_clk.common.hw,
-		[CLK_THS]		= &ths_clk.common.hw,
-		[CLK_NAND]		= &nand_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC2]		= &mmc2_clk.common.hw,
-		[CLK_TS]		= &ts_clk.common.hw,
-		[CLK_CE]		= &ce_clk.common.hw,
-		[CLK_SPI0]		= &spi0_clk.common.hw,
-		[CLK_SPI1]		= &spi1_clk.common.hw,
-		[CLK_I2S0]		= &i2s0_clk.common.hw,
-		[CLK_I2S1]		= &i2s1_clk.common.hw,
-		[CLK_I2S2]		= &i2s2_clk.common.hw,
-		[CLK_SPDIF]		= &spdif_clk.common.hw,
-		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
-		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
-		[CLK_USB_PHY2]		= &usb_phy2_clk.common.hw,
-		[CLK_USB_PHY3]		= &usb_phy3_clk.common.hw,
-		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
-		[CLK_USB_OHCI1]		= &usb_ohci1_clk.common.hw,
-		[CLK_USB_OHCI2]		= &usb_ohci2_clk.common.hw,
-		[CLK_USB_OHCI3]		= &usb_ohci3_clk.common.hw,
-		[CLK_DRAM]		= &dram_clk.common.hw,
-		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
-		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
-		[CLK_DRAM_DEINTERLACE]	= &dram_deinterlace_clk.common.hw,
-		[CLK_DRAM_TS]		= &dram_ts_clk.common.hw,
-		[CLK_DE]		= &de_clk.common.hw,
-		[CLK_TCON0]		= &tcon_clk.common.hw,
-		[CLK_TVE]		= &tve_clk.common.hw,
-		[CLK_DEINTERLACE]	= &deinterlace_clk.common.hw,
-		[CLK_CSI_MISC]		= &csi_misc_clk.common.hw,
-		[CLK_CSI_SCLK]		= &csi_sclk_clk.common.hw,
-		[CLK_CSI_MCLK]		= &csi_mclk_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_AC_DIG]		= &ac_dig_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-		[CLK_HDMI]		= &hdmi_clk.common.hw,
-		[CLK_HDMI_DDC]		= &hdmi_ddc_clk.common.hw,
-		[CLK_MBUS]		= &mbus_clk.common.hw,
-		[CLK_GPU]		= &gpu_clk.common.hw,
-	},
-	.num	= CLK_NUMBER_H5,
-};
-
-static struct ccu_reset_map sun8i_h3_ccu_resets[] = {
-	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
-	[RST_USB_PHY1]		=  { 0x0cc, BIT(1) },
-	[RST_USB_PHY2]		=  { 0x0cc, BIT(2) },
-	[RST_USB_PHY3]		=  { 0x0cc, BIT(3) },
-
-	[RST_MBUS]		=  { 0x0fc, BIT(31) },
-
-	[RST_BUS_CE]		=  { 0x2c0, BIT(5) },
-	[RST_BUS_DMA]		=  { 0x2c0, BIT(6) },
-	[RST_BUS_MMC0]		=  { 0x2c0, BIT(8) },
-	[RST_BUS_MMC1]		=  { 0x2c0, BIT(9) },
-	[RST_BUS_MMC2]		=  { 0x2c0, BIT(10) },
-	[RST_BUS_NAND]		=  { 0x2c0, BIT(13) },
-	[RST_BUS_DRAM]		=  { 0x2c0, BIT(14) },
-	[RST_BUS_EMAC]		=  { 0x2c0, BIT(17) },
-	[RST_BUS_TS]		=  { 0x2c0, BIT(18) },
-	[RST_BUS_HSTIMER]	=  { 0x2c0, BIT(19) },
-	[RST_BUS_SPI0]		=  { 0x2c0, BIT(20) },
-	[RST_BUS_SPI1]		=  { 0x2c0, BIT(21) },
-	[RST_BUS_OTG]		=  { 0x2c0, BIT(23) },
-	[RST_BUS_EHCI0]		=  { 0x2c0, BIT(24) },
-	[RST_BUS_EHCI1]		=  { 0x2c0, BIT(25) },
-	[RST_BUS_EHCI2]		=  { 0x2c0, BIT(26) },
-	[RST_BUS_EHCI3]		=  { 0x2c0, BIT(27) },
-	[RST_BUS_OHCI0]		=  { 0x2c0, BIT(28) },
-	[RST_BUS_OHCI1]		=  { 0x2c0, BIT(29) },
-	[RST_BUS_OHCI2]		=  { 0x2c0, BIT(30) },
-	[RST_BUS_OHCI3]		=  { 0x2c0, BIT(31) },
-
-	[RST_BUS_VE]		=  { 0x2c4, BIT(0) },
-	[RST_BUS_TCON0]		=  { 0x2c4, BIT(3) },
-	[RST_BUS_TCON1]		=  { 0x2c4, BIT(4) },
-	[RST_BUS_DEINTERLACE]	=  { 0x2c4, BIT(5) },
-	[RST_BUS_CSI]		=  { 0x2c4, BIT(8) },
-	[RST_BUS_TVE]		=  { 0x2c4, BIT(9) },
-	[RST_BUS_HDMI0]		=  { 0x2c4, BIT(10) },
-	[RST_BUS_HDMI1]		=  { 0x2c4, BIT(11) },
-	[RST_BUS_DE]		=  { 0x2c4, BIT(12) },
-	[RST_BUS_GPU]		=  { 0x2c4, BIT(20) },
-	[RST_BUS_MSGBOX]	=  { 0x2c4, BIT(21) },
-	[RST_BUS_SPINLOCK]	=  { 0x2c4, BIT(22) },
-	[RST_BUS_DBG]		=  { 0x2c4, BIT(31) },
-
-	[RST_BUS_EPHY]		=  { 0x2c8, BIT(2) },
-
-	[RST_BUS_CODEC]		=  { 0x2d0, BIT(0) },
-	[RST_BUS_SPDIF]		=  { 0x2d0, BIT(1) },
-	[RST_BUS_THS]		=  { 0x2d0, BIT(8) },
-	[RST_BUS_I2S0]		=  { 0x2d0, BIT(12) },
-	[RST_BUS_I2S1]		=  { 0x2d0, BIT(13) },
-	[RST_BUS_I2S2]		=  { 0x2d0, BIT(14) },
-
-	[RST_BUS_I2C0]		=  { 0x2d8, BIT(0) },
-	[RST_BUS_I2C1]		=  { 0x2d8, BIT(1) },
-	[RST_BUS_I2C2]		=  { 0x2d8, BIT(2) },
-	[RST_BUS_UART0]		=  { 0x2d8, BIT(16) },
-	[RST_BUS_UART1]		=  { 0x2d8, BIT(17) },
-	[RST_BUS_UART2]		=  { 0x2d8, BIT(18) },
-	[RST_BUS_UART3]		=  { 0x2d8, BIT(19) },
-	[RST_BUS_SCR0]		=  { 0x2d8, BIT(20) },
-};
-
-static struct ccu_reset_map sun50i_h5_ccu_resets[] = {
-	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
-	[RST_USB_PHY1]		=  { 0x0cc, BIT(1) },
-	[RST_USB_PHY2]		=  { 0x0cc, BIT(2) },
-	[RST_USB_PHY3]		=  { 0x0cc, BIT(3) },
-
-	[RST_MBUS]		=  { 0x0fc, BIT(31) },
-
-	[RST_BUS_CE]		=  { 0x2c0, BIT(5) },
-	[RST_BUS_DMA]		=  { 0x2c0, BIT(6) },
-	[RST_BUS_MMC0]		=  { 0x2c0, BIT(8) },
-	[RST_BUS_MMC1]		=  { 0x2c0, BIT(9) },
-	[RST_BUS_MMC2]		=  { 0x2c0, BIT(10) },
-	[RST_BUS_NAND]		=  { 0x2c0, BIT(13) },
-	[RST_BUS_DRAM]		=  { 0x2c0, BIT(14) },
-	[RST_BUS_EMAC]		=  { 0x2c0, BIT(17) },
-	[RST_BUS_TS]		=  { 0x2c0, BIT(18) },
-	[RST_BUS_HSTIMER]	=  { 0x2c0, BIT(19) },
-	[RST_BUS_SPI0]		=  { 0x2c0, BIT(20) },
-	[RST_BUS_SPI1]		=  { 0x2c0, BIT(21) },
-	[RST_BUS_OTG]		=  { 0x2c0, BIT(23) },
-	[RST_BUS_EHCI0]		=  { 0x2c0, BIT(24) },
-	[RST_BUS_EHCI1]		=  { 0x2c0, BIT(25) },
-	[RST_BUS_EHCI2]		=  { 0x2c0, BIT(26) },
-	[RST_BUS_EHCI3]		=  { 0x2c0, BIT(27) },
-	[RST_BUS_OHCI0]		=  { 0x2c0, BIT(28) },
-	[RST_BUS_OHCI1]		=  { 0x2c0, BIT(29) },
-	[RST_BUS_OHCI2]		=  { 0x2c0, BIT(30) },
-	[RST_BUS_OHCI3]		=  { 0x2c0, BIT(31) },
-
-	[RST_BUS_VE]		=  { 0x2c4, BIT(0) },
-	[RST_BUS_TCON0]		=  { 0x2c4, BIT(3) },
-	[RST_BUS_TCON1]		=  { 0x2c4, BIT(4) },
-	[RST_BUS_DEINTERLACE]	=  { 0x2c4, BIT(5) },
-	[RST_BUS_CSI]		=  { 0x2c4, BIT(8) },
-	[RST_BUS_TVE]		=  { 0x2c4, BIT(9) },
-	[RST_BUS_HDMI0]		=  { 0x2c4, BIT(10) },
-	[RST_BUS_HDMI1]		=  { 0x2c4, BIT(11) },
-	[RST_BUS_DE]		=  { 0x2c4, BIT(12) },
-	[RST_BUS_GPU]		=  { 0x2c4, BIT(20) },
-	[RST_BUS_MSGBOX]	=  { 0x2c4, BIT(21) },
-	[RST_BUS_SPINLOCK]	=  { 0x2c4, BIT(22) },
-	[RST_BUS_DBG]		=  { 0x2c4, BIT(31) },
-
-	[RST_BUS_EPHY]		=  { 0x2c8, BIT(2) },
-
-	[RST_BUS_CODEC]		=  { 0x2d0, BIT(0) },
-	[RST_BUS_SPDIF]		=  { 0x2d0, BIT(1) },
-	[RST_BUS_THS]		=  { 0x2d0, BIT(8) },
-	[RST_BUS_I2S0]		=  { 0x2d0, BIT(12) },
-	[RST_BUS_I2S1]		=  { 0x2d0, BIT(13) },
-	[RST_BUS_I2S2]		=  { 0x2d0, BIT(14) },
-
-	[RST_BUS_I2C0]		=  { 0x2d8, BIT(0) },
-	[RST_BUS_I2C1]		=  { 0x2d8, BIT(1) },
-	[RST_BUS_I2C2]		=  { 0x2d8, BIT(2) },
-	[RST_BUS_UART0]		=  { 0x2d8, BIT(16) },
-	[RST_BUS_UART1]		=  { 0x2d8, BIT(17) },
-	[RST_BUS_UART2]		=  { 0x2d8, BIT(18) },
-	[RST_BUS_UART3]		=  { 0x2d8, BIT(19) },
-	[RST_BUS_SCR0]		=  { 0x2d8, BIT(20) },
-	[RST_BUS_SCR1]		=  { 0x2d8, BIT(20) },
-};
-
-static const struct sunxi_ccu_desc sun8i_h3_ccu_desc = {
-	.ccu_clks	= sun8i_h3_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun8i_h3_ccu_clks),
-
-	.hw_clks	= &sun8i_h3_hw_clks,
-
-	.resets		= sun8i_h3_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun8i_h3_ccu_resets),
-};
-
-static const struct sunxi_ccu_desc sun50i_h5_ccu_desc = {
-	.ccu_clks	= sun50i_h5_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun50i_h5_ccu_clks),
-
-	.hw_clks	= &sun50i_h5_hw_clks,
-
-	.resets		= sun50i_h5_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun50i_h5_ccu_resets),
-};
-
-static struct ccu_pll_nb sun8i_h3_pll_cpu_nb = {
-	.common	= &pll_cpux_clk.common,
-	/* copy from pll_cpux_clk */
-	.enable	= BIT(31),
-	.lock	= BIT(28),
-};
-
-static struct ccu_mux_nb sun8i_h3_cpu_nb = {
-	.common		= &cpux_clk.common,
-	.cm		= &cpux_clk.mux,
-	.delay_us	= 1, /* > 8 clock cycles at 24 MHz */
-	.bypass_index	= 1, /* index of 24 MHz oscillator */
-};
-
-static void __init sunxi_h3_h5_ccu_init(struct device_node *node,
-					const struct sunxi_ccu_desc *desc)
-{
-	void __iomem *reg;
-	u32 val;
-
-	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
-	if (IS_ERR(reg)) {
-		pr_err("%pOF: Could not map the clock registers\n", node);
-		return;
-	}
-
-	/* Force the PLL-Audio-1x divider to 1 */
-	val = readl(reg + SUN8I_H3_PLL_AUDIO_REG);
-	val &= ~GENMASK(19, 16);
-	writel(val | (0 << 16), reg + SUN8I_H3_PLL_AUDIO_REG);
-
-	of_sunxi_ccu_probe(node, reg, desc);
-
-	/* Gate then ungate PLL CPU after any rate changes */
-	ccu_pll_notifier_register(&sun8i_h3_pll_cpu_nb);
-
-	/* Reparent CPU during PLL CPU rate changes */
-	ccu_mux_notifier_register(pll_cpux_clk.common.hw.clk,
-				  &sun8i_h3_cpu_nb);
-}
-
-static void __init sun8i_h3_ccu_setup(struct device_node *node)
-{
-	sunxi_h3_h5_ccu_init(node, &sun8i_h3_ccu_desc);
-}
-CLK_OF_DECLARE(sun8i_h3_ccu, "allwinner,sun8i-h3-ccu",
-	       sun8i_h3_ccu_setup);
-
-static void __init sun50i_h5_ccu_setup(struct device_node *node)
-{
-	sunxi_h3_h5_ccu_init(node, &sun50i_h5_ccu_desc);
-}
-CLK_OF_DECLARE(sun50i_h5_ccu, "allwinner,sun50i-h5-ccu",
-	       sun50i_h5_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/ccu-sun8i-h3.h b/drivers/clk/sunxi-ng/ccu-sun8i-h3.h
deleted file mode 100644
index d8c38447e11b..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun8i-h3.h
+++ /dev/null
@@ -1,54 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0-or-later */
-/*
- * Copyright 2016 Maxime Ripard
- *
- * Maxime Ripard <maxime.ripard@free-electrons.com>
- */
-
-#ifndef _CCU_SUN8I_H3_H_
-#define _CCU_SUN8I_H3_H_
-
-#include <dt-bindings/clock/sun8i-h3-ccu.h>
-#include <dt-bindings/reset/sun8i-h3-ccu.h>
-
-#define CLK_PLL_CPUX		0
-#define CLK_PLL_AUDIO_BASE	1
-#define CLK_PLL_AUDIO		2
-#define CLK_PLL_AUDIO_2X	3
-#define CLK_PLL_AUDIO_4X	4
-#define CLK_PLL_AUDIO_8X	5
-
-/* PLL_VIDEO is exported */
-
-#define CLK_PLL_VE		7
-#define CLK_PLL_DDR		8
-
-/* PLL_PERIPH0 exported for PRCM */
-
-#define CLK_PLL_PERIPH0_2X	10
-#define CLK_PLL_GPU		11
-#define CLK_PLL_PERIPH1		12
-#define CLK_PLL_DE		13
-
-/* The CPUX clock is exported */
-
-#define CLK_AXI			15
-#define CLK_AHB1		16
-#define CLK_APB1		17
-#define CLK_APB2		18
-#define CLK_AHB2		19
-
-/* All the bus gates are exported */
-
-/* The first bunch of module clocks are exported */
-
-#define CLK_DRAM		96
-
-/* All the DRAM gates are exported */
-
-/* Some more module clocks are exported */
-
-#define CLK_NUMBER_H3		(CLK_GPU + 1)
-#define CLK_NUMBER_H5		(CLK_BUS_SCR1 + 1)
-
-#endif /* _CCU_SUN8I_H3_H_ */
diff --git a/drivers/clk/sunxi-ng/ccu-sun8i-r.c b/drivers/clk/sunxi-ng/ccu-sun8i-r.c
deleted file mode 100644
index 9e754d1f754a..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun8i-r.c
+++ /dev/null
@@ -1,290 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-only
-/*
- * Copyright (c) 2016 Icenowy Zheng <icenowy@aosc.xyz>
- */
-
-#include <linux/clk-provider.h>
-#include <linux/of_address.h>
-#include <linux/platform_device.h>
-
-#include "ccu_common.h"
-#include "ccu_reset.h"
-
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_mp.h"
-#include "ccu_nm.h"
-
-#include "ccu-sun8i-r.h"
-
-static const struct clk_parent_data ar100_parents[] = {
-	{ .fw_name = "losc" },
-	{ .fw_name = "hosc" },
-	{ .fw_name = "pll-periph" },
-	{ .fw_name = "iosc" },
-};
-
-static const struct ccu_mux_var_prediv ar100_predivs[] = {
-	{ .index = 2, .shift = 8, .width = 5 },
-};
-
-static struct ccu_div ar100_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
-
-	.mux		= {
-		.shift	= 16,
-		.width	= 2,
-
-		.var_predivs	= ar100_predivs,
-		.n_var_predivs	= ARRAY_SIZE(ar100_predivs),
-	},
-
-	.common		= {
-		.reg		= 0x00,
-		.features	= CCU_FEATURE_VARIABLE_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS_DATA("ar100",
-							   ar100_parents,
-							   &ccu_div_ops,
-							   0),
-	},
-};
-
-static CLK_FIXED_FACTOR_HW(ahb0_clk, "ahb0", &ar100_clk.common.hw, 1, 1, 0);
-
-static SUNXI_CCU_M(apb0_clk, "apb0", "ahb0", 0x0c, 0, 2, 0);
-
-/*
- * Define the parent as an array that can be reused to save space
- * instead of having compound literals for each gate. Also have it
- * non-const so we can change it on the A83T.
- */
-static const struct clk_hw *apb0_gate_parent[] = { &apb0_clk.common.hw };
-static SUNXI_CCU_GATE_HWS(apb0_pio_clk,		"apb0-pio",
-			  apb0_gate_parent, 0x28, BIT(0), 0);
-static SUNXI_CCU_GATE_HWS(apb0_ir_clk,		"apb0-ir",
-			  apb0_gate_parent, 0x28, BIT(1), 0);
-static SUNXI_CCU_GATE_HWS(apb0_timer_clk,	"apb0-timer",
-			  apb0_gate_parent, 0x28, BIT(2), 0);
-static SUNXI_CCU_GATE_HWS(apb0_rsb_clk,		"apb0-rsb",
-			  apb0_gate_parent, 0x28, BIT(3), 0);
-static SUNXI_CCU_GATE_HWS(apb0_uart_clk,	"apb0-uart",
-			  apb0_gate_parent, 0x28, BIT(4), 0);
-static SUNXI_CCU_GATE_HWS(apb0_i2c_clk,		"apb0-i2c",
-			  apb0_gate_parent, 0x28, BIT(6), 0);
-static SUNXI_CCU_GATE_HWS(apb0_twd_clk,		"apb0-twd",
-			  apb0_gate_parent, 0x28, BIT(7), 0);
-
-static const char * const r_mod0_default_parents[] = { "osc32k", "osc24M" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(ir_clk, "ir",
-				  r_mod0_default_parents, 0x54,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static const struct clk_parent_data a83t_r_mod0_parents[] = {
-	{ .fw_name = "iosc" },
-	{ .fw_name = "hosc" },
-};
-static const struct ccu_mux_fixed_prediv a83t_ir_predivs[] = {
-	{ .index = 0, .div = 16 },
-};
-static struct ccu_mp a83t_ir_clk = {
-	.enable	= BIT(31),
-
-	.m	= _SUNXI_CCU_DIV(0, 4),
-	.p	= _SUNXI_CCU_DIV(16, 2),
-
-	.mux	= {
-		.shift	= 24,
-		.width	= 2,
-		.fixed_predivs	= a83t_ir_predivs,
-		.n_predivs	= ARRAY_SIZE(a83t_ir_predivs),
-	},
-
-	.common		= {
-		.reg		= 0x54,
-		.features	= CCU_FEATURE_VARIABLE_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS_DATA("ir",
-							   a83t_r_mod0_parents,
-							   &ccu_mp_ops,
-							   0),
-	},
-};
-
-static struct ccu_common *sun8i_a83t_r_ccu_clks[] = {
-	&ar100_clk.common,
-	&apb0_clk.common,
-	&apb0_pio_clk.common,
-	&apb0_ir_clk.common,
-	&apb0_timer_clk.common,
-	&apb0_rsb_clk.common,
-	&apb0_uart_clk.common,
-	&apb0_i2c_clk.common,
-	&apb0_twd_clk.common,
-	&a83t_ir_clk.common,
-};
-
-static struct ccu_common *sun8i_h3_r_ccu_clks[] = {
-	&ar100_clk.common,
-	&apb0_clk.common,
-	&apb0_pio_clk.common,
-	&apb0_ir_clk.common,
-	&apb0_timer_clk.common,
-	&apb0_uart_clk.common,
-	&apb0_i2c_clk.common,
-	&apb0_twd_clk.common,
-	&ir_clk.common,
-};
-
-static struct ccu_common *sun50i_a64_r_ccu_clks[] = {
-	&ar100_clk.common,
-	&apb0_clk.common,
-	&apb0_pio_clk.common,
-	&apb0_ir_clk.common,
-	&apb0_timer_clk.common,
-	&apb0_rsb_clk.common,
-	&apb0_uart_clk.common,
-	&apb0_i2c_clk.common,
-	&apb0_twd_clk.common,
-	&ir_clk.common,
-};
-
-static struct clk_hw_onecell_data sun8i_a83t_r_hw_clks = {
-	.hws	= {
-		[CLK_AR100]		= &ar100_clk.common.hw,
-		[CLK_AHB0]		= &ahb0_clk.hw,
-		[CLK_APB0]		= &apb0_clk.common.hw,
-		[CLK_APB0_PIO]		= &apb0_pio_clk.common.hw,
-		[CLK_APB0_IR]		= &apb0_ir_clk.common.hw,
-		[CLK_APB0_TIMER]	= &apb0_timer_clk.common.hw,
-		[CLK_APB0_RSB]		= &apb0_rsb_clk.common.hw,
-		[CLK_APB0_UART]		= &apb0_uart_clk.common.hw,
-		[CLK_APB0_I2C]		= &apb0_i2c_clk.common.hw,
-		[CLK_APB0_TWD]		= &apb0_twd_clk.common.hw,
-		[CLK_IR]		= &a83t_ir_clk.common.hw,
-	},
-	.num	= CLK_NUMBER,
-};
-
-static struct clk_hw_onecell_data sun8i_h3_r_hw_clks = {
-	.hws	= {
-		[CLK_AR100]		= &ar100_clk.common.hw,
-		[CLK_AHB0]		= &ahb0_clk.hw,
-		[CLK_APB0]		= &apb0_clk.common.hw,
-		[CLK_APB0_PIO]		= &apb0_pio_clk.common.hw,
-		[CLK_APB0_IR]		= &apb0_ir_clk.common.hw,
-		[CLK_APB0_TIMER]	= &apb0_timer_clk.common.hw,
-		[CLK_APB0_UART]		= &apb0_uart_clk.common.hw,
-		[CLK_APB0_I2C]		= &apb0_i2c_clk.common.hw,
-		[CLK_APB0_TWD]		= &apb0_twd_clk.common.hw,
-		[CLK_IR]		= &ir_clk.common.hw,
-	},
-	.num	= CLK_NUMBER,
-};
-
-static struct clk_hw_onecell_data sun50i_a64_r_hw_clks = {
-	.hws	= {
-		[CLK_AR100]		= &ar100_clk.common.hw,
-		[CLK_AHB0]		= &ahb0_clk.hw,
-		[CLK_APB0]		= &apb0_clk.common.hw,
-		[CLK_APB0_PIO]		= &apb0_pio_clk.common.hw,
-		[CLK_APB0_IR]		= &apb0_ir_clk.common.hw,
-		[CLK_APB0_TIMER]	= &apb0_timer_clk.common.hw,
-		[CLK_APB0_RSB]		= &apb0_rsb_clk.common.hw,
-		[CLK_APB0_UART]		= &apb0_uart_clk.common.hw,
-		[CLK_APB0_I2C]		= &apb0_i2c_clk.common.hw,
-		[CLK_APB0_TWD]		= &apb0_twd_clk.common.hw,
-		[CLK_IR]		= &ir_clk.common.hw,
-	},
-	.num	= CLK_NUMBER,
-};
-
-static struct ccu_reset_map sun8i_a83t_r_ccu_resets[] = {
-	[RST_APB0_IR]		=  { 0xb0, BIT(1) },
-	[RST_APB0_TIMER]	=  { 0xb0, BIT(2) },
-	[RST_APB0_RSB]		=  { 0xb0, BIT(3) },
-	[RST_APB0_UART]		=  { 0xb0, BIT(4) },
-	[RST_APB0_I2C]		=  { 0xb0, BIT(6) },
-};
-
-static struct ccu_reset_map sun8i_h3_r_ccu_resets[] = {
-	[RST_APB0_IR]		=  { 0xb0, BIT(1) },
-	[RST_APB0_TIMER]	=  { 0xb0, BIT(2) },
-	[RST_APB0_UART]		=  { 0xb0, BIT(4) },
-	[RST_APB0_I2C]		=  { 0xb0, BIT(6) },
-};
-
-static struct ccu_reset_map sun50i_a64_r_ccu_resets[] = {
-	[RST_APB0_IR]		=  { 0xb0, BIT(1) },
-	[RST_APB0_TIMER]	=  { 0xb0, BIT(2) },
-	[RST_APB0_RSB]		=  { 0xb0, BIT(3) },
-	[RST_APB0_UART]		=  { 0xb0, BIT(4) },
-	[RST_APB0_I2C]		=  { 0xb0, BIT(6) },
-};
-
-static const struct sunxi_ccu_desc sun8i_a83t_r_ccu_desc = {
-	.ccu_clks	= sun8i_a83t_r_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun8i_a83t_r_ccu_clks),
-
-	.hw_clks	= &sun8i_a83t_r_hw_clks,
-
-	.resets		= sun8i_a83t_r_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun8i_a83t_r_ccu_resets),
-};
-
-static const struct sunxi_ccu_desc sun8i_h3_r_ccu_desc = {
-	.ccu_clks	= sun8i_h3_r_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun8i_h3_r_ccu_clks),
-
-	.hw_clks	= &sun8i_h3_r_hw_clks,
-
-	.resets		= sun8i_h3_r_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun8i_h3_r_ccu_resets),
-};
-
-static const struct sunxi_ccu_desc sun50i_a64_r_ccu_desc = {
-	.ccu_clks	= sun50i_a64_r_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun50i_a64_r_ccu_clks),
-
-	.hw_clks	= &sun50i_a64_r_hw_clks,
-
-	.resets		= sun50i_a64_r_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun50i_a64_r_ccu_resets),
-};
-
-static void __init sunxi_r_ccu_init(struct device_node *node,
-				    const struct sunxi_ccu_desc *desc)
-{
-	void __iomem *reg;
-
-	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
-	if (IS_ERR(reg)) {
-		pr_err("%pOF: Could not map the clock registers\n", node);
-		return;
-	}
-
-	of_sunxi_ccu_probe(node, reg, desc);
-}
-
-static void __init sun8i_a83t_r_ccu_setup(struct device_node *node)
-{
-	sunxi_r_ccu_init(node, &sun8i_a83t_r_ccu_desc);
-}
-CLK_OF_DECLARE(sun8i_a83t_r_ccu, "allwinner,sun8i-a83t-r-ccu",
-	       sun8i_a83t_r_ccu_setup);
-
-static void __init sun8i_h3_r_ccu_setup(struct device_node *node)
-{
-	sunxi_r_ccu_init(node, &sun8i_h3_r_ccu_desc);
-}
-CLK_OF_DECLARE(sun8i_h3_r_ccu, "allwinner,sun8i-h3-r-ccu",
-	       sun8i_h3_r_ccu_setup);
-
-static void __init sun50i_a64_r_ccu_setup(struct device_node *node)
-{
-	sunxi_r_ccu_init(node, &sun50i_a64_r_ccu_desc);
-}
-CLK_OF_DECLARE(sun50i_a64_r_ccu, "allwinner,sun50i-a64-r-ccu",
-	       sun50i_a64_r_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/ccu-sun8i-r.h b/drivers/clk/sunxi-ng/ccu-sun8i-r.h
deleted file mode 100644
index 39c72d9276cb..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun8i-r.h
+++ /dev/null
@@ -1,18 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0-or-later */
-/*
- * Copyright 2016 Icenowy <icenowy@aosc.xyz>
- */
-
-#ifndef _CCU_SUN8I_R_H
-#define _CCU_SUN8I_R_H
-
-#include <dt-bindings/clock/sun8i-r-ccu.h>
-#include <dt-bindings/reset/sun8i-r-ccu.h>
-
-/* AHB/APB bus clocks are not exported */
-#define CLK_AHB0	1
-#define CLK_APB0	2
-
-#define CLK_NUMBER	(CLK_IR + 1)
-
-#endif /* _CCU_SUN8I_R_H */
diff --git a/drivers/clk/sunxi-ng/ccu-sun8i-r40.c b/drivers/clk/sunxi-ng/ccu-sun8i-r40.c
deleted file mode 100644
index a2144ee728a0..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun8i-r40.c
+++ /dev/null
@@ -1,1376 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-only
-/*
- * Copyright (c) 2017 Icenowy Zheng <icenowy@aosc.io>
- */
-
-#include <linux/clk-provider.h>
-#include <linux/io.h>
-#include <linux/platform_device.h>
-#include <linux/regmap.h>
-
-#include "ccu_common.h"
-#include "ccu_reset.h"
-
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_mp.h"
-#include "ccu_mult.h"
-#include "ccu_nk.h"
-#include "ccu_nkm.h"
-#include "ccu_nkmp.h"
-#include "ccu_nm.h"
-#include "ccu_phase.h"
-
-#include "ccu-sun8i-r40.h"
-
-/* TODO: The result of N*K is required to be in [10, 88] range. */
-static struct ccu_nkmp pll_cpu_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT(8, 5),
-	.k		= _SUNXI_CCU_MULT(4, 2),
-	.m		= _SUNXI_CCU_DIV(0, 2),
-	.p		= _SUNXI_CCU_DIV_MAX(16, 2, 4),
-	.common		= {
-		.reg		= 0x000,
-		.hw.init	= CLK_HW_INIT("pll-cpu",
-					      "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-/*
- * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
- * the base (2x, 4x and 8x), and one variable divider (the one true
- * pll audio).
- *
- * With sigma-delta modulation for fractional-N on the audio PLL,
- * we have to use specific dividers. This means the variable divider
- * can no longer be used, as the audio codec requests the exact clock
- * rates we support through this mechanism. So we now hard code the
- * variable divider to 1. This means the clock rates will no longer
- * match the clock names.
- */
-#define SUN8I_R40_PLL_AUDIO_REG	0x008
-
-static struct ccu_sdm_setting pll_audio_sdm_table[] = {
-	{ .rate = 22579200, .pattern = 0xc0010d84, .m = 8, .n = 7 },
-	{ .rate = 24576000, .pattern = 0xc000ac02, .m = 14, .n = 14 },
-};
-
-static SUNXI_CCU_NM_WITH_SDM_GATE_LOCK(pll_audio_base_clk, "pll-audio-base",
-				       "osc24M", 0x008,
-				       8, 7,	/* N */
-				       0, 5,	/* M */
-				       pll_audio_sdm_table, BIT(24),
-				       0x284, BIT(31),
-				       BIT(31),	/* gate */
-				       BIT(28),	/* lock */
-				       CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK_MIN_MAX(pll_video0_clk, "pll-video0",
-						"osc24M", 0x0010,
-						192000000,  /* Minimum rate */
-						1008000000, /* Maximum rate */
-						8, 7,       /* N */
-						0, 4,       /* M */
-						BIT(24),    /* frac enable */
-						BIT(25),    /* frac select */
-						270000000,  /* frac rate 0 */
-						297000000,  /* frac rate 1 */
-						BIT(31),    /* gate */
-						BIT(28),    /* lock */
-						CLK_SET_RATE_UNGATE);
-
-/* TODO: The result of N/M is required to be in [8, 25] range. */
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_ve_clk, "pll-ve",
-					"osc24M", 0x0018,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-/* TODO: The result of N*K is required to be in [10, 77] range. */
-static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_ddr0_clk, "pll-ddr0",
-				    "osc24M", 0x020,
-				    8, 5,	/* N */
-				    4, 2,	/* K */
-				    0, 2,	/* M */
-				    BIT(31),	/* gate */
-				    BIT(28),	/* lock */
-				    CLK_SET_RATE_UNGATE);
-
-/* TODO: The result of N*K is required to be in [21, 58] range. */
-static struct ccu_nk pll_periph0_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT(8, 5),
-	.k		= _SUNXI_CCU_MULT(4, 2),
-	.fixed_post_div	= 2,
-	.common		= {
-		.reg		= 0x028,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-periph0", "osc24M",
-					      &ccu_nk_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static struct ccu_div pll_periph0_sata_clk = {
-	.enable		= BIT(24),
-	.div		= _SUNXI_CCU_DIV(0, 2),
-	/*
-	 * The formula of pll-periph0 (1x) is 24MHz*N*K/2, and the formula
-	 * of pll-periph0-sata is 24MHz*N*K/M/6, so the postdiv here is
-	 * 6/2 = 3.
-	 */
-	.fixed_post_div	= 3,
-	.common		= {
-		.reg		= 0x028,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-periph0-sata",
-					      "pll-periph0",
-					      &ccu_div_ops, 0),
-	},
-};
-
-/* TODO: The result of N*K is required to be in [21, 58] range. */
-static struct ccu_nk pll_periph1_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT(8, 5),
-	.k		= _SUNXI_CCU_MULT(4, 2),
-	.fixed_post_div	= 2,
-	.common		= {
-		.reg		= 0x02c,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-periph1", "osc24M",
-					      &ccu_nk_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK_MIN_MAX(pll_video1_clk, "pll-video1",
-						"osc24M", 0x030,
-						192000000,  /* Minimum rate */
-						1008000000, /* Maximum rate */
-						8, 7,       /* N */
-						0, 4,       /* M */
-						BIT(24),    /* frac enable */
-						BIT(25),    /* frac select */
-						270000000,  /* frac rate 0 */
-						297000000,  /* frac rate 1 */
-						BIT(31),    /* gate */
-						BIT(28),    /* lock */
-						CLK_SET_RATE_UNGATE);
-
-static struct ccu_nkm pll_sata_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.n		= _SUNXI_CCU_MULT(8, 5),
-	.k		= _SUNXI_CCU_MULT(4, 2),
-	.m		= _SUNXI_CCU_DIV(0, 2),
-	.fixed_post_div	= 6,
-	.common		= {
-		.reg		= 0x034,
-		.features	= CCU_FEATURE_FIXED_POSTDIV,
-		.hw.init	= CLK_HW_INIT("pll-sata", "osc24M",
-					      &ccu_nkm_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static const char * const pll_sata_out_parents[] = { "pll-sata",
-						     "pll-periph0-sata" };
-static SUNXI_CCU_MUX_WITH_GATE(pll_sata_out_clk, "pll-sata-out",
-			       pll_sata_out_parents, 0x034,
-			       30, 1,	/* mux */
-			       BIT(14),	/* gate */
-			       CLK_SET_RATE_PARENT);
-
-/* TODO: The result of N/M is required to be in [8, 25] range. */
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_gpu_clk, "pll-gpu",
-					"osc24M", 0x038,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-/*
- * The MIPI PLL has 2 modes: "MIPI" and "HDMI".
- *
- * The MIPI mode is a standard NKM-style clock. The HDMI mode is an
- * integer / fractional clock with switchable multipliers and dividers.
- * This is not supported here. We hardcode the PLL to MIPI mode.
- *
- * TODO: In the MIPI mode, M/N is required to be equal or lesser than 3,
- * which cannot be implemented now.
- */
-#define SUN8I_R40_PLL_MIPI_REG	0x040
-
-static const char * const pll_mipi_parents[] = { "pll-video0" };
-static struct ccu_nkm pll_mipi_clk = {
-	.enable	= BIT(31) | BIT(23) | BIT(22),
-	.lock	= BIT(28),
-	.n	= _SUNXI_CCU_MULT(8, 4),
-	.k	= _SUNXI_CCU_MULT_MIN(4, 2, 2),
-	.m	= _SUNXI_CCU_DIV(0, 4),
-	.mux	= _SUNXI_CCU_MUX(21, 1),
-	.common	= {
-		.reg		= 0x040,
-		.hw.init	= CLK_HW_INIT_PARENTS("pll-mipi",
-						      pll_mipi_parents,
-						      &ccu_nkm_ops,
-						      CLK_SET_RATE_UNGATE)
-	},
-};
-
-/* TODO: The result of N/M is required to be in [8, 25] range. */
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_de_clk, "pll-de",
-					"osc24M", 0x048,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-/* TODO: The N factor is required to be in [16, 75] range. */
-static SUNXI_CCU_NM_WITH_GATE_LOCK(pll_ddr1_clk, "pll-ddr1",
-				   "osc24M", 0x04c,
-				   8, 7,	/* N */
-				   0, 2,	/* M */
-				   BIT(31),	/* gate */
-				   BIT(28),	/* lock */
-				   CLK_SET_RATE_UNGATE);
-
-static const char * const cpu_parents[] = { "osc32k", "osc24M",
-					     "pll-cpu", "pll-cpu" };
-static SUNXI_CCU_MUX(cpu_clk, "cpu", cpu_parents,
-		     0x050, 16, 2, CLK_IS_CRITICAL | CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M(axi_clk, "axi", "cpu", 0x050, 0, 2, 0);
-
-static const char * const ahb1_parents[] = { "osc32k", "osc24M",
-					     "axi", "pll-periph0" };
-static const struct ccu_mux_var_prediv ahb1_predivs[] = {
-	{ .index = 3, .shift = 6, .width = 2 },
-};
-static struct ccu_div ahb1_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
-
-	.mux		= {
-		.shift	= 12,
-		.width	= 2,
-
-		.var_predivs	= ahb1_predivs,
-		.n_var_predivs	= ARRAY_SIZE(ahb1_predivs),
-	},
-
-	.common		= {
-		.reg		= 0x054,
-		.features	= CCU_FEATURE_VARIABLE_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("ahb1",
-						      ahb1_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static struct clk_div_table apb1_div_table[] = {
-	{ .val = 0, .div = 2 },
-	{ .val = 1, .div = 2 },
-	{ .val = 2, .div = 4 },
-	{ .val = 3, .div = 8 },
-	{ /* Sentinel */ },
-};
-static SUNXI_CCU_DIV_TABLE(apb1_clk, "apb1", "ahb1",
-			   0x054, 8, 2, apb1_div_table, 0);
-
-static const char * const apb2_parents[] = { "osc32k", "osc24M",
-					     "pll-periph0-2x",
-					     "pll-periph0-2x" };
-static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", apb2_parents, 0x058,
-			     0, 5,	/* M */
-			     16, 2,	/* P */
-			     24, 2,	/* mux */
-			     0);
-
-static SUNXI_CCU_GATE(bus_mipi_dsi_clk,	"bus-mipi-dsi",	"ahb1",
-		      0x060, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_ce_clk,	"bus-ce",	"ahb1",
-		      0x060, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_dma_clk,	"bus-dma",	"ahb1",
-		      0x060, BIT(6), 0);
-static SUNXI_CCU_GATE(bus_mmc0_clk,	"bus-mmc0",	"ahb1",
-		      0x060, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_mmc1_clk,	"bus-mmc1",	"ahb1",
-		      0x060, BIT(9), 0);
-static SUNXI_CCU_GATE(bus_mmc2_clk,	"bus-mmc2",	"ahb1",
-		      0x060, BIT(10), 0);
-static SUNXI_CCU_GATE(bus_mmc3_clk,	"bus-mmc3",	"ahb1",
-		      0x060, BIT(11), 0);
-static SUNXI_CCU_GATE(bus_nand_clk,	"bus-nand",	"ahb1",
-		      0x060, BIT(13), 0);
-static SUNXI_CCU_GATE(bus_dram_clk,	"bus-dram",	"ahb1",
-		      0x060, BIT(14), 0);
-static SUNXI_CCU_GATE(bus_emac_clk,	"bus-emac",	"ahb1",
-		      0x060, BIT(17), 0);
-static SUNXI_CCU_GATE(bus_ts_clk,	"bus-ts",	"ahb1",
-		      0x060, BIT(18), 0);
-static SUNXI_CCU_GATE(bus_hstimer_clk,	"bus-hstimer",	"ahb1",
-		      0x060, BIT(19), 0);
-static SUNXI_CCU_GATE(bus_spi0_clk,	"bus-spi0",	"ahb1",
-		      0x060, BIT(20), 0);
-static SUNXI_CCU_GATE(bus_spi1_clk,	"bus-spi1",	"ahb1",
-		      0x060, BIT(21), 0);
-static SUNXI_CCU_GATE(bus_spi2_clk,	"bus-spi2",	"ahb1",
-		      0x060, BIT(22), 0);
-static SUNXI_CCU_GATE(bus_spi3_clk,	"bus-spi3",	"ahb1",
-		      0x060, BIT(23), 0);
-static SUNXI_CCU_GATE(bus_sata_clk,	"bus-sata",	"ahb1",
-		      0x060, BIT(24), 0);
-static SUNXI_CCU_GATE(bus_otg_clk,	"bus-otg",	"ahb1",
-		      0x060, BIT(25), 0);
-static SUNXI_CCU_GATE(bus_ehci0_clk,	"bus-ehci0",	"ahb1",
-		      0x060, BIT(26), 0);
-static SUNXI_CCU_GATE(bus_ehci1_clk,	"bus-ehci1",	"ahb1",
-		      0x060, BIT(27), 0);
-static SUNXI_CCU_GATE(bus_ehci2_clk,	"bus-ehci2",	"ahb1",
-		      0x060, BIT(28), 0);
-static SUNXI_CCU_GATE(bus_ohci0_clk,	"bus-ohci0",	"ahb1",
-		      0x060, BIT(29), 0);
-static SUNXI_CCU_GATE(bus_ohci1_clk,	"bus-ohci1",	"ahb1",
-		      0x060, BIT(30), 0);
-static SUNXI_CCU_GATE(bus_ohci2_clk,	"bus-ohci2",	"ahb1",
-		      0x060, BIT(31), 0);
-
-static SUNXI_CCU_GATE(bus_ve_clk,	"bus-ve",	"ahb1",
-		      0x064, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_mp_clk,	"bus-mp",	"ahb1",
-		      0x064, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_deinterlace_clk,	"bus-deinterlace",	"ahb1",
-		      0x064, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_csi0_clk,	"bus-csi0",	"ahb1",
-		      0x064, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_csi1_clk,	"bus-csi1",	"ahb1",
-		      0x064, BIT(9), 0);
-static SUNXI_CCU_GATE(bus_hdmi0_clk,	"bus-hdmi0",	"ahb1",
-		      0x064, BIT(10), 0);
-static SUNXI_CCU_GATE(bus_hdmi1_clk,	"bus-hdmi1",	"ahb1",
-		      0x064, BIT(11), 0);
-static SUNXI_CCU_GATE(bus_de_clk,	"bus-de",	"ahb1",
-		      0x064, BIT(12), 0);
-static SUNXI_CCU_GATE(bus_tve0_clk,	"bus-tve0",	"ahb1",
-		      0x064, BIT(13), 0);
-static SUNXI_CCU_GATE(bus_tve1_clk,	"bus-tve1",	"ahb1",
-		      0x064, BIT(14), 0);
-static SUNXI_CCU_GATE(bus_tve_top_clk,	"bus-tve-top",	"ahb1",
-		      0x064, BIT(15), 0);
-static SUNXI_CCU_GATE(bus_gmac_clk,	"bus-gmac",	"ahb1",
-		      0x064, BIT(17), 0);
-static SUNXI_CCU_GATE(bus_gpu_clk,	"bus-gpu",	"ahb1",
-		      0x064, BIT(20), 0);
-static SUNXI_CCU_GATE(bus_tvd0_clk,	"bus-tvd0",	"ahb1",
-		      0x064, BIT(21), 0);
-static SUNXI_CCU_GATE(bus_tvd1_clk,	"bus-tvd1",	"ahb1",
-		      0x064, BIT(22), 0);
-static SUNXI_CCU_GATE(bus_tvd2_clk,	"bus-tvd2",	"ahb1",
-		      0x064, BIT(23), 0);
-static SUNXI_CCU_GATE(bus_tvd3_clk,	"bus-tvd3",	"ahb1",
-		      0x064, BIT(24), 0);
-static SUNXI_CCU_GATE(bus_tvd_top_clk,	"bus-tvd-top",	"ahb1",
-		      0x064, BIT(25), 0);
-static SUNXI_CCU_GATE(bus_tcon_lcd0_clk,	"bus-tcon-lcd0",	"ahb1",
-		      0x064, BIT(26), 0);
-static SUNXI_CCU_GATE(bus_tcon_lcd1_clk,	"bus-tcon-lcd1",	"ahb1",
-		      0x064, BIT(27), 0);
-static SUNXI_CCU_GATE(bus_tcon_tv0_clk,	"bus-tcon-tv0",	"ahb1",
-		      0x064, BIT(28), 0);
-static SUNXI_CCU_GATE(bus_tcon_tv1_clk,	"bus-tcon-tv1",	"ahb1",
-		      0x064, BIT(29), 0);
-static SUNXI_CCU_GATE(bus_tcon_top_clk,	"bus-tcon-top",	"ahb1",
-		      0x064, BIT(30), 0);
-
-static SUNXI_CCU_GATE(bus_codec_clk,	"bus-codec",	"apb1",
-		      0x068, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_spdif_clk,	"bus-spdif",	"apb1",
-		      0x068, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_ac97_clk,	"bus-ac97",	"apb1",
-		      0x068, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_pio_clk,	"bus-pio",	"apb1",
-		      0x068, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_ir0_clk,	"bus-ir0",	"apb1",
-		      0x068, BIT(6), 0);
-static SUNXI_CCU_GATE(bus_ir1_clk,	"bus-ir1",	"apb1",
-		      0x068, BIT(7), 0);
-static SUNXI_CCU_GATE(bus_ths_clk,	"bus-ths",	"apb1",
-		      0x068, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_keypad_clk,	"bus-keypad",	"apb1",
-		      0x068, BIT(10), 0);
-static SUNXI_CCU_GATE(bus_i2s0_clk,	"bus-i2s0",	"apb1",
-		      0x068, BIT(12), 0);
-static SUNXI_CCU_GATE(bus_i2s1_clk,	"bus-i2s1",	"apb1",
-		      0x068, BIT(13), 0);
-static SUNXI_CCU_GATE(bus_i2s2_clk,	"bus-i2s2",	"apb1",
-		      0x068, BIT(14), 0);
-
-static SUNXI_CCU_GATE(bus_i2c0_clk,	"bus-i2c0",	"apb2",
-		      0x06c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_i2c1_clk,	"bus-i2c1",	"apb2",
-		      0x06c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_i2c2_clk,	"bus-i2c2",	"apb2",
-		      0x06c, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_i2c3_clk,	"bus-i2c3",	"apb2",
-		      0x06c, BIT(3), 0);
-/*
- * In datasheet here's "Reserved", however the gate exists in BSP soucre
- * code.
- */
-static SUNXI_CCU_GATE(bus_can_clk,	"bus-can",	"apb2",
-		      0x06c, BIT(4), 0);
-static SUNXI_CCU_GATE(bus_scr_clk,	"bus-scr",	"apb2",
-		      0x06c, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_ps20_clk,	"bus-ps20",	"apb2",
-		      0x06c, BIT(6), 0);
-static SUNXI_CCU_GATE(bus_ps21_clk,	"bus-ps21",	"apb2",
-		      0x06c, BIT(7), 0);
-static SUNXI_CCU_GATE(bus_i2c4_clk,	"bus-i2c4",	"apb2",
-		      0x06c, BIT(15), 0);
-static SUNXI_CCU_GATE(bus_uart0_clk,	"bus-uart0",	"apb2",
-		      0x06c, BIT(16), 0);
-static SUNXI_CCU_GATE(bus_uart1_clk,	"bus-uart1",	"apb2",
-		      0x06c, BIT(17), 0);
-static SUNXI_CCU_GATE(bus_uart2_clk,	"bus-uart2",	"apb2",
-		      0x06c, BIT(18), 0);
-static SUNXI_CCU_GATE(bus_uart3_clk,	"bus-uart3",	"apb2",
-		      0x06c, BIT(19), 0);
-static SUNXI_CCU_GATE(bus_uart4_clk,	"bus-uart4",	"apb2",
-		      0x06c, BIT(20), 0);
-static SUNXI_CCU_GATE(bus_uart5_clk,	"bus-uart5",	"apb2",
-		      0x06c, BIT(21), 0);
-static SUNXI_CCU_GATE(bus_uart6_clk,	"bus-uart6",	"apb2",
-		      0x06c, BIT(22), 0);
-static SUNXI_CCU_GATE(bus_uart7_clk,	"bus-uart7",	"apb2",
-		      0x06c, BIT(23), 0);
-
-static SUNXI_CCU_GATE(bus_dbg_clk,	"bus-dbg",	"ahb1",
-		      0x070, BIT(7), 0);
-
-static const char * const ths_parents[] = { "osc24M" };
-static struct ccu_div ths_clk = {
-	.enable	= BIT(31),
-	.div	= _SUNXI_CCU_DIV_FLAGS(0, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux	= _SUNXI_CCU_MUX(24, 2),
-	.common	= {
-		.reg		= 0x074,
-		.hw.init	= CLK_HW_INIT_PARENTS("ths",
-						      ths_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static const char * const mod0_default_parents[] = { "osc24M", "pll-periph0",
-						     "pll-periph1" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand_clk, "nand", mod0_default_parents, 0x080,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents, 0x088,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents, 0x08c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents, 0x090,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc3_clk, "mmc3", mod0_default_parents, 0x094,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static const char * const ts_parents[] = { "osc24M", "pll-periph0", };
-static SUNXI_CCU_MP_WITH_MUX_GATE(ts_clk, "ts", ts_parents, 0x098,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 4,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static const char * const ce_parents[] = { "osc24M", "pll-periph0-2x",
-					   "pll-periph1-2x" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(ce_clk, "ce", ce_parents, 0x09c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents, 0x0a0,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents, 0x0a4,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi2_clk, "spi2", mod0_default_parents, 0x0a8,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi3_clk, "spi3", mod0_default_parents, 0x0ac,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static const char * const i2s_parents[] = { "pll-audio-8x", "pll-audio-4x",
-					    "pll-audio-2x", "pll-audio" };
-static SUNXI_CCU_MUX_WITH_GATE(i2s0_clk, "i2s0", i2s_parents,
-			       0x0b0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_MUX_WITH_GATE(i2s1_clk, "i2s1", i2s_parents,
-			       0x0b4, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_MUX_WITH_GATE(i2s2_clk, "i2s2", i2s_parents,
-			       0x0b8, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_MUX_WITH_GATE(ac97_clk, "ac97", i2s_parents,
-			       0x0bc, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_MUX_WITH_GATE(spdif_clk, "spdif", i2s_parents,
-			       0x0c0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static const char * const keypad_parents[] = { "osc24M", "osc32k" };
-static const u8 keypad_table[] = { 0, 2 };
-static struct ccu_mp keypad_clk = {
-	.enable	= BIT(31),
-	.m	= _SUNXI_CCU_DIV(0, 5),
-	.p	= _SUNXI_CCU_DIV(16, 2),
-	.mux	= _SUNXI_CCU_MUX_TABLE(24, 2, keypad_table),
-	.common	= {
-		.reg		= 0x0c4,
-		.hw.init	= CLK_HW_INIT_PARENTS("keypad",
-						      keypad_parents,
-						      &ccu_mp_ops,
-						      0),
-	}
-};
-
-static const char * const sata_parents[] = { "pll-sata-out", "sata-ext" };
-static SUNXI_CCU_MUX_WITH_GATE(sata_clk, "sata", sata_parents,
-			       0x0c8, 24, 1, BIT(31), CLK_SET_RATE_PARENT);
-
-/*
- * There are 3 OHCI 12M clock source selection bits in this register.
- * We will force them to 0 (12M divided from 48M).
- */
-#define SUN8I_R40_USB_CLK_REG	0x0cc
-
-static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"osc24M",
-		      0x0cc, BIT(8), 0);
-static SUNXI_CCU_GATE(usb_phy1_clk,	"usb-phy1",	"osc24M",
-		      0x0cc, BIT(9), 0);
-static SUNXI_CCU_GATE(usb_phy2_clk,	"usb-phy2",	"osc24M",
-		      0x0cc, BIT(10), 0);
-static SUNXI_CCU_GATE(usb_ohci0_clk,	"usb-ohci0",	"osc12M",
-		      0x0cc, BIT(16), 0);
-static SUNXI_CCU_GATE(usb_ohci1_clk,	"usb-ohci1",	"osc12M",
-		      0x0cc, BIT(17), 0);
-static SUNXI_CCU_GATE(usb_ohci2_clk,	"usb-ohci2",	"osc12M",
-		      0x0cc, BIT(18), 0);
-
-static const char * const ir_parents[] = { "osc24M", "pll-periph0",
-					   "pll-periph1", "osc32k" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(ir0_clk, "ir0", ir_parents, 0x0d0,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(ir1_clk, "ir1", ir_parents, 0x0d4,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static const char * const dram_parents[] = { "pll-ddr0", "pll-ddr1" };
-static SUNXI_CCU_M_WITH_MUX(dram_clk, "dram", dram_parents,
-			    0x0f4, 0, 2, 20, 2, CLK_IS_CRITICAL);
-
-static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"dram",
-		      0x100, BIT(0), 0);
-static SUNXI_CCU_GATE(dram_csi0_clk,	"dram-csi0",	"dram",
-		      0x100, BIT(1), 0);
-static SUNXI_CCU_GATE(dram_csi1_clk,	"dram-csi1",	"dram",
-		      0x100, BIT(2), 0);
-static SUNXI_CCU_GATE(dram_ts_clk,	"dram-ts",	"dram",
-		      0x100, BIT(3), 0);
-static SUNXI_CCU_GATE(dram_tvd_clk,	"dram-tvd",	"dram",
-		      0x100, BIT(4), 0);
-static SUNXI_CCU_GATE(dram_mp_clk,	"dram-mp",	"dram",
-		      0x100, BIT(5), 0);
-static SUNXI_CCU_GATE(dram_deinterlace_clk,	"dram-deinterlace",	"dram",
-		      0x100, BIT(6), 0);
-
-static const char * const de_parents[] = { "pll-periph0-2x", "pll-de" };
-static SUNXI_CCU_M_WITH_MUX_GATE(de_clk, "de", de_parents,
-				 0x104, 0, 4, 24, 3, BIT(31),
-				 CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M_WITH_MUX_GATE(mp_clk, "mp", de_parents,
-				 0x108, 0, 4, 24, 3, BIT(31), 0);
-
-static const char * const tcon_parents[] = { "pll-video0", "pll-video1",
-					     "pll-video0-2x", "pll-video1-2x",
-					     "pll-mipi" };
-static SUNXI_CCU_MUX_WITH_GATE(tcon_lcd0_clk, "tcon-lcd0", tcon_parents,
-			       0x110, 24, 3, BIT(31), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_MUX_WITH_GATE(tcon_lcd1_clk, "tcon-lcd1", tcon_parents,
-			       0x114, 24, 3, BIT(31), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M_WITH_MUX_GATE(tcon_tv0_clk, "tcon-tv0", tcon_parents,
-				 0x118, 0, 4, 24, 3, BIT(31),
-				 CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M_WITH_MUX_GATE(tcon_tv1_clk, "tcon-tv1", tcon_parents,
-				 0x11c, 0, 4, 24, 3, BIT(31),
-				 CLK_SET_RATE_PARENT);
-
-static const char * const deinterlace_parents[] = { "pll-periph0",
-						    "pll-periph1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(deinterlace_clk, "deinterlace",
-				 deinterlace_parents, 0x124, 0, 4, 24, 3,
-				 BIT(31), 0);
-
-static const char * const csi_mclk_parents[] = { "osc24M", "pll-video1",
-						 "pll-periph1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(csi1_mclk_clk, "csi1-mclk", csi_mclk_parents,
-				 0x130, 0, 5, 8, 3, BIT(15), 0);
-
-static const char * const csi_sclk_parents[] = { "pll-periph0", "pll-periph1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(csi_sclk_clk, "csi-sclk", csi_sclk_parents,
-				 0x134, 16, 4, 24, 3, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(csi0_mclk_clk, "csi0-mclk", csi_mclk_parents,
-				 0x134, 0, 5, 8, 3, BIT(15), 0);
-
-static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve",
-			     0x13c, 16, 3, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(codec_clk,	"codec",	"pll-audio",
-		      0x140, BIT(31), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_GATE(avs_clk,		"avs",		"osc24M",
-		      0x144, BIT(31), 0);
-
-static const char * const hdmi_parents[] = { "pll-video0", "pll-video1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(hdmi_clk, "hdmi", hdmi_parents,
-				 0x150, 0, 4, 24, 2, BIT(31),
-				 CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(hdmi_slow_clk,	"hdmi-slow",	"osc24M",
-		      0x154, BIT(31), 0);
-
-/*
- * In the SoC's user manual, the P factor is mentioned, but not used in
- * the frequency formula.
- *
- * Here the factor is included, according to the BSP kernel source,
- * which contains the P factor of this clock.
- */
-static const char * const mbus_parents[] = { "osc24M", "pll-periph0-2x",
-					     "pll-ddr0" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents, 0x15c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  CLK_IS_CRITICAL);
-
-static const char * const dsi_dphy_parents[] = { "pll-video0", "pll-video1",
-						 "pll-periph0" };
-static SUNXI_CCU_M_WITH_MUX_GATE(dsi_dphy_clk, "dsi-dphy", dsi_dphy_parents,
-				 0x168, 0, 4, 8, 2, BIT(15), 0);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(tve0_clk, "tve0", tcon_parents,
-				 0x180, 0, 4, 24, 3, BIT(31), 0);
-static SUNXI_CCU_M_WITH_MUX_GATE(tve1_clk, "tve1", tcon_parents,
-				 0x184, 0, 4, 24, 3, BIT(31), 0);
-
-static const char * const tvd_parents[] = { "pll-video0", "pll-video1",
-					    "pll-video0-2x", "pll-video1-2x" };
-static SUNXI_CCU_M_WITH_MUX_GATE(tvd0_clk, "tvd0", tvd_parents,
-				 0x188, 0, 4, 24, 3, BIT(31), 0);
-static SUNXI_CCU_M_WITH_MUX_GATE(tvd1_clk, "tvd1", tvd_parents,
-				 0x18c, 0, 4, 24, 3, BIT(31), 0);
-static SUNXI_CCU_M_WITH_MUX_GATE(tvd2_clk, "tvd2", tvd_parents,
-				 0x190, 0, 4, 24, 3, BIT(31), 0);
-static SUNXI_CCU_M_WITH_MUX_GATE(tvd3_clk, "tvd3", tvd_parents,
-				 0x194, 0, 4, 24, 3, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_GATE(gpu_clk, "gpu", "pll-gpu",
-			     0x1a0, 0, 3, BIT(31), CLK_SET_RATE_PARENT);
-
-static const char * const out_parents[] = { "osc24M", "osc32k", "osc24M" };
-static const struct ccu_mux_fixed_prediv out_predivs[] = {
-	{ .index = 0, .div = 750, },
-};
-
-static struct ccu_mp outa_clk = {
-	.enable	= BIT(31),
-	.m	= _SUNXI_CCU_DIV(8, 5),
-	.p	= _SUNXI_CCU_DIV(20, 2),
-	.mux	= {
-		.shift		= 24,
-		.width		= 2,
-		.fixed_predivs	= out_predivs,
-		.n_predivs	= ARRAY_SIZE(out_predivs),
-	},
-	.common	= {
-		.reg		= 0x1f0,
-		.features	= CCU_FEATURE_FIXED_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("outa", out_parents,
-						      &ccu_mp_ops,
-						      CLK_SET_RATE_PARENT),
-	}
-};
-
-static struct ccu_mp outb_clk = {
-	.enable	= BIT(31),
-	.m	= _SUNXI_CCU_DIV(8, 5),
-	.p	= _SUNXI_CCU_DIV(20, 2),
-	.mux	= {
-		.shift		= 24,
-		.width		= 2,
-		.fixed_predivs	= out_predivs,
-		.n_predivs	= ARRAY_SIZE(out_predivs),
-	},
-	.common	= {
-		.reg		= 0x1f4,
-		.features	= CCU_FEATURE_FIXED_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("outb", out_parents,
-						      &ccu_mp_ops,
-						      CLK_SET_RATE_PARENT),
-	}
-};
-
-static struct ccu_common *sun8i_r40_ccu_clks[] = {
-	&pll_cpu_clk.common,
-	&pll_audio_base_clk.common,
-	&pll_video0_clk.common,
-	&pll_ve_clk.common,
-	&pll_ddr0_clk.common,
-	&pll_periph0_clk.common,
-	&pll_periph0_sata_clk.common,
-	&pll_periph1_clk.common,
-	&pll_video1_clk.common,
-	&pll_sata_clk.common,
-	&pll_sata_out_clk.common,
-	&pll_gpu_clk.common,
-	&pll_mipi_clk.common,
-	&pll_de_clk.common,
-	&pll_ddr1_clk.common,
-	&cpu_clk.common,
-	&axi_clk.common,
-	&ahb1_clk.common,
-	&apb1_clk.common,
-	&apb2_clk.common,
-	&bus_mipi_dsi_clk.common,
-	&bus_ce_clk.common,
-	&bus_dma_clk.common,
-	&bus_mmc0_clk.common,
-	&bus_mmc1_clk.common,
-	&bus_mmc2_clk.common,
-	&bus_mmc3_clk.common,
-	&bus_nand_clk.common,
-	&bus_dram_clk.common,
-	&bus_emac_clk.common,
-	&bus_ts_clk.common,
-	&bus_hstimer_clk.common,
-	&bus_spi0_clk.common,
-	&bus_spi1_clk.common,
-	&bus_spi2_clk.common,
-	&bus_spi3_clk.common,
-	&bus_sata_clk.common,
-	&bus_otg_clk.common,
-	&bus_ehci0_clk.common,
-	&bus_ehci1_clk.common,
-	&bus_ehci2_clk.common,
-	&bus_ohci0_clk.common,
-	&bus_ohci1_clk.common,
-	&bus_ohci2_clk.common,
-	&bus_ve_clk.common,
-	&bus_mp_clk.common,
-	&bus_deinterlace_clk.common,
-	&bus_csi0_clk.common,
-	&bus_csi1_clk.common,
-	&bus_hdmi0_clk.common,
-	&bus_hdmi1_clk.common,
-	&bus_de_clk.common,
-	&bus_tve0_clk.common,
-	&bus_tve1_clk.common,
-	&bus_tve_top_clk.common,
-	&bus_gmac_clk.common,
-	&bus_gpu_clk.common,
-	&bus_tvd0_clk.common,
-	&bus_tvd1_clk.common,
-	&bus_tvd2_clk.common,
-	&bus_tvd3_clk.common,
-	&bus_tvd_top_clk.common,
-	&bus_tcon_lcd0_clk.common,
-	&bus_tcon_lcd1_clk.common,
-	&bus_tcon_tv0_clk.common,
-	&bus_tcon_tv1_clk.common,
-	&bus_tcon_top_clk.common,
-	&bus_codec_clk.common,
-	&bus_spdif_clk.common,
-	&bus_ac97_clk.common,
-	&bus_pio_clk.common,
-	&bus_ir0_clk.common,
-	&bus_ir1_clk.common,
-	&bus_ths_clk.common,
-	&bus_keypad_clk.common,
-	&bus_i2s0_clk.common,
-	&bus_i2s1_clk.common,
-	&bus_i2s2_clk.common,
-	&bus_i2c0_clk.common,
-	&bus_i2c1_clk.common,
-	&bus_i2c2_clk.common,
-	&bus_i2c3_clk.common,
-	&bus_can_clk.common,
-	&bus_scr_clk.common,
-	&bus_ps20_clk.common,
-	&bus_ps21_clk.common,
-	&bus_i2c4_clk.common,
-	&bus_uart0_clk.common,
-	&bus_uart1_clk.common,
-	&bus_uart2_clk.common,
-	&bus_uart3_clk.common,
-	&bus_uart4_clk.common,
-	&bus_uart5_clk.common,
-	&bus_uart6_clk.common,
-	&bus_uart7_clk.common,
-	&bus_dbg_clk.common,
-	&ths_clk.common,
-	&nand_clk.common,
-	&mmc0_clk.common,
-	&mmc1_clk.common,
-	&mmc2_clk.common,
-	&mmc3_clk.common,
-	&ts_clk.common,
-	&ce_clk.common,
-	&spi0_clk.common,
-	&spi1_clk.common,
-	&spi2_clk.common,
-	&spi3_clk.common,
-	&i2s0_clk.common,
-	&i2s1_clk.common,
-	&i2s2_clk.common,
-	&ac97_clk.common,
-	&spdif_clk.common,
-	&keypad_clk.common,
-	&sata_clk.common,
-	&usb_phy0_clk.common,
-	&usb_phy1_clk.common,
-	&usb_phy2_clk.common,
-	&usb_ohci0_clk.common,
-	&usb_ohci1_clk.common,
-	&usb_ohci2_clk.common,
-	&ir0_clk.common,
-	&ir1_clk.common,
-	&dram_clk.common,
-	&dram_ve_clk.common,
-	&dram_csi0_clk.common,
-	&dram_csi1_clk.common,
-	&dram_ts_clk.common,
-	&dram_tvd_clk.common,
-	&dram_mp_clk.common,
-	&dram_deinterlace_clk.common,
-	&de_clk.common,
-	&mp_clk.common,
-	&tcon_lcd0_clk.common,
-	&tcon_lcd1_clk.common,
-	&tcon_tv0_clk.common,
-	&tcon_tv1_clk.common,
-	&deinterlace_clk.common,
-	&csi1_mclk_clk.common,
-	&csi_sclk_clk.common,
-	&csi0_mclk_clk.common,
-	&ve_clk.common,
-	&codec_clk.common,
-	&avs_clk.common,
-	&hdmi_clk.common,
-	&hdmi_slow_clk.common,
-	&mbus_clk.common,
-	&dsi_dphy_clk.common,
-	&tve0_clk.common,
-	&tve1_clk.common,
-	&tvd0_clk.common,
-	&tvd1_clk.common,
-	&tvd2_clk.common,
-	&tvd3_clk.common,
-	&gpu_clk.common,
-	&outa_clk.common,
-	&outb_clk.common,
-};
-
-/* Fixed Factor clocks */
-static CLK_FIXED_FACTOR_FW_NAME(osc12M_clk, "osc12M", "hosc", 2, 1, 0);
-
-static const struct clk_hw *clk_parent_pll_audio[] = {
-	&pll_audio_base_clk.common.hw
-};
-
-/* We hardcode the divider to 1 for now */
-static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
-			    clk_parent_pll_audio,
-			    1, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
-			    clk_parent_pll_audio,
-			    2, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
-			    clk_parent_pll_audio,
-			    1, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
-			    clk_parent_pll_audio,
-			    1, 2, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HW(pll_periph0_2x_clk, "pll-periph0-2x",
-			   &pll_periph0_clk.common.hw,
-			   1, 2, 0);
-static CLK_FIXED_FACTOR_HW(pll_periph1_2x_clk, "pll-periph1-2x",
-			   &pll_periph1_clk.common.hw,
-			   1, 2, 0);
-static CLK_FIXED_FACTOR_HW(pll_video0_2x_clk, "pll-video0-2x",
-			   &pll_video0_clk.common.hw,
-			   1, 2, 0);
-static CLK_FIXED_FACTOR_HW(pll_video1_2x_clk, "pll-video1-2x",
-			   &pll_video1_clk.common.hw,
-			   1, 2, 0);
-
-static struct clk_hw_onecell_data sun8i_r40_hw_clks = {
-	.hws	= {
-		[CLK_OSC_12M]		= &osc12M_clk.hw,
-		[CLK_PLL_CPU]		= &pll_cpu_clk.common.hw,
-		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
-		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
-		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
-		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
-		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
-		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
-		[CLK_PLL_VIDEO0_2X]	= &pll_video0_2x_clk.hw,
-		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
-		[CLK_PLL_DDR0]		= &pll_ddr0_clk.common.hw,
-		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
-		[CLK_PLL_PERIPH0_SATA]	= &pll_periph0_sata_clk.common.hw,
-		[CLK_PLL_PERIPH0_2X]	= &pll_periph0_2x_clk.hw,
-		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
-		[CLK_PLL_PERIPH1_2X]	= &pll_periph1_2x_clk.hw,
-		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
-		[CLK_PLL_VIDEO1_2X]	= &pll_video1_2x_clk.hw,
-		[CLK_PLL_SATA]		= &pll_sata_clk.common.hw,
-		[CLK_PLL_SATA_OUT]	= &pll_sata_out_clk.common.hw,
-		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
-		[CLK_PLL_MIPI]		= &pll_mipi_clk.common.hw,
-		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
-		[CLK_PLL_DDR1]		= &pll_ddr1_clk.common.hw,
-		[CLK_CPU]		= &cpu_clk.common.hw,
-		[CLK_AXI]		= &axi_clk.common.hw,
-		[CLK_AHB1]		= &ahb1_clk.common.hw,
-		[CLK_APB1]		= &apb1_clk.common.hw,
-		[CLK_APB2]		= &apb2_clk.common.hw,
-		[CLK_BUS_MIPI_DSI]	= &bus_mipi_dsi_clk.common.hw,
-		[CLK_BUS_CE]		= &bus_ce_clk.common.hw,
-		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
-		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
-		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
-		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
-		[CLK_BUS_MMC3]		= &bus_mmc3_clk.common.hw,
-		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
-		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
-		[CLK_BUS_EMAC]		= &bus_emac_clk.common.hw,
-		[CLK_BUS_TS]		= &bus_ts_clk.common.hw,
-		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
-		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
-		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
-		[CLK_BUS_SPI2]		= &bus_spi2_clk.common.hw,
-		[CLK_BUS_SPI3]		= &bus_spi3_clk.common.hw,
-		[CLK_BUS_SATA]		= &bus_sata_clk.common.hw,
-		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
-		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
-		[CLK_BUS_EHCI1]		= &bus_ehci1_clk.common.hw,
-		[CLK_BUS_EHCI2]		= &bus_ehci2_clk.common.hw,
-		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
-		[CLK_BUS_OHCI1]		= &bus_ohci1_clk.common.hw,
-		[CLK_BUS_OHCI2]		= &bus_ohci2_clk.common.hw,
-		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
-		[CLK_BUS_MP]		= &bus_mp_clk.common.hw,
-		[CLK_BUS_DEINTERLACE]	= &bus_deinterlace_clk.common.hw,
-		[CLK_BUS_CSI0]		= &bus_csi0_clk.common.hw,
-		[CLK_BUS_CSI1]		= &bus_csi1_clk.common.hw,
-		[CLK_BUS_HDMI0]		= &bus_hdmi0_clk.common.hw,
-		[CLK_BUS_HDMI1]		= &bus_hdmi1_clk.common.hw,
-		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
-		[CLK_BUS_TVE0]		= &bus_tve0_clk.common.hw,
-		[CLK_BUS_TVE1]		= &bus_tve1_clk.common.hw,
-		[CLK_BUS_TVE_TOP]	= &bus_tve_top_clk.common.hw,
-		[CLK_BUS_GMAC]		= &bus_gmac_clk.common.hw,
-		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
-		[CLK_BUS_TVD0]		= &bus_tvd0_clk.common.hw,
-		[CLK_BUS_TVD1]		= &bus_tvd1_clk.common.hw,
-		[CLK_BUS_TVD2]		= &bus_tvd2_clk.common.hw,
-		[CLK_BUS_TVD3]		= &bus_tvd3_clk.common.hw,
-		[CLK_BUS_TVD_TOP]	= &bus_tvd_top_clk.common.hw,
-		[CLK_BUS_TCON_LCD0]	= &bus_tcon_lcd0_clk.common.hw,
-		[CLK_BUS_TCON_LCD1]	= &bus_tcon_lcd1_clk.common.hw,
-		[CLK_BUS_TCON_TV0]	= &bus_tcon_tv0_clk.common.hw,
-		[CLK_BUS_TCON_TV1]	= &bus_tcon_tv1_clk.common.hw,
-		[CLK_BUS_TCON_TOP]	= &bus_tcon_top_clk.common.hw,
-		[CLK_BUS_CODEC]		= &bus_codec_clk.common.hw,
-		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
-		[CLK_BUS_AC97]		= &bus_ac97_clk.common.hw,
-		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
-		[CLK_BUS_IR0]		= &bus_ir0_clk.common.hw,
-		[CLK_BUS_IR1]		= &bus_ir1_clk.common.hw,
-		[CLK_BUS_THS]		= &bus_ths_clk.common.hw,
-		[CLK_BUS_KEYPAD]	= &bus_keypad_clk.common.hw,
-		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
-		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
-		[CLK_BUS_I2S2]		= &bus_i2s2_clk.common.hw,
-		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
-		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
-		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
-		[CLK_BUS_I2C3]		= &bus_i2c3_clk.common.hw,
-		[CLK_BUS_CAN]		= &bus_can_clk.common.hw,
-		[CLK_BUS_SCR]		= &bus_scr_clk.common.hw,
-		[CLK_BUS_PS20]		= &bus_ps20_clk.common.hw,
-		[CLK_BUS_PS21]		= &bus_ps21_clk.common.hw,
-		[CLK_BUS_I2C4]		= &bus_i2c4_clk.common.hw,
-		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
-		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
-		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
-		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
-		[CLK_BUS_UART4]		= &bus_uart4_clk.common.hw,
-		[CLK_BUS_UART5]		= &bus_uart5_clk.common.hw,
-		[CLK_BUS_UART6]		= &bus_uart6_clk.common.hw,
-		[CLK_BUS_UART7]		= &bus_uart7_clk.common.hw,
-		[CLK_BUS_DBG]		= &bus_dbg_clk.common.hw,
-		[CLK_THS]		= &ths_clk.common.hw,
-		[CLK_NAND]		= &nand_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC2]		= &mmc2_clk.common.hw,
-		[CLK_MMC3]		= &mmc3_clk.common.hw,
-		[CLK_TS]		= &ts_clk.common.hw,
-		[CLK_CE]		= &ce_clk.common.hw,
-		[CLK_SPI0]		= &spi0_clk.common.hw,
-		[CLK_SPI1]		= &spi1_clk.common.hw,
-		[CLK_SPI2]		= &spi2_clk.common.hw,
-		[CLK_SPI3]		= &spi3_clk.common.hw,
-		[CLK_I2S0]		= &i2s0_clk.common.hw,
-		[CLK_I2S1]		= &i2s1_clk.common.hw,
-		[CLK_I2S2]		= &i2s2_clk.common.hw,
-		[CLK_AC97]		= &ac97_clk.common.hw,
-		[CLK_SPDIF]		= &spdif_clk.common.hw,
-		[CLK_KEYPAD]		= &keypad_clk.common.hw,
-		[CLK_SATA]		= &sata_clk.common.hw,
-		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
-		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
-		[CLK_USB_PHY2]		= &usb_phy2_clk.common.hw,
-		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
-		[CLK_USB_OHCI1]		= &usb_ohci1_clk.common.hw,
-		[CLK_USB_OHCI2]		= &usb_ohci2_clk.common.hw,
-		[CLK_IR0]		= &ir0_clk.common.hw,
-		[CLK_IR1]		= &ir1_clk.common.hw,
-		[CLK_DRAM]		= &dram_clk.common.hw,
-		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
-		[CLK_DRAM_CSI0]		= &dram_csi0_clk.common.hw,
-		[CLK_DRAM_CSI1]		= &dram_csi1_clk.common.hw,
-		[CLK_DRAM_TS]		= &dram_ts_clk.common.hw,
-		[CLK_DRAM_TVD]		= &dram_tvd_clk.common.hw,
-		[CLK_DRAM_MP]		= &dram_mp_clk.common.hw,
-		[CLK_DRAM_DEINTERLACE]	= &dram_deinterlace_clk.common.hw,
-		[CLK_DE]		= &de_clk.common.hw,
-		[CLK_MP]		= &mp_clk.common.hw,
-		[CLK_TCON_LCD0]		= &tcon_lcd0_clk.common.hw,
-		[CLK_TCON_LCD1]		= &tcon_lcd1_clk.common.hw,
-		[CLK_TCON_TV0]		= &tcon_tv0_clk.common.hw,
-		[CLK_TCON_TV1]		= &tcon_tv1_clk.common.hw,
-		[CLK_DEINTERLACE]	= &deinterlace_clk.common.hw,
-		[CLK_CSI1_MCLK]		= &csi1_mclk_clk.common.hw,
-		[CLK_CSI_SCLK]		= &csi_sclk_clk.common.hw,
-		[CLK_CSI0_MCLK]		= &csi0_mclk_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_CODEC]		= &codec_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-		[CLK_HDMI]		= &hdmi_clk.common.hw,
-		[CLK_HDMI_SLOW]		= &hdmi_slow_clk.common.hw,
-		[CLK_MBUS]		= &mbus_clk.common.hw,
-		[CLK_DSI_DPHY]		= &dsi_dphy_clk.common.hw,
-		[CLK_TVE0]		= &tve0_clk.common.hw,
-		[CLK_TVE1]		= &tve1_clk.common.hw,
-		[CLK_TVD0]		= &tvd0_clk.common.hw,
-		[CLK_TVD1]		= &tvd1_clk.common.hw,
-		[CLK_TVD2]		= &tvd2_clk.common.hw,
-		[CLK_TVD3]		= &tvd3_clk.common.hw,
-		[CLK_GPU]		= &gpu_clk.common.hw,
-		[CLK_OUTA]		= &outa_clk.common.hw,
-		[CLK_OUTB]		= &outb_clk.common.hw,
-	},
-	.num	= CLK_NUMBER,
-};
-
-static struct ccu_reset_map sun8i_r40_ccu_resets[] = {
-	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
-	[RST_USB_PHY1]		=  { 0x0cc, BIT(1) },
-	[RST_USB_PHY2]		=  { 0x0cc, BIT(2) },
-
-	[RST_DRAM]		=  { 0x0f4, BIT(31) },
-	[RST_MBUS]		=  { 0x0fc, BIT(31) },
-
-	[RST_BUS_MIPI_DSI]	=  { 0x2c0, BIT(1) },
-	[RST_BUS_CE]		=  { 0x2c0, BIT(5) },
-	[RST_BUS_DMA]		=  { 0x2c0, BIT(6) },
-	[RST_BUS_MMC0]		=  { 0x2c0, BIT(8) },
-	[RST_BUS_MMC1]		=  { 0x2c0, BIT(9) },
-	[RST_BUS_MMC2]		=  { 0x2c0, BIT(10) },
-	[RST_BUS_MMC3]		=  { 0x2c0, BIT(11) },
-	[RST_BUS_NAND]		=  { 0x2c0, BIT(13) },
-	[RST_BUS_DRAM]		=  { 0x2c0, BIT(14) },
-	[RST_BUS_EMAC]		=  { 0x2c0, BIT(17) },
-	[RST_BUS_TS]		=  { 0x2c0, BIT(18) },
-	[RST_BUS_HSTIMER]	=  { 0x2c0, BIT(19) },
-	[RST_BUS_SPI0]		=  { 0x2c0, BIT(20) },
-	[RST_BUS_SPI1]		=  { 0x2c0, BIT(21) },
-	[RST_BUS_SPI2]		=  { 0x2c0, BIT(22) },
-	[RST_BUS_SPI3]		=  { 0x2c0, BIT(23) },
-	[RST_BUS_SATA]		=  { 0x2c0, BIT(24) },
-	[RST_BUS_OTG]		=  { 0x2c0, BIT(25) },
-	[RST_BUS_EHCI0]		=  { 0x2c0, BIT(26) },
-	[RST_BUS_EHCI1]		=  { 0x2c0, BIT(27) },
-	[RST_BUS_EHCI2]		=  { 0x2c0, BIT(28) },
-	[RST_BUS_OHCI0]		=  { 0x2c0, BIT(29) },
-	[RST_BUS_OHCI1]		=  { 0x2c0, BIT(30) },
-	[RST_BUS_OHCI2]		=  { 0x2c0, BIT(31) },
-
-	[RST_BUS_VE]		=  { 0x2c4, BIT(0) },
-	[RST_BUS_MP]		=  { 0x2c4, BIT(2) },
-	[RST_BUS_DEINTERLACE]	=  { 0x2c4, BIT(5) },
-	[RST_BUS_CSI0]		=  { 0x2c4, BIT(8) },
-	[RST_BUS_CSI1]		=  { 0x2c4, BIT(9) },
-	[RST_BUS_HDMI0]		=  { 0x2c4, BIT(10) },
-	[RST_BUS_HDMI1]		=  { 0x2c4, BIT(11) },
-	[RST_BUS_DE]		=  { 0x2c4, BIT(12) },
-	[RST_BUS_TVE0]		=  { 0x2c4, BIT(13) },
-	[RST_BUS_TVE1]		=  { 0x2c4, BIT(14) },
-	[RST_BUS_TVE_TOP]	=  { 0x2c4, BIT(15) },
-	[RST_BUS_GMAC]		=  { 0x2c4, BIT(17) },
-	[RST_BUS_GPU]		=  { 0x2c4, BIT(20) },
-	[RST_BUS_TVD0]		=  { 0x2c4, BIT(21) },
-	[RST_BUS_TVD1]		=  { 0x2c4, BIT(22) },
-	[RST_BUS_TVD2]		=  { 0x2c4, BIT(23) },
-	[RST_BUS_TVD3]		=  { 0x2c4, BIT(24) },
-	[RST_BUS_TVD_TOP]	=  { 0x2c4, BIT(25) },
-	[RST_BUS_TCON_LCD0]	=  { 0x2c4, BIT(26) },
-	[RST_BUS_TCON_LCD1]	=  { 0x2c4, BIT(27) },
-	[RST_BUS_TCON_TV0]	=  { 0x2c4, BIT(28) },
-	[RST_BUS_TCON_TV1]	=  { 0x2c4, BIT(29) },
-	[RST_BUS_TCON_TOP]	=  { 0x2c4, BIT(30) },
-	[RST_BUS_DBG]		=  { 0x2c4, BIT(31) },
-
-	[RST_BUS_LVDS]		=  { 0x2c8, BIT(0) },
-
-	[RST_BUS_CODEC]		=  { 0x2d0, BIT(0) },
-	[RST_BUS_SPDIF]		=  { 0x2d0, BIT(1) },
-	[RST_BUS_AC97]		=  { 0x2d0, BIT(2) },
-	[RST_BUS_IR0]		=  { 0x2d0, BIT(6) },
-	[RST_BUS_IR1]		=  { 0x2d0, BIT(7) },
-	[RST_BUS_THS]		=  { 0x2d0, BIT(8) },
-	[RST_BUS_KEYPAD]	=  { 0x2d0, BIT(10) },
-	[RST_BUS_I2S0]		=  { 0x2d0, BIT(12) },
-	[RST_BUS_I2S1]		=  { 0x2d0, BIT(13) },
-	[RST_BUS_I2S2]		=  { 0x2d0, BIT(14) },
-
-	[RST_BUS_I2C0]		=  { 0x2d8, BIT(0) },
-	[RST_BUS_I2C1]		=  { 0x2d8, BIT(1) },
-	[RST_BUS_I2C2]		=  { 0x2d8, BIT(2) },
-	[RST_BUS_I2C3]		=  { 0x2d8, BIT(3) },
-	[RST_BUS_CAN]		=  { 0x2d8, BIT(4) },
-	[RST_BUS_SCR]		=  { 0x2d8, BIT(5) },
-	[RST_BUS_PS20]		=  { 0x2d8, BIT(6) },
-	[RST_BUS_PS21]		=  { 0x2d8, BIT(7) },
-	[RST_BUS_I2C4]		=  { 0x2d8, BIT(15) },
-	[RST_BUS_UART0]		=  { 0x2d8, BIT(16) },
-	[RST_BUS_UART1]		=  { 0x2d8, BIT(17) },
-	[RST_BUS_UART2]		=  { 0x2d8, BIT(18) },
-	[RST_BUS_UART3]		=  { 0x2d8, BIT(19) },
-	[RST_BUS_UART4]		=  { 0x2d8, BIT(20) },
-	[RST_BUS_UART5]		=  { 0x2d8, BIT(21) },
-	[RST_BUS_UART6]		=  { 0x2d8, BIT(22) },
-	[RST_BUS_UART7]		=  { 0x2d8, BIT(23) },
-};
-
-static const struct sunxi_ccu_desc sun8i_r40_ccu_desc = {
-	.ccu_clks	= sun8i_r40_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun8i_r40_ccu_clks),
-
-	.hw_clks	= &sun8i_r40_hw_clks,
-
-	.resets		= sun8i_r40_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun8i_r40_ccu_resets),
-};
-
-static struct ccu_pll_nb sun8i_r40_pll_cpu_nb = {
-	.common	= &pll_cpu_clk.common,
-	/* copy from pll_cpu_clk */
-	.enable	= BIT(31),
-	.lock	= BIT(28),
-};
-
-static struct ccu_mux_nb sun8i_r40_cpu_nb = {
-	.common		= &cpu_clk.common,
-	.cm		= &cpu_clk.mux,
-	.delay_us	= 1, /* > 8 clock cycles at 24 MHz */
-	.bypass_index	= 1, /* index of 24 MHz oscillator */
-};
-
-/*
- * Add a regmap for the GMAC driver (dwmac-sun8i) to access the
- * GMAC configuration register.
- * Only this register is allowed to be written, in order to
- * prevent overriding critical clock configuration.
- */
-
-#define SUN8I_R40_GMAC_CFG_REG 0x164
-static bool sun8i_r40_ccu_regmap_accessible_reg(struct device *dev,
-						unsigned int reg)
-{
-	if (reg == SUN8I_R40_GMAC_CFG_REG)
-		return true;
-	return false;
-}
-
-static struct regmap_config sun8i_r40_ccu_regmap_config = {
-	.reg_bits	= 32,
-	.val_bits	= 32,
-	.reg_stride	= 4,
-	.max_register	= 0x320, /* PLL_LOCK_CTRL_REG */
-
-	/* other devices have no business accessing other registers */
-	.readable_reg	= sun8i_r40_ccu_regmap_accessible_reg,
-	.writeable_reg	= sun8i_r40_ccu_regmap_accessible_reg,
-};
-
-#define SUN8I_R40_SYS_32K_CLK_REG 0x310
-#define SUN8I_R40_SYS_32K_CLK_KEY (0x16AA << 16)
-
-static int sun8i_r40_ccu_probe(struct platform_device *pdev)
-{
-	struct resource *res;
-	struct regmap *regmap;
-	void __iomem *reg;
-	u32 val;
-	int ret;
-
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	reg = devm_ioremap_resource(&pdev->dev, res);
-	if (IS_ERR(reg))
-		return PTR_ERR(reg);
-
-	/* Force the PLL-Audio-1x divider to 1 */
-	val = readl(reg + SUN8I_R40_PLL_AUDIO_REG);
-	val &= ~GENMASK(19, 16);
-	writel(val | (0 << 16), reg + SUN8I_R40_PLL_AUDIO_REG);
-
-	/* Force PLL-MIPI to MIPI mode */
-	val = readl(reg + SUN8I_R40_PLL_MIPI_REG);
-	val &= ~BIT(16);
-	writel(val, reg + SUN8I_R40_PLL_MIPI_REG);
-
-	/* Force OHCI 12M parent to 12M divided from 48M */
-	val = readl(reg + SUN8I_R40_USB_CLK_REG);
-	val &= ~GENMASK(25, 20);
-	writel(val, reg + SUN8I_R40_USB_CLK_REG);
-
-	/*
-	 * Force SYS 32k (otherwise known as LOSC throughout the CCU)
-	 * clock parent to LOSC output from RTC module instead of the
-	 * CCU's internal RC oscillator divided output.
-	 */
-	writel(SUN8I_R40_SYS_32K_CLK_KEY | BIT(8),
-	       reg + SUN8I_R40_SYS_32K_CLK_REG);
-
-	regmap = devm_regmap_init_mmio(&pdev->dev, reg,
-				       &sun8i_r40_ccu_regmap_config);
-	if (IS_ERR(regmap))
-		return PTR_ERR(regmap);
-
-	ret = devm_sunxi_ccu_probe(&pdev->dev, reg, &sun8i_r40_ccu_desc);
-	if (ret)
-		return ret;
-
-	/* Gate then ungate PLL CPU after any rate changes */
-	ccu_pll_notifier_register(&sun8i_r40_pll_cpu_nb);
-
-	/* Reparent CPU during PLL CPU rate changes */
-	ccu_mux_notifier_register(pll_cpu_clk.common.hw.clk,
-				  &sun8i_r40_cpu_nb);
-
-	return 0;
-}
-
-static const struct of_device_id sun8i_r40_ccu_ids[] = {
-	{ .compatible = "allwinner,sun8i-r40-ccu" },
-	{ }
-};
-
-static struct platform_driver sun8i_r40_ccu_driver = {
-	.probe	= sun8i_r40_ccu_probe,
-	.driver	= {
-		.name	= "sun8i-r40-ccu",
-		.suppress_bind_attrs = true,
-		.of_match_table	= sun8i_r40_ccu_ids,
-	},
-};
-builtin_platform_driver(sun8i_r40_ccu_driver);
diff --git a/drivers/clk/sunxi-ng/ccu-sun8i-r40.h b/drivers/clk/sunxi-ng/ccu-sun8i-r40.h
deleted file mode 100644
index 6f7071df8e1c..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun8i-r40.h
+++ /dev/null
@@ -1,60 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0-or-later */
-/*
- * Copyright 2017 Icenowy Zheng <icenowy@aosc.io>
- */
-
-#ifndef _CCU_SUN8I_R40_H_
-#define _CCU_SUN8I_R40_H_
-
-#include <dt-bindings/clock/sun8i-r40-ccu.h>
-#include <dt-bindings/reset/sun8i-r40-ccu.h>
-
-#define CLK_OSC_12M		0
-#define CLK_PLL_CPU		1
-#define CLK_PLL_AUDIO_BASE	2
-#define CLK_PLL_AUDIO		3
-#define CLK_PLL_AUDIO_2X	4
-#define CLK_PLL_AUDIO_4X	5
-#define CLK_PLL_AUDIO_8X	6
-
-/* PLL_VIDEO0 is exported */
-
-#define CLK_PLL_VIDEO0_2X	8
-#define CLK_PLL_VE		9
-#define CLK_PLL_DDR0		10
-#define CLK_PLL_PERIPH0		11
-#define CLK_PLL_PERIPH0_SATA	12
-#define CLK_PLL_PERIPH0_2X	13
-#define CLK_PLL_PERIPH1		14
-#define CLK_PLL_PERIPH1_2X	15
-
-/* PLL_VIDEO1 is exported */
-
-#define CLK_PLL_VIDEO1_2X	17
-#define CLK_PLL_SATA		18
-#define CLK_PLL_SATA_OUT	19
-#define CLK_PLL_GPU		20
-#define CLK_PLL_MIPI		21
-#define CLK_PLL_DE		22
-#define CLK_PLL_DDR1		23
-
-/* The CPU clock is exported */
-
-#define CLK_AXI			25
-#define CLK_AHB1		26
-#define CLK_APB1		27
-#define CLK_APB2		28
-
-/* All the bus gates are exported */
-
-/* The first bunch of module clocks are exported */
-
-#define CLK_DRAM		132
-
-/* All the DRAM gates are exported */
-
-/* Some more module clocks are exported */
-
-#define CLK_NUMBER		(CLK_OUTB + 1)
-
-#endif /* _CCU_SUN8I_R40_H_ */
diff --git a/drivers/clk/sunxi-ng/ccu-sun8i-v3s.c b/drivers/clk/sunxi-ng/ccu-sun8i-v3s.c
deleted file mode 100644
index ce150f83ab54..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun8i-v3s.c
+++ /dev/null
@@ -1,842 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-only
-/*
- * Copyright (c) 2016 Icenowy Zheng <icenowy@aosc.xyz>
- *
- * Based on ccu-sun8i-h3.c, which is:
- * Copyright (c) 2016 Maxime Ripard. All rights reserved.
- */
-
-#include <linux/clk-provider.h>
-#include <linux/io.h>
-#include <linux/of_address.h>
-
-#include "ccu_common.h"
-#include "ccu_reset.h"
-
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_mp.h"
-#include "ccu_mult.h"
-#include "ccu_nk.h"
-#include "ccu_nkm.h"
-#include "ccu_nkmp.h"
-#include "ccu_nm.h"
-#include "ccu_phase.h"
-
-#include "ccu-sun8i-v3s.h"
-
-static SUNXI_CCU_NKMP_WITH_GATE_LOCK(pll_cpu_clk, "pll-cpu",
-				     "osc24M", 0x000,
-				     8, 5,	/* N */
-				     4, 2,	/* K */
-				     0, 2,	/* M */
-				     16, 2,	/* P */
-				     BIT(31),	/* gate */
-				     BIT(28),	/* lock */
-				     0);
-
-/*
- * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
- * the base (2x, 4x and 8x), and one variable divider (the one true
- * pll audio).
- *
- * With sigma-delta modulation for fractional-N on the audio PLL,
- * we have to use specific dividers. This means the variable divider
- * can no longer be used, as the audio codec requests the exact clock
- * rates we support through this mechanism. So we now hard code the
- * variable divider to 1. This means the clock rates will no longer
- * match the clock names.
- */
-#define SUN8I_V3S_PLL_AUDIO_REG	0x008
-
-static struct ccu_sdm_setting pll_audio_sdm_table[] = {
-	{ .rate = 22579200, .pattern = 0xc0010d84, .m = 8, .n = 7 },
-	{ .rate = 24576000, .pattern = 0xc000ac02, .m = 14, .n = 14 },
-};
-
-static SUNXI_CCU_NM_WITH_SDM_GATE_LOCK(pll_audio_base_clk, "pll-audio-base",
-				       "osc24M", 0x008,
-				       8, 7,	/* N */
-				       0, 5,	/* M */
-				       pll_audio_sdm_table, BIT(24),
-				       0x284, BIT(31),
-				       BIT(31),	/* gate */
-				       BIT(28),	/* lock */
-				       CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_video_clk, "pll-video",
-					"osc24M", 0x0010,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					0);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_ve_clk, "pll-ve",
-					"osc24M", 0x0018,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					0);
-
-static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_ddr0_clk, "pll-ddr0",
-				    "osc24M", 0x020,
-				    8, 5,	/* N */
-				    4, 2,	/* K */
-				    0, 2,	/* M */
-				    BIT(31),	/* gate */
-				    BIT(28),	/* lock */
-				    0);
-
-static SUNXI_CCU_NK_WITH_GATE_LOCK_POSTDIV(pll_periph0_clk, "pll-periph0",
-					   "osc24M", 0x028,
-					   8, 5,	/* N */
-					   4, 2,	/* K */
-					   BIT(31),	/* gate */
-					   BIT(28),	/* lock */
-					   2,		/* post-div */
-					   0);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_isp_clk, "pll-isp",
-					"osc24M", 0x002c,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					0);
-
-static SUNXI_CCU_NK_WITH_GATE_LOCK_POSTDIV(pll_periph1_clk, "pll-periph1",
-					   "osc24M", 0x044,
-					   8, 5,	/* N */
-					   4, 2,	/* K */
-					   BIT(31),	/* gate */
-					   BIT(28),	/* lock */
-					   2,		/* post-div */
-					   0);
-
-static SUNXI_CCU_NM_WITH_GATE_LOCK(pll_ddr1_clk, "pll-ddr1",
-				   "osc24M", 0x04c,
-				   8, 7,	/* N */
-				   0, 2,	/* M */
-				   BIT(31),	/* gate */
-				   BIT(28),	/* lock */
-				   0);
-
-static const char * const cpu_parents[] = { "osc32k", "osc24M",
-					     "pll-cpu", "pll-cpu" };
-static SUNXI_CCU_MUX(cpu_clk, "cpu", cpu_parents,
-		     0x050, 16, 2, CLK_IS_CRITICAL);
-
-static SUNXI_CCU_M(axi_clk, "axi", "cpu", 0x050, 0, 2, 0);
-
-static const char * const ahb1_parents[] = { "osc32k", "osc24M",
-					     "axi", "pll-periph0" };
-static const struct ccu_mux_var_prediv ahb1_predivs[] = {
-	{ .index = 3, .shift = 6, .width = 2 },
-};
-static struct ccu_div ahb1_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
-
-	.mux		= {
-		.shift	= 12,
-		.width	= 2,
-
-		.var_predivs	= ahb1_predivs,
-		.n_var_predivs	= ARRAY_SIZE(ahb1_predivs),
-	},
-
-	.common		= {
-		.reg		= 0x054,
-		.features	= CCU_FEATURE_VARIABLE_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("ahb1",
-						      ahb1_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static struct clk_div_table apb1_div_table[] = {
-	{ .val = 0, .div = 2 },
-	{ .val = 1, .div = 2 },
-	{ .val = 2, .div = 4 },
-	{ .val = 3, .div = 8 },
-	{ /* Sentinel */ },
-};
-static SUNXI_CCU_DIV_TABLE(apb1_clk, "apb1", "ahb1",
-			   0x054, 8, 2, apb1_div_table, 0);
-
-static const char * const apb2_parents[] = { "osc32k", "osc24M",
-					     "pll-periph0", "pll-periph0" };
-static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", apb2_parents, 0x058,
-			     0, 5,	/* M */
-			     16, 2,	/* P */
-			     24, 2,	/* mux */
-			     0);
-
-static const char * const ahb2_parents[] = { "ahb1", "pll-periph0" };
-static const struct ccu_mux_fixed_prediv ahb2_fixed_predivs[] = {
-	{ .index = 1, .div = 2 },
-};
-static struct ccu_mux ahb2_clk = {
-	.mux		= {
-		.shift	= 0,
-		.width	= 1,
-		.fixed_predivs	= ahb2_fixed_predivs,
-		.n_predivs	= ARRAY_SIZE(ahb2_fixed_predivs),
-	},
-
-	.common		= {
-		.reg		= 0x05c,
-		.features	= CCU_FEATURE_FIXED_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("ahb2",
-						      ahb2_parents,
-						      &ccu_mux_ops,
-						      0),
-	},
-};
-
-static SUNXI_CCU_GATE(bus_ce_clk,	"bus-ce",	"ahb1",
-		      0x060, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_dma_clk,	"bus-dma",	"ahb1",
-		      0x060, BIT(6), 0);
-static SUNXI_CCU_GATE(bus_mmc0_clk,	"bus-mmc0",	"ahb1",
-		      0x060, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_mmc1_clk,	"bus-mmc1",	"ahb1",
-		      0x060, BIT(9), 0);
-static SUNXI_CCU_GATE(bus_mmc2_clk,	"bus-mmc2",	"ahb1",
-		      0x060, BIT(10), 0);
-static SUNXI_CCU_GATE(bus_dram_clk,	"bus-dram",	"ahb1",
-		      0x060, BIT(14), 0);
-static SUNXI_CCU_GATE(bus_emac_clk,	"bus-emac",	"ahb2",
-		      0x060, BIT(17), 0);
-static SUNXI_CCU_GATE(bus_hstimer_clk,	"bus-hstimer",	"ahb1",
-		      0x060, BIT(19), 0);
-static SUNXI_CCU_GATE(bus_spi0_clk,	"bus-spi0",	"ahb1",
-		      0x060, BIT(20), 0);
-static SUNXI_CCU_GATE(bus_otg_clk,	"bus-otg",	"ahb1",
-		      0x060, BIT(24), 0);
-static SUNXI_CCU_GATE(bus_ehci0_clk,	"bus-ehci0",	"ahb1",
-		      0x060, BIT(26), 0);
-static SUNXI_CCU_GATE(bus_ohci0_clk,	"bus-ohci0",	"ahb1",
-		      0x060, BIT(29), 0);
-
-static SUNXI_CCU_GATE(bus_ve_clk,	"bus-ve",	"ahb1",
-		      0x064, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_tcon0_clk,	"bus-tcon0",	"ahb1",
-		      0x064, BIT(4), 0);
-static SUNXI_CCU_GATE(bus_csi_clk,	"bus-csi",	"ahb1",
-		      0x064, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_de_clk,	"bus-de",	"ahb1",
-		      0x064, BIT(12), 0);
-
-static SUNXI_CCU_GATE(bus_codec_clk,	"bus-codec",	"apb1",
-		      0x068, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_pio_clk,	"bus-pio",	"apb1",
-		      0x068, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_i2s0_clk,	"bus-i2s0",	"apb1",
-		      0x068, BIT(12), 0);
-
-static SUNXI_CCU_GATE(bus_i2c0_clk,	"bus-i2c0",	"apb2",
-		      0x06c, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_i2c1_clk,	"bus-i2c1",	"apb2",
-		      0x06c, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_uart0_clk,	"bus-uart0",	"apb2",
-		      0x06c, BIT(16), 0);
-static SUNXI_CCU_GATE(bus_uart1_clk,	"bus-uart1",	"apb2",
-		      0x06c, BIT(17), 0);
-static SUNXI_CCU_GATE(bus_uart2_clk,	"bus-uart2",	"apb2",
-		      0x06c, BIT(18), 0);
-
-static SUNXI_CCU_GATE(bus_ephy_clk,	"bus-ephy",	"ahb1",
-		      0x070, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_dbg_clk,	"bus-dbg",	"ahb1",
-		      0x070, BIT(7), 0);
-
-static const char * const mod0_default_parents[] = { "osc24M", "pll-periph0",
-						     "pll-periph1" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents, 0x088,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc0_sample_clk, "mmc0_sample", "mmc0",
-		       0x088, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc0_output_clk, "mmc0_output", "mmc0",
-		       0x088, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents, 0x08c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc1_sample_clk, "mmc1_sample", "mmc1",
-		       0x08c, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc1_output_clk, "mmc1_output", "mmc1",
-		       0x08c, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents, 0x090,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc2_sample_clk, "mmc2_sample", "mmc2",
-		       0x090, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc2_output_clk, "mmc2_output", "mmc2",
-		       0x090, 8, 3, 0);
-
-static const char * const ce_parents[] = { "osc24M", "pll-periph0", };
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(ce_clk, "ce", ce_parents, 0x09c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents, 0x0a0,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static const char * const i2s_parents[] = { "pll-audio-8x", "pll-audio-4x",
-					    "pll-audio-2x", "pll-audio" };
-static SUNXI_CCU_MUX_WITH_GATE(i2s0_clk, "i2s0", i2s_parents,
-			       0x0b0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"osc24M",
-		      0x0cc, BIT(8), 0);
-static SUNXI_CCU_GATE(usb_ohci0_clk,	"usb-ohci0",	"osc24M",
-		      0x0cc, BIT(16), 0);
-
-static const char * const dram_parents[] = { "pll-ddr0", "pll-ddr1",
-					     "pll-periph0-2x" };
-static SUNXI_CCU_M_WITH_MUX(dram_clk, "dram", dram_parents,
-			    0x0f4, 0, 4, 20, 2, CLK_IS_CRITICAL);
-
-static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"dram",
-		      0x100, BIT(0), 0);
-static SUNXI_CCU_GATE(dram_csi_clk,	"dram-csi",	"dram",
-		      0x100, BIT(1), 0);
-static SUNXI_CCU_GATE(dram_ehci_clk,	"dram-ehci",	"dram",
-		      0x100, BIT(17), 0);
-static SUNXI_CCU_GATE(dram_ohci_clk,	"dram-ohci",	"dram",
-		      0x100, BIT(18), 0);
-
-static const char * const de_parents[] = { "pll-video", "pll-periph0" };
-static SUNXI_CCU_M_WITH_MUX_GATE(de_clk, "de", de_parents,
-				 0x104, 0, 4, 24, 2, BIT(31),
-				 CLK_SET_RATE_PARENT);
-
-static const char * const tcon_parents[] = { "pll-video" };
-static SUNXI_CCU_M_WITH_MUX_GATE(tcon_clk, "tcon", tcon_parents,
-				 0x118, 0, 4, 24, 3, BIT(31), 0);
-
-static SUNXI_CCU_GATE(csi_misc_clk,	"csi-misc",	"osc24M",
-		      0x130, BIT(31), 0);
-
-static const char * const csi_mclk_parents[] = { "osc24M", "pll-video",
-						 "pll-periph0", "pll-periph1" };
-static SUNXI_CCU_M_WITH_MUX_GATE(csi0_mclk_clk, "csi0-mclk", csi_mclk_parents,
-				 0x130, 0, 5, 8, 3, BIT(15), 0);
-
-static const char * const csi1_sclk_parents[] = { "pll-video", "pll-isp" };
-static SUNXI_CCU_M_WITH_MUX_GATE(csi1_sclk_clk, "csi-sclk", csi1_sclk_parents,
-				 0x134, 16, 4, 24, 3, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(csi1_mclk_clk, "csi-mclk", csi_mclk_parents,
-				 0x134, 0, 5, 8, 3, BIT(15), 0);
-
-static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve",
-			     0x13c, 16, 3, BIT(31), 0);
-
-static SUNXI_CCU_GATE(ac_dig_clk,	"ac-dig",	"pll-audio",
-		      0x140, BIT(31), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_GATE(avs_clk,		"avs",		"osc24M",
-		      0x144, BIT(31), 0);
-
-static const char * const mbus_parents[] = { "osc24M", "pll-periph0-2x",
-					     "pll-ddr" };
-static SUNXI_CCU_M_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents,
-				 0x15c, 0, 3, 24, 2, BIT(31), CLK_IS_CRITICAL);
-
-static const char * const mipi_csi_parents[] = { "pll-video", "pll-periph0",
-						 "pll-isp" };
-static SUNXI_CCU_M_WITH_MUX_GATE(mipi_csi_clk, "mipi-csi", mipi_csi_parents,
-			     0x16c, 0, 3, 24, 2, BIT(31), 0);
-
-static struct ccu_common *sun8i_v3s_ccu_clks[] = {
-	&pll_cpu_clk.common,
-	&pll_audio_base_clk.common,
-	&pll_video_clk.common,
-	&pll_ve_clk.common,
-	&pll_ddr0_clk.common,
-	&pll_periph0_clk.common,
-	&pll_isp_clk.common,
-	&pll_periph1_clk.common,
-	&pll_ddr1_clk.common,
-	&cpu_clk.common,
-	&axi_clk.common,
-	&ahb1_clk.common,
-	&apb1_clk.common,
-	&apb2_clk.common,
-	&ahb2_clk.common,
-	&bus_ce_clk.common,
-	&bus_dma_clk.common,
-	&bus_mmc0_clk.common,
-	&bus_mmc1_clk.common,
-	&bus_mmc2_clk.common,
-	&bus_dram_clk.common,
-	&bus_emac_clk.common,
-	&bus_hstimer_clk.common,
-	&bus_spi0_clk.common,
-	&bus_otg_clk.common,
-	&bus_ehci0_clk.common,
-	&bus_ohci0_clk.common,
-	&bus_ve_clk.common,
-	&bus_tcon0_clk.common,
-	&bus_csi_clk.common,
-	&bus_de_clk.common,
-	&bus_codec_clk.common,
-	&bus_pio_clk.common,
-	&bus_i2c0_clk.common,
-	&bus_i2c1_clk.common,
-	&bus_uart0_clk.common,
-	&bus_uart1_clk.common,
-	&bus_uart2_clk.common,
-	&bus_ephy_clk.common,
-	&bus_dbg_clk.common,
-	&mmc0_clk.common,
-	&mmc0_sample_clk.common,
-	&mmc0_output_clk.common,
-	&mmc1_clk.common,
-	&mmc1_sample_clk.common,
-	&mmc1_output_clk.common,
-	&mmc2_clk.common,
-	&mmc2_sample_clk.common,
-	&mmc2_output_clk.common,
-	&ce_clk.common,
-	&spi0_clk.common,
-	&usb_phy0_clk.common,
-	&usb_ohci0_clk.common,
-	&dram_clk.common,
-	&dram_ve_clk.common,
-	&dram_csi_clk.common,
-	&dram_ohci_clk.common,
-	&dram_ehci_clk.common,
-	&de_clk.common,
-	&tcon_clk.common,
-	&csi_misc_clk.common,
-	&csi0_mclk_clk.common,
-	&csi1_sclk_clk.common,
-	&csi1_mclk_clk.common,
-	&ve_clk.common,
-	&ac_dig_clk.common,
-	&avs_clk.common,
-	&mbus_clk.common,
-	&mipi_csi_clk.common,
-};
-
-static const struct clk_hw *clk_parent_pll_audio[] = {
-	&pll_audio_base_clk.common.hw
-};
-
-static struct ccu_common *sun8i_v3_ccu_clks[] = {
-	&pll_cpu_clk.common,
-	&pll_audio_base_clk.common,
-	&pll_video_clk.common,
-	&pll_ve_clk.common,
-	&pll_ddr0_clk.common,
-	&pll_periph0_clk.common,
-	&pll_isp_clk.common,
-	&pll_periph1_clk.common,
-	&pll_ddr1_clk.common,
-	&cpu_clk.common,
-	&axi_clk.common,
-	&ahb1_clk.common,
-	&apb1_clk.common,
-	&apb2_clk.common,
-	&ahb2_clk.common,
-	&bus_ce_clk.common,
-	&bus_dma_clk.common,
-	&bus_mmc0_clk.common,
-	&bus_mmc1_clk.common,
-	&bus_mmc2_clk.common,
-	&bus_dram_clk.common,
-	&bus_emac_clk.common,
-	&bus_hstimer_clk.common,
-	&bus_spi0_clk.common,
-	&bus_otg_clk.common,
-	&bus_ehci0_clk.common,
-	&bus_ohci0_clk.common,
-	&bus_ve_clk.common,
-	&bus_tcon0_clk.common,
-	&bus_csi_clk.common,
-	&bus_de_clk.common,
-	&bus_codec_clk.common,
-	&bus_pio_clk.common,
-	&bus_i2s0_clk.common,
-	&bus_i2c0_clk.common,
-	&bus_i2c1_clk.common,
-	&bus_uart0_clk.common,
-	&bus_uart1_clk.common,
-	&bus_uart2_clk.common,
-	&bus_ephy_clk.common,
-	&bus_dbg_clk.common,
-	&mmc0_clk.common,
-	&mmc0_sample_clk.common,
-	&mmc0_output_clk.common,
-	&mmc1_clk.common,
-	&mmc1_sample_clk.common,
-	&mmc1_output_clk.common,
-	&mmc2_clk.common,
-	&mmc2_sample_clk.common,
-	&mmc2_output_clk.common,
-	&ce_clk.common,
-	&spi0_clk.common,
-	&i2s0_clk.common,
-	&usb_phy0_clk.common,
-	&usb_ohci0_clk.common,
-	&dram_clk.common,
-	&dram_ve_clk.common,
-	&dram_csi_clk.common,
-	&dram_ohci_clk.common,
-	&dram_ehci_clk.common,
-	&de_clk.common,
-	&tcon_clk.common,
-	&csi_misc_clk.common,
-	&csi0_mclk_clk.common,
-	&csi1_sclk_clk.common,
-	&csi1_mclk_clk.common,
-	&ve_clk.common,
-	&ac_dig_clk.common,
-	&avs_clk.common,
-	&mbus_clk.common,
-	&mipi_csi_clk.common,
-};
-
-/* We hardcode the divider to 1 for SDM support */
-static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
-			    clk_parent_pll_audio,
-			    1, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
-			    clk_parent_pll_audio,
-			    2, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
-			    clk_parent_pll_audio,
-			    1, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
-			    clk_parent_pll_audio,
-			    1, 2, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HW(pll_periph0_2x_clk, "pll-periph0-2x",
-			   &pll_periph0_clk.common.hw,
-			   1, 2, 0);
-
-static struct clk_hw_onecell_data sun8i_v3s_hw_clks = {
-	.hws	= {
-		[CLK_PLL_CPU]		= &pll_cpu_clk.common.hw,
-		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
-		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
-		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
-		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
-		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
-		[CLK_PLL_VIDEO]		= &pll_video_clk.common.hw,
-		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
-		[CLK_PLL_DDR0]		= &pll_ddr0_clk.common.hw,
-		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
-		[CLK_PLL_PERIPH0_2X]	= &pll_periph0_2x_clk.hw,
-		[CLK_PLL_ISP]		= &pll_isp_clk.common.hw,
-		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
-		[CLK_PLL_DDR1]		= &pll_ddr1_clk.common.hw,
-		[CLK_CPU]		= &cpu_clk.common.hw,
-		[CLK_AXI]		= &axi_clk.common.hw,
-		[CLK_AHB1]		= &ahb1_clk.common.hw,
-		[CLK_APB1]		= &apb1_clk.common.hw,
-		[CLK_APB2]		= &apb2_clk.common.hw,
-		[CLK_AHB2]		= &ahb2_clk.common.hw,
-		[CLK_BUS_CE]		= &bus_ce_clk.common.hw,
-		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
-		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
-		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
-		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
-		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
-		[CLK_BUS_EMAC]		= &bus_emac_clk.common.hw,
-		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
-		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
-		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
-		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
-		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
-		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
-		[CLK_BUS_TCON0]		= &bus_tcon0_clk.common.hw,
-		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
-		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
-		[CLK_BUS_CODEC]		= &bus_codec_clk.common.hw,
-		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
-		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
-		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
-		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
-		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
-		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
-		[CLK_BUS_EPHY]		= &bus_ephy_clk.common.hw,
-		[CLK_BUS_DBG]		= &bus_dbg_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
-		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
-		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
-		[CLK_MMC2]		= &mmc2_clk.common.hw,
-		[CLK_MMC2_SAMPLE]	= &mmc2_sample_clk.common.hw,
-		[CLK_MMC2_OUTPUT]	= &mmc2_output_clk.common.hw,
-		[CLK_CE]		= &ce_clk.common.hw,
-		[CLK_SPI0]		= &spi0_clk.common.hw,
-		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
-		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
-		[CLK_DRAM]		= &dram_clk.common.hw,
-		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
-		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
-		[CLK_DRAM_EHCI]		= &dram_ehci_clk.common.hw,
-		[CLK_DRAM_OHCI]		= &dram_ohci_clk.common.hw,
-		[CLK_DE]		= &de_clk.common.hw,
-		[CLK_TCON0]		= &tcon_clk.common.hw,
-		[CLK_CSI_MISC]		= &csi_misc_clk.common.hw,
-		[CLK_CSI0_MCLK]		= &csi0_mclk_clk.common.hw,
-		[CLK_CSI1_SCLK]		= &csi1_sclk_clk.common.hw,
-		[CLK_CSI1_MCLK]		= &csi1_mclk_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_AC_DIG]		= &ac_dig_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-		[CLK_MBUS]		= &mbus_clk.common.hw,
-		[CLK_MIPI_CSI]		= &mipi_csi_clk.common.hw,
-	},
-	.num	= CLK_PLL_DDR1 + 1,
-};
-
-static struct clk_hw_onecell_data sun8i_v3_hw_clks = {
-	.hws	= {
-		[CLK_PLL_CPU]		= &pll_cpu_clk.common.hw,
-		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
-		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
-		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
-		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
-		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
-		[CLK_PLL_VIDEO]		= &pll_video_clk.common.hw,
-		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
-		[CLK_PLL_DDR0]		= &pll_ddr0_clk.common.hw,
-		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
-		[CLK_PLL_PERIPH0_2X]	= &pll_periph0_2x_clk.hw,
-		[CLK_PLL_ISP]		= &pll_isp_clk.common.hw,
-		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
-		[CLK_PLL_DDR1]		= &pll_ddr1_clk.common.hw,
-		[CLK_CPU]		= &cpu_clk.common.hw,
-		[CLK_AXI]		= &axi_clk.common.hw,
-		[CLK_AHB1]		= &ahb1_clk.common.hw,
-		[CLK_APB1]		= &apb1_clk.common.hw,
-		[CLK_APB2]		= &apb2_clk.common.hw,
-		[CLK_AHB2]		= &ahb2_clk.common.hw,
-		[CLK_BUS_CE]		= &bus_ce_clk.common.hw,
-		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
-		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
-		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
-		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
-		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
-		[CLK_BUS_EMAC]		= &bus_emac_clk.common.hw,
-		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
-		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
-		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
-		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
-		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
-		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
-		[CLK_BUS_TCON0]		= &bus_tcon0_clk.common.hw,
-		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
-		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
-		[CLK_BUS_CODEC]		= &bus_codec_clk.common.hw,
-		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
-		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
-		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
-		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
-		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
-		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
-		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
-		[CLK_BUS_EPHY]		= &bus_ephy_clk.common.hw,
-		[CLK_BUS_DBG]		= &bus_dbg_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
-		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
-		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
-		[CLK_MMC2]		= &mmc2_clk.common.hw,
-		[CLK_MMC2_SAMPLE]	= &mmc2_sample_clk.common.hw,
-		[CLK_MMC2_OUTPUT]	= &mmc2_output_clk.common.hw,
-		[CLK_CE]		= &ce_clk.common.hw,
-		[CLK_SPI0]		= &spi0_clk.common.hw,
-		[CLK_I2S0]		= &i2s0_clk.common.hw,
-		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
-		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
-		[CLK_DRAM]		= &dram_clk.common.hw,
-		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
-		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
-		[CLK_DRAM_EHCI]		= &dram_ehci_clk.common.hw,
-		[CLK_DRAM_OHCI]		= &dram_ohci_clk.common.hw,
-		[CLK_DE]		= &de_clk.common.hw,
-		[CLK_TCON0]		= &tcon_clk.common.hw,
-		[CLK_CSI_MISC]		= &csi_misc_clk.common.hw,
-		[CLK_CSI0_MCLK]		= &csi0_mclk_clk.common.hw,
-		[CLK_CSI1_SCLK]		= &csi1_sclk_clk.common.hw,
-		[CLK_CSI1_MCLK]		= &csi1_mclk_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_AC_DIG]		= &ac_dig_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-		[CLK_MBUS]		= &mbus_clk.common.hw,
-		[CLK_MIPI_CSI]		= &mipi_csi_clk.common.hw,
-	},
-	.num	= CLK_I2S0 + 1,
-};
-
-static struct ccu_reset_map sun8i_v3s_ccu_resets[] = {
-	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
-
-	[RST_MBUS]		=  { 0x0fc, BIT(31) },
-
-	[RST_BUS_CE]		=  { 0x2c0, BIT(5) },
-	[RST_BUS_DMA]		=  { 0x2c0, BIT(6) },
-	[RST_BUS_MMC0]		=  { 0x2c0, BIT(8) },
-	[RST_BUS_MMC1]		=  { 0x2c0, BIT(9) },
-	[RST_BUS_MMC2]		=  { 0x2c0, BIT(10) },
-	[RST_BUS_DRAM]		=  { 0x2c0, BIT(14) },
-	[RST_BUS_EMAC]		=  { 0x2c0, BIT(17) },
-	[RST_BUS_HSTIMER]	=  { 0x2c0, BIT(19) },
-	[RST_BUS_SPI0]		=  { 0x2c0, BIT(20) },
-	[RST_BUS_OTG]		=  { 0x2c0, BIT(24) },
-	[RST_BUS_EHCI0]		=  { 0x2c0, BIT(26) },
-	[RST_BUS_OHCI0]		=  { 0x2c0, BIT(29) },
-
-	[RST_BUS_VE]		=  { 0x2c4, BIT(0) },
-	[RST_BUS_TCON0]		=  { 0x2c4, BIT(4) },
-	[RST_BUS_CSI]		=  { 0x2c4, BIT(8) },
-	[RST_BUS_DE]		=  { 0x2c4, BIT(12) },
-	[RST_BUS_DBG]		=  { 0x2c4, BIT(31) },
-
-	[RST_BUS_EPHY]		=  { 0x2c8, BIT(2) },
-
-	[RST_BUS_CODEC]		=  { 0x2d0, BIT(0) },
-
-	[RST_BUS_I2C0]		=  { 0x2d8, BIT(0) },
-	[RST_BUS_I2C1]		=  { 0x2d8, BIT(1) },
-	[RST_BUS_UART0]		=  { 0x2d8, BIT(16) },
-	[RST_BUS_UART1]		=  { 0x2d8, BIT(17) },
-	[RST_BUS_UART2]		=  { 0x2d8, BIT(18) },
-};
-
-static struct ccu_reset_map sun8i_v3_ccu_resets[] = {
-	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
-
-	[RST_MBUS]		=  { 0x0fc, BIT(31) },
-
-	[RST_BUS_CE]		=  { 0x2c0, BIT(5) },
-	[RST_BUS_DMA]		=  { 0x2c0, BIT(6) },
-	[RST_BUS_MMC0]		=  { 0x2c0, BIT(8) },
-	[RST_BUS_MMC1]		=  { 0x2c0, BIT(9) },
-	[RST_BUS_MMC2]		=  { 0x2c0, BIT(10) },
-	[RST_BUS_DRAM]		=  { 0x2c0, BIT(14) },
-	[RST_BUS_EMAC]		=  { 0x2c0, BIT(17) },
-	[RST_BUS_HSTIMER]	=  { 0x2c0, BIT(19) },
-	[RST_BUS_SPI0]		=  { 0x2c0, BIT(20) },
-	[RST_BUS_OTG]		=  { 0x2c0, BIT(24) },
-	[RST_BUS_EHCI0]		=  { 0x2c0, BIT(26) },
-	[RST_BUS_OHCI0]		=  { 0x2c0, BIT(29) },
-
-	[RST_BUS_VE]		=  { 0x2c4, BIT(0) },
-	[RST_BUS_TCON0]		=  { 0x2c4, BIT(4) },
-	[RST_BUS_CSI]		=  { 0x2c4, BIT(8) },
-	[RST_BUS_DE]		=  { 0x2c4, BIT(12) },
-	[RST_BUS_DBG]		=  { 0x2c4, BIT(31) },
-
-	[RST_BUS_EPHY]		=  { 0x2c8, BIT(2) },
-
-	[RST_BUS_CODEC]		=  { 0x2d0, BIT(0) },
-	[RST_BUS_I2S0]		=  { 0x2d0, BIT(12) },
-
-	[RST_BUS_I2C0]		=  { 0x2d8, BIT(0) },
-	[RST_BUS_I2C1]		=  { 0x2d8, BIT(1) },
-	[RST_BUS_UART0]		=  { 0x2d8, BIT(16) },
-	[RST_BUS_UART1]		=  { 0x2d8, BIT(17) },
-	[RST_BUS_UART2]		=  { 0x2d8, BIT(18) },
-};
-
-static const struct sunxi_ccu_desc sun8i_v3s_ccu_desc = {
-	.ccu_clks	= sun8i_v3s_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun8i_v3s_ccu_clks),
-
-	.hw_clks	= &sun8i_v3s_hw_clks,
-
-	.resets		= sun8i_v3s_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun8i_v3s_ccu_resets),
-};
-
-static const struct sunxi_ccu_desc sun8i_v3_ccu_desc = {
-	.ccu_clks	= sun8i_v3_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun8i_v3_ccu_clks),
-
-	.hw_clks	= &sun8i_v3_hw_clks,
-
-	.resets		= sun8i_v3_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun8i_v3_ccu_resets),
-};
-
-static void __init sun8i_v3_v3s_ccu_init(struct device_node *node,
-					 const struct sunxi_ccu_desc *ccu_desc)
-{
-	void __iomem *reg;
-	u32 val;
-
-	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
-	if (IS_ERR(reg)) {
-		pr_err("%pOF: Could not map the clock registers\n", node);
-		return;
-	}
-
-	/* Force the PLL-Audio-1x divider to 1 */
-	val = readl(reg + SUN8I_V3S_PLL_AUDIO_REG);
-	val &= ~GENMASK(19, 16);
-	writel(val, reg + SUN8I_V3S_PLL_AUDIO_REG);
-
-	of_sunxi_ccu_probe(node, reg, ccu_desc);
-}
-
-static void __init sun8i_v3s_ccu_setup(struct device_node *node)
-{
-	sun8i_v3_v3s_ccu_init(node, &sun8i_v3s_ccu_desc);
-}
-
-static void __init sun8i_v3_ccu_setup(struct device_node *node)
-{
-	sun8i_v3_v3s_ccu_init(node, &sun8i_v3_ccu_desc);
-}
-
-CLK_OF_DECLARE(sun8i_v3s_ccu, "allwinner,sun8i-v3s-ccu",
-	       sun8i_v3s_ccu_setup);
-
-CLK_OF_DECLARE(sun8i_v3_ccu, "allwinner,sun8i-v3-ccu",
-	       sun8i_v3_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/ccu-sun8i-v3s.h b/drivers/clk/sunxi-ng/ccu-sun8i-v3s.h
deleted file mode 100644
index 108eeeedcbf7..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun8i-v3s.h
+++ /dev/null
@@ -1,54 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0-or-later */
-/*
- * Copyright (c) 2016 Icenowy Zheng <icenowy@aosc.xyz>
- *
- * Based on ccu-sun8i-h3.h, which is:
- * Copyright (c) 2016 Maxime Ripard <maxime.ripard@free-electrons.com>
- */
-
-#ifndef _CCU_SUN8I_H3_H_
-#define _CCU_SUN8I_H3_H_
-
-#include <dt-bindings/clock/sun8i-v3s-ccu.h>
-#include <dt-bindings/reset/sun8i-v3s-ccu.h>
-
-#define CLK_PLL_CPU		0
-#define CLK_PLL_AUDIO_BASE	1
-#define CLK_PLL_AUDIO		2
-#define CLK_PLL_AUDIO_2X	3
-#define CLK_PLL_AUDIO_4X	4
-#define CLK_PLL_AUDIO_8X	5
-#define CLK_PLL_VIDEO		6
-#define CLK_PLL_VE		7
-#define CLK_PLL_DDR0		8
-#define CLK_PLL_PERIPH0		9
-#define CLK_PLL_PERIPH0_2X	10
-#define CLK_PLL_ISP		11
-#define CLK_PLL_PERIPH1		12
-/* Reserve one number for not implemented and not used PLL_DDR1 */
-
-/* The CPU clock is exported */
-
-#define CLK_AXI			15
-#define CLK_AHB1		16
-#define CLK_APB1		17
-#define CLK_APB2		18
-#define CLK_AHB2		19
-
-/* All the bus gates are exported */
-
-/* The first bunch of module clocks are exported */
-
-#define CLK_DRAM		58
-
-/* All the DRAM gates are exported */
-
-/* Some more module clocks are exported */
-
-#define CLK_MBUS		72
-
-/* And the GPU module clock is exported */
-
-#define CLK_PLL_DDR1		74
-
-#endif /* _CCU_SUN8I_H3_H_ */
diff --git a/drivers/clk/sunxi-ng/ccu-sun9i-a80-de.c b/drivers/clk/sunxi-ng/ccu-sun9i-a80-de.c
deleted file mode 100644
index d2072972b614..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun9i-a80-de.c
+++ /dev/null
@@ -1,275 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-only
-/*
- * Copyright (c) 2016 Chen-Yu Tsai. All rights reserved.
- */
-
-#include <linux/clk.h>
-#include <linux/clk-provider.h>
-#include <linux/of_address.h>
-#include <linux/platform_device.h>
-#include <linux/reset.h>
-
-#include "ccu_common.h"
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_reset.h"
-
-#include "ccu-sun9i-a80-de.h"
-
-static SUNXI_CCU_GATE(fe0_clk,		"fe0",		"fe0-div",
-		      0x00, BIT(0), 0);
-static SUNXI_CCU_GATE(fe1_clk,		"fe1",		"fe1-div",
-		      0x00, BIT(1), 0);
-static SUNXI_CCU_GATE(fe2_clk,		"fe2",		"fe2-div",
-		      0x00, BIT(2), 0);
-static SUNXI_CCU_GATE(iep_deu0_clk,	"iep-deu0",	"de",
-		      0x00, BIT(4), 0);
-static SUNXI_CCU_GATE(iep_deu1_clk,	"iep-deu1",	"de",
-		      0x00, BIT(5), 0);
-static SUNXI_CCU_GATE(be0_clk,		"be0",		"be0-div",
-		      0x00, BIT(8), 0);
-static SUNXI_CCU_GATE(be1_clk,		"be1",		"be1-div",
-		      0x00, BIT(9), 0);
-static SUNXI_CCU_GATE(be2_clk,		"be2",		"be2-div",
-		      0x00, BIT(10), 0);
-static SUNXI_CCU_GATE(iep_drc0_clk,	"iep-drc0",	"de",
-		      0x00, BIT(12), 0);
-static SUNXI_CCU_GATE(iep_drc1_clk,	"iep-drc1",	"de",
-		      0x00, BIT(13), 0);
-static SUNXI_CCU_GATE(merge_clk,	"merge",	"de",
-		      0x00, BIT(20), 0);
-
-static SUNXI_CCU_GATE(dram_fe0_clk,	"dram-fe0",	"sdram",
-		      0x04, BIT(0), 0);
-static SUNXI_CCU_GATE(dram_fe1_clk,	"dram-fe1",	"sdram",
-		      0x04, BIT(1), 0);
-static SUNXI_CCU_GATE(dram_fe2_clk,	"dram-fe2",	"sdram",
-		      0x04, BIT(2), 0);
-static SUNXI_CCU_GATE(dram_deu0_clk,	"dram-deu0",	"sdram",
-		      0x04, BIT(4), 0);
-static SUNXI_CCU_GATE(dram_deu1_clk,	"dram-deu1",	"sdram",
-		      0x04, BIT(5), 0);
-static SUNXI_CCU_GATE(dram_be0_clk,	"dram-be0",	"sdram",
-		      0x04, BIT(8), 0);
-static SUNXI_CCU_GATE(dram_be1_clk,	"dram-be1",	"sdram",
-		      0x04, BIT(9), 0);
-static SUNXI_CCU_GATE(dram_be2_clk,	"dram-be2",	"sdram",
-		      0x04, BIT(10), 0);
-static SUNXI_CCU_GATE(dram_drc0_clk,	"dram-drc0",	"sdram",
-		      0x04, BIT(12), 0);
-static SUNXI_CCU_GATE(dram_drc1_clk,	"dram-drc1",	"sdram",
-		      0x04, BIT(13), 0);
-
-static SUNXI_CCU_GATE(bus_fe0_clk,	"bus-fe0",	"bus-de",
-		      0x08, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_fe1_clk,	"bus-fe1",	"bus-de",
-		      0x08, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_fe2_clk,	"bus-fe2",	"bus-de",
-		      0x08, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_deu0_clk,	"bus-deu0",	"bus-de",
-		      0x08, BIT(4), 0);
-static SUNXI_CCU_GATE(bus_deu1_clk,	"bus-deu1",	"bus-de",
-		      0x08, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_be0_clk,	"bus-be0",	"bus-de",
-		      0x08, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_be1_clk,	"bus-be1",	"bus-de",
-		      0x08, BIT(9), 0);
-static SUNXI_CCU_GATE(bus_be2_clk,	"bus-be2",	"bus-de",
-		      0x08, BIT(10), 0);
-static SUNXI_CCU_GATE(bus_drc0_clk,	"bus-drc0",	"bus-de",
-		      0x08, BIT(12), 0);
-static SUNXI_CCU_GATE(bus_drc1_clk,	"bus-drc1",	"bus-de",
-		      0x08, BIT(13), 0);
-
-static SUNXI_CCU_M(fe0_div_clk, "fe0-div", "de", 0x20, 0, 4, 0);
-static SUNXI_CCU_M(fe1_div_clk, "fe1-div", "de", 0x20, 4, 4, 0);
-static SUNXI_CCU_M(fe2_div_clk, "fe2-div", "de", 0x20, 8, 4, 0);
-static SUNXI_CCU_M(be0_div_clk, "be0-div", "de", 0x20, 16, 4, 0);
-static SUNXI_CCU_M(be1_div_clk, "be1-div", "de", 0x20, 20, 4, 0);
-static SUNXI_CCU_M(be2_div_clk, "be2-div", "de", 0x20, 24, 4, 0);
-
-static struct ccu_common *sun9i_a80_de_clks[] = {
-	&fe0_clk.common,
-	&fe1_clk.common,
-	&fe2_clk.common,
-	&iep_deu0_clk.common,
-	&iep_deu1_clk.common,
-	&be0_clk.common,
-	&be1_clk.common,
-	&be2_clk.common,
-	&iep_drc0_clk.common,
-	&iep_drc1_clk.common,
-	&merge_clk.common,
-
-	&dram_fe0_clk.common,
-	&dram_fe1_clk.common,
-	&dram_fe2_clk.common,
-	&dram_deu0_clk.common,
-	&dram_deu1_clk.common,
-	&dram_be0_clk.common,
-	&dram_be1_clk.common,
-	&dram_be2_clk.common,
-	&dram_drc0_clk.common,
-	&dram_drc1_clk.common,
-
-	&bus_fe0_clk.common,
-	&bus_fe1_clk.common,
-	&bus_fe2_clk.common,
-	&bus_deu0_clk.common,
-	&bus_deu1_clk.common,
-	&bus_be0_clk.common,
-	&bus_be1_clk.common,
-	&bus_be2_clk.common,
-	&bus_drc0_clk.common,
-	&bus_drc1_clk.common,
-
-	&fe0_div_clk.common,
-	&fe1_div_clk.common,
-	&fe2_div_clk.common,
-	&be0_div_clk.common,
-	&be1_div_clk.common,
-	&be2_div_clk.common,
-};
-
-static struct clk_hw_onecell_data sun9i_a80_de_hw_clks = {
-	.hws	= {
-		[CLK_FE0]	= &fe0_clk.common.hw,
-		[CLK_FE1]	= &fe1_clk.common.hw,
-		[CLK_FE2]	= &fe2_clk.common.hw,
-		[CLK_IEP_DEU0]	= &iep_deu0_clk.common.hw,
-		[CLK_IEP_DEU1]	= &iep_deu1_clk.common.hw,
-		[CLK_BE0]	= &be0_clk.common.hw,
-		[CLK_BE1]	= &be1_clk.common.hw,
-		[CLK_BE2]	= &be2_clk.common.hw,
-		[CLK_IEP_DRC0]	= &iep_drc0_clk.common.hw,
-		[CLK_IEP_DRC1]	= &iep_drc1_clk.common.hw,
-		[CLK_MERGE]	= &merge_clk.common.hw,
-
-		[CLK_DRAM_FE0]	= &dram_fe0_clk.common.hw,
-		[CLK_DRAM_FE1]	= &dram_fe1_clk.common.hw,
-		[CLK_DRAM_FE2]	= &dram_fe2_clk.common.hw,
-		[CLK_DRAM_DEU0]	= &dram_deu0_clk.common.hw,
-		[CLK_DRAM_DEU1]	= &dram_deu1_clk.common.hw,
-		[CLK_DRAM_BE0]	= &dram_be0_clk.common.hw,
-		[CLK_DRAM_BE1]	= &dram_be1_clk.common.hw,
-		[CLK_DRAM_BE2]	= &dram_be2_clk.common.hw,
-		[CLK_DRAM_DRC0]	= &dram_drc0_clk.common.hw,
-		[CLK_DRAM_DRC1]	= &dram_drc1_clk.common.hw,
-
-		[CLK_BUS_FE0]	= &bus_fe0_clk.common.hw,
-		[CLK_BUS_FE1]	= &bus_fe1_clk.common.hw,
-		[CLK_BUS_FE2]	= &bus_fe2_clk.common.hw,
-		[CLK_BUS_DEU0]	= &bus_deu0_clk.common.hw,
-		[CLK_BUS_DEU1]	= &bus_deu1_clk.common.hw,
-		[CLK_BUS_BE0]	= &bus_be0_clk.common.hw,
-		[CLK_BUS_BE1]	= &bus_be1_clk.common.hw,
-		[CLK_BUS_BE2]	= &bus_be2_clk.common.hw,
-		[CLK_BUS_DRC0]	= &bus_drc0_clk.common.hw,
-		[CLK_BUS_DRC1]	= &bus_drc1_clk.common.hw,
-
-		[CLK_FE0_DIV]	= &fe0_div_clk.common.hw,
-		[CLK_FE1_DIV]	= &fe1_div_clk.common.hw,
-		[CLK_FE2_DIV]	= &fe2_div_clk.common.hw,
-		[CLK_BE0_DIV]	= &be0_div_clk.common.hw,
-		[CLK_BE1_DIV]	= &be1_div_clk.common.hw,
-		[CLK_BE2_DIV]	= &be2_div_clk.common.hw,
-	},
-	.num	= CLK_NUMBER,
-};
-
-static struct ccu_reset_map sun9i_a80_de_resets[] = {
-	[RST_FE0]	= { 0x0c, BIT(0) },
-	[RST_FE1]	= { 0x0c, BIT(1) },
-	[RST_FE2]	= { 0x0c, BIT(2) },
-	[RST_DEU0]	= { 0x0c, BIT(4) },
-	[RST_DEU1]	= { 0x0c, BIT(5) },
-	[RST_BE0]	= { 0x0c, BIT(8) },
-	[RST_BE1]	= { 0x0c, BIT(9) },
-	[RST_BE2]	= { 0x0c, BIT(10) },
-	[RST_DRC0]	= { 0x0c, BIT(12) },
-	[RST_DRC1]	= { 0x0c, BIT(13) },
-	[RST_MERGE]	= { 0x0c, BIT(20) },
-};
-
-static const struct sunxi_ccu_desc sun9i_a80_de_clk_desc = {
-	.ccu_clks	= sun9i_a80_de_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun9i_a80_de_clks),
-
-	.hw_clks	= &sun9i_a80_de_hw_clks,
-
-	.resets		= sun9i_a80_de_resets,
-	.num_resets	= ARRAY_SIZE(sun9i_a80_de_resets),
-};
-
-static int sun9i_a80_de_clk_probe(struct platform_device *pdev)
-{
-	struct resource *res;
-	struct clk *bus_clk;
-	struct reset_control *rstc;
-	void __iomem *reg;
-	int ret;
-
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	reg = devm_ioremap_resource(&pdev->dev, res);
-	if (IS_ERR(reg))
-		return PTR_ERR(reg);
-
-	bus_clk = devm_clk_get(&pdev->dev, "bus");
-	if (IS_ERR(bus_clk)) {
-		ret = PTR_ERR(bus_clk);
-		if (ret != -EPROBE_DEFER)
-			dev_err(&pdev->dev, "Couldn't get bus clk: %d\n", ret);
-		return ret;
-	}
-
-	rstc = devm_reset_control_get_exclusive(&pdev->dev, NULL);
-	if (IS_ERR(rstc)) {
-		ret = PTR_ERR(rstc);
-		if (ret != -EPROBE_DEFER)
-			dev_err(&pdev->dev,
-				"Couldn't get reset control: %d\n", ret);
-		return ret;
-	}
-
-	/* The bus clock needs to be enabled for us to access the registers */
-	ret = clk_prepare_enable(bus_clk);
-	if (ret) {
-		dev_err(&pdev->dev, "Couldn't enable bus clk: %d\n", ret);
-		return ret;
-	}
-
-	/* The reset control needs to be asserted for the controls to work */
-	ret = reset_control_deassert(rstc);
-	if (ret) {
-		dev_err(&pdev->dev,
-			"Couldn't deassert reset control: %d\n", ret);
-		goto err_disable_clk;
-	}
-
-	ret = devm_sunxi_ccu_probe(&pdev->dev, reg, &sun9i_a80_de_clk_desc);
-	if (ret)
-		goto err_assert_reset;
-
-	return 0;
-
-err_assert_reset:
-	reset_control_assert(rstc);
-err_disable_clk:
-	clk_disable_unprepare(bus_clk);
-	return ret;
-}
-
-static const struct of_device_id sun9i_a80_de_clk_ids[] = {
-	{ .compatible = "allwinner,sun9i-a80-de-clks" },
-	{ }
-};
-
-static struct platform_driver sun9i_a80_de_clk_driver = {
-	.probe	= sun9i_a80_de_clk_probe,
-	.driver	= {
-		.name	= "sun9i-a80-de-clks",
-		.suppress_bind_attrs = true,
-		.of_match_table	= sun9i_a80_de_clk_ids,
-	},
-};
-builtin_platform_driver(sun9i_a80_de_clk_driver);
diff --git a/drivers/clk/sunxi-ng/ccu-sun9i-a80-de.h b/drivers/clk/sunxi-ng/ccu-sun9i-a80-de.h
deleted file mode 100644
index e7a408c30429..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun9i-a80-de.h
+++ /dev/null
@@ -1,24 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0-or-later */
-/*
- * Copyright 2016 Chen-Yu Tsai
- *
- * Chen-Yu Tsai <wens@csie.org>
- */
-
-#ifndef _CCU_SUN9I_A80_DE_H_
-#define _CCU_SUN9I_A80_DE_H_
-
-#include <dt-bindings/clock/sun9i-a80-de.h>
-#include <dt-bindings/reset/sun9i-a80-de.h>
-
-/* Intermediary clock dividers are not exported */
-#define CLK_FE0_DIV	31
-#define CLK_FE1_DIV	32
-#define CLK_FE2_DIV	33
-#define CLK_BE0_DIV	34
-#define CLK_BE1_DIV	35
-#define CLK_BE2_DIV	36
-
-#define CLK_NUMBER	(CLK_BE2_DIV + 1)
-
-#endif /* _CCU_SUN9I_A80_DE_H_ */
diff --git a/drivers/clk/sunxi-ng/ccu-sun9i-a80-usb.c b/drivers/clk/sunxi-ng/ccu-sun9i-a80-usb.c
deleted file mode 100644
index 596243b3e0fa..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun9i-a80-usb.c
+++ /dev/null
@@ -1,143 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-only
-/*
- * Copyright (c) 2016 Chen-Yu Tsai. All rights reserved.
- */
-
-#include <linux/clk.h>
-#include <linux/clk-provider.h>
-#include <linux/of_address.h>
-#include <linux/platform_device.h>
-
-#include "ccu_common.h"
-#include "ccu_gate.h"
-#include "ccu_reset.h"
-
-#include "ccu-sun9i-a80-usb.h"
-
-static const struct clk_parent_data clk_parent_hosc[] = {
-	{ .fw_name = "hosc" },
-};
-
-static const struct clk_parent_data clk_parent_bus[] = {
-	{ .fw_name = "bus" },
-};
-
-static SUNXI_CCU_GATE_DATA(bus_hci0_clk, "bus-hci0", clk_parent_bus, 0x0, BIT(1), 0);
-static SUNXI_CCU_GATE_DATA(usb_ohci0_clk, "usb-ohci0", clk_parent_hosc, 0x0, BIT(2), 0);
-static SUNXI_CCU_GATE_DATA(bus_hci1_clk, "bus-hci1", clk_parent_bus, 0x0, BIT(3), 0);
-static SUNXI_CCU_GATE_DATA(bus_hci2_clk, "bus-hci2", clk_parent_bus, 0x0, BIT(5), 0);
-static SUNXI_CCU_GATE_DATA(usb_ohci2_clk, "usb-ohci2", clk_parent_hosc, 0x0, BIT(6), 0);
-
-static SUNXI_CCU_GATE_DATA(usb0_phy_clk, "usb0-phy", clk_parent_hosc, 0x4, BIT(1), 0);
-static SUNXI_CCU_GATE_DATA(usb1_hsic_clk, "usb1-hsic", clk_parent_hosc, 0x4, BIT(2), 0);
-static SUNXI_CCU_GATE_DATA(usb1_phy_clk, "usb1-phy", clk_parent_hosc, 0x4, BIT(3), 0);
-static SUNXI_CCU_GATE_DATA(usb2_hsic_clk, "usb2-hsic", clk_parent_hosc, 0x4, BIT(4), 0);
-static SUNXI_CCU_GATE_DATA(usb2_phy_clk, "usb2-phy", clk_parent_hosc, 0x4, BIT(5), 0);
-static SUNXI_CCU_GATE_DATA(usb_hsic_clk, "usb-hsic", clk_parent_hosc, 0x4, BIT(10), 0);
-
-static struct ccu_common *sun9i_a80_usb_clks[] = {
-	&bus_hci0_clk.common,
-	&usb_ohci0_clk.common,
-	&bus_hci1_clk.common,
-	&bus_hci2_clk.common,
-	&usb_ohci2_clk.common,
-
-	&usb0_phy_clk.common,
-	&usb1_hsic_clk.common,
-	&usb1_phy_clk.common,
-	&usb2_hsic_clk.common,
-	&usb2_phy_clk.common,
-	&usb_hsic_clk.common,
-};
-
-static struct clk_hw_onecell_data sun9i_a80_usb_hw_clks = {
-	.hws	= {
-		[CLK_BUS_HCI0]	= &bus_hci0_clk.common.hw,
-		[CLK_USB_OHCI0]	= &usb_ohci0_clk.common.hw,
-		[CLK_BUS_HCI1]	= &bus_hci1_clk.common.hw,
-		[CLK_BUS_HCI2]	= &bus_hci2_clk.common.hw,
-		[CLK_USB_OHCI2]	= &usb_ohci2_clk.common.hw,
-
-		[CLK_USB0_PHY]	= &usb0_phy_clk.common.hw,
-		[CLK_USB1_HSIC]	= &usb1_hsic_clk.common.hw,
-		[CLK_USB1_PHY]	= &usb1_phy_clk.common.hw,
-		[CLK_USB2_HSIC]	= &usb2_hsic_clk.common.hw,
-		[CLK_USB2_PHY]	= &usb2_phy_clk.common.hw,
-		[CLK_USB_HSIC]	= &usb_hsic_clk.common.hw,
-	},
-	.num	= CLK_NUMBER,
-};
-
-static struct ccu_reset_map sun9i_a80_usb_resets[] = {
-	[RST_USB0_HCI]		= { 0x0, BIT(17) },
-	[RST_USB1_HCI]		= { 0x0, BIT(18) },
-	[RST_USB2_HCI]		= { 0x0, BIT(19) },
-
-	[RST_USB0_PHY]		= { 0x4, BIT(17) },
-	[RST_USB1_HSIC]		= { 0x4, BIT(18) },
-	[RST_USB1_PHY]		= { 0x4, BIT(19) },
-	[RST_USB2_HSIC]		= { 0x4, BIT(20) },
-	[RST_USB2_PHY]		= { 0x4, BIT(21) },
-};
-
-static const struct sunxi_ccu_desc sun9i_a80_usb_clk_desc = {
-	.ccu_clks	= sun9i_a80_usb_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun9i_a80_usb_clks),
-
-	.hw_clks	= &sun9i_a80_usb_hw_clks,
-
-	.resets		= sun9i_a80_usb_resets,
-	.num_resets	= ARRAY_SIZE(sun9i_a80_usb_resets),
-};
-
-static int sun9i_a80_usb_clk_probe(struct platform_device *pdev)
-{
-	struct resource *res;
-	struct clk *bus_clk;
-	void __iomem *reg;
-	int ret;
-
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	reg = devm_ioremap_resource(&pdev->dev, res);
-	if (IS_ERR(reg))
-		return PTR_ERR(reg);
-
-	bus_clk = devm_clk_get(&pdev->dev, "bus");
-	if (IS_ERR(bus_clk)) {
-		ret = PTR_ERR(bus_clk);
-		if (ret != -EPROBE_DEFER)
-			dev_err(&pdev->dev, "Couldn't get bus clk: %d\n", ret);
-		return ret;
-	}
-
-	/* The bus clock needs to be enabled for us to access the registers */
-	ret = clk_prepare_enable(bus_clk);
-	if (ret) {
-		dev_err(&pdev->dev, "Couldn't enable bus clk: %d\n", ret);
-		return ret;
-	}
-
-	ret = devm_sunxi_ccu_probe(&pdev->dev, reg, &sun9i_a80_usb_clk_desc);
-	if (ret)
-		goto err_disable_clk;
-
-	return 0;
-
-err_disable_clk:
-	clk_disable_unprepare(bus_clk);
-	return ret;
-}
-
-static const struct of_device_id sun9i_a80_usb_clk_ids[] = {
-	{ .compatible = "allwinner,sun9i-a80-usb-clks" },
-	{ }
-};
-
-static struct platform_driver sun9i_a80_usb_clk_driver = {
-	.probe	= sun9i_a80_usb_clk_probe,
-	.driver	= {
-		.name	= "sun9i-a80-usb-clks",
-		.of_match_table	= sun9i_a80_usb_clk_ids,
-	},
-};
-builtin_platform_driver(sun9i_a80_usb_clk_driver);
diff --git a/drivers/clk/sunxi-ng/ccu-sun9i-a80-usb.h b/drivers/clk/sunxi-ng/ccu-sun9i-a80-usb.h
deleted file mode 100644
index a0372eb5a4c6..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun9i-a80-usb.h
+++ /dev/null
@@ -1,16 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0-or-later */
-/*
- * Copyright 2016 Chen-Yu Tsai
- *
- * Chen-Yu Tsai <wens@csie.org>
- */
-
-#ifndef _CCU_SUN9I_A80_USB_H_
-#define _CCU_SUN9I_A80_USB_H_
-
-#include <dt-bindings/clock/sun9i-a80-usb.h>
-#include <dt-bindings/reset/sun9i-a80-usb.h>
-
-#define CLK_NUMBER	(CLK_USB_HSIC + 1)
-
-#endif /* _CCU_SUN9I_A80_USB_H_ */
diff --git a/drivers/clk/sunxi-ng/ccu-sun9i-a80.c b/drivers/clk/sunxi-ng/ccu-sun9i-a80.c
deleted file mode 100644
index 68b30fdc60fd..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun9i-a80.c
+++ /dev/null
@@ -1,1250 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-only
-/*
- * Copyright (c) 2016 Chen-Yu Tsai. All rights reserved.
- */
-
-#include <linux/clk-provider.h>
-#include <linux/io.h>
-#include <linux/of_address.h>
-#include <linux/platform_device.h>
-
-#include "ccu_common.h"
-#include "ccu_reset.h"
-
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_mp.h"
-#include "ccu_nkmp.h"
-#include "ccu_nm.h"
-#include "ccu_phase.h"
-
-#include "ccu-sun9i-a80.h"
-
-#define CCU_SUN9I_LOCK_REG	0x09c
-
-/*
- * The CPU PLLs are actually NP clocks, with P being /1 or /4. However
- * P should only be used for output frequencies lower than 228 MHz.
- * Neither mainline Linux, U-boot, nor the vendor BSPs use these.
- *
- * For now we can just model it as a multiplier clock, and force P to /1.
- */
-#define SUN9I_A80_PLL_C0CPUX_REG	0x000
-#define SUN9I_A80_PLL_C1CPUX_REG	0x004
-
-static struct ccu_mult pll_c0cpux_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(0),
-	.mult		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.common		= {
-		.reg		= SUN9I_A80_PLL_C0CPUX_REG,
-		.lock_reg	= CCU_SUN9I_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-c0cpux", "osc24M",
-					      &ccu_mult_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static struct ccu_mult pll_c1cpux_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(1),
-	.mult		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.common		= {
-		.reg		= SUN9I_A80_PLL_C1CPUX_REG,
-		.lock_reg	= CCU_SUN9I_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-c1cpux", "osc24M",
-					      &ccu_mult_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-/*
- * The Audio PLL has d1, d2 dividers in addition to the usual N, M
- * factors. Since we only need 2 frequencies from this PLL: 22.5792 MHz
- * and 24.576 MHz, ignore them for now. Enforce d1 = 0 and d2 = 0.
- */
-#define SUN9I_A80_PLL_AUDIO_REG	0x008
-
-static struct ccu_nm pll_audio_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(2),
-	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.m		= _SUNXI_CCU_DIV_OFFSET(0, 6, 0),
-	.common		= {
-		.reg		= 0x008,
-		.lock_reg	= CCU_SUN9I_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-audio", "osc24M",
-					      &ccu_nm_ops, CLK_SET_RATE_UNGATE),
-	},
-};
-
-/* Some PLLs are input * N / div1 / div2. Model them as NKMP with no K */
-static struct ccu_nkmp pll_periph0_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(3),
-	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
-	.common		= {
-		.reg		= 0x00c,
-		.lock_reg	= CCU_SUN9I_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-periph0", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static struct ccu_nkmp pll_ve_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(4),
-	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
-	.common		= {
-		.reg		= 0x010,
-		.lock_reg	= CCU_SUN9I_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-ve", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static struct ccu_nkmp pll_ddr_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(5),
-	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
-	.common		= {
-		.reg		= 0x014,
-		.lock_reg	= CCU_SUN9I_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-ddr", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static struct ccu_nm pll_video0_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(6),
-	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
-	.common		= {
-		.reg		= 0x018,
-		.lock_reg	= CCU_SUN9I_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-video0", "osc24M",
-					      &ccu_nm_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static struct ccu_nkmp pll_video1_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(7),
-	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(0, 2), /* external divider p */
-	.common		= {
-		.reg		= 0x01c,
-		.lock_reg	= CCU_SUN9I_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-video1", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static struct ccu_nkmp pll_gpu_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(8),
-	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
-	.common		= {
-		.reg		= 0x020,
-		.lock_reg	= CCU_SUN9I_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-gpu", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static struct ccu_nkmp pll_de_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(9),
-	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
-	.common		= {
-		.reg		= 0x024,
-		.lock_reg	= CCU_SUN9I_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-de", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static struct ccu_nkmp pll_isp_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(10),
-	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
-	.common		= {
-		.reg		= 0x028,
-		.lock_reg	= CCU_SUN9I_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-isp", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static struct ccu_nkmp pll_periph1_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(11),
-	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
-	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
-	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
-	.common		= {
-		.reg		= 0x028,
-		.lock_reg	= CCU_SUN9I_LOCK_REG,
-		.features	= CCU_FEATURE_LOCK_REG,
-		.hw.init	= CLK_HW_INIT("pll-periph1", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-static const char * const c0cpux_parents[] = { "osc24M", "pll-c0cpux" };
-static SUNXI_CCU_MUX(c0cpux_clk, "c0cpux", c0cpux_parents,
-		     0x50, 0, 1, CLK_SET_RATE_PARENT | CLK_IS_CRITICAL);
-
-static const char * const c1cpux_parents[] = { "osc24M", "pll-c1cpux" };
-static SUNXI_CCU_MUX(c1cpux_clk, "c1cpux", c1cpux_parents,
-		     0x50, 8, 1, CLK_SET_RATE_PARENT | CLK_IS_CRITICAL);
-
-static struct clk_div_table axi_div_table[] = {
-	{ .val = 0, .div = 1 },
-	{ .val = 1, .div = 2 },
-	{ .val = 2, .div = 3 },
-	{ .val = 3, .div = 4 },
-	{ .val = 4, .div = 4 },
-	{ .val = 5, .div = 4 },
-	{ .val = 6, .div = 4 },
-	{ .val = 7, .div = 4 },
-	{ /* Sentinel */ },
-};
-
-static SUNXI_CCU_M(atb0_clk, "atb0", "c0cpux", 0x054, 8, 2, 0);
-
-static SUNXI_CCU_DIV_TABLE(axi0_clk, "axi0", "c0cpux",
-			   0x054, 0, 3, axi_div_table, 0);
-
-static SUNXI_CCU_M(atb1_clk, "atb1", "c1cpux", 0x058, 8, 2, 0);
-
-static SUNXI_CCU_DIV_TABLE(axi1_clk, "axi1", "c1cpux",
-			   0x058, 0, 3, axi_div_table, 0);
-
-static const char * const gtbus_parents[] = { "osc24M", "pll-periph0",
-					      "pll-periph1", "pll-periph1" };
-static SUNXI_CCU_M_WITH_MUX(gtbus_clk, "gtbus", gtbus_parents,
-			    0x05c, 0, 2, 24, 2, CLK_IS_CRITICAL);
-
-static const char * const ahb_parents[] = { "gtbus", "pll-periph0",
-					    "pll-periph1", "pll-periph1" };
-static struct ccu_div ahb0_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(0, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0x060,
-		.hw.init	= CLK_HW_INIT_PARENTS("ahb0",
-						      ahb_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static struct ccu_div ahb1_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(0, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0x064,
-		.hw.init	= CLK_HW_INIT_PARENTS("ahb1",
-						      ahb_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static struct ccu_div ahb2_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(0, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0x068,
-		.hw.init	= CLK_HW_INIT_PARENTS("ahb2",
-						      ahb_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static const char * const apb_parents[] = { "osc24M", "pll-periph0" };
-
-static struct ccu_div apb0_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(0, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 1),
-	.common		= {
-		.reg		= 0x070,
-		.hw.init	= CLK_HW_INIT_PARENTS("apb0",
-						      apb_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static struct ccu_div apb1_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(0, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 1),
-	.common		= {
-		.reg		= 0x074,
-		.hw.init	= CLK_HW_INIT_PARENTS("apb1",
-						      apb_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static struct ccu_div cci400_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(0, 2, CLK_DIVIDER_POWER_OF_TWO),
-	.mux		= _SUNXI_CCU_MUX(24, 2),
-	.common		= {
-		.reg		= 0x078,
-		.hw.init	= CLK_HW_INIT_PARENTS("cci400",
-						      ahb_parents,
-						      &ccu_div_ops,
-						      CLK_IS_CRITICAL),
-	},
-};
-
-static SUNXI_CCU_M_WITH_MUX_GATE(ats_clk, "ats", apb_parents,
-				 0x080, 0, 3, 24, 2, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(trace_clk, "trace", apb_parents,
-				 0x084, 0, 3, 24, 2, BIT(31), 0);
-
-static const char * const out_parents[] = { "osc24M", "osc32k", "osc24M" };
-static const struct ccu_mux_fixed_prediv out_prediv = {
-	.index = 0, .div = 750
-};
-
-static struct ccu_mp out_a_clk = {
-	.enable		= BIT(31),
-	.m		= _SUNXI_CCU_DIV(8, 5),
-	.p		= _SUNXI_CCU_DIV(20, 2),
-	.mux		= {
-		.shift		= 24,
-		.width		= 4,
-		.fixed_predivs	= &out_prediv,
-		.n_predivs	= 1,
-	},
-	.common		= {
-		.reg		= 0x180,
-		.features	= CCU_FEATURE_FIXED_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("out-a",
-						      out_parents,
-						      &ccu_mp_ops,
-						      0),
-	},
-};
-
-static struct ccu_mp out_b_clk = {
-	.enable		= BIT(31),
-	.m		= _SUNXI_CCU_DIV(8, 5),
-	.p		= _SUNXI_CCU_DIV(20, 2),
-	.mux		= {
-		.shift		= 24,
-		.width		= 4,
-		.fixed_predivs	= &out_prediv,
-		.n_predivs	= 1,
-	},
-	.common		= {
-		.reg		= 0x184,
-		.features	= CCU_FEATURE_FIXED_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("out-b",
-						      out_parents,
-						      &ccu_mp_ops,
-						      0),
-	},
-};
-
-static const char * const mod0_default_parents[] = { "osc24M", "pll-periph0" };
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand0_0_clk, "nand0-0", mod0_default_parents,
-				  0x400,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 4,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand0_1_clk, "nand0-1", mod0_default_parents,
-				  0x404,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 4,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand1_0_clk, "nand1-0", mod0_default_parents,
-				  0x408,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 4,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(nand1_1_clk, "nand1-1", mod0_default_parents,
-				  0x40c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 4,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents,
-				  0x410,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 4,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc0_sample_clk, "mmc0-sample", "mmc0",
-		       0x410, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc0_output_clk, "mmc0-output", "mmc0",
-		       0x410, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents,
-				  0x414,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 4,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc1_sample_clk, "mmc1-sample", "mmc1",
-		       0x414, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc1_output_clk, "mmc1-output", "mmc1",
-		       0x414, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents,
-				  0x418,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 4,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc2_sample_clk, "mmc2-sample", "mmc2",
-		       0x418, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc2_output_clk, "mmc2-output", "mmc2",
-		       0x418, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc3_clk, "mmc3", mod0_default_parents,
-				  0x41c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 4,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc3_sample_clk, "mmc3-sample", "mmc3",
-		       0x41c, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc3_output_clk, "mmc3-output", "mmc3",
-		       0x41c, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(ts_clk, "ts", mod0_default_parents,
-				  0x428,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 4,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static const char * const ss_parents[] = { "osc24M", "pll-periph",
-					   "pll-periph1" };
-static const u8 ss_table[] = { 0, 1, 13 };
-static struct ccu_mp ss_clk = {
-	.enable		= BIT(31),
-	.m		= _SUNXI_CCU_DIV(0, 4),
-	.p		= _SUNXI_CCU_DIV(16, 2),
-	.mux		= _SUNXI_CCU_MUX_TABLE(24, 4, ss_table),
-	.common		= {
-		.reg		= 0x42c,
-		.hw.init	= CLK_HW_INIT_PARENTS("ss",
-						      ss_parents,
-						      &ccu_mp_ops,
-						      0),
-	},
-};
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents,
-				  0x430,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 4,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents,
-				  0x434,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 4,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi2_clk, "spi2", mod0_default_parents,
-				  0x438,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 4,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(spi3_clk, "spi3", mod0_default_parents,
-				  0x43c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 4,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_M_WITH_GATE(i2s0_clk, "i2s0", "pll-audio",
-			     0x440, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M_WITH_GATE(i2s1_clk, "i2s1", "pll-audio",
-			     0x444, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M_WITH_GATE(spdif_clk, "spdif", "pll-audio",
-			     0x44c, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
-
-static const char * const sdram_parents[] = { "pll-periph0", "pll-ddr" };
-static const u8 sdram_table[] = { 0, 3 };
-
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(sdram_clk, "sdram",
-				       sdram_parents, sdram_table,
-				       0x484,
-				       8, 4,	/* M */
-				       12, 4,	/* mux */
-				       0,	/* no gate */
-				       CLK_IS_CRITICAL);
-
-static SUNXI_CCU_M_WITH_GATE(de_clk, "de", "pll-de", 0x490,
-			     0, 4, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(edp_clk, "edp", "osc24M", 0x494, BIT(31), 0);
-
-static const char * const mp_parents[] = { "pll-video1", "pll-gpu", "pll-de" };
-static const u8 mp_table[] = { 9, 10, 11 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(mp_clk, "mp", mp_parents, mp_table,
-				       0x498,
-				       0, 4,	/* M */
-				       24, 4,	/* mux */
-				       BIT(31),	/* gate */
-				       0);
-
-static const char * const display_parents[] = { "pll-video0", "pll-video1" };
-static const u8 display_table[] = { 8, 9 };
-
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(lcd0_clk, "lcd0",
-				       display_parents, display_table,
-				       0x49c,
-				       0, 4,	/* M */
-				       24, 4,	/* mux */
-				       BIT(31),	/* gate */
-				       CLK_SET_RATE_NO_REPARENT |
-				       CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(lcd1_clk, "lcd1",
-				       display_parents, display_table,
-				       0x4a0,
-				       0, 4,	/* M */
-				       24, 4,	/* mux */
-				       BIT(31),	/* gate */
-				       CLK_SET_RATE_NO_REPARENT |
-				       CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(mipi_dsi0_clk, "mipi-dsi0",
-				       display_parents, display_table,
-				       0x4a8,
-				       0, 4,	/* M */
-				       24, 4,	/* mux */
-				       BIT(31),	/* gate */
-				       CLK_SET_RATE_PARENT);
-
-static const char * const mipi_dsi1_parents[] = { "osc24M", "pll-video1" };
-static const u8 mipi_dsi1_table[] = { 0, 9 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(mipi_dsi1_clk, "mipi-dsi1",
-				       mipi_dsi1_parents, mipi_dsi1_table,
-				       0x4ac,
-				       0, 4,	/* M */
-				       24, 4,	/* mux */
-				       BIT(31),	/* gate */
-				       CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(hdmi_clk, "hdmi",
-				       display_parents, display_table,
-				       0x4b0,
-				       0, 4,	/* M */
-				       24, 4,	/* mux */
-				       BIT(31),	/* gate */
-				       CLK_SET_RATE_NO_REPARENT |
-				       CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(hdmi_slow_clk, "hdmi-slow", "osc24M", 0x4b4, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_GATE(mipi_csi_clk, "mipi-csi", "osc24M", 0x4bc,
-			     0, 4, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_GATE(csi_isp_clk, "csi-isp", "pll-isp", 0x4c0,
-			     0, 4, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(csi_misc_clk, "csi-misc", "osc24M", 0x4c0, BIT(16), 0);
-
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi0_mclk_clk, "csi0-mclk",
-				       mipi_dsi1_parents, mipi_dsi1_table,
-				       0x4c4,
-				       0, 4,	/* M */
-				       24, 4,	/* mux */
-				       BIT(31),	/* gate */
-				       CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi1_mclk_clk, "csi1-mclk",
-				       mipi_dsi1_parents, mipi_dsi1_table,
-				       0x4c8,
-				       0, 4,	/* M */
-				       24, 4,	/* mux */
-				       BIT(31),	/* gate */
-				       CLK_SET_RATE_PARENT);
-
-static const char * const fd_parents[] = { "pll-periph0", "pll-isp" };
-static const u8 fd_table[] = { 1, 12 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(fd_clk, "fd", fd_parents, fd_table,
-				       0x4cc,
-				       0, 4,	/* M */
-				       24, 4,	/* mux */
-				       BIT(31),	/* gate */
-				       0);
-static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve", 0x4d0,
-			     16, 3, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_GATE(avs_clk, "avs", "osc24M", 0x4d4, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_GATE(gpu_core_clk, "gpu-core", "pll-gpu", 0x4f0,
-			     0, 3, BIT(31), CLK_SET_RATE_PARENT);
-static SUNXI_CCU_M_WITH_GATE(gpu_memory_clk, "gpu-memory", "pll-gpu", 0x4f4,
-			     0, 3, BIT(31), CLK_SET_RATE_PARENT);
-
-static const char * const gpu_axi_parents[] = { "pll-periph0", "pll-gpu" };
-static const u8 gpu_axi_table[] = { 1, 10 };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(gpu_axi_clk, "gpu-axi",
-				       gpu_axi_parents, gpu_axi_table,
-				       0x4f8,
-				       0, 4,	/* M */
-				       24, 4,	/* mux */
-				       BIT(31),	/* gate */
-				       CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M_WITH_GATE(sata_clk, "sata", "pll-periph0", 0x500,
-			     0, 4, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_GATE(ac97_clk, "ac97", "pll-audio",
-			     0x504, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
-
-static SUNXI_CCU_M_WITH_MUX_GATE(mipi_hsi_clk, "mipi-hsi",
-				 mod0_default_parents, 0x508,
-				 0, 4,		/* M */
-				 24, 4,		/* mux */
-				 BIT(31),	/* gate */
-				 0);
-
-static const char * const gpadc_parents[] = { "osc24M", "pll-audio", "osc32k" };
-static const u8 gpadc_table[] = { 0, 4, 7 };
-static struct ccu_mp gpadc_clk = {
-	.enable		= BIT(31),
-	.m		= _SUNXI_CCU_DIV(0, 4),
-	.p		= _SUNXI_CCU_DIV(16, 2),
-	.mux		= _SUNXI_CCU_MUX_TABLE(24, 4, gpadc_table),
-	.common		= {
-		.reg		= 0x50c,
-		.hw.init	= CLK_HW_INIT_PARENTS("gpadc",
-						      gpadc_parents,
-						      &ccu_mp_ops,
-						      0),
-	},
-};
-
-static const char * const cir_tx_parents[] = { "osc24M", "osc32k" };
-static const u8 cir_tx_table[] = { 0, 7 };
-static struct ccu_mp cir_tx_clk = {
-	.enable		= BIT(31),
-	.m		= _SUNXI_CCU_DIV(0, 4),
-	.p		= _SUNXI_CCU_DIV(16, 2),
-	.mux		= _SUNXI_CCU_MUX_TABLE(24, 4, cir_tx_table),
-	.common		= {
-		.reg		= 0x510,
-		.hw.init	= CLK_HW_INIT_PARENTS("cir-tx",
-						      cir_tx_parents,
-						      &ccu_mp_ops,
-						      0),
-	},
-};
-
-/* AHB0 bus gates */
-static SUNXI_CCU_GATE(bus_fd_clk,	"bus-fd",	"ahb0",
-		      0x580, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_ve_clk,	"bus-ve",	"ahb0",
-		      0x580, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_gpu_ctrl_clk,	"bus-gpu-ctrl",	"ahb0",
-		      0x580, BIT(3), 0);
-static SUNXI_CCU_GATE(bus_ss_clk,	"bus-ss",	"ahb0",
-		      0x580, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_mmc_clk,	"bus-mmc",	"ahb0",
-		      0x580, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_nand0_clk,	"bus-nand0",	"ahb0",
-		      0x580, BIT(12), 0);
-static SUNXI_CCU_GATE(bus_nand1_clk,	"bus-nand1",	"ahb0",
-		      0x580, BIT(13), 0);
-static SUNXI_CCU_GATE(bus_sdram_clk,	"bus-sdram",	"ahb0",
-		      0x580, BIT(14), 0);
-static SUNXI_CCU_GATE(bus_mipi_hsi_clk,	"bus-mipi-hsi",	"ahb0",
-		      0x580, BIT(15), 0);
-static SUNXI_CCU_GATE(bus_sata_clk,	"bus-sata",	"ahb0",
-		      0x580, BIT(16), 0);
-static SUNXI_CCU_GATE(bus_ts_clk,	"bus-ts",	"ahb0",
-		      0x580, BIT(18), 0);
-static SUNXI_CCU_GATE(bus_spi0_clk,	"bus-spi0",	"ahb0",
-		      0x580, BIT(20), 0);
-static SUNXI_CCU_GATE(bus_spi1_clk,	"bus-spi1",	"ahb0",
-		      0x580, BIT(21), 0);
-static SUNXI_CCU_GATE(bus_spi2_clk,	"bus-spi2",	"ahb0",
-		      0x580, BIT(22), 0);
-static SUNXI_CCU_GATE(bus_spi3_clk,	"bus-spi3",	"ahb0",
-		      0x580, BIT(23), 0);
-
-/* AHB1 bus gates */
-static SUNXI_CCU_GATE(bus_otg_clk,	"bus-otg",	"ahb1",
-		      0x584, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_usb_clk,	"bus-usb",	"ahb1",
-		      0x584, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_gmac_clk,	"bus-gmac",	"ahb1",
-		      0x584, BIT(17), 0);
-static SUNXI_CCU_GATE(bus_msgbox_clk,	"bus-msgbox",	"ahb1",
-		      0x584, BIT(21), 0);
-static SUNXI_CCU_GATE(bus_spinlock_clk,	"bus-spinlock",	"ahb1",
-		      0x584, BIT(22), 0);
-static SUNXI_CCU_GATE(bus_hstimer_clk,	"bus-hstimer",	"ahb1",
-		      0x584, BIT(23), 0);
-static SUNXI_CCU_GATE(bus_dma_clk,	"bus-dma",	"ahb1",
-		      0x584, BIT(24), 0);
-
-/* AHB2 bus gates */
-static SUNXI_CCU_GATE(bus_lcd0_clk,	"bus-lcd0",	"ahb2",
-		      0x588, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_lcd1_clk,	"bus-lcd1",	"ahb2",
-		      0x588, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_edp_clk,	"bus-edp",	"ahb2",
-		      0x588, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_csi_clk,	"bus-csi",	"ahb2",
-		      0x588, BIT(4), 0);
-static SUNXI_CCU_GATE(bus_hdmi_clk,	"bus-hdmi",	"ahb2",
-		      0x588, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_de_clk,	"bus-de",	"ahb2",
-		      0x588, BIT(7), 0);
-static SUNXI_CCU_GATE(bus_mp_clk,	"bus-mp",	"ahb2",
-		      0x588, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_mipi_dsi_clk,	"bus-mipi-dsi",	"ahb2",
-		      0x588, BIT(11), 0);
-
-/* APB0 bus gates */
-static SUNXI_CCU_GATE(bus_spdif_clk,	"bus-spdif",	"apb0",
-		      0x590, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_pio_clk,	"bus-pio",	"apb0",
-		      0x590, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_ac97_clk,	"bus-ac97",	"apb0",
-		      0x590, BIT(11), 0);
-static SUNXI_CCU_GATE(bus_i2s0_clk,	"bus-i2s0",	"apb0",
-		      0x590, BIT(12), 0);
-static SUNXI_CCU_GATE(bus_i2s1_clk,	"bus-i2s1",	"apb0",
-		      0x590, BIT(13), 0);
-static SUNXI_CCU_GATE(bus_lradc_clk,	"bus-lradc",	"apb0",
-		      0x590, BIT(15), 0);
-static SUNXI_CCU_GATE(bus_gpadc_clk,	"bus-gpadc",	"apb0",
-		      0x590, BIT(17), 0);
-static SUNXI_CCU_GATE(bus_twd_clk,	"bus-twd",	"apb0",
-		      0x590, BIT(18), 0);
-static SUNXI_CCU_GATE(bus_cir_tx_clk,	"bus-cir-tx",	"apb0",
-		      0x590, BIT(19), 0);
-
-/* APB1 bus gates */
-static SUNXI_CCU_GATE(bus_i2c0_clk,	"bus-i2c0",	"apb1",
-		      0x594, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_i2c1_clk,	"bus-i2c1",	"apb1",
-		      0x594, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_i2c2_clk,	"bus-i2c2",	"apb1",
-		      0x594, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_i2c3_clk,	"bus-i2c3",	"apb1",
-		      0x594, BIT(3), 0);
-static SUNXI_CCU_GATE(bus_i2c4_clk,	"bus-i2c4",	"apb1",
-		      0x594, BIT(4), 0);
-static SUNXI_CCU_GATE(bus_uart0_clk,	"bus-uart0",	"apb1",
-		      0x594, BIT(16), 0);
-static SUNXI_CCU_GATE(bus_uart1_clk,	"bus-uart1",	"apb1",
-		      0x594, BIT(17), 0);
-static SUNXI_CCU_GATE(bus_uart2_clk,	"bus-uart2",	"apb1",
-		      0x594, BIT(18), 0);
-static SUNXI_CCU_GATE(bus_uart3_clk,	"bus-uart3",	"apb1",
-		      0x594, BIT(19), 0);
-static SUNXI_CCU_GATE(bus_uart4_clk,	"bus-uart4",	"apb1",
-		      0x594, BIT(20), 0);
-static SUNXI_CCU_GATE(bus_uart5_clk,	"bus-uart5",	"apb1",
-		      0x594, BIT(21), 0);
-
-static struct ccu_common *sun9i_a80_ccu_clks[] = {
-	&pll_c0cpux_clk.common,
-	&pll_c1cpux_clk.common,
-	&pll_audio_clk.common,
-	&pll_periph0_clk.common,
-	&pll_ve_clk.common,
-	&pll_ddr_clk.common,
-	&pll_video0_clk.common,
-	&pll_video1_clk.common,
-	&pll_gpu_clk.common,
-	&pll_de_clk.common,
-	&pll_isp_clk.common,
-	&pll_periph1_clk.common,
-	&c0cpux_clk.common,
-	&c1cpux_clk.common,
-	&atb0_clk.common,
-	&axi0_clk.common,
-	&atb1_clk.common,
-	&axi1_clk.common,
-	&gtbus_clk.common,
-	&ahb0_clk.common,
-	&ahb1_clk.common,
-	&ahb2_clk.common,
-	&apb0_clk.common,
-	&apb1_clk.common,
-	&cci400_clk.common,
-	&ats_clk.common,
-	&trace_clk.common,
-
-	&out_a_clk.common,
-	&out_b_clk.common,
-
-	/* module clocks */
-	&nand0_0_clk.common,
-	&nand0_1_clk.common,
-	&nand1_0_clk.common,
-	&nand1_1_clk.common,
-	&mmc0_clk.common,
-	&mmc0_sample_clk.common,
-	&mmc0_output_clk.common,
-	&mmc1_clk.common,
-	&mmc1_sample_clk.common,
-	&mmc1_output_clk.common,
-	&mmc2_clk.common,
-	&mmc2_sample_clk.common,
-	&mmc2_output_clk.common,
-	&mmc3_clk.common,
-	&mmc3_sample_clk.common,
-	&mmc3_output_clk.common,
-	&ts_clk.common,
-	&ss_clk.common,
-	&spi0_clk.common,
-	&spi1_clk.common,
-	&spi2_clk.common,
-	&spi3_clk.common,
-	&i2s0_clk.common,
-	&i2s1_clk.common,
-	&spdif_clk.common,
-	&sdram_clk.common,
-	&de_clk.common,
-	&edp_clk.common,
-	&mp_clk.common,
-	&lcd0_clk.common,
-	&lcd1_clk.common,
-	&mipi_dsi0_clk.common,
-	&mipi_dsi1_clk.common,
-	&hdmi_clk.common,
-	&hdmi_slow_clk.common,
-	&mipi_csi_clk.common,
-	&csi_isp_clk.common,
-	&csi_misc_clk.common,
-	&csi0_mclk_clk.common,
-	&csi1_mclk_clk.common,
-	&fd_clk.common,
-	&ve_clk.common,
-	&avs_clk.common,
-	&gpu_core_clk.common,
-	&gpu_memory_clk.common,
-	&gpu_axi_clk.common,
-	&sata_clk.common,
-	&ac97_clk.common,
-	&mipi_hsi_clk.common,
-	&gpadc_clk.common,
-	&cir_tx_clk.common,
-
-	/* AHB0 bus gates */
-	&bus_fd_clk.common,
-	&bus_ve_clk.common,
-	&bus_gpu_ctrl_clk.common,
-	&bus_ss_clk.common,
-	&bus_mmc_clk.common,
-	&bus_nand0_clk.common,
-	&bus_nand1_clk.common,
-	&bus_sdram_clk.common,
-	&bus_mipi_hsi_clk.common,
-	&bus_sata_clk.common,
-	&bus_ts_clk.common,
-	&bus_spi0_clk.common,
-	&bus_spi1_clk.common,
-	&bus_spi2_clk.common,
-	&bus_spi3_clk.common,
-
-	/* AHB1 bus gates */
-	&bus_otg_clk.common,
-	&bus_usb_clk.common,
-	&bus_gmac_clk.common,
-	&bus_msgbox_clk.common,
-	&bus_spinlock_clk.common,
-	&bus_hstimer_clk.common,
-	&bus_dma_clk.common,
-
-	/* AHB2 bus gates */
-	&bus_lcd0_clk.common,
-	&bus_lcd1_clk.common,
-	&bus_edp_clk.common,
-	&bus_csi_clk.common,
-	&bus_hdmi_clk.common,
-	&bus_de_clk.common,
-	&bus_mp_clk.common,
-	&bus_mipi_dsi_clk.common,
-
-	/* APB0 bus gates */
-	&bus_spdif_clk.common,
-	&bus_pio_clk.common,
-	&bus_ac97_clk.common,
-	&bus_i2s0_clk.common,
-	&bus_i2s1_clk.common,
-	&bus_lradc_clk.common,
-	&bus_gpadc_clk.common,
-	&bus_twd_clk.common,
-	&bus_cir_tx_clk.common,
-
-	/* APB1 bus gates */
-	&bus_i2c0_clk.common,
-	&bus_i2c1_clk.common,
-	&bus_i2c2_clk.common,
-	&bus_i2c3_clk.common,
-	&bus_i2c4_clk.common,
-	&bus_uart0_clk.common,
-	&bus_uart1_clk.common,
-	&bus_uart2_clk.common,
-	&bus_uart3_clk.common,
-	&bus_uart4_clk.common,
-	&bus_uart5_clk.common,
-};
-
-static struct clk_hw_onecell_data sun9i_a80_hw_clks = {
-	.hws	= {
-		[CLK_PLL_C0CPUX]	= &pll_c0cpux_clk.common.hw,
-		[CLK_PLL_C1CPUX]	= &pll_c1cpux_clk.common.hw,
-		[CLK_PLL_AUDIO]		= &pll_audio_clk.common.hw,
-		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
-		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
-		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
-		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
-		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
-		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
-		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
-		[CLK_PLL_ISP]		= &pll_isp_clk.common.hw,
-		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
-		[CLK_C0CPUX]		= &c0cpux_clk.common.hw,
-		[CLK_C1CPUX]		= &c1cpux_clk.common.hw,
-		[CLK_ATB0]		= &atb0_clk.common.hw,
-		[CLK_AXI0]		= &axi0_clk.common.hw,
-		[CLK_ATB1]		= &atb1_clk.common.hw,
-		[CLK_AXI1]		= &axi1_clk.common.hw,
-		[CLK_GTBUS]		= &gtbus_clk.common.hw,
-		[CLK_AHB0]		= &ahb0_clk.common.hw,
-		[CLK_AHB1]		= &ahb1_clk.common.hw,
-		[CLK_AHB2]		= &ahb2_clk.common.hw,
-		[CLK_APB0]		= &apb0_clk.common.hw,
-		[CLK_APB1]		= &apb1_clk.common.hw,
-		[CLK_CCI400]		= &cci400_clk.common.hw,
-		[CLK_ATS]		= &ats_clk.common.hw,
-		[CLK_TRACE]		= &trace_clk.common.hw,
-
-		[CLK_OUT_A]		= &out_a_clk.common.hw,
-		[CLK_OUT_B]		= &out_b_clk.common.hw,
-
-		[CLK_NAND0_0]		= &nand0_0_clk.common.hw,
-		[CLK_NAND0_1]		= &nand0_1_clk.common.hw,
-		[CLK_NAND1_0]		= &nand1_0_clk.common.hw,
-		[CLK_NAND1_1]		= &nand1_1_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
-		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
-		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
-		[CLK_MMC2]		= &mmc2_clk.common.hw,
-		[CLK_MMC2_SAMPLE]	= &mmc2_sample_clk.common.hw,
-		[CLK_MMC2_OUTPUT]	= &mmc2_output_clk.common.hw,
-		[CLK_MMC3]		= &mmc3_clk.common.hw,
-		[CLK_MMC3_SAMPLE]	= &mmc3_sample_clk.common.hw,
-		[CLK_MMC3_OUTPUT]	= &mmc3_output_clk.common.hw,
-		[CLK_TS]		= &ts_clk.common.hw,
-		[CLK_SS]		= &ss_clk.common.hw,
-		[CLK_SPI0]		= &spi0_clk.common.hw,
-		[CLK_SPI1]		= &spi1_clk.common.hw,
-		[CLK_SPI2]		= &spi2_clk.common.hw,
-		[CLK_SPI3]		= &spi3_clk.common.hw,
-		[CLK_I2S0]		= &i2s0_clk.common.hw,
-		[CLK_I2S1]		= &i2s1_clk.common.hw,
-		[CLK_SPDIF]		= &spdif_clk.common.hw,
-		[CLK_SDRAM]		= &sdram_clk.common.hw,
-		[CLK_DE]		= &de_clk.common.hw,
-		[CLK_EDP]		= &edp_clk.common.hw,
-		[CLK_MP]		= &mp_clk.common.hw,
-		[CLK_LCD0]		= &lcd0_clk.common.hw,
-		[CLK_LCD1]		= &lcd1_clk.common.hw,
-		[CLK_MIPI_DSI0]		= &mipi_dsi0_clk.common.hw,
-		[CLK_MIPI_DSI1]		= &mipi_dsi1_clk.common.hw,
-		[CLK_HDMI]		= &hdmi_clk.common.hw,
-		[CLK_HDMI_SLOW]		= &hdmi_slow_clk.common.hw,
-		[CLK_MIPI_CSI]		= &mipi_csi_clk.common.hw,
-		[CLK_CSI_ISP]		= &csi_isp_clk.common.hw,
-		[CLK_CSI_MISC]		= &csi_misc_clk.common.hw,
-		[CLK_CSI0_MCLK]		= &csi0_mclk_clk.common.hw,
-		[CLK_CSI1_MCLK]		= &csi1_mclk_clk.common.hw,
-		[CLK_FD]		= &fd_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-		[CLK_GPU_CORE]		= &gpu_core_clk.common.hw,
-		[CLK_GPU_MEMORY]	= &gpu_memory_clk.common.hw,
-		[CLK_GPU_AXI]		= &gpu_axi_clk.common.hw,
-		[CLK_SATA]		= &sata_clk.common.hw,
-		[CLK_AC97]		= &ac97_clk.common.hw,
-		[CLK_MIPI_HSI]		= &mipi_hsi_clk.common.hw,
-		[CLK_GPADC]		= &gpadc_clk.common.hw,
-		[CLK_CIR_TX]		= &cir_tx_clk.common.hw,
-
-		[CLK_BUS_FD]		= &bus_fd_clk.common.hw,
-		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
-		[CLK_BUS_GPU_CTRL]	= &bus_gpu_ctrl_clk.common.hw,
-		[CLK_BUS_SS]		= &bus_ss_clk.common.hw,
-		[CLK_BUS_MMC]		= &bus_mmc_clk.common.hw,
-		[CLK_BUS_NAND0]		= &bus_nand0_clk.common.hw,
-		[CLK_BUS_NAND1]		= &bus_nand1_clk.common.hw,
-		[CLK_BUS_SDRAM]		= &bus_sdram_clk.common.hw,
-		[CLK_BUS_MIPI_HSI]	= &bus_mipi_hsi_clk.common.hw,
-		[CLK_BUS_SATA]		= &bus_sata_clk.common.hw,
-		[CLK_BUS_TS]		= &bus_ts_clk.common.hw,
-		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
-		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
-		[CLK_BUS_SPI2]		= &bus_spi2_clk.common.hw,
-		[CLK_BUS_SPI3]		= &bus_spi3_clk.common.hw,
-
-		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
-		[CLK_BUS_USB]		= &bus_usb_clk.common.hw,
-		[CLK_BUS_GMAC]		= &bus_gmac_clk.common.hw,
-		[CLK_BUS_MSGBOX]	= &bus_msgbox_clk.common.hw,
-		[CLK_BUS_SPINLOCK]	= &bus_spinlock_clk.common.hw,
-		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
-		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
-
-		[CLK_BUS_LCD0]		= &bus_lcd0_clk.common.hw,
-		[CLK_BUS_LCD1]		= &bus_lcd1_clk.common.hw,
-		[CLK_BUS_EDP]		= &bus_edp_clk.common.hw,
-		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
-		[CLK_BUS_HDMI]		= &bus_hdmi_clk.common.hw,
-		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
-		[CLK_BUS_MP]		= &bus_mp_clk.common.hw,
-		[CLK_BUS_MIPI_DSI]	= &bus_mipi_dsi_clk.common.hw,
-
-		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
-		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
-		[CLK_BUS_AC97]		= &bus_ac97_clk.common.hw,
-		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
-		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
-		[CLK_BUS_LRADC]		= &bus_lradc_clk.common.hw,
-		[CLK_BUS_GPADC]		= &bus_gpadc_clk.common.hw,
-		[CLK_BUS_TWD]		= &bus_twd_clk.common.hw,
-		[CLK_BUS_CIR_TX]	= &bus_cir_tx_clk.common.hw,
-
-		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
-		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
-		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
-		[CLK_BUS_I2C3]		= &bus_i2c3_clk.common.hw,
-		[CLK_BUS_I2C4]		= &bus_i2c4_clk.common.hw,
-		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
-		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
-		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
-		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
-		[CLK_BUS_UART4]		= &bus_uart4_clk.common.hw,
-		[CLK_BUS_UART5]		= &bus_uart5_clk.common.hw,
-	},
-	.num	= CLK_NUMBER,
-};
-
-static struct ccu_reset_map sun9i_a80_ccu_resets[] = {
-	/* AHB0 reset controls */
-	[RST_BUS_FD]		= { 0x5a0, BIT(0) },
-	[RST_BUS_VE]		= { 0x5a0, BIT(1) },
-	[RST_BUS_GPU_CTRL]	= { 0x5a0, BIT(3) },
-	[RST_BUS_SS]		= { 0x5a0, BIT(5) },
-	[RST_BUS_MMC]		= { 0x5a0, BIT(8) },
-	[RST_BUS_NAND0]		= { 0x5a0, BIT(12) },
-	[RST_BUS_NAND1]		= { 0x5a0, BIT(13) },
-	[RST_BUS_SDRAM]		= { 0x5a0, BIT(14) },
-	[RST_BUS_SATA]		= { 0x5a0, BIT(16) },
-	[RST_BUS_TS]		= { 0x5a0, BIT(18) },
-	[RST_BUS_SPI0]		= { 0x5a0, BIT(20) },
-	[RST_BUS_SPI1]		= { 0x5a0, BIT(21) },
-	[RST_BUS_SPI2]		= { 0x5a0, BIT(22) },
-	[RST_BUS_SPI3]		= { 0x5a0, BIT(23) },
-
-	/* AHB1 reset controls */
-	[RST_BUS_OTG]		= { 0x5a4, BIT(0) },
-	[RST_BUS_OTG_PHY]	= { 0x5a4, BIT(1) },
-	[RST_BUS_MIPI_HSI]	= { 0x5a4, BIT(9) },
-	[RST_BUS_GMAC]		= { 0x5a4, BIT(17) },
-	[RST_BUS_MSGBOX]	= { 0x5a4, BIT(21) },
-	[RST_BUS_SPINLOCK]	= { 0x5a4, BIT(22) },
-	[RST_BUS_HSTIMER]	= { 0x5a4, BIT(23) },
-	[RST_BUS_DMA]		= { 0x5a4, BIT(24) },
-
-	/* AHB2 reset controls */
-	[RST_BUS_LCD0]		= { 0x5a8, BIT(0) },
-	[RST_BUS_LCD1]		= { 0x5a8, BIT(1) },
-	[RST_BUS_EDP]		= { 0x5a8, BIT(2) },
-	[RST_BUS_LVDS]		= { 0x5a8, BIT(3) },
-	[RST_BUS_CSI]		= { 0x5a8, BIT(4) },
-	[RST_BUS_HDMI0]		= { 0x5a8, BIT(5) },
-	[RST_BUS_HDMI1]		= { 0x5a8, BIT(6) },
-	[RST_BUS_DE]		= { 0x5a8, BIT(7) },
-	[RST_BUS_MP]		= { 0x5a8, BIT(8) },
-	[RST_BUS_GPU]		= { 0x5a8, BIT(9) },
-	[RST_BUS_MIPI_DSI]	= { 0x5a8, BIT(11) },
-
-	/* APB0 reset controls */
-	[RST_BUS_SPDIF]		= { 0x5b0, BIT(1) },
-	[RST_BUS_AC97]		= { 0x5b0, BIT(11) },
-	[RST_BUS_I2S0]		= { 0x5b0, BIT(12) },
-	[RST_BUS_I2S1]		= { 0x5b0, BIT(13) },
-	[RST_BUS_LRADC]		= { 0x5b0, BIT(15) },
-	[RST_BUS_GPADC]		= { 0x5b0, BIT(17) },
-	[RST_BUS_CIR_TX]	= { 0x5b0, BIT(19) },
-
-	/* APB1 reset controls */
-	[RST_BUS_I2C0]		= { 0x5b4, BIT(0) },
-	[RST_BUS_I2C1]		= { 0x5b4, BIT(1) },
-	[RST_BUS_I2C2]		= { 0x5b4, BIT(2) },
-	[RST_BUS_I2C3]		= { 0x5b4, BIT(3) },
-	[RST_BUS_I2C4]		= { 0x5b4, BIT(4) },
-	[RST_BUS_UART0]		= { 0x5b4, BIT(16) },
-	[RST_BUS_UART1]		= { 0x5b4, BIT(17) },
-	[RST_BUS_UART2]		= { 0x5b4, BIT(18) },
-	[RST_BUS_UART3]		= { 0x5b4, BIT(19) },
-	[RST_BUS_UART4]		= { 0x5b4, BIT(20) },
-	[RST_BUS_UART5]		= { 0x5b4, BIT(21) },
-};
-
-static const struct sunxi_ccu_desc sun9i_a80_ccu_desc = {
-	.ccu_clks	= sun9i_a80_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(sun9i_a80_ccu_clks),
-
-	.hw_clks	= &sun9i_a80_hw_clks,
-
-	.resets		= sun9i_a80_ccu_resets,
-	.num_resets	= ARRAY_SIZE(sun9i_a80_ccu_resets),
-};
-
-#define SUN9I_A80_PLL_P_SHIFT	16
-#define SUN9I_A80_PLL_N_SHIFT	8
-#define SUN9I_A80_PLL_N_WIDTH	8
-
-static void sun9i_a80_cpu_pll_fixup(void __iomem *reg)
-{
-	u32 val = readl(reg);
-
-	/* bail out if P divider is not used */
-	if (!(val & BIT(SUN9I_A80_PLL_P_SHIFT)))
-		return;
-
-	/*
-	 * If P is used, output should be less than 288 MHz. When we
-	 * set P to 1, we should also decrease the multiplier so the
-	 * output doesn't go out of range, but not too much such that
-	 * the multiplier stays above 12, the minimal operation value.
-	 *
-	 * To keep it simple, set the multiplier to 17, the reset value.
-	 */
-	val &= ~GENMASK(SUN9I_A80_PLL_N_SHIFT + SUN9I_A80_PLL_N_WIDTH - 1,
-			SUN9I_A80_PLL_N_SHIFT);
-	val |= 17 << SUN9I_A80_PLL_N_SHIFT;
-
-	/* And clear P */
-	val &= ~BIT(SUN9I_A80_PLL_P_SHIFT);
-
-	writel(val, reg);
-}
-
-static int sun9i_a80_ccu_probe(struct platform_device *pdev)
-{
-	struct resource *res;
-	void __iomem *reg;
-	u32 val;
-
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	reg = devm_ioremap_resource(&pdev->dev, res);
-	if (IS_ERR(reg))
-		return PTR_ERR(reg);
-
-	/* Enforce d1 = 0, d2 = 0 for Audio PLL */
-	val = readl(reg + SUN9I_A80_PLL_AUDIO_REG);
-	val &= ~(BIT(16) | BIT(18));
-	writel(val, reg + SUN9I_A80_PLL_AUDIO_REG);
-
-	/* Enforce P = 1 for both CPU cluster PLLs */
-	sun9i_a80_cpu_pll_fixup(reg + SUN9I_A80_PLL_C0CPUX_REG);
-	sun9i_a80_cpu_pll_fixup(reg + SUN9I_A80_PLL_C1CPUX_REG);
-
-	return devm_sunxi_ccu_probe(&pdev->dev, reg, &sun9i_a80_ccu_desc);
-}
-
-static const struct of_device_id sun9i_a80_ccu_ids[] = {
-	{ .compatible = "allwinner,sun9i-a80-ccu" },
-	{ }
-};
-
-static struct platform_driver sun9i_a80_ccu_driver = {
-	.probe	= sun9i_a80_ccu_probe,
-	.driver	= {
-		.name	= "sun9i-a80-ccu",
-		.suppress_bind_attrs = true,
-		.of_match_table	= sun9i_a80_ccu_ids,
-	},
-};
-builtin_platform_driver(sun9i_a80_ccu_driver);
diff --git a/drivers/clk/sunxi-ng/ccu-sun9i-a80.h b/drivers/clk/sunxi-ng/ccu-sun9i-a80.h
deleted file mode 100644
index 8377b6da0b3c..000000000000
--- a/drivers/clk/sunxi-ng/ccu-sun9i-a80.h
+++ /dev/null
@@ -1,48 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0-or-later */
-/*
- * Copyright 2016 Chen-Yu Tsai
- *
- * Chen-Yu Tsai <wens@csie.org>
- */
-
-#ifndef _CCU_SUN9I_A80_H_
-#define _CCU_SUN9I_A80_H_
-
-#include <dt-bindings/clock/sun9i-a80-ccu.h>
-#include <dt-bindings/reset/sun9i-a80-ccu.h>
-
-#define CLK_PLL_C0CPUX		0
-#define CLK_PLL_C1CPUX		1
-
-/* pll-audio and pll-periph0 are exported to the PRCM block */
-
-#define CLK_PLL_VE		4
-#define CLK_PLL_DDR		5
-#define CLK_PLL_VIDEO0		6
-#define CLK_PLL_VIDEO1		7
-#define CLK_PLL_GPU		8
-#define CLK_PLL_DE		9
-#define CLK_PLL_ISP		10
-#define CLK_PLL_PERIPH1		11
-
-/* The CPUX clocks are exported */
-
-#define CLK_ATB0		14
-#define CLK_AXI0		15
-#define CLK_ATB1		16
-#define CLK_AXI1		17
-#define CLK_GTBUS		18
-#define CLK_AHB0		19
-#define CLK_AHB1		20
-#define CLK_AHB2		21
-#define CLK_APB0		22
-#define CLK_APB1		23
-#define CLK_CCI400		24
-#define CLK_ATS			25
-#define CLK_TRACE		26
-
-/* module clocks and bus gates exported */
-
-#define CLK_NUMBER		(CLK_BUS_UART5 + 1)
-
-#endif /* _CCU_SUN9I_A80_H_ */
diff --git a/drivers/clk/sunxi-ng/ccu-suniv-f1c100s.c b/drivers/clk/sunxi-ng/ccu-suniv-f1c100s.c
deleted file mode 100644
index 61ad7ee91c11..000000000000
--- a/drivers/clk/sunxi-ng/ccu-suniv-f1c100s.c
+++ /dev/null
@@ -1,551 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0
-/*
- * Copyright (c) 2016 Icenowy Zheng <icenowy@aosc.io>
- *
- */
-
-#include <linux/clk-provider.h>
-#include <linux/io.h>
-#include <linux/of_address.h>
-
-#include "ccu_common.h"
-#include "ccu_reset.h"
-
-#include "ccu_div.h"
-#include "ccu_gate.h"
-#include "ccu_mp.h"
-#include "ccu_mult.h"
-#include "ccu_nk.h"
-#include "ccu_nkm.h"
-#include "ccu_nkmp.h"
-#include "ccu_nm.h"
-#include "ccu_phase.h"
-
-#include "ccu-suniv-f1c100s.h"
-
-static struct ccu_nkmp pll_cpu_clk = {
-	.enable = BIT(31),
-	.lock	= BIT(28),
-
-	.n	= _SUNXI_CCU_MULT(8, 5),
-	.k	= _SUNXI_CCU_MULT(4, 2),
-	.m	= _SUNXI_CCU_DIV(0, 2),
-	/* MAX is guessed by the BSP table */
-	.p	= _SUNXI_CCU_DIV_MAX(16, 2, 4),
-
-	.common	= {
-		.reg		= 0x000,
-		.hw.init	= CLK_HW_INIT("pll-cpu", "osc24M",
-					      &ccu_nkmp_ops,
-					      CLK_SET_RATE_UNGATE),
-	},
-};
-
-/*
- * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
- * the base (2x, 4x and 8x), and one variable divider (the one true
- * pll audio).
- *
- * We don't have any need for the variable divider for now, so we just
- * hardcode it to match with the clock names
- */
-#define SUNIV_PLL_AUDIO_REG	0x008
-
-static SUNXI_CCU_NM_WITH_GATE_LOCK(pll_audio_base_clk, "pll-audio-base",
-				   "osc24M", 0x008,
-				   8, 7,		/* N */
-				   0, 5,		/* M */
-				   BIT(31),		/* gate */
-				   BIT(28),		/* lock */
-				   CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_video_clk, "pll-video",
-					"osc24M", 0x010,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_ve_clk, "pll-ve",
-					"osc24M", 0x018,
-					8, 7,		/* N */
-					0, 4,		/* M */
-					BIT(24),	/* frac enable */
-					BIT(25),	/* frac select */
-					270000000,	/* frac rate 0 */
-					297000000,	/* frac rate 1 */
-					BIT(31),	/* gate */
-					BIT(28),	/* lock */
-					CLK_SET_RATE_UNGATE);
-
-static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_ddr0_clk, "pll-ddr",
-				    "osc24M", 0x020,
-				    8, 5,		/* N */
-				    4, 2,		/* K */
-				    0, 2,		/* M */
-				    BIT(31),		/* gate */
-				    BIT(28),		/* lock */
-				    CLK_IS_CRITICAL);
-
-static struct ccu_nk pll_periph_clk = {
-	.enable		= BIT(31),
-	.lock		= BIT(28),
-	.k		= _SUNXI_CCU_MULT(4, 2),
-	.n		= _SUNXI_CCU_MULT(8, 5),
-	.common		= {
-		.reg		= 0x028,
-		.hw.init	= CLK_HW_INIT("pll-periph", "osc24M",
-					      &ccu_nk_ops, 0),
-	},
-};
-
-static const char * const cpu_parents[] = { "osc32k", "osc24M",
-					     "pll-cpu", "pll-cpu" };
-static SUNXI_CCU_MUX(cpu_clk, "cpu", cpu_parents,
-		     0x050, 16, 2, CLK_IS_CRITICAL | CLK_SET_RATE_PARENT);
-
-static const char * const ahb_parents[] = { "osc32k", "osc24M",
-					    "cpu", "pll-periph" };
-static const struct ccu_mux_var_prediv ahb_predivs[] = {
-	{ .index = 3, .shift = 6, .width = 2 },
-};
-static struct ccu_div ahb_clk = {
-	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
-
-	.mux		= {
-		.shift	= 12,
-		.width	= 2,
-
-		.var_predivs	= ahb_predivs,
-		.n_var_predivs	= ARRAY_SIZE(ahb_predivs),
-	},
-
-	.common		= {
-		.reg		= 0x054,
-		.features	= CCU_FEATURE_VARIABLE_PREDIV,
-		.hw.init	= CLK_HW_INIT_PARENTS("ahb",
-						      ahb_parents,
-						      &ccu_div_ops,
-						      0),
-	},
-};
-
-static struct clk_div_table apb_div_table[] = {
-	{ .val = 0, .div = 2 },
-	{ .val = 1, .div = 2 },
-	{ .val = 2, .div = 4 },
-	{ .val = 3, .div = 8 },
-	{ /* Sentinel */ },
-};
-static SUNXI_CCU_DIV_TABLE(apb_clk, "apb", "ahb",
-			   0x054, 8, 2, apb_div_table, 0);
-
-static SUNXI_CCU_GATE(bus_dma_clk,	"bus-dma",	"ahb",
-		      0x060, BIT(6), 0);
-static SUNXI_CCU_GATE(bus_mmc0_clk,	"bus-mmc0",	"ahb",
-		      0x060, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_mmc1_clk,	"bus-mmc1",	"ahb",
-		      0x060, BIT(9), 0);
-static SUNXI_CCU_GATE(bus_dram_clk,	"bus-dram",	"ahb",
-		      0x060, BIT(14), 0);
-static SUNXI_CCU_GATE(bus_spi0_clk,	"bus-spi0",	"ahb",
-		      0x060, BIT(20), 0);
-static SUNXI_CCU_GATE(bus_spi1_clk,	"bus-spi1",	"ahb",
-		      0x060, BIT(21), 0);
-static SUNXI_CCU_GATE(bus_otg_clk,	"bus-otg",	"ahb",
-		      0x060, BIT(24), 0);
-
-static SUNXI_CCU_GATE(bus_ve_clk,	"bus-ve",	"ahb",
-		      0x064, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_lcd_clk,	"bus-lcd",	"ahb",
-		      0x064, BIT(4), 0);
-static SUNXI_CCU_GATE(bus_deinterlace_clk,	"bus-deinterlace",	"ahb",
-		      0x064, BIT(5), 0);
-static SUNXI_CCU_GATE(bus_csi_clk,	"bus-csi",	"ahb",
-		      0x064, BIT(8), 0);
-static SUNXI_CCU_GATE(bus_tvd_clk,	"bus-tvd",	"ahb",
-		      0x064, BIT(9), 0);
-static SUNXI_CCU_GATE(bus_tve_clk,	"bus-tve",	"ahb",
-		      0x064, BIT(10), 0);
-static SUNXI_CCU_GATE(bus_de_be_clk,	"bus-de-be",	"ahb",
-		      0x064, BIT(12), 0);
-static SUNXI_CCU_GATE(bus_de_fe_clk,	"bus-de-fe",	"ahb",
-		      0x064, BIT(14), 0);
-
-static SUNXI_CCU_GATE(bus_codec_clk,	"bus-codec",	"apb",
-		      0x068, BIT(0), 0);
-static SUNXI_CCU_GATE(bus_spdif_clk,	"bus-spdif",	"apb",
-		      0x068, BIT(1), 0);
-static SUNXI_CCU_GATE(bus_ir_clk,	"bus-ir",	"apb",
-		      0x068, BIT(2), 0);
-static SUNXI_CCU_GATE(bus_rsb_clk,	"bus-rsb",	"apb",
-		      0x068, BIT(3), 0);
-static SUNXI_CCU_GATE(bus_i2s0_clk,	"bus-i2s0",	"apb",
-		      0x068, BIT(12), 0);
-static SUNXI_CCU_GATE(bus_i2c0_clk,	"bus-i2c0",	"apb",
-		      0x068, BIT(16), 0);
-static SUNXI_CCU_GATE(bus_i2c1_clk,	"bus-i2c1",	"apb",
-		      0x068, BIT(17), 0);
-static SUNXI_CCU_GATE(bus_i2c2_clk,	"bus-i2c2",	"apb",
-		      0x068, BIT(18), 0);
-static SUNXI_CCU_GATE(bus_pio_clk,	"bus-pio",	"apb",
-		      0x068, BIT(19), 0);
-static SUNXI_CCU_GATE(bus_uart0_clk,	"bus-uart0",	"apb",
-		      0x068, BIT(20), 0);
-static SUNXI_CCU_GATE(bus_uart1_clk,	"bus-uart1",	"apb",
-		      0x068, BIT(21), 0);
-static SUNXI_CCU_GATE(bus_uart2_clk,	"bus-uart2",	"apb",
-		      0x068, BIT(22), 0);
-
-static const char * const mod0_default_parents[] = { "osc24M", "pll-periph" };
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents, 0x088,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc0_sample_clk, "mmc0_sample", "mmc0",
-		       0x088, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc0_output_clk, "mmc0_output", "mmc0",
-		       0x088, 8, 3, 0);
-
-static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents, 0x08c,
-				  0, 4,		/* M */
-				  16, 2,	/* P */
-				  24, 2,	/* mux */
-				  BIT(31),	/* gate */
-				  0);
-
-static SUNXI_CCU_PHASE(mmc1_sample_clk, "mmc1_sample", "mmc1",
-		       0x08c, 20, 3, 0);
-static SUNXI_CCU_PHASE(mmc1_output_clk, "mmc1_output", "mmc1",
-		       0x08c, 8, 3, 0);
-
-static const char * const i2s_spdif_parents[] = { "pll-audio-8x",
-						  "pll-audio-4x",
-						  "pll-audio-2x",
-						  "pll-audio" };
-
-static SUNXI_CCU_MUX_WITH_GATE(i2s_clk, "i2s", i2s_spdif_parents,
-			       0x0b0, 16, 2, BIT(31), 0);
-
-static SUNXI_CCU_MUX_WITH_GATE(spdif_clk, "spdif", i2s_spdif_parents,
-			       0x0b4, 16, 2, BIT(31), 0);
-
-/* The BSP header file has a CIR_CFG, but no mod clock uses this definition */
-
-static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"osc24M",
-		      0x0cc, BIT(1), 0);
-
-static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"pll-ddr",
-		      0x100, BIT(0), 0);
-static SUNXI_CCU_GATE(dram_csi_clk,	"dram-csi",	"pll-ddr",
-		      0x100, BIT(1), 0);
-static SUNXI_CCU_GATE(dram_deinterlace_clk,	"dram-deinterlace",
-		      "pll-ddr", 0x100, BIT(2), 0);
-static SUNXI_CCU_GATE(dram_tvd_clk,	"dram-tvd",	"pll-ddr",
-		      0x100, BIT(3), 0);
-static SUNXI_CCU_GATE(dram_de_fe_clk,	"dram-de-fe",	"pll-ddr",
-		      0x100, BIT(24), 0);
-static SUNXI_CCU_GATE(dram_de_be_clk,	"dram-de-be",	"pll-ddr",
-		      0x100, BIT(26), 0);
-
-static const char * const de_parents[] = { "pll-video", "pll-periph" };
-static const u8 de_table[] = { 0, 2, };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(de_be_clk, "de-be",
-				       de_parents, de_table,
-				       0x104, 0, 4, 24, 3, BIT(31), 0);
-
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(de_fe_clk, "de-fe",
-				       de_parents, de_table,
-				       0x10c, 0, 4, 24, 3, BIT(31), 0);
-
-static const char * const tcon_parents[] = { "pll-video", "pll-video-2x" };
-static const u8 tcon_table[] = { 0, 2, };
-static SUNXI_CCU_MUX_TABLE_WITH_GATE(tcon_clk, "tcon",
-				     tcon_parents, tcon_table,
-				     0x118, 24, 3, BIT(31),
-				     CLK_SET_RATE_PARENT);
-
-static const char * const deinterlace_parents[] = { "pll-video",
-						    "pll-video-2x" };
-static const u8 deinterlace_table[] = { 0, 2, };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(deinterlace_clk, "deinterlace",
-				       deinterlace_parents, deinterlace_table,
-				       0x11c, 0, 4, 24, 3, BIT(31), 0);
-
-static const char * const tve_clk2_parents[] = { "pll-video",
-						 "pll-video-2x" };
-static const u8 tve_clk2_table[] = { 0, 2, };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(tve_clk2_clk, "tve-clk2",
-				       tve_clk2_parents, tve_clk2_table,
-				       0x120, 0, 4, 24, 3, BIT(31), 0);
-static SUNXI_CCU_M_WITH_GATE(tve_clk1_clk, "tve-clk1", "tve-clk2",
-			     0x120, 8, 1, BIT(15), 0);
-
-static const char * const tvd_parents[] = { "pll-video", "osc24M",
-					    "pll-video-2x" };
-static SUNXI_CCU_M_WITH_MUX_GATE(tvd_clk, "tvd", tvd_parents,
-				 0x124, 0, 4, 24, 3, BIT(31), 0);
-
-static const char * const csi_parents[] = { "pll-video", "osc24M" };
-static const u8 csi_table[] = { 0, 5, };
-static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi_clk, "csi", csi_parents, csi_table,
-				       0x120, 0, 4, 8, 3, BIT(15), 0);
-
-/*
- * TODO: BSP says the parent is pll-audio, however common sense and experience
- * told us it should be pll-ve. pll-ve is totally not used in BSP code.
- */
-static SUNXI_CCU_GATE(ve_clk, "ve", "pll-audio", 0x13c, BIT(31), 0);
-
-static SUNXI_CCU_GATE(codec_clk, "codec", "pll-audio", 0x140, BIT(31), 0);
-
-static SUNXI_CCU_GATE(avs_clk, "avs", "osc24M", 0x144, BIT(31), 0);
-
-static struct ccu_common *suniv_ccu_clks[] = {
-	&pll_cpu_clk.common,
-	&pll_audio_base_clk.common,
-	&pll_video_clk.common,
-	&pll_ve_clk.common,
-	&pll_ddr0_clk.common,
-	&pll_periph_clk.common,
-	&cpu_clk.common,
-	&ahb_clk.common,
-	&apb_clk.common,
-	&bus_dma_clk.common,
-	&bus_mmc0_clk.common,
-	&bus_mmc1_clk.common,
-	&bus_dram_clk.common,
-	&bus_spi0_clk.common,
-	&bus_spi1_clk.common,
-	&bus_otg_clk.common,
-	&bus_ve_clk.common,
-	&bus_lcd_clk.common,
-	&bus_deinterlace_clk.common,
-	&bus_csi_clk.common,
-	&bus_tve_clk.common,
-	&bus_tvd_clk.common,
-	&bus_de_be_clk.common,
-	&bus_de_fe_clk.common,
-	&bus_codec_clk.common,
-	&bus_spdif_clk.common,
-	&bus_ir_clk.common,
-	&bus_rsb_clk.common,
-	&bus_i2s0_clk.common,
-	&bus_i2c0_clk.common,
-	&bus_i2c1_clk.common,
-	&bus_i2c2_clk.common,
-	&bus_pio_clk.common,
-	&bus_uart0_clk.common,
-	&bus_uart1_clk.common,
-	&bus_uart2_clk.common,
-	&mmc0_clk.common,
-	&mmc0_sample_clk.common,
-	&mmc0_output_clk.common,
-	&mmc1_clk.common,
-	&mmc1_sample_clk.common,
-	&mmc1_output_clk.common,
-	&i2s_clk.common,
-	&spdif_clk.common,
-	&usb_phy0_clk.common,
-	&dram_ve_clk.common,
-	&dram_csi_clk.common,
-	&dram_deinterlace_clk.common,
-	&dram_tvd_clk.common,
-	&dram_de_fe_clk.common,
-	&dram_de_be_clk.common,
-	&de_be_clk.common,
-	&de_fe_clk.common,
-	&tcon_clk.common,
-	&deinterlace_clk.common,
-	&tve_clk2_clk.common,
-	&tve_clk1_clk.common,
-	&tvd_clk.common,
-	&csi_clk.common,
-	&ve_clk.common,
-	&codec_clk.common,
-	&avs_clk.common,
-};
-
-static const struct clk_hw *clk_parent_pll_audio[] = {
-	&pll_audio_base_clk.common.hw
-};
-
-static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
-			    clk_parent_pll_audio,
-			    4, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
-			    clk_parent_pll_audio,
-			    2, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
-			    clk_parent_pll_audio,
-			    1, 1, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
-			    clk_parent_pll_audio,
-			    1, 2, CLK_SET_RATE_PARENT);
-static CLK_FIXED_FACTOR_HW(pll_video_2x_clk, "pll-video-2x",
-			    &pll_video_clk.common.hw,
-			    1, 2, 0);
-
-static struct clk_hw_onecell_data suniv_hw_clks = {
-	.hws	= {
-		[CLK_PLL_CPU]		= &pll_cpu_clk.common.hw,
-		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
-		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
-		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
-		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
-		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
-		[CLK_PLL_VIDEO]		= &pll_video_clk.common.hw,
-		[CLK_PLL_VIDEO_2X]	= &pll_video_2x_clk.hw,
-		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
-		[CLK_PLL_DDR0]		= &pll_ddr0_clk.common.hw,
-		[CLK_PLL_PERIPH]	= &pll_periph_clk.common.hw,
-		[CLK_CPU]		= &cpu_clk.common.hw,
-		[CLK_AHB]		= &ahb_clk.common.hw,
-		[CLK_APB]		= &apb_clk.common.hw,
-		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
-		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
-		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
-		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
-		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
-		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
-		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
-		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
-		[CLK_BUS_LCD]		= &bus_lcd_clk.common.hw,
-		[CLK_BUS_DEINTERLACE]	= &bus_deinterlace_clk.common.hw,
-		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
-		[CLK_BUS_TVD]		= &bus_tvd_clk.common.hw,
-		[CLK_BUS_TVE]		= &bus_tve_clk.common.hw,
-		[CLK_BUS_DE_BE]		= &bus_de_be_clk.common.hw,
-		[CLK_BUS_DE_FE]		= &bus_de_fe_clk.common.hw,
-		[CLK_BUS_CODEC]		= &bus_codec_clk.common.hw,
-		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
-		[CLK_BUS_IR]		= &bus_ir_clk.common.hw,
-		[CLK_BUS_RSB]		= &bus_rsb_clk.common.hw,
-		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
-		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
-		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
-		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
-		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
-		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
-		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
-		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
-		[CLK_MMC0]		= &mmc0_clk.common.hw,
-		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
-		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
-		[CLK_MMC1]		= &mmc1_clk.common.hw,
-		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
-		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
-		[CLK_I2S]		= &i2s_clk.common.hw,
-		[CLK_SPDIF]		= &spdif_clk.common.hw,
-		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
-		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
-		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
-		[CLK_DRAM_DEINTERLACE]	= &dram_deinterlace_clk.common.hw,
-		[CLK_DRAM_TVD]		= &dram_tvd_clk.common.hw,
-		[CLK_DRAM_DE_FE]	= &dram_de_fe_clk.common.hw,
-		[CLK_DRAM_DE_BE]	= &dram_de_be_clk.common.hw,
-		[CLK_DE_BE]		= &de_be_clk.common.hw,
-		[CLK_DE_FE]		= &de_fe_clk.common.hw,
-		[CLK_TCON]		= &tcon_clk.common.hw,
-		[CLK_DEINTERLACE]	= &deinterlace_clk.common.hw,
-		[CLK_TVE2_CLK]		= &tve_clk2_clk.common.hw,
-		[CLK_TVE1_CLK]		= &tve_clk1_clk.common.hw,
-		[CLK_TVD]		= &tvd_clk.common.hw,
-		[CLK_CSI]		= &csi_clk.common.hw,
-		[CLK_VE]		= &ve_clk.common.hw,
-		[CLK_CODEC]		= &codec_clk.common.hw,
-		[CLK_AVS]		= &avs_clk.common.hw,
-	},
-	.num	= CLK_NUMBER,
-};
-
-static struct ccu_reset_map suniv_ccu_resets[] = {
-	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
-
-	[RST_BUS_DMA]		=  { 0x2c0, BIT(6) },
-	[RST_BUS_MMC0]		=  { 0x2c0, BIT(8) },
-	[RST_BUS_MMC1]		=  { 0x2c0, BIT(9) },
-	[RST_BUS_DRAM]		=  { 0x2c0, BIT(14) },
-	[RST_BUS_SPI0]		=  { 0x2c0, BIT(20) },
-	[RST_BUS_SPI1]		=  { 0x2c0, BIT(21) },
-	[RST_BUS_OTG]		=  { 0x2c0, BIT(24) },
-	[RST_BUS_VE]		=  { 0x2c4, BIT(0) },
-	[RST_BUS_LCD]		=  { 0x2c4, BIT(4) },
-	[RST_BUS_DEINTERLACE]	=  { 0x2c4, BIT(5) },
-	[RST_BUS_CSI]		=  { 0x2c4, BIT(8) },
-	[RST_BUS_TVD]		=  { 0x2c4, BIT(9) },
-	[RST_BUS_TVE]		=  { 0x2c4, BIT(10) },
-	[RST_BUS_DE_BE]		=  { 0x2c4, BIT(12) },
-	[RST_BUS_DE_FE]		=  { 0x2c4, BIT(14) },
-	[RST_BUS_CODEC]		=  { 0x2d0, BIT(0) },
-	[RST_BUS_SPDIF]		=  { 0x2d0, BIT(1) },
-	[RST_BUS_IR]		=  { 0x2d0, BIT(2) },
-	[RST_BUS_RSB]		=  { 0x2d0, BIT(3) },
-	[RST_BUS_I2S0]		=  { 0x2d0, BIT(12) },
-	[RST_BUS_I2C0]		=  { 0x2d0, BIT(16) },
-	[RST_BUS_I2C1]		=  { 0x2d0, BIT(17) },
-	[RST_BUS_I2C2]		=  { 0x2d0, BIT(18) },
-	[RST_BUS_UART0]		=  { 0x2d0, BIT(20) },
-	[RST_BUS_UART1]		=  { 0x2d0, BIT(21) },
-	[RST_BUS_UART2]		=  { 0x2d0, BIT(22) },
-};
-
-static const struct sunxi_ccu_desc suniv_ccu_desc = {
-	.ccu_clks	= suniv_ccu_clks,
-	.num_ccu_clks	= ARRAY_SIZE(suniv_ccu_clks),
-
-	.hw_clks	= &suniv_hw_clks,
-
-	.resets		= suniv_ccu_resets,
-	.num_resets	= ARRAY_SIZE(suniv_ccu_resets),
-};
-
-static struct ccu_pll_nb suniv_pll_cpu_nb = {
-	.common	= &pll_cpu_clk.common,
-	/* copy from pll_cpu_clk */
-	.enable	= BIT(31),
-	.lock	= BIT(28),
-};
-
-static struct ccu_mux_nb suniv_cpu_nb = {
-	.common		= &cpu_clk.common,
-	.cm		= &cpu_clk.mux,
-	.delay_us	= 1, /* > 8 clock cycles at 24 MHz */
-	.bypass_index	= 1, /* index of 24 MHz oscillator */
-};
-
-static void __init suniv_f1c100s_ccu_setup(struct device_node *node)
-{
-	void __iomem *reg;
-	u32 val;
-
-	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
-	if (IS_ERR(reg)) {
-		pr_err("%pOF: Could not map the clock registers\n", node);
-		return;
-	}
-
-	/* Force the PLL-Audio-1x divider to 4 */
-	val = readl(reg + SUNIV_PLL_AUDIO_REG);
-	val &= ~GENMASK(19, 16);
-	writel(val | (3 << 16), reg + SUNIV_PLL_AUDIO_REG);
-
-	of_sunxi_ccu_probe(node, reg, &suniv_ccu_desc);
-
-	/* Gate then ungate PLL CPU after any rate changes */
-	ccu_pll_notifier_register(&suniv_pll_cpu_nb);
-
-	/* Reparent CPU during PLL CPU rate changes */
-	ccu_mux_notifier_register(pll_cpu_clk.common.hw.clk,
-				  &suniv_cpu_nb);
-}
-CLK_OF_DECLARE(suniv_f1c100s_ccu, "allwinner,suniv-f1c100s-ccu",
-	       suniv_f1c100s_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/ccu-suniv-f1c100s.h b/drivers/clk/sunxi-ng/ccu-suniv-f1c100s.h
deleted file mode 100644
index b22484f1bb9a..000000000000
--- a/drivers/clk/sunxi-ng/ccu-suniv-f1c100s.h
+++ /dev/null
@@ -1,34 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0+ */
-/*
- * Copyright 2017 Icenowy Zheng <icenowy@aosc.io>
- *
- */
-
-#ifndef _CCU_SUNIV_F1C100S_H_
-#define _CCU_SUNIV_F1C100S_H_
-
-#include <dt-bindings/clock/suniv-ccu-f1c100s.h>
-#include <dt-bindings/reset/suniv-ccu-f1c100s.h>
-
-#define CLK_PLL_CPU		0
-#define CLK_PLL_AUDIO_BASE	1
-#define CLK_PLL_AUDIO		2
-#define CLK_PLL_AUDIO_2X	3
-#define CLK_PLL_AUDIO_4X	4
-#define CLK_PLL_AUDIO_8X	5
-#define CLK_PLL_VIDEO		6
-#define CLK_PLL_VIDEO_2X	7
-#define CLK_PLL_VE		8
-#define CLK_PLL_DDR0		9
-#define CLK_PLL_PERIPH		10
-
-/* CPU clock is exported */
-
-#define CLK_AHB			12
-#define CLK_APB			13
-
-/* All bus gates, DRAM gates and mod clocks are exported */
-
-#define CLK_NUMBER		(CLK_AVS + 1)
-
-#endif /* _CCU_SUNIV_F1C100S_H_ */
diff --git a/drivers/clk/sunxi-ng/sun4i-a10-ccu.c b/drivers/clk/sunxi-ng/sun4i-a10-ccu.c
new file mode 100644
index 000000000000..5d67f5666943
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun4i-a10-ccu.c
@@ -0,0 +1,1482 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (c) 2017 Priit Laes <plaes@plaes.org>.
+ * Copyright (c) 2017 Maxime Ripard.
+ * Copyright (c) 2017 Jonathan Liu.
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/io.h>
+#include <linux/of_address.h>
+
+#include "ccu_common.h"
+#include "ccu_reset.h"
+
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_mp.h"
+#include "ccu_mult.h"
+#include "ccu_nk.h"
+#include "ccu_nkm.h"
+#include "ccu_nkmp.h"
+#include "ccu_nm.h"
+#include "ccu_phase.h"
+#include "ccu_sdm.h"
+
+#include "sun4i-a10-ccu.h"
+
+static struct ccu_nkmp pll_core_clk = {
+	.enable		= BIT(31),
+	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
+	.k		= _SUNXI_CCU_MULT(4, 2),
+	.m		= _SUNXI_CCU_DIV(0, 2),
+	.p		= _SUNXI_CCU_DIV(16, 2),
+	.common		= {
+		.reg		= 0x000,
+		.hw.init	= CLK_HW_INIT("pll-core",
+					      "hosc",
+					      &ccu_nkmp_ops,
+					      0),
+	},
+};
+
+/*
+ * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
+ * the base (2x, 4x and 8x), and one variable divider (the one true
+ * pll audio).
+ *
+ * With sigma-delta modulation for fractional-N on the audio PLL,
+ * we have to use specific dividers. This means the variable divider
+ * can no longer be used, as the audio codec requests the exact clock
+ * rates we support through this mechanism. So we now hard code the
+ * variable divider to 1. This means the clock rates will no longer
+ * match the clock names.
+ */
+#define SUN4I_PLL_AUDIO_REG	0x008
+
+static struct ccu_sdm_setting pll_audio_sdm_table[] = {
+	{ .rate = 22579200, .pattern = 0xc0010d84, .m = 8, .n = 7 },
+	{ .rate = 24576000, .pattern = 0xc000ac02, .m = 14, .n = 14 },
+};
+
+static struct ccu_nm pll_audio_base_clk = {
+	.enable		= BIT(31),
+	.n		= _SUNXI_CCU_MULT_OFFSET(8, 7, 0),
+	.m		= _SUNXI_CCU_DIV_OFFSET(0, 5, 0),
+	.sdm		= _SUNXI_CCU_SDM(pll_audio_sdm_table, 0,
+					 0x00c, BIT(31)),
+	.common		= {
+		.reg		= 0x008,
+		.features	= CCU_FEATURE_SIGMA_DELTA_MOD,
+		.hw.init	= CLK_HW_INIT("pll-audio-base",
+					      "hosc",
+					      &ccu_nm_ops,
+					      0),
+	},
+
+};
+
+static struct ccu_mult pll_video0_clk = {
+	.enable		= BIT(31),
+	.mult		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(0, 7, 0, 9, 127),
+	.frac		= _SUNXI_CCU_FRAC(BIT(15), BIT(14),
+					  270000000, 297000000),
+	.common		= {
+		.reg		= 0x010,
+		.features	= (CCU_FEATURE_FRACTIONAL |
+				   CCU_FEATURE_ALL_PREDIV),
+		.prediv		= 8,
+		.hw.init	= CLK_HW_INIT("pll-video0",
+					      "hosc",
+					      &ccu_mult_ops,
+					      0),
+	},
+};
+
+static struct ccu_nkmp pll_ve_sun4i_clk = {
+	.enable		= BIT(31),
+	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
+	.k		= _SUNXI_CCU_MULT(4, 2),
+	.m		= _SUNXI_CCU_DIV(0, 2),
+	.p		= _SUNXI_CCU_DIV(16, 2),
+	.common		= {
+		.reg		= 0x018,
+		.hw.init	= CLK_HW_INIT("pll-ve",
+					      "hosc",
+					      &ccu_nkmp_ops,
+					      0),
+	},
+};
+
+static struct ccu_nk pll_ve_sun7i_clk = {
+	.enable		= BIT(31),
+	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
+	.k		= _SUNXI_CCU_MULT(4, 2),
+	.common		= {
+		.reg		= 0x018,
+		.hw.init	= CLK_HW_INIT("pll-ve",
+					      "hosc",
+					      &ccu_nk_ops,
+					      0),
+	},
+};
+
+static struct ccu_nk pll_ddr_base_clk = {
+	.enable		= BIT(31),
+	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
+	.k		= _SUNXI_CCU_MULT(4, 2),
+	.common		= {
+		.reg		= 0x020,
+		.hw.init	= CLK_HW_INIT("pll-ddr-base",
+					      "hosc",
+					      &ccu_nk_ops,
+					      0),
+	},
+};
+
+static SUNXI_CCU_M(pll_ddr_clk, "pll-ddr", "pll-ddr-base", 0x020, 0, 2,
+		   CLK_IS_CRITICAL);
+
+static struct ccu_div pll_ddr_other_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(16, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.common		= {
+		.reg		= 0x020,
+		.hw.init	= CLK_HW_INIT("pll-ddr-other", "pll-ddr-base",
+					      &ccu_div_ops,
+					      0),
+	},
+};
+
+static struct ccu_nk pll_periph_base_clk = {
+	.enable		= BIT(31),
+	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
+	.k		= _SUNXI_CCU_MULT(4, 2),
+	.common		= {
+		.reg		= 0x028,
+		.hw.init	= CLK_HW_INIT("pll-periph-base",
+					      "hosc",
+					      &ccu_nk_ops,
+					      0),
+	},
+};
+
+static CLK_FIXED_FACTOR_HW(pll_periph_clk, "pll-periph",
+			   &pll_periph_base_clk.common.hw,
+			   2, 1, CLK_SET_RATE_PARENT);
+
+/* Not documented on A10 */
+static struct ccu_div pll_periph_sata_clk = {
+	.enable		= BIT(14),
+	.div		= _SUNXI_CCU_DIV(0, 2),
+	.fixed_post_div	= 6,
+	.common		= {
+		.reg		= 0x028,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-periph-sata",
+					      "pll-periph-base",
+					      &ccu_div_ops, 0),
+	},
+};
+
+static struct ccu_mult pll_video1_clk = {
+	.enable		= BIT(31),
+	.mult		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(0, 7, 0, 9, 127),
+	.frac		= _SUNXI_CCU_FRAC(BIT(15), BIT(14),
+				  270000000, 297000000),
+	.common		= {
+		.reg		= 0x030,
+		.features	= (CCU_FEATURE_FRACTIONAL |
+				   CCU_FEATURE_ALL_PREDIV),
+		.prediv		= 8,
+		.hw.init	= CLK_HW_INIT("pll-video1",
+					      "hosc",
+					      &ccu_mult_ops,
+					      0),
+	},
+};
+
+/* Not present on A10 */
+static struct ccu_nk pll_gpu_clk = {
+	.enable		= BIT(31),
+	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
+	.k		= _SUNXI_CCU_MULT(4, 2),
+	.common		= {
+		.reg		= 0x040,
+		.hw.init	= CLK_HW_INIT("pll-gpu",
+					      "hosc",
+					      &ccu_nk_ops,
+					      0),
+	},
+};
+
+static SUNXI_CCU_GATE(hosc_clk,	"hosc",	"osc24M", 0x050, BIT(0), 0);
+
+static const char *const cpu_parents[] = { "osc32k", "hosc",
+					   "pll-core", "pll-periph" };
+static const struct ccu_mux_fixed_prediv cpu_predivs[] = {
+	{ .index = 3, .div = 3, },
+};
+
+#define SUN4I_AHB_REG		0x054
+static struct ccu_mux cpu_clk = {
+	.mux		= {
+		.shift		= 16,
+		.width		= 2,
+		.fixed_predivs	= cpu_predivs,
+		.n_predivs	= ARRAY_SIZE(cpu_predivs),
+	},
+	.common		= {
+		.reg		= 0x054,
+		.features	= CCU_FEATURE_FIXED_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("cpu",
+						      cpu_parents,
+						      &ccu_mux_ops,
+						      CLK_SET_RATE_PARENT | CLK_IS_CRITICAL),
+	}
+};
+
+static SUNXI_CCU_M(axi_clk, "axi", "cpu", 0x054, 0, 2, 0);
+
+static struct ccu_div ahb_sun4i_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.common		= {
+		.reg		= 0x054,
+		.hw.init	= CLK_HW_INIT("ahb", "axi", &ccu_div_ops, 0),
+	},
+};
+
+static const char *const ahb_sun7i_parents[] = { "axi", "pll-periph",
+						 "pll-periph" };
+static const struct ccu_mux_fixed_prediv ahb_sun7i_predivs[] = {
+	{ .index = 1, .div = 2, },
+	{ /* Sentinel */ },
+};
+static struct ccu_div ahb_sun7i_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= {
+		.shift		= 6,
+		.width		= 2,
+		.fixed_predivs	= ahb_sun7i_predivs,
+		.n_predivs	= ARRAY_SIZE(ahb_sun7i_predivs),
+	},
+
+	.common		= {
+		.reg		= 0x054,
+		.hw.init	= CLK_HW_INIT_PARENTS("ahb",
+						      ahb_sun7i_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static struct clk_div_table apb0_div_table[] = {
+	{ .val = 0, .div = 2 },
+	{ .val = 1, .div = 2 },
+	{ .val = 2, .div = 4 },
+	{ .val = 3, .div = 8 },
+	{ /* Sentinel */ },
+};
+static SUNXI_CCU_DIV_TABLE(apb0_clk, "apb0", "ahb",
+			   0x054, 8, 2, apb0_div_table, 0);
+
+static const char *const apb1_parents[] = { "hosc", "pll-periph", "osc32k" };
+static SUNXI_CCU_MP_WITH_MUX(apb1_clk, "apb1", apb1_parents, 0x058,
+			     0, 5,	/* M */
+			     16, 2,	/* P */
+			     24, 2,	/* mux */
+			     0);
+
+/* Not present on A20 */
+static SUNXI_CCU_GATE(axi_dram_clk,	"axi-dram",	"ahb",
+		      0x05c, BIT(31), 0);
+
+static SUNXI_CCU_GATE(ahb_otg_clk,	"ahb-otg",	"ahb",
+		      0x060, BIT(0), 0);
+static SUNXI_CCU_GATE(ahb_ehci0_clk,	"ahb-ehci0",	"ahb",
+		      0x060, BIT(1), 0);
+static SUNXI_CCU_GATE(ahb_ohci0_clk,	"ahb-ohci0",	"ahb",
+		      0x060, BIT(2), 0);
+static SUNXI_CCU_GATE(ahb_ehci1_clk,	"ahb-ehci1",	"ahb",
+		      0x060, BIT(3), 0);
+static SUNXI_CCU_GATE(ahb_ohci1_clk,	"ahb-ohci1",	"ahb",
+		      0x060, BIT(4), 0);
+static SUNXI_CCU_GATE(ahb_ss_clk,	"ahb-ss",	"ahb",
+		      0x060, BIT(5), 0);
+static SUNXI_CCU_GATE(ahb_dma_clk,	"ahb-dma",	"ahb",
+		      0x060, BIT(6), 0);
+static SUNXI_CCU_GATE(ahb_bist_clk,	"ahb-bist",	"ahb",
+		      0x060, BIT(7), 0);
+static SUNXI_CCU_GATE(ahb_mmc0_clk,	"ahb-mmc0",	"ahb",
+		      0x060, BIT(8), 0);
+static SUNXI_CCU_GATE(ahb_mmc1_clk,	"ahb-mmc1",	"ahb",
+		      0x060, BIT(9), 0);
+static SUNXI_CCU_GATE(ahb_mmc2_clk,	"ahb-mmc2",	"ahb",
+		      0x060, BIT(10), 0);
+static SUNXI_CCU_GATE(ahb_mmc3_clk,	"ahb-mmc3",	"ahb",
+		      0x060, BIT(11), 0);
+static SUNXI_CCU_GATE(ahb_ms_clk,	"ahb-ms",	"ahb",
+		      0x060, BIT(12), 0);
+static SUNXI_CCU_GATE(ahb_nand_clk,	"ahb-nand",	"ahb",
+		      0x060, BIT(13), 0);
+static SUNXI_CCU_GATE(ahb_sdram_clk,	"ahb-sdram",	"ahb",
+		      0x060, BIT(14), CLK_IS_CRITICAL);
+
+static SUNXI_CCU_GATE(ahb_ace_clk,	"ahb-ace",	"ahb",
+		      0x060, BIT(16), 0);
+static SUNXI_CCU_GATE(ahb_emac_clk,	"ahb-emac",	"ahb",
+		      0x060, BIT(17), 0);
+static SUNXI_CCU_GATE(ahb_ts_clk,	"ahb-ts",	"ahb",
+		      0x060, BIT(18), 0);
+static SUNXI_CCU_GATE(ahb_spi0_clk,	"ahb-spi0",	"ahb",
+		      0x060, BIT(20), 0);
+static SUNXI_CCU_GATE(ahb_spi1_clk,	"ahb-spi1",	"ahb",
+		      0x060, BIT(21), 0);
+static SUNXI_CCU_GATE(ahb_spi2_clk,	"ahb-spi2",	"ahb",
+		      0x060, BIT(22), 0);
+static SUNXI_CCU_GATE(ahb_spi3_clk,	"ahb-spi3",	"ahb",
+		      0x060, BIT(23), 0);
+static SUNXI_CCU_GATE(ahb_pata_clk,	"ahb-pata",	"ahb",
+		      0x060, BIT(24), 0);
+/* Not documented on A20 */
+static SUNXI_CCU_GATE(ahb_sata_clk,	"ahb-sata",	"ahb",
+		      0x060, BIT(25), 0);
+/* Not present on A20 */
+static SUNXI_CCU_GATE(ahb_gps_clk,	"ahb-gps",	"ahb",
+		      0x060, BIT(26), 0);
+/* Not present on A10 */
+static SUNXI_CCU_GATE(ahb_hstimer_clk,	"ahb-hstimer",	"ahb",
+		      0x060, BIT(28), 0);
+
+static SUNXI_CCU_GATE(ahb_ve_clk,	"ahb-ve",	"ahb",
+		      0x064, BIT(0), 0);
+static SUNXI_CCU_GATE(ahb_tvd_clk,	"ahb-tvd",	"ahb",
+		      0x064, BIT(1), 0);
+static SUNXI_CCU_GATE(ahb_tve0_clk,	"ahb-tve0",	"ahb",
+		      0x064, BIT(2), 0);
+static SUNXI_CCU_GATE(ahb_tve1_clk,	"ahb-tve1",	"ahb",
+		      0x064, BIT(3), 0);
+static SUNXI_CCU_GATE(ahb_lcd0_clk,	"ahb-lcd0",	"ahb",
+		      0x064, BIT(4), 0);
+static SUNXI_CCU_GATE(ahb_lcd1_clk,	"ahb-lcd1",	"ahb",
+		      0x064, BIT(5), 0);
+static SUNXI_CCU_GATE(ahb_csi0_clk,	"ahb-csi0",	"ahb",
+		      0x064, BIT(8), 0);
+static SUNXI_CCU_GATE(ahb_csi1_clk,	"ahb-csi1",	"ahb",
+		      0x064, BIT(9), 0);
+/* Not present on A10 */
+static SUNXI_CCU_GATE(ahb_hdmi1_clk,	"ahb-hdmi1",	"ahb",
+		      0x064, BIT(10), 0);
+static SUNXI_CCU_GATE(ahb_hdmi0_clk,	"ahb-hdmi0",	"ahb",
+		      0x064, BIT(11), 0);
+static SUNXI_CCU_GATE(ahb_de_be0_clk,	"ahb-de-be0",	"ahb",
+		      0x064, BIT(12), 0);
+static SUNXI_CCU_GATE(ahb_de_be1_clk,	"ahb-de-be1",	"ahb",
+		      0x064, BIT(13), 0);
+static SUNXI_CCU_GATE(ahb_de_fe0_clk,	"ahb-de-fe0",	"ahb",
+		      0x064, BIT(14), 0);
+static SUNXI_CCU_GATE(ahb_de_fe1_clk,	"ahb-de-fe1",	"ahb",
+		      0x064, BIT(15), 0);
+/* Not present on A10 */
+static SUNXI_CCU_GATE(ahb_gmac_clk,	"ahb-gmac",	"ahb",
+		      0x064, BIT(17), 0);
+static SUNXI_CCU_GATE(ahb_mp_clk,	"ahb-mp",	"ahb",
+		      0x064, BIT(18), 0);
+static SUNXI_CCU_GATE(ahb_gpu_clk,	"ahb-gpu",	"ahb",
+		      0x064, BIT(20), 0);
+
+static SUNXI_CCU_GATE(apb0_codec_clk,	"apb0-codec",	"apb0",
+		      0x068, BIT(0), 0);
+static SUNXI_CCU_GATE(apb0_spdif_clk,	"apb0-spdif",	"apb0",
+		      0x068, BIT(1), 0);
+static SUNXI_CCU_GATE(apb0_ac97_clk,	"apb0-ac97",	"apb0",
+		      0x068, BIT(2), 0);
+static SUNXI_CCU_GATE(apb0_i2s0_clk,	"apb0-i2s0",	"apb0",
+		      0x068, BIT(3), 0);
+/* Not present on A10 */
+static SUNXI_CCU_GATE(apb0_i2s1_clk,	"apb0-i2s1",	"apb0",
+		      0x068, BIT(4), 0);
+static SUNXI_CCU_GATE(apb0_pio_clk,	"apb0-pio",	"apb0",
+		      0x068, BIT(5), 0);
+static SUNXI_CCU_GATE(apb0_ir0_clk,	"apb0-ir0",	"apb0",
+		      0x068, BIT(6), 0);
+static SUNXI_CCU_GATE(apb0_ir1_clk,	"apb0-ir1",	"apb0",
+		      0x068, BIT(7), 0);
+/* Not present on A10 */
+static SUNXI_CCU_GATE(apb0_i2s2_clk,	"apb0-i2s2",	"apb0",
+		      0x068, BIT(8), 0);
+static SUNXI_CCU_GATE(apb0_keypad_clk,	"apb0-keypad",	"apb0",
+		      0x068, BIT(10), 0);
+
+static SUNXI_CCU_GATE(apb1_i2c0_clk,	"apb1-i2c0",	"apb1",
+		      0x06c, BIT(0), 0);
+static SUNXI_CCU_GATE(apb1_i2c1_clk,	"apb1-i2c1",	"apb1",
+		      0x06c, BIT(1), 0);
+static SUNXI_CCU_GATE(apb1_i2c2_clk,	"apb1-i2c2",	"apb1",
+		      0x06c, BIT(2), 0);
+/* Not present on A10 */
+static SUNXI_CCU_GATE(apb1_i2c3_clk,	"apb1-i2c3",	"apb1",
+		      0x06c, BIT(3), 0);
+static SUNXI_CCU_GATE(apb1_can_clk,	"apb1-can",	"apb1",
+		      0x06c, BIT(4), 0);
+static SUNXI_CCU_GATE(apb1_scr_clk,	"apb1-scr",	"apb1",
+		      0x06c, BIT(5), 0);
+static SUNXI_CCU_GATE(apb1_ps20_clk,	"apb1-ps20",	"apb1",
+		      0x06c, BIT(6), 0);
+static SUNXI_CCU_GATE(apb1_ps21_clk,	"apb1-ps21",	"apb1",
+		      0x06c, BIT(7), 0);
+/* Not present on A10 */
+static SUNXI_CCU_GATE(apb1_i2c4_clk,	"apb1-i2c4",	"apb1",
+		      0x06c, BIT(15), 0);
+static SUNXI_CCU_GATE(apb1_uart0_clk,	"apb1-uart0",	"apb1",
+		      0x06c, BIT(16), 0);
+static SUNXI_CCU_GATE(apb1_uart1_clk,	"apb1-uart1",	"apb1",
+		      0x06c, BIT(17), 0);
+static SUNXI_CCU_GATE(apb1_uart2_clk,	"apb1-uart2",	"apb1",
+		      0x06c, BIT(18), 0);
+static SUNXI_CCU_GATE(apb1_uart3_clk,	"apb1-uart3",	"apb1",
+		      0x06c, BIT(19), 0);
+static SUNXI_CCU_GATE(apb1_uart4_clk,	"apb1-uart4",	"apb1",
+		      0x06c, BIT(20), 0);
+static SUNXI_CCU_GATE(apb1_uart5_clk,	"apb1-uart5",	"apb1",
+		      0x06c, BIT(21), 0);
+static SUNXI_CCU_GATE(apb1_uart6_clk,	"apb1-uart6",	"apb1",
+		      0x06c, BIT(22), 0);
+static SUNXI_CCU_GATE(apb1_uart7_clk,	"apb1-uart7",	"apb1",
+		      0x06c, BIT(23), 0);
+
+static const char *const mod0_default_parents[] = { "hosc", "pll-periph",
+						     "pll-ddr-other" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand_clk, "nand", mod0_default_parents, 0x080,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+/* Undocumented on A10 */
+static SUNXI_CCU_MP_WITH_MUX_GATE(ms_clk, "ms", mod0_default_parents, 0x084,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents, 0x088,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+/* MMC output and sample clocks are not present on A10 */
+static SUNXI_CCU_PHASE(mmc0_output_clk, "mmc0_output", "mmc0",
+		       0x088, 8, 3, 0);
+static SUNXI_CCU_PHASE(mmc0_sample_clk, "mmc0_sample", "mmc0",
+		       0x088, 20, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents, 0x08c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+/* MMC output and sample clocks are not present on A10 */
+static SUNXI_CCU_PHASE(mmc1_output_clk, "mmc1_output", "mmc1",
+		       0x08c, 8, 3, 0);
+static SUNXI_CCU_PHASE(mmc1_sample_clk, "mmc1_sample", "mmc1",
+		       0x08c, 20, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents, 0x090,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+/* MMC output and sample clocks are not present on A10 */
+static SUNXI_CCU_PHASE(mmc2_output_clk, "mmc2_output", "mmc2",
+		       0x090, 8, 3, 0);
+static SUNXI_CCU_PHASE(mmc2_sample_clk, "mmc2_sample", "mmc2",
+		       0x090, 20, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc3_clk, "mmc3", mod0_default_parents, 0x094,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+/* MMC output and sample clocks are not present on A10 */
+static SUNXI_CCU_PHASE(mmc3_output_clk, "mmc3_output", "mmc3",
+		       0x094, 8, 3, 0);
+static SUNXI_CCU_PHASE(mmc3_sample_clk, "mmc3_sample", "mmc3",
+		       0x094, 20, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(ts_clk, "ts", mod0_default_parents, 0x098,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(ss_clk, "ss", mod0_default_parents, 0x09c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents, 0x0a0,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents, 0x0a4,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi2_clk, "spi2", mod0_default_parents, 0x0a8,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+/* Undocumented on A10 */
+static SUNXI_CCU_MP_WITH_MUX_GATE(pata_clk, "pata", mod0_default_parents, 0x0ac,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+/* TODO: Check whether A10 actually supports osc32k as 4th parent? */
+static const char *const ir_parents_sun4i[] = { "hosc", "pll-periph",
+						"pll-ddr-other" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(ir0_sun4i_clk, "ir0", ir_parents_sun4i, 0x0b0,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(ir1_sun4i_clk, "ir1", ir_parents_sun4i, 0x0b4,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+static const char *const ir_parents_sun7i[] = { "hosc", "pll-periph",
+						"pll-ddr-other", "osc32k" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(ir0_sun7i_clk, "ir0", ir_parents_sun7i, 0x0b0,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(ir1_sun7i_clk, "ir1", ir_parents_sun7i, 0x0b4,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static const char *const audio_parents[] = { "pll-audio-8x", "pll-audio-4x",
+					      "pll-audio-2x", "pll-audio" };
+static SUNXI_CCU_MUX_WITH_GATE(i2s0_clk, "i2s0", audio_parents,
+			       0x0b8, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_MUX_WITH_GATE(ac97_clk, "ac97", audio_parents,
+			       0x0bc, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+/* Undocumented on A10 */
+static SUNXI_CCU_MUX_WITH_GATE(spdif_clk, "spdif", audio_parents,
+			       0x0c0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static const char *const keypad_parents[] = { "hosc", "losc"};
+static const u8 keypad_table[] = { 0, 2 };
+static struct ccu_mp keypad_clk = {
+	.enable		= BIT(31),
+	.m		= _SUNXI_CCU_DIV(0, 5),
+	.p		= _SUNXI_CCU_DIV(16, 2),
+	.mux		= _SUNXI_CCU_MUX_TABLE(24, 2, keypad_table),
+	.common		= {
+		.reg		= 0x0c4,
+		.hw.init	= CLK_HW_INIT_PARENTS("keypad",
+						      keypad_parents,
+						      &ccu_mp_ops,
+						      0),
+	},
+};
+
+/*
+ * SATA supports external clock as parent via BIT(24) and is probably an
+ * optional crystal or oscillator that can be connected to the
+ * SATA-CLKM / SATA-CLKP pins.
+ */
+static const char *const sata_parents[] = {"pll-periph-sata", "sata-ext"};
+static SUNXI_CCU_MUX_WITH_GATE(sata_clk, "sata", sata_parents,
+			       0x0c8, 24, 1, BIT(31), CLK_SET_RATE_PARENT);
+
+
+static SUNXI_CCU_GATE(usb_ohci0_clk,	"usb-ohci0",	"pll-periph",
+		      0x0cc, BIT(6), 0);
+static SUNXI_CCU_GATE(usb_ohci1_clk,	"usb-ohci1",	"pll-periph",
+		      0x0cc, BIT(7), 0);
+static SUNXI_CCU_GATE(usb_phy_clk,	"usb-phy",	"pll-periph",
+		      0x0cc, BIT(8), 0);
+
+/* TODO: GPS CLK 0x0d0 */
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi3_clk, "spi3", mod0_default_parents, 0x0d4,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+/* Not present on A10 */
+static SUNXI_CCU_MUX_WITH_GATE(i2s1_clk, "i2s1", audio_parents,
+			       0x0d8, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+/* Not present on A10 */
+static SUNXI_CCU_MUX_WITH_GATE(i2s2_clk, "i2s2", audio_parents,
+			       0x0dc, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"pll-ddr",
+		      0x100, BIT(0), 0);
+static SUNXI_CCU_GATE(dram_csi0_clk,	"dram-csi0",	"pll-ddr",
+		      0x100, BIT(1), 0);
+static SUNXI_CCU_GATE(dram_csi1_clk,	"dram-csi1",	"pll-ddr",
+		      0x100, BIT(2), 0);
+static SUNXI_CCU_GATE(dram_ts_clk,	"dram-ts",	"pll-ddr",
+		      0x100, BIT(3), 0);
+static SUNXI_CCU_GATE(dram_tvd_clk,	"dram-tvd",	"pll-ddr",
+		      0x100, BIT(4), 0);
+static SUNXI_CCU_GATE(dram_tve0_clk,	"dram-tve0",	"pll-ddr",
+		      0x100, BIT(5), 0);
+static SUNXI_CCU_GATE(dram_tve1_clk,	"dram-tve1",	"pll-ddr",
+		      0x100, BIT(6), 0);
+
+/* Clock seems to be critical only on sun4i */
+static SUNXI_CCU_GATE(dram_out_clk,	"dram-out",	"pll-ddr",
+		      0x100, BIT(15), CLK_IS_CRITICAL);
+static SUNXI_CCU_GATE(dram_de_fe1_clk,	"dram-de-fe1",	"pll-ddr",
+		      0x100, BIT(24), 0);
+static SUNXI_CCU_GATE(dram_de_fe0_clk,	"dram-de-fe0",	"pll-ddr",
+		      0x100, BIT(25), 0);
+static SUNXI_CCU_GATE(dram_de_be0_clk,	"dram-de-be0",	"pll-ddr",
+		      0x100, BIT(26), 0);
+static SUNXI_CCU_GATE(dram_de_be1_clk,	"dram-de-be1",	"pll-ddr",
+		      0x100, BIT(27), 0);
+static SUNXI_CCU_GATE(dram_mp_clk,	"dram-mp",	"pll-ddr",
+		      0x100, BIT(28), 0);
+static SUNXI_CCU_GATE(dram_ace_clk,	"dram-ace",	"pll-ddr",
+		      0x100, BIT(29), 0);
+
+static const char *const de_parents[] = { "pll-video0", "pll-video1",
+					   "pll-ddr-other" };
+static SUNXI_CCU_M_WITH_MUX_GATE(de_be0_clk, "de-be0", de_parents,
+				 0x104, 0, 4, 24, 2, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(de_be1_clk, "de-be1", de_parents,
+				 0x108, 0, 4, 24, 2, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(de_fe0_clk, "de-fe0", de_parents,
+				 0x10c, 0, 4, 24, 2, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(de_fe1_clk, "de-fe1", de_parents,
+				 0x110, 0, 4, 24, 2, BIT(31), 0);
+
+/* Undocumented on A10 */
+static SUNXI_CCU_M_WITH_MUX_GATE(de_mp_clk, "de-mp", de_parents,
+				 0x114, 0, 4, 24, 2, BIT(31), 0);
+
+static const char *const disp_parents[] = { "pll-video0", "pll-video1",
+					    "pll-video0-2x", "pll-video1-2x" };
+static SUNXI_CCU_MUX_WITH_GATE(tcon0_ch0_clk, "tcon0-ch0-sclk", disp_parents,
+			       0x118, 24, 2, BIT(31), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_MUX_WITH_GATE(tcon1_ch0_clk, "tcon1-ch0-sclk", disp_parents,
+			       0x11c, 24, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static const char *const csi_sclk_parents[] = { "pll-video0", "pll-ve",
+						"pll-ddr-other", "pll-periph" };
+
+static SUNXI_CCU_M_WITH_MUX_GATE(csi_sclk_clk, "csi-sclk",
+				 csi_sclk_parents,
+				 0x120, 0, 4, 24, 2, BIT(31), 0);
+
+/* TVD clock setup for A10 */
+static const char *const tvd_parents[] = { "pll-video0", "pll-video1" };
+static SUNXI_CCU_MUX_WITH_GATE(tvd_sun4i_clk, "tvd", tvd_parents,
+			       0x128, 24, 1, BIT(31), 0);
+
+/* TVD clock setup for A20 */
+static SUNXI_CCU_MP_WITH_MUX_GATE(tvd_sclk2_sun7i_clk,
+				  "tvd-sclk2", tvd_parents,
+				  0x128,
+				  0, 4,		/* M */
+				  16, 4,	/* P */
+				  8, 1,		/* mux */
+				  BIT(15),	/* gate */
+				  0);
+
+static SUNXI_CCU_M_WITH_GATE(tvd_sclk1_sun7i_clk, "tvd-sclk1", "tvd-sclk2",
+			     0x128, 0, 4, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(tcon0_ch1_sclk2_clk, "tcon0-ch1-sclk2",
+				 disp_parents,
+				 0x12c, 0, 4, 24, 2, BIT(31),
+				 CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M_WITH_GATE(tcon0_ch1_clk,
+			     "tcon0-ch1-sclk1", "tcon0-ch1-sclk2",
+			     0x12c, 11, 1, BIT(15),
+			     CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(tcon1_ch1_sclk2_clk, "tcon1-ch1-sclk2",
+				 disp_parents,
+				 0x130, 0, 4, 24, 2, BIT(31),
+				 CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M_WITH_GATE(tcon1_ch1_clk,
+			     "tcon1-ch1-sclk1", "tcon1-ch1-sclk2",
+			     0x130, 11, 1, BIT(15),
+			     CLK_SET_RATE_PARENT);
+
+static const char *const csi_parents[] = { "hosc", "pll-video0", "pll-video1",
+					   "pll-video0-2x", "pll-video1-2x"};
+static const u8 csi_table[] = { 0, 1, 2, 5, 6};
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi0_clk, "csi0",
+				       csi_parents, csi_table,
+				       0x134, 0, 5, 24, 3, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi1_clk, "csi1",
+				       csi_parents, csi_table,
+				       0x138, 0, 5, 24, 3, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve", 0x13c, 16, 8, BIT(31), 0);
+
+static SUNXI_CCU_GATE(codec_clk, "codec", "pll-audio",
+		      0x140, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(avs_clk, "avs", "hosc", 0x144, BIT(31), 0);
+
+static const char *const ace_parents[] = { "pll-ve", "pll-ddr-other" };
+static SUNXI_CCU_M_WITH_MUX_GATE(ace_clk, "ace", ace_parents,
+				 0x148, 0, 4, 24, 1, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(hdmi_clk, "hdmi", disp_parents,
+				 0x150, 0, 4, 24, 2, BIT(31),
+				 CLK_SET_RATE_PARENT);
+
+static const char *const gpu_parents_sun4i[] = { "pll-video0", "pll-ve",
+						 "pll-ddr-other",
+						 "pll-video1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(gpu_sun4i_clk, "gpu", gpu_parents_sun4i,
+				 0x154, 0, 4, 24, 2, BIT(31),
+				 CLK_SET_RATE_PARENT);
+
+static const char *const gpu_parents_sun7i[] = { "pll-video0", "pll-ve",
+						 "pll-ddr-other", "pll-video1",
+						 "pll-gpu" };
+static const u8 gpu_table_sun7i[] = { 0, 1, 2, 3, 4 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(gpu_sun7i_clk, "gpu",
+				       gpu_parents_sun7i, gpu_table_sun7i,
+				       0x154, 0, 4, 24, 3, BIT(31),
+				       CLK_SET_RATE_PARENT);
+
+static const char *const mbus_sun4i_parents[] = { "hosc", "pll-periph",
+						  "pll-ddr-other" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(mbus_sun4i_clk, "mbus", mbus_sun4i_parents,
+				  0x15c, 0, 4, 16, 2, 24, 2, BIT(31),
+				  0);
+static const char *const mbus_sun7i_parents[] = { "hosc", "pll-periph-base",
+						  "pll-ddr-other" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(mbus_sun7i_clk, "mbus", mbus_sun7i_parents,
+				  0x15c, 0, 4, 16, 2, 24, 2, BIT(31),
+				  CLK_IS_CRITICAL);
+
+static SUNXI_CCU_GATE(hdmi1_slow_clk, "hdmi1-slow", "hosc", 0x178, BIT(31), 0);
+
+static const char *const hdmi1_parents[] = { "pll-video0", "pll-video1" };
+static const u8 hdmi1_table[] = { 0, 1};
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(hdmi1_clk, "hdmi1",
+				       hdmi1_parents, hdmi1_table,
+				       0x17c, 0, 4, 24, 2, BIT(31),
+				       CLK_SET_RATE_PARENT);
+
+static const char *const out_parents[] = { "hosc", "osc32k", "hosc" };
+static const struct ccu_mux_fixed_prediv clk_out_predivs[] = {
+	{ .index = 0, .div = 750, },
+};
+
+static struct ccu_mp out_a_clk = {
+	.enable		= BIT(31),
+	.m		= _SUNXI_CCU_DIV(8, 5),
+	.p		= _SUNXI_CCU_DIV(20, 2),
+	.mux		= {
+		.shift		= 24,
+		.width		= 2,
+		.fixed_predivs	= clk_out_predivs,
+		.n_predivs	= ARRAY_SIZE(clk_out_predivs),
+	},
+	.common		= {
+		.reg		= 0x1f0,
+		.features	= CCU_FEATURE_FIXED_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("out-a",
+						      out_parents,
+						      &ccu_mp_ops,
+						      0),
+	},
+};
+static struct ccu_mp out_b_clk = {
+	.enable		= BIT(31),
+	.m		= _SUNXI_CCU_DIV(8, 5),
+	.p		= _SUNXI_CCU_DIV(20, 2),
+	.mux		= {
+		.shift		= 24,
+		.width		= 2,
+		.fixed_predivs	= clk_out_predivs,
+		.n_predivs	= ARRAY_SIZE(clk_out_predivs),
+	},
+	.common		= {
+		.reg		= 0x1f4,
+		.features	= CCU_FEATURE_FIXED_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("out-b",
+						      out_parents,
+						      &ccu_mp_ops,
+						      0),
+	},
+};
+
+static struct ccu_common *sun4i_sun7i_ccu_clks[] = {
+	&hosc_clk.common,
+	&pll_core_clk.common,
+	&pll_audio_base_clk.common,
+	&pll_video0_clk.common,
+	&pll_ve_sun4i_clk.common,
+	&pll_ve_sun7i_clk.common,
+	&pll_ddr_base_clk.common,
+	&pll_ddr_clk.common,
+	&pll_ddr_other_clk.common,
+	&pll_periph_base_clk.common,
+	&pll_periph_sata_clk.common,
+	&pll_video1_clk.common,
+	&pll_gpu_clk.common,
+	&cpu_clk.common,
+	&axi_clk.common,
+	&axi_dram_clk.common,
+	&ahb_sun4i_clk.common,
+	&ahb_sun7i_clk.common,
+	&apb0_clk.common,
+	&apb1_clk.common,
+	&ahb_otg_clk.common,
+	&ahb_ehci0_clk.common,
+	&ahb_ohci0_clk.common,
+	&ahb_ehci1_clk.common,
+	&ahb_ohci1_clk.common,
+	&ahb_ss_clk.common,
+	&ahb_dma_clk.common,
+	&ahb_bist_clk.common,
+	&ahb_mmc0_clk.common,
+	&ahb_mmc1_clk.common,
+	&ahb_mmc2_clk.common,
+	&ahb_mmc3_clk.common,
+	&ahb_ms_clk.common,
+	&ahb_nand_clk.common,
+	&ahb_sdram_clk.common,
+	&ahb_ace_clk.common,
+	&ahb_emac_clk.common,
+	&ahb_ts_clk.common,
+	&ahb_spi0_clk.common,
+	&ahb_spi1_clk.common,
+	&ahb_spi2_clk.common,
+	&ahb_spi3_clk.common,
+	&ahb_pata_clk.common,
+	&ahb_sata_clk.common,
+	&ahb_gps_clk.common,
+	&ahb_hstimer_clk.common,
+	&ahb_ve_clk.common,
+	&ahb_tvd_clk.common,
+	&ahb_tve0_clk.common,
+	&ahb_tve1_clk.common,
+	&ahb_lcd0_clk.common,
+	&ahb_lcd1_clk.common,
+	&ahb_csi0_clk.common,
+	&ahb_csi1_clk.common,
+	&ahb_hdmi1_clk.common,
+	&ahb_hdmi0_clk.common,
+	&ahb_de_be0_clk.common,
+	&ahb_de_be1_clk.common,
+	&ahb_de_fe0_clk.common,
+	&ahb_de_fe1_clk.common,
+	&ahb_gmac_clk.common,
+	&ahb_mp_clk.common,
+	&ahb_gpu_clk.common,
+	&apb0_codec_clk.common,
+	&apb0_spdif_clk.common,
+	&apb0_ac97_clk.common,
+	&apb0_i2s0_clk.common,
+	&apb0_i2s1_clk.common,
+	&apb0_pio_clk.common,
+	&apb0_ir0_clk.common,
+	&apb0_ir1_clk.common,
+	&apb0_i2s2_clk.common,
+	&apb0_keypad_clk.common,
+	&apb1_i2c0_clk.common,
+	&apb1_i2c1_clk.common,
+	&apb1_i2c2_clk.common,
+	&apb1_i2c3_clk.common,
+	&apb1_can_clk.common,
+	&apb1_scr_clk.common,
+	&apb1_ps20_clk.common,
+	&apb1_ps21_clk.common,
+	&apb1_i2c4_clk.common,
+	&apb1_uart0_clk.common,
+	&apb1_uart1_clk.common,
+	&apb1_uart2_clk.common,
+	&apb1_uart3_clk.common,
+	&apb1_uart4_clk.common,
+	&apb1_uart5_clk.common,
+	&apb1_uart6_clk.common,
+	&apb1_uart7_clk.common,
+	&nand_clk.common,
+	&ms_clk.common,
+	&mmc0_clk.common,
+	&mmc0_output_clk.common,
+	&mmc0_sample_clk.common,
+	&mmc1_clk.common,
+	&mmc1_output_clk.common,
+	&mmc1_sample_clk.common,
+	&mmc2_clk.common,
+	&mmc2_output_clk.common,
+	&mmc2_sample_clk.common,
+	&mmc3_clk.common,
+	&mmc3_output_clk.common,
+	&mmc3_sample_clk.common,
+	&ts_clk.common,
+	&ss_clk.common,
+	&spi0_clk.common,
+	&spi1_clk.common,
+	&spi2_clk.common,
+	&pata_clk.common,
+	&ir0_sun4i_clk.common,
+	&ir1_sun4i_clk.common,
+	&ir0_sun7i_clk.common,
+	&ir1_sun7i_clk.common,
+	&i2s0_clk.common,
+	&ac97_clk.common,
+	&spdif_clk.common,
+	&keypad_clk.common,
+	&sata_clk.common,
+	&usb_ohci0_clk.common,
+	&usb_ohci1_clk.common,
+	&usb_phy_clk.common,
+	&spi3_clk.common,
+	&i2s1_clk.common,
+	&i2s2_clk.common,
+	&dram_ve_clk.common,
+	&dram_csi0_clk.common,
+	&dram_csi1_clk.common,
+	&dram_ts_clk.common,
+	&dram_tvd_clk.common,
+	&dram_tve0_clk.common,
+	&dram_tve1_clk.common,
+	&dram_out_clk.common,
+	&dram_de_fe1_clk.common,
+	&dram_de_fe0_clk.common,
+	&dram_de_be0_clk.common,
+	&dram_de_be1_clk.common,
+	&dram_mp_clk.common,
+	&dram_ace_clk.common,
+	&de_be0_clk.common,
+	&de_be1_clk.common,
+	&de_fe0_clk.common,
+	&de_fe1_clk.common,
+	&de_mp_clk.common,
+	&tcon0_ch0_clk.common,
+	&tcon1_ch0_clk.common,
+	&csi_sclk_clk.common,
+	&tvd_sun4i_clk.common,
+	&tvd_sclk1_sun7i_clk.common,
+	&tvd_sclk2_sun7i_clk.common,
+	&tcon0_ch1_sclk2_clk.common,
+	&tcon0_ch1_clk.common,
+	&tcon1_ch1_sclk2_clk.common,
+	&tcon1_ch1_clk.common,
+	&csi0_clk.common,
+	&csi1_clk.common,
+	&ve_clk.common,
+	&codec_clk.common,
+	&avs_clk.common,
+	&ace_clk.common,
+	&hdmi_clk.common,
+	&gpu_sun4i_clk.common,
+	&gpu_sun7i_clk.common,
+	&mbus_sun4i_clk.common,
+	&mbus_sun7i_clk.common,
+	&hdmi1_slow_clk.common,
+	&hdmi1_clk.common,
+	&out_a_clk.common,
+	&out_b_clk.common
+};
+
+static const struct clk_hw *clk_parent_pll_audio[] = {
+	&pll_audio_base_clk.common.hw
+};
+
+/* Post-divider for pll-audio is hardcoded to 1 */
+static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
+			    clk_parent_pll_audio,
+			    1, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
+			    clk_parent_pll_audio,
+			    2, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
+			    clk_parent_pll_audio,
+			    1, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
+			    clk_parent_pll_audio,
+			    1, 2, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HW(pll_video0_2x_clk, "pll-video0-2x",
+			   &pll_video0_clk.common.hw,
+			   1, 2, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HW(pll_video1_2x_clk, "pll-video1-2x",
+			   &pll_video1_clk.common.hw,
+			   1, 2, CLK_SET_RATE_PARENT);
+
+
+static struct clk_hw_onecell_data sun4i_a10_hw_clks = {
+	.hws	= {
+		[CLK_HOSC]		= &hosc_clk.common.hw,
+		[CLK_PLL_CORE]		= &pll_core_clk.common.hw,
+		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
+		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
+		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
+		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
+		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
+		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
+		[CLK_PLL_VIDEO0_2X]	= &pll_video0_2x_clk.hw,
+		[CLK_PLL_VE]		= &pll_ve_sun4i_clk.common.hw,
+		[CLK_PLL_DDR_BASE]	= &pll_ddr_base_clk.common.hw,
+		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
+		[CLK_PLL_DDR_OTHER]	= &pll_ddr_other_clk.common.hw,
+		[CLK_PLL_PERIPH_BASE]	= &pll_periph_base_clk.common.hw,
+		[CLK_PLL_PERIPH]	= &pll_periph_clk.hw,
+		[CLK_PLL_PERIPH_SATA]	= &pll_periph_sata_clk.common.hw,
+		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
+		[CLK_PLL_VIDEO1_2X]	= &pll_video1_2x_clk.hw,
+		[CLK_CPU]		= &cpu_clk.common.hw,
+		[CLK_AXI]		= &axi_clk.common.hw,
+		[CLK_AXI_DRAM]		= &axi_dram_clk.common.hw,
+		[CLK_AHB]		= &ahb_sun4i_clk.common.hw,
+		[CLK_APB0]		= &apb0_clk.common.hw,
+		[CLK_APB1]		= &apb1_clk.common.hw,
+		[CLK_AHB_OTG]		= &ahb_otg_clk.common.hw,
+		[CLK_AHB_EHCI0]		= &ahb_ehci0_clk.common.hw,
+		[CLK_AHB_OHCI0]		= &ahb_ohci0_clk.common.hw,
+		[CLK_AHB_EHCI1]		= &ahb_ehci1_clk.common.hw,
+		[CLK_AHB_OHCI1]		= &ahb_ohci1_clk.common.hw,
+		[CLK_AHB_SS]		= &ahb_ss_clk.common.hw,
+		[CLK_AHB_DMA]		= &ahb_dma_clk.common.hw,
+		[CLK_AHB_BIST]		= &ahb_bist_clk.common.hw,
+		[CLK_AHB_MMC0]		= &ahb_mmc0_clk.common.hw,
+		[CLK_AHB_MMC1]		= &ahb_mmc1_clk.common.hw,
+		[CLK_AHB_MMC2]		= &ahb_mmc2_clk.common.hw,
+		[CLK_AHB_MMC3]		= &ahb_mmc3_clk.common.hw,
+		[CLK_AHB_MS]		= &ahb_ms_clk.common.hw,
+		[CLK_AHB_NAND]		= &ahb_nand_clk.common.hw,
+		[CLK_AHB_SDRAM]		= &ahb_sdram_clk.common.hw,
+		[CLK_AHB_ACE]		= &ahb_ace_clk.common.hw,
+		[CLK_AHB_EMAC]		= &ahb_emac_clk.common.hw,
+		[CLK_AHB_TS]		= &ahb_ts_clk.common.hw,
+		[CLK_AHB_SPI0]		= &ahb_spi0_clk.common.hw,
+		[CLK_AHB_SPI1]		= &ahb_spi1_clk.common.hw,
+		[CLK_AHB_SPI2]		= &ahb_spi2_clk.common.hw,
+		[CLK_AHB_SPI3]		= &ahb_spi3_clk.common.hw,
+		[CLK_AHB_PATA]		= &ahb_pata_clk.common.hw,
+		[CLK_AHB_SATA]		= &ahb_sata_clk.common.hw,
+		[CLK_AHB_GPS]		= &ahb_gps_clk.common.hw,
+		[CLK_AHB_VE]		= &ahb_ve_clk.common.hw,
+		[CLK_AHB_TVD]		= &ahb_tvd_clk.common.hw,
+		[CLK_AHB_TVE0]		= &ahb_tve0_clk.common.hw,
+		[CLK_AHB_TVE1]		= &ahb_tve1_clk.common.hw,
+		[CLK_AHB_LCD0]		= &ahb_lcd0_clk.common.hw,
+		[CLK_AHB_LCD1]		= &ahb_lcd1_clk.common.hw,
+		[CLK_AHB_CSI0]		= &ahb_csi0_clk.common.hw,
+		[CLK_AHB_CSI1]		= &ahb_csi1_clk.common.hw,
+		[CLK_AHB_HDMI0]		= &ahb_hdmi0_clk.common.hw,
+		[CLK_AHB_DE_BE0]	= &ahb_de_be0_clk.common.hw,
+		[CLK_AHB_DE_BE1]	= &ahb_de_be1_clk.common.hw,
+		[CLK_AHB_DE_FE0]	= &ahb_de_fe0_clk.common.hw,
+		[CLK_AHB_DE_FE1]	= &ahb_de_fe1_clk.common.hw,
+		[CLK_AHB_MP]		= &ahb_mp_clk.common.hw,
+		[CLK_AHB_GPU]		= &ahb_gpu_clk.common.hw,
+		[CLK_APB0_CODEC]	= &apb0_codec_clk.common.hw,
+		[CLK_APB0_SPDIF]	= &apb0_spdif_clk.common.hw,
+		[CLK_APB0_AC97]		= &apb0_ac97_clk.common.hw,
+		[CLK_APB0_I2S0]		= &apb0_i2s0_clk.common.hw,
+		[CLK_APB0_PIO]		= &apb0_pio_clk.common.hw,
+		[CLK_APB0_IR0]		= &apb0_ir0_clk.common.hw,
+		[CLK_APB0_IR1]		= &apb0_ir1_clk.common.hw,
+		[CLK_APB0_KEYPAD]	= &apb0_keypad_clk.common.hw,
+		[CLK_APB1_I2C0]		= &apb1_i2c0_clk.common.hw,
+		[CLK_APB1_I2C1]		= &apb1_i2c1_clk.common.hw,
+		[CLK_APB1_I2C2]		= &apb1_i2c2_clk.common.hw,
+		[CLK_APB1_CAN]		= &apb1_can_clk.common.hw,
+		[CLK_APB1_SCR]		= &apb1_scr_clk.common.hw,
+		[CLK_APB1_PS20]		= &apb1_ps20_clk.common.hw,
+		[CLK_APB1_PS21]		= &apb1_ps21_clk.common.hw,
+		[CLK_APB1_UART0]	= &apb1_uart0_clk.common.hw,
+		[CLK_APB1_UART1]	= &apb1_uart1_clk.common.hw,
+		[CLK_APB1_UART2]	= &apb1_uart2_clk.common.hw,
+		[CLK_APB1_UART3]	= &apb1_uart3_clk.common.hw,
+		[CLK_APB1_UART4]	= &apb1_uart4_clk.common.hw,
+		[CLK_APB1_UART5]	= &apb1_uart5_clk.common.hw,
+		[CLK_APB1_UART6]	= &apb1_uart6_clk.common.hw,
+		[CLK_APB1_UART7]	= &apb1_uart7_clk.common.hw,
+		[CLK_NAND]		= &nand_clk.common.hw,
+		[CLK_MS]		= &ms_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC2]		= &mmc2_clk.common.hw,
+		[CLK_MMC3]		= &mmc3_clk.common.hw,
+		[CLK_TS]		= &ts_clk.common.hw,
+		[CLK_SS]		= &ss_clk.common.hw,
+		[CLK_SPI0]		= &spi0_clk.common.hw,
+		[CLK_SPI1]		= &spi1_clk.common.hw,
+		[CLK_SPI2]		= &spi2_clk.common.hw,
+		[CLK_PATA]		= &pata_clk.common.hw,
+		[CLK_IR0]		= &ir0_sun4i_clk.common.hw,
+		[CLK_IR1]		= &ir1_sun4i_clk.common.hw,
+		[CLK_I2S0]		= &i2s0_clk.common.hw,
+		[CLK_AC97]		= &ac97_clk.common.hw,
+		[CLK_SPDIF]		= &spdif_clk.common.hw,
+		[CLK_KEYPAD]		= &keypad_clk.common.hw,
+		[CLK_SATA]		= &sata_clk.common.hw,
+		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
+		[CLK_USB_OHCI1]		= &usb_ohci1_clk.common.hw,
+		[CLK_USB_PHY]		= &usb_phy_clk.common.hw,
+		/* CLK_GPS is unimplemented */
+		[CLK_SPI3]		= &spi3_clk.common.hw,
+		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
+		[CLK_DRAM_CSI0]		= &dram_csi0_clk.common.hw,
+		[CLK_DRAM_CSI1]		= &dram_csi1_clk.common.hw,
+		[CLK_DRAM_TS]		= &dram_ts_clk.common.hw,
+		[CLK_DRAM_TVD]		= &dram_tvd_clk.common.hw,
+		[CLK_DRAM_TVE0]		= &dram_tve0_clk.common.hw,
+		[CLK_DRAM_TVE1]		= &dram_tve1_clk.common.hw,
+		[CLK_DRAM_OUT]		= &dram_out_clk.common.hw,
+		[CLK_DRAM_DE_FE1]	= &dram_de_fe1_clk.common.hw,
+		[CLK_DRAM_DE_FE0]	= &dram_de_fe0_clk.common.hw,
+		[CLK_DRAM_DE_BE0]	= &dram_de_be0_clk.common.hw,
+		[CLK_DRAM_DE_BE1]	= &dram_de_be1_clk.common.hw,
+		[CLK_DRAM_MP]		= &dram_mp_clk.common.hw,
+		[CLK_DRAM_ACE]		= &dram_ace_clk.common.hw,
+		[CLK_DE_BE0]		= &de_be0_clk.common.hw,
+		[CLK_DE_BE1]		= &de_be1_clk.common.hw,
+		[CLK_DE_FE0]		= &de_fe0_clk.common.hw,
+		[CLK_DE_FE1]		= &de_fe1_clk.common.hw,
+		[CLK_DE_MP]		= &de_mp_clk.common.hw,
+		[CLK_TCON0_CH0]		= &tcon0_ch0_clk.common.hw,
+		[CLK_TCON1_CH0]		= &tcon1_ch0_clk.common.hw,
+		[CLK_CSI_SCLK]		= &csi_sclk_clk.common.hw,
+		[CLK_TVD]		= &tvd_sun4i_clk.common.hw,
+		[CLK_TCON0_CH1_SCLK2]	= &tcon0_ch1_sclk2_clk.common.hw,
+		[CLK_TCON0_CH1]		= &tcon0_ch1_clk.common.hw,
+		[CLK_TCON1_CH1_SCLK2]	= &tcon1_ch1_sclk2_clk.common.hw,
+		[CLK_TCON1_CH1]		= &tcon1_ch1_clk.common.hw,
+		[CLK_CSI0]		= &csi0_clk.common.hw,
+		[CLK_CSI1]		= &csi1_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_CODEC]		= &codec_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+		[CLK_ACE]		= &ace_clk.common.hw,
+		[CLK_HDMI]		= &hdmi_clk.common.hw,
+		[CLK_GPU]		= &gpu_sun7i_clk.common.hw,
+		[CLK_MBUS]		= &mbus_sun4i_clk.common.hw,
+	},
+	.num	= CLK_NUMBER_SUN4I,
+};
+static struct clk_hw_onecell_data sun7i_a20_hw_clks = {
+	.hws	= {
+		[CLK_HOSC]		= &hosc_clk.common.hw,
+		[CLK_PLL_CORE]		= &pll_core_clk.common.hw,
+		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
+		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
+		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
+		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
+		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
+		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
+		[CLK_PLL_VIDEO0_2X]	= &pll_video0_2x_clk.hw,
+		[CLK_PLL_VE]		= &pll_ve_sun7i_clk.common.hw,
+		[CLK_PLL_DDR_BASE]	= &pll_ddr_base_clk.common.hw,
+		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
+		[CLK_PLL_DDR_OTHER]	= &pll_ddr_other_clk.common.hw,
+		[CLK_PLL_PERIPH_BASE]	= &pll_periph_base_clk.common.hw,
+		[CLK_PLL_PERIPH]	= &pll_periph_clk.hw,
+		[CLK_PLL_PERIPH_SATA]	= &pll_periph_sata_clk.common.hw,
+		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
+		[CLK_PLL_VIDEO1_2X]	= &pll_video1_2x_clk.hw,
+		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
+		[CLK_CPU]		= &cpu_clk.common.hw,
+		[CLK_AXI]		= &axi_clk.common.hw,
+		[CLK_AHB]		= &ahb_sun7i_clk.common.hw,
+		[CLK_APB0]		= &apb0_clk.common.hw,
+		[CLK_APB1]		= &apb1_clk.common.hw,
+		[CLK_AHB_OTG]		= &ahb_otg_clk.common.hw,
+		[CLK_AHB_EHCI0]		= &ahb_ehci0_clk.common.hw,
+		[CLK_AHB_OHCI0]		= &ahb_ohci0_clk.common.hw,
+		[CLK_AHB_EHCI1]		= &ahb_ehci1_clk.common.hw,
+		[CLK_AHB_OHCI1]		= &ahb_ohci1_clk.common.hw,
+		[CLK_AHB_SS]		= &ahb_ss_clk.common.hw,
+		[CLK_AHB_DMA]		= &ahb_dma_clk.common.hw,
+		[CLK_AHB_BIST]		= &ahb_bist_clk.common.hw,
+		[CLK_AHB_MMC0]		= &ahb_mmc0_clk.common.hw,
+		[CLK_AHB_MMC1]		= &ahb_mmc1_clk.common.hw,
+		[CLK_AHB_MMC2]		= &ahb_mmc2_clk.common.hw,
+		[CLK_AHB_MMC3]		= &ahb_mmc3_clk.common.hw,
+		[CLK_AHB_MS]		= &ahb_ms_clk.common.hw,
+		[CLK_AHB_NAND]		= &ahb_nand_clk.common.hw,
+		[CLK_AHB_SDRAM]		= &ahb_sdram_clk.common.hw,
+		[CLK_AHB_ACE]		= &ahb_ace_clk.common.hw,
+		[CLK_AHB_EMAC]		= &ahb_emac_clk.common.hw,
+		[CLK_AHB_TS]		= &ahb_ts_clk.common.hw,
+		[CLK_AHB_SPI0]		= &ahb_spi0_clk.common.hw,
+		[CLK_AHB_SPI1]		= &ahb_spi1_clk.common.hw,
+		[CLK_AHB_SPI2]		= &ahb_spi2_clk.common.hw,
+		[CLK_AHB_SPI3]		= &ahb_spi3_clk.common.hw,
+		[CLK_AHB_PATA]		= &ahb_pata_clk.common.hw,
+		[CLK_AHB_SATA]		= &ahb_sata_clk.common.hw,
+		[CLK_AHB_HSTIMER]	= &ahb_hstimer_clk.common.hw,
+		[CLK_AHB_VE]		= &ahb_ve_clk.common.hw,
+		[CLK_AHB_TVD]		= &ahb_tvd_clk.common.hw,
+		[CLK_AHB_TVE0]		= &ahb_tve0_clk.common.hw,
+		[CLK_AHB_TVE1]		= &ahb_tve1_clk.common.hw,
+		[CLK_AHB_LCD0]		= &ahb_lcd0_clk.common.hw,
+		[CLK_AHB_LCD1]		= &ahb_lcd1_clk.common.hw,
+		[CLK_AHB_CSI0]		= &ahb_csi0_clk.common.hw,
+		[CLK_AHB_CSI1]		= &ahb_csi1_clk.common.hw,
+		[CLK_AHB_HDMI1]		= &ahb_hdmi1_clk.common.hw,
+		[CLK_AHB_HDMI0]		= &ahb_hdmi0_clk.common.hw,
+		[CLK_AHB_DE_BE0]	= &ahb_de_be0_clk.common.hw,
+		[CLK_AHB_DE_BE1]	= &ahb_de_be1_clk.common.hw,
+		[CLK_AHB_DE_FE0]	= &ahb_de_fe0_clk.common.hw,
+		[CLK_AHB_DE_FE1]	= &ahb_de_fe1_clk.common.hw,
+		[CLK_AHB_GMAC]		= &ahb_gmac_clk.common.hw,
+		[CLK_AHB_MP]		= &ahb_mp_clk.common.hw,
+		[CLK_AHB_GPU]		= &ahb_gpu_clk.common.hw,
+		[CLK_APB0_CODEC]	= &apb0_codec_clk.common.hw,
+		[CLK_APB0_SPDIF]	= &apb0_spdif_clk.common.hw,
+		[CLK_APB0_AC97]		= &apb0_ac97_clk.common.hw,
+		[CLK_APB0_I2S0]		= &apb0_i2s0_clk.common.hw,
+		[CLK_APB0_I2S1]		= &apb0_i2s1_clk.common.hw,
+		[CLK_APB0_PIO]		= &apb0_pio_clk.common.hw,
+		[CLK_APB0_IR0]		= &apb0_ir0_clk.common.hw,
+		[CLK_APB0_IR1]		= &apb0_ir1_clk.common.hw,
+		[CLK_APB0_I2S2]		= &apb0_i2s2_clk.common.hw,
+		[CLK_APB0_KEYPAD]	= &apb0_keypad_clk.common.hw,
+		[CLK_APB1_I2C0]		= &apb1_i2c0_clk.common.hw,
+		[CLK_APB1_I2C1]		= &apb1_i2c1_clk.common.hw,
+		[CLK_APB1_I2C2]		= &apb1_i2c2_clk.common.hw,
+		[CLK_APB1_I2C3]		= &apb1_i2c3_clk.common.hw,
+		[CLK_APB1_CAN]		= &apb1_can_clk.common.hw,
+		[CLK_APB1_SCR]		= &apb1_scr_clk.common.hw,
+		[CLK_APB1_PS20]		= &apb1_ps20_clk.common.hw,
+		[CLK_APB1_PS21]		= &apb1_ps21_clk.common.hw,
+		[CLK_APB1_I2C4]		= &apb1_i2c4_clk.common.hw,
+		[CLK_APB1_UART0]	= &apb1_uart0_clk.common.hw,
+		[CLK_APB1_UART1]	= &apb1_uart1_clk.common.hw,
+		[CLK_APB1_UART2]	= &apb1_uart2_clk.common.hw,
+		[CLK_APB1_UART3]	= &apb1_uart3_clk.common.hw,
+		[CLK_APB1_UART4]	= &apb1_uart4_clk.common.hw,
+		[CLK_APB1_UART5]	= &apb1_uart5_clk.common.hw,
+		[CLK_APB1_UART6]	= &apb1_uart6_clk.common.hw,
+		[CLK_APB1_UART7]	= &apb1_uart7_clk.common.hw,
+		[CLK_NAND]		= &nand_clk.common.hw,
+		[CLK_MS]		= &ms_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
+		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
+		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
+		[CLK_MMC2]		= &mmc2_clk.common.hw,
+		[CLK_MMC2_OUTPUT]	= &mmc2_output_clk.common.hw,
+		[CLK_MMC2_SAMPLE]	= &mmc2_sample_clk.common.hw,
+		[CLK_MMC3]		= &mmc3_clk.common.hw,
+		[CLK_MMC3_OUTPUT]	= &mmc3_output_clk.common.hw,
+		[CLK_MMC3_SAMPLE]	= &mmc3_sample_clk.common.hw,
+		[CLK_TS]		= &ts_clk.common.hw,
+		[CLK_SS]		= &ss_clk.common.hw,
+		[CLK_SPI0]		= &spi0_clk.common.hw,
+		[CLK_SPI1]		= &spi1_clk.common.hw,
+		[CLK_SPI2]		= &spi2_clk.common.hw,
+		[CLK_PATA]		= &pata_clk.common.hw,
+		[CLK_IR0]		= &ir0_sun7i_clk.common.hw,
+		[CLK_IR1]		= &ir1_sun7i_clk.common.hw,
+		[CLK_I2S0]		= &i2s0_clk.common.hw,
+		[CLK_AC97]		= &ac97_clk.common.hw,
+		[CLK_SPDIF]		= &spdif_clk.common.hw,
+		[CLK_KEYPAD]		= &keypad_clk.common.hw,
+		[CLK_SATA]		= &sata_clk.common.hw,
+		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
+		[CLK_USB_OHCI1]		= &usb_ohci1_clk.common.hw,
+		[CLK_USB_PHY]		= &usb_phy_clk.common.hw,
+		/* CLK_GPS is unimplemented */
+		[CLK_SPI3]		= &spi3_clk.common.hw,
+		[CLK_I2S1]		= &i2s1_clk.common.hw,
+		[CLK_I2S2]		= &i2s2_clk.common.hw,
+		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
+		[CLK_DRAM_CSI0]		= &dram_csi0_clk.common.hw,
+		[CLK_DRAM_CSI1]		= &dram_csi1_clk.common.hw,
+		[CLK_DRAM_TS]		= &dram_ts_clk.common.hw,
+		[CLK_DRAM_TVD]		= &dram_tvd_clk.common.hw,
+		[CLK_DRAM_TVE0]		= &dram_tve0_clk.common.hw,
+		[CLK_DRAM_TVE1]		= &dram_tve1_clk.common.hw,
+		[CLK_DRAM_OUT]		= &dram_out_clk.common.hw,
+		[CLK_DRAM_DE_FE1]	= &dram_de_fe1_clk.common.hw,
+		[CLK_DRAM_DE_FE0]	= &dram_de_fe0_clk.common.hw,
+		[CLK_DRAM_DE_BE0]	= &dram_de_be0_clk.common.hw,
+		[CLK_DRAM_DE_BE1]	= &dram_de_be1_clk.common.hw,
+		[CLK_DRAM_MP]		= &dram_mp_clk.common.hw,
+		[CLK_DRAM_ACE]		= &dram_ace_clk.common.hw,
+		[CLK_DE_BE0]		= &de_be0_clk.common.hw,
+		[CLK_DE_BE1]		= &de_be1_clk.common.hw,
+		[CLK_DE_FE0]		= &de_fe0_clk.common.hw,
+		[CLK_DE_FE1]		= &de_fe1_clk.common.hw,
+		[CLK_DE_MP]		= &de_mp_clk.common.hw,
+		[CLK_TCON0_CH0]		= &tcon0_ch0_clk.common.hw,
+		[CLK_TCON1_CH0]		= &tcon1_ch0_clk.common.hw,
+		[CLK_CSI_SCLK]		= &csi_sclk_clk.common.hw,
+		[CLK_TVD_SCLK2]		= &tvd_sclk2_sun7i_clk.common.hw,
+		[CLK_TVD]		= &tvd_sclk1_sun7i_clk.common.hw,
+		[CLK_TCON0_CH1_SCLK2]	= &tcon0_ch1_sclk2_clk.common.hw,
+		[CLK_TCON0_CH1]		= &tcon0_ch1_clk.common.hw,
+		[CLK_TCON1_CH1_SCLK2]	= &tcon1_ch1_sclk2_clk.common.hw,
+		[CLK_TCON1_CH1]		= &tcon1_ch1_clk.common.hw,
+		[CLK_CSI0]		= &csi0_clk.common.hw,
+		[CLK_CSI1]		= &csi1_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_CODEC]		= &codec_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+		[CLK_ACE]		= &ace_clk.common.hw,
+		[CLK_HDMI]		= &hdmi_clk.common.hw,
+		[CLK_GPU]		= &gpu_sun7i_clk.common.hw,
+		[CLK_MBUS]		= &mbus_sun7i_clk.common.hw,
+		[CLK_HDMI1_SLOW]	= &hdmi1_slow_clk.common.hw,
+		[CLK_HDMI1]		= &hdmi1_clk.common.hw,
+		[CLK_OUT_A]		= &out_a_clk.common.hw,
+		[CLK_OUT_B]		= &out_b_clk.common.hw,
+	},
+	.num	= CLK_NUMBER_SUN7I,
+};
+
+static struct ccu_reset_map sunxi_a10_a20_ccu_resets[] = {
+	[RST_USB_PHY0]		= { 0x0cc, BIT(0) },
+	[RST_USB_PHY1]		= { 0x0cc, BIT(1) },
+	[RST_USB_PHY2]		= { 0x0cc, BIT(2) },
+	[RST_GPS]		= { 0x0d0, BIT(0) },
+	[RST_DE_BE0]		= { 0x104, BIT(30) },
+	[RST_DE_BE1]		= { 0x108, BIT(30) },
+	[RST_DE_FE0]		= { 0x10c, BIT(30) },
+	[RST_DE_FE1]		= { 0x110, BIT(30) },
+	[RST_DE_MP]		= { 0x114, BIT(30) },
+	[RST_TVE0]		= { 0x118, BIT(29) },
+	[RST_TCON0]		= { 0x118, BIT(30) },
+	[RST_TVE1]		= { 0x11c, BIT(29) },
+	[RST_TCON1]		= { 0x11c, BIT(30) },
+	[RST_CSI0]		= { 0x134, BIT(30) },
+	[RST_CSI1]		= { 0x138, BIT(30) },
+	[RST_VE]		= { 0x13c, BIT(0) },
+	[RST_ACE]		= { 0x148, BIT(16) },
+	[RST_LVDS]		= { 0x14c, BIT(0) },
+	[RST_GPU]		= { 0x154, BIT(30) },
+	[RST_HDMI_H]		= { 0x170, BIT(0) },
+	[RST_HDMI_SYS]		= { 0x170, BIT(1) },
+	[RST_HDMI_AUDIO_DMA]	= { 0x170, BIT(2) },
+};
+
+static const struct sunxi_ccu_desc sun4i_a10_ccu_desc = {
+	.ccu_clks	= sun4i_sun7i_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun4i_sun7i_ccu_clks),
+
+	.hw_clks	= &sun4i_a10_hw_clks,
+
+	.resets		= sunxi_a10_a20_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sunxi_a10_a20_ccu_resets),
+};
+
+static const struct sunxi_ccu_desc sun7i_a20_ccu_desc = {
+	.ccu_clks	= sun4i_sun7i_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun4i_sun7i_ccu_clks),
+
+	.hw_clks	= &sun7i_a20_hw_clks,
+
+	.resets		= sunxi_a10_a20_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sunxi_a10_a20_ccu_resets),
+};
+
+static void __init sun4i_ccu_init(struct device_node *node,
+				  const struct sunxi_ccu_desc *desc)
+{
+	void __iomem *reg;
+	u32 val;
+
+	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
+	if (IS_ERR(reg)) {
+		pr_err("%s: Could not map the clock registers\n",
+		       of_node_full_name(node));
+		return;
+	}
+
+	val = readl(reg + SUN4I_PLL_AUDIO_REG);
+
+	/*
+	 * Force VCO and PLL bias current to lowest setting. Higher
+	 * settings interfere with sigma-delta modulation and result
+	 * in audible noise and distortions when using SPDIF or I2S.
+	 */
+	val &= ~GENMASK(25, 16);
+
+	/* Force the PLL-Audio-1x divider to 1 */
+	val &= ~GENMASK(29, 26);
+	writel(val | (1 << 26), reg + SUN4I_PLL_AUDIO_REG);
+
+	/*
+	 * Use the peripheral PLL6 as the AHB parent, instead of CPU /
+	 * AXI which have rate changes due to cpufreq.
+	 *
+	 * This is especially a big deal for the HS timer whose parent
+	 * clock is AHB.
+	 *
+	 * NB! These bits are undocumented in A10 manual.
+	 */
+	val = readl(reg + SUN4I_AHB_REG);
+	val &= ~GENMASK(7, 6);
+	writel(val | (2 << 6), reg + SUN4I_AHB_REG);
+
+	of_sunxi_ccu_probe(node, reg, desc);
+}
+
+static void __init sun4i_a10_ccu_setup(struct device_node *node)
+{
+	sun4i_ccu_init(node, &sun4i_a10_ccu_desc);
+}
+CLK_OF_DECLARE(sun4i_a10_ccu, "allwinner,sun4i-a10-ccu",
+	       sun4i_a10_ccu_setup);
+
+static void __init sun7i_a20_ccu_setup(struct device_node *node)
+{
+	sun4i_ccu_init(node, &sun7i_a20_ccu_desc);
+}
+CLK_OF_DECLARE(sun7i_a20_ccu, "allwinner,sun7i-a20-ccu",
+	       sun7i_a20_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/sun4i-a10-ccu.h b/drivers/clk/sunxi-ng/sun4i-a10-ccu.h
new file mode 100644
index 000000000000..271b9623623a
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun4i-a10-ccu.h
@@ -0,0 +1,52 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright 2017 Priit Laes
+ *
+ * Priit Laes <plaes@plaes.org>
+ */
+
+#ifndef _CCU_SUN4I_A10_H_
+#define _CCU_SUN4I_A10_H_
+
+#include <dt-bindings/clock/sun4i-a10-ccu.h>
+#include <dt-bindings/clock/sun7i-a20-ccu.h>
+#include <dt-bindings/reset/sun4i-a10-ccu.h>
+
+/* The HOSC is exported */
+#define CLK_PLL_CORE		2
+#define CLK_PLL_AUDIO_BASE	3
+#define CLK_PLL_AUDIO		4
+#define CLK_PLL_AUDIO_2X	5
+#define CLK_PLL_AUDIO_4X	6
+#define CLK_PLL_AUDIO_8X	7
+#define CLK_PLL_VIDEO0		8
+/* The PLL_VIDEO0_2X clock is exported */
+#define CLK_PLL_VE		10
+#define CLK_PLL_DDR_BASE	11
+#define CLK_PLL_DDR		12
+#define CLK_PLL_DDR_OTHER	13
+#define CLK_PLL_PERIPH_BASE	14
+#define CLK_PLL_PERIPH		15
+#define CLK_PLL_PERIPH_SATA	16
+#define CLK_PLL_VIDEO1		17
+/* The PLL_VIDEO1_2X clock is exported */
+#define CLK_PLL_GPU		19
+
+/* The CPU clock is exported */
+#define CLK_AXI			21
+#define CLK_AXI_DRAM		22
+#define CLK_AHB			23
+#define CLK_APB0		24
+#define CLK_APB1		25
+
+/* AHB gates are exported (23..68) */
+/* APB0 gates are exported (69..78) */
+/* APB1 gates are exported (79..95) */
+/* IP module clocks are exported (96..128) */
+/* DRAM gates are exported (129..142)*/
+/* Media (display engine clocks & etc) are exported (143..169) */
+
+#define CLK_NUMBER_SUN4I	(CLK_MBUS + 1)
+#define CLK_NUMBER_SUN7I	(CLK_OUT_B + 1)
+
+#endif /* _CCU_SUN4I_A10_H_ */
diff --git a/drivers/clk/sunxi-ng/sun50i-a100-ccu.c b/drivers/clk/sunxi-ng/sun50i-a100-ccu.c
new file mode 100644
index 000000000000..5a813af9941c
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun50i-a100-ccu.c
@@ -0,0 +1,1277 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2020 Yangtao Li <frank@allwinnertech.com>
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/io.h>
+#include <linux/module.h>
+#include <linux/of_address.h>
+#include <linux/platform_device.h>
+
+#include "ccu_common.h"
+#include "ccu_reset.h"
+
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_mp.h"
+#include "ccu_mult.h"
+#include "ccu_nk.h"
+#include "ccu_nkm.h"
+#include "ccu_nkmp.h"
+#include "ccu_nm.h"
+
+#include "sun50i-a100-ccu.h"
+
+#define SUN50I_A100_PLL_SDM_ENABLE		BIT(24)
+#define SUN50I_A100_PLL_OUTPUT_ENABLE		BIT(27)
+#define SUN50I_A100_PLL_LOCK			BIT(28)
+#define SUN50I_A100_PLL_LOCK_ENABLE		BIT(29)
+#define SUN50I_A100_PLL_ENABLE			BIT(31)
+
+#define SUN50I_A100_PLL_PERIPH1_PATTERN0	0xd1303333
+
+/*
+ * The CPU PLL is actually NP clock, with P being /1, /2 or /4. However
+ * P should only be used for output frequencies lower than 288 MHz.
+ *
+ * For now we can just model it as a multiplier clock, and force P to /1.
+ *
+ * The M factor is present in the register's description, but not in the
+ * frequency formula, and it's documented as "M is only used for backdoor
+ * testing", so it's not modelled and then force to 0.
+ */
+#define SUN50I_A100_PLL_CPUX_REG		0x000
+static struct ccu_mult pll_cpux_clk = {
+	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
+	.lock		= SUN50I_A100_PLL_LOCK,
+	.mult		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.common		= {
+		.reg		= 0x000,
+		.hw.init	= CLK_HW_INIT("pll-cpux", "dcxo24M",
+					      &ccu_mult_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+/* Some PLLs are input * N / div1 / P. Model them as NKMP with no K */
+#define SUN50I_A100_PLL_DDR0_REG		0x010
+static struct ccu_nkmp pll_ddr0_clk = {
+	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
+	.lock		= SUN50I_A100_PLL_LOCK,
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
+	.common		= {
+		.reg		= 0x010,
+		.hw.init	= CLK_HW_INIT("pll-ddr0", "dcxo24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE |
+					      CLK_IS_CRITICAL),
+	},
+};
+
+#define SUN50I_A100_PLL_PERIPH0_REG	0x020
+static struct ccu_nkmp pll_periph0_clk = {
+	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
+	.lock		= SUN50I_A100_PLL_LOCK,
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
+	.fixed_post_div	= 2,
+	.common		= {
+		.reg		= 0x020,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-periph0", "dcxo24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_A100_PLL_PERIPH1_REG	0x028
+static struct ccu_nkmp pll_periph1_clk = {
+	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
+	.lock		= SUN50I_A100_PLL_LOCK,
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
+	.fixed_post_div	= 2,
+	.common		= {
+		.reg		= 0x028,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-periph1", "dcxo24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+#define SUN50I_A100_PLL_PERIPH1_PATTERN0_REG	0x128
+
+#define SUN50I_A100_PLL_GPU_REG		0x030
+static struct ccu_nkmp pll_gpu_clk = {
+	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
+	.lock		= SUN50I_A100_PLL_LOCK,
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
+	.common		= {
+		.reg		= 0x030,
+		.hw.init	= CLK_HW_INIT("pll-gpu", "dcxo24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+/*
+ * For Video PLLs, the output divider is described as "used for testing"
+ * in the user manual. So it's not modelled and forced to 0.
+ */
+#define SUN50I_A100_PLL_VIDEO0_REG	0x040
+static struct ccu_nm pll_video0_clk = {
+	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
+	.lock		= SUN50I_A100_PLL_LOCK,
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.fixed_post_div	= 4,
+	.common		= {
+		.reg		= 0x040,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-video0", "dcxo24M",
+					      &ccu_nm_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_A100_PLL_VIDEO1_REG	0x048
+static struct ccu_nm pll_video1_clk = {
+	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
+	.lock		= SUN50I_A100_PLL_LOCK,
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.fixed_post_div	= 4,
+	.common		= {
+		.reg		= 0x048,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-video1", "dcxo24M",
+					      &ccu_nm_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_A100_PLL_VIDEO2_REG	0x050
+static struct ccu_nm pll_video2_clk = {
+	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
+	.lock		= SUN50I_A100_PLL_LOCK,
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.fixed_post_div	= 4,
+	.common		= {
+		.reg		= 0x050,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-video2", "dcxo24M",
+					      &ccu_nm_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_A100_PLL_VE_REG		0x058
+static struct ccu_nkmp pll_ve_clk = {
+	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
+	.lock		= SUN50I_A100_PLL_LOCK,
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
+	.common		= {
+		.reg		= 0x058,
+		.hw.init	= CLK_HW_INIT("pll-ve", "dcxo24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+/*
+ * The COM PLL has m0 dividers in addition to the usual N, M
+ * factors. Since we only need 1 frequencies from this PLL: 45.1584 MHz,
+ * ignore it for now.
+ */
+#define SUN50I_A100_PLL_COM_REG		0x060
+static struct ccu_sdm_setting pll_com_sdm_table[] = {
+	{ .rate = 451584000, .pattern = 0xc0014396, .m = 2, .n = 37 },
+};
+
+static struct ccu_nm pll_com_clk = {
+	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
+	.lock		= SUN50I_A100_PLL_LOCK,
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(0, 1),
+	.sdm		= _SUNXI_CCU_SDM(pll_com_sdm_table, BIT(24),
+					 0x160, BIT(31)),
+	.common		= {
+		.reg		= 0x060,
+		.features	= CCU_FEATURE_SIGMA_DELTA_MOD,
+		.hw.init	= CLK_HW_INIT("pll-com", "dcxo24M",
+					      &ccu_nm_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_A100_PLL_VIDEO3_REG	0x068
+static struct ccu_nm pll_video3_clk = {
+	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
+	.lock		= SUN50I_A100_PLL_LOCK,
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.fixed_post_div	= 4,
+	.common		= {
+		.reg		= 0x068,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-video3", "dcxo24M",
+					      &ccu_nm_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+/*
+ * The Audio PLL has m0, m1 dividers in addition to the usual N, M
+ * factors. Since we only need 4 frequencies from this PLL: 22.5792 MHz,
+ * 24.576 MHz, 90.3168MHz and 98.304MHz ignore them for now.
+ * Enforce the default for them, which is m0 = 1, m1 = 0.
+ */
+#define SUN50I_A100_PLL_AUDIO_REG		0x078
+static struct ccu_sdm_setting pll_audio_sdm_table[] = {
+	{ .rate = 45158400, .pattern = 0xc001bcd3, .m = 18, .n = 33 },
+	{ .rate = 49152000, .pattern = 0xc001eb85, .m = 20, .n = 40 },
+	{ .rate = 180633600, .pattern = 0xc001288d, .m = 3, .n = 22 },
+	{ .rate = 196608000, .pattern = 0xc001eb85, .m = 5, .n = 40 },
+};
+
+static struct ccu_nm pll_audio_clk = {
+	.enable		= SUN50I_A100_PLL_OUTPUT_ENABLE,
+	.lock		= SUN50I_A100_PLL_LOCK,
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(16, 6),
+	.fixed_post_div	= 2,
+	.sdm		= _SUNXI_CCU_SDM(pll_audio_sdm_table, BIT(24),
+					 0x178, BIT(31)),
+	.common		= {
+		.reg		= 0x078,
+		.features	= CCU_FEATURE_FIXED_POSTDIV |
+				  CCU_FEATURE_SIGMA_DELTA_MOD,
+		.hw.init	= CLK_HW_INIT("pll-audio", "dcxo24M",
+					      &ccu_nm_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static const char * const cpux_parents[] = { "dcxo24M", "osc32k",
+					     "iosc", "pll-cpux",
+					      "pll-periph0" };
+static SUNXI_CCU_MUX(cpux_clk, "cpux", cpux_parents,
+		     0x500, 24, 3, CLK_SET_RATE_PARENT | CLK_IS_CRITICAL);
+static SUNXI_CCU_M(axi_clk, "axi", "cpux", 0x500, 0, 2, 0);
+static SUNXI_CCU_M(cpux_apb_clk, "cpux-apb", "cpux", 0x500, 8, 2, 0);
+
+static const char * const psi_ahb1_ahb2_parents[] = { "dcxo24M", "osc32k",
+						      "iosc", "pll-periph0",
+						      "pll-periph0-2x" };
+static SUNXI_CCU_MP_WITH_MUX(psi_ahb1_ahb2_clk, "psi-ahb1-ahb2",
+			     psi_ahb1_ahb2_parents, 0x510,
+			     0, 2,	/* M */
+			     8, 2,	/* P */
+			     24, 3,	/* mux */
+			     0);
+
+static const char * const ahb3_apb1_apb2_parents[] = { "dcxo24M", "osc32k",
+						       "psi-ahb1-ahb2",
+						       "pll-periph0",
+						       "pll-periph0-2x" };
+static SUNXI_CCU_MP_WITH_MUX(ahb3_clk, "ahb3", ahb3_apb1_apb2_parents, 0x51c,
+			     0, 2,	/* M */
+			     8, 2,	/* P */
+			     24, 3,	/* mux */
+			     0);
+
+static SUNXI_CCU_MP_WITH_MUX(apb1_clk, "apb1", ahb3_apb1_apb2_parents, 0x520,
+			     0, 2,	/* M */
+			     8, 2,	/* P */
+			     24, 3,	/* mux */
+			     0);
+
+static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", ahb3_apb1_apb2_parents, 0x524,
+			     0, 2,	/* M */
+			     8, 2,	/* P */
+			     24, 3,	/* mux */
+			     0);
+
+static const char * const mbus_parents[] = { "dcxo24M", "pll-ddr0",
+					     "pll-periph0",
+					     "pll-periph0-2x" };
+static SUNXI_CCU_M_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents, 0x540,
+				 0, 3,		/* M */
+				 24, 2,		/* mux */
+				 BIT(31),	/* gate */
+				 CLK_IS_CRITICAL);
+
+static const char * const de_parents[] = { "pll-com", "pll-periph0-2x" };
+static SUNXI_CCU_M_WITH_MUX_GATE(de_clk, "de0", de_parents, 0x600,
+				 0, 4,		/* M */
+				 24, 1,		/* mux */
+				 BIT(31),	/* gate */
+				 CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(bus_de_clk, "bus-de", "psi-ahb1-ahb2",
+		      0x60c, BIT(0), 0);
+
+static const char * const g2d_parents[] = { "pll-com", "pll-periph0-2x",
+					     "pll-video0-2x", "pll-video1-2x",
+					     "pll-video2-2x"};
+static SUNXI_CCU_M_WITH_MUX_GATE(g2d_clk, "g2d",
+				 g2d_parents,
+				 0x630,
+				 0, 4,		/* M */
+				 24, 3,		/* mux */
+				 BIT(31),	/* gate */
+				 0);
+
+static SUNXI_CCU_GATE(bus_g2d_clk, "bus-g2d", "psi-ahb1-ahb2",
+		      0x63c, BIT(0), 0);
+
+static const char * const gpu_parents[] = { "pll-gpu" };
+static SUNXI_CCU_M_WITH_MUX_GATE(gpu_clk, "gpu", gpu_parents, 0x670,
+				       0, 2,	/* M */
+				       24, 1,	/* mux */
+				       BIT(31),	/* gate */
+				       0);
+
+static SUNXI_CCU_GATE(bus_gpu_clk, "bus-gpu", "psi-ahb1-ahb2",
+		      0x67c, BIT(0), 0);
+
+static const char * const ce_parents[] = { "dcxo24M", "pll-periph0-2x" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(ce_clk, "ce", ce_parents, 0x680,
+				  0, 4,		/* M */
+				  8, 2,		/* P */
+				  24, 1,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_GATE(bus_ce_clk, "bus-ce", "psi-ahb1-ahb2",
+		      0x68c, BIT(0), 0);
+
+static const char * const ve_parents[] = { "pll-ve" };
+static SUNXI_CCU_M_WITH_MUX_GATE(ve_clk, "ve", ve_parents, 0x690,
+				 0, 3,		/* M */
+				 24, 1,		/* mux */
+				 BIT(31),	/* gate */
+				 CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(bus_ve_clk, "bus-ve", "psi-ahb1-ahb2",
+		      0x69c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_dma_clk, "bus-dma", "psi-ahb1-ahb2",
+		      0x70c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_msgbox_clk, "bus-msgbox", "psi-ahb1-ahb2",
+		      0x71c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_spinlock_clk, "bus-spinlock", "psi-ahb1-ahb2",
+		      0x72c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_hstimer_clk, "bus-hstimer", "psi-ahb1-ahb2",
+		      0x73c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(avs_clk, "avs", "dcxo24M", 0x740, BIT(31), 0);
+
+static SUNXI_CCU_GATE(bus_dbg_clk, "bus-dbg", "psi-ahb1-ahb2",
+		      0x78c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_psi_clk, "bus-psi", "psi-ahb1-ahb2",
+		      0x79c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_pwm_clk, "bus-pwm", "apb1", 0x7ac, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_iommu_clk, "bus-iommu", "apb1", 0x7bc, BIT(0), 0);
+
+static SUNXI_CCU_GATE(mbus_dma_clk, "mbus-dma", "mbus",
+		      0x804, BIT(0), 0);
+static SUNXI_CCU_GATE(mbus_ve_clk, "mbus-ve", "mbus",
+		      0x804, BIT(1), 0);
+static SUNXI_CCU_GATE(mbus_ce_clk, "mbus-ce", "mbus",
+		      0x804, BIT(2), 0);
+static SUNXI_CCU_GATE(mbus_nand_clk, "mbus-nand", "mbus",
+		      0x804, BIT(5), 0);
+static SUNXI_CCU_GATE(mbus_csi_clk, "mbus-csi", "mbus",
+		      0x804, BIT(8), 0);
+static SUNXI_CCU_GATE(mbus_isp_clk, "mbus-isp", "mbus",
+		      0x804, BIT(9), 0);
+static SUNXI_CCU_GATE(mbus_g2d_clk, "mbus-g2d", "mbus",
+		      0x804, BIT(10), 0);
+
+static SUNXI_CCU_GATE(bus_dram_clk, "bus-dram", "psi-ahb1-ahb2",
+		      0x80c, BIT(0), CLK_IS_CRITICAL);
+
+static const char * const nand_spi_parents[] = { "dcxo24M",
+						 "pll-periph0",
+						 "pll-periph1",
+						 "pll-periph0-2x",
+						 "pll-periph1-2x" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand0_clk, "nand0", nand_spi_parents, 0x810,
+				  0, 4,		/* M */
+				  8, 2,		/* P */
+				  24, 3,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand1_clk, "nand1", nand_spi_parents, 0x814,
+				  0, 4,		/* M */
+				  8, 2,		/* P */
+				  24, 3,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_GATE(bus_nand_clk, "bus-nand", "ahb3", 0x82c, BIT(0), 0);
+
+static const char * const mmc_parents[] = { "dcxo24M", "pll-periph0-2x",
+					    "pll-periph1-2x" };
+static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc0_clk, "mmc0", mmc_parents, 0x830,
+					  0, 4,		/* M */
+					  8, 2,		/* P */
+					  24, 2,	/* mux */
+					  BIT(31),	/* gate */
+					  2,		/* post-div */
+					  CLK_SET_RATE_NO_REPARENT);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc1_clk, "mmc1", mmc_parents, 0x834,
+					  0, 4,		/* M */
+					  8, 2,		/* P */
+					  24, 2,	/* mux */
+					  BIT(31),	/* gate */
+					  2,		/* post-div */
+					  CLK_SET_RATE_NO_REPARENT);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc2_clk, "mmc2", mmc_parents, 0x838,
+					  0, 4,		/* M */
+					  8, 2,		/* P */
+					  24, 2,	/* mux */
+					  BIT(31),	/* gate */
+					  2,		/* post-div */
+					  CLK_SET_RATE_NO_REPARENT);
+
+static SUNXI_CCU_GATE(bus_mmc0_clk, "bus-mmc0", "ahb3", 0x84c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_mmc1_clk, "bus-mmc1", "ahb3", 0x84c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_mmc2_clk, "bus-mmc2", "ahb3", 0x84c, BIT(2), 0);
+
+static SUNXI_CCU_GATE(bus_uart0_clk, "bus-uart0", "apb2", 0x90c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_uart1_clk, "bus-uart1", "apb2", 0x90c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_uart2_clk, "bus-uart2", "apb2", 0x90c, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_uart3_clk, "bus-uart3", "apb2", 0x90c, BIT(3), 0);
+static SUNXI_CCU_GATE(bus_uart4_clk, "bus-uart4", "apb2", 0x90c, BIT(4), 0);
+
+static SUNXI_CCU_GATE(bus_i2c0_clk, "bus-i2c0", "apb2", 0x91c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_i2c1_clk, "bus-i2c1", "apb2", 0x91c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_i2c2_clk, "bus-i2c2", "apb2", 0x91c, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_i2c3_clk, "bus-i2c3", "apb2", 0x91c, BIT(3), 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", nand_spi_parents, 0x940,
+				  0, 4,		/* M */
+				  8, 2,		/* P */
+				  24, 3,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", nand_spi_parents, 0x944,
+				  0, 4,		/* M */
+				  8, 2,		/* P */
+				  24, 3,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi2_clk, "spi2", nand_spi_parents, 0x948,
+				  0, 4,		/* M */
+				  8, 2,		/* P */
+				  24, 3,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_GATE(bus_spi0_clk, "bus-spi0", "ahb3", 0x96c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_spi1_clk, "bus-spi1", "ahb3", 0x96c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_spi2_clk, "bus-spi2", "ahb3", 0x96c, BIT(2), 0);
+
+static SUNXI_CCU_GATE(emac_25m_clk, "emac-25m", "ahb3", 0x970,
+		      BIT(31) | BIT(30), 0);
+
+static SUNXI_CCU_GATE(bus_emac_clk, "bus-emac", "ahb3", 0x97c, BIT(0), 0);
+
+static const char * const ir_parents[] = { "osc32k", "iosc",
+					   "pll-periph0", "pll-periph1" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(ir_rx_clk, "ir-rx", ir_parents, 0x990,
+				  0, 4,		/* M */
+				  8, 2,		/* P */
+				  24, 3,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_GATE(bus_ir_rx_clk, "bus-ir-rx", "ahb3", 0x99c, BIT(0), 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(ir_tx_clk, "ir-tx", ir_parents, 0x9c0,
+				  0, 4,		/* M */
+				  8, 2,		/* P */
+				  24, 3,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_GATE(bus_ir_tx_clk, "bus-ir-tx", "apb1", 0x9cc, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_gpadc_clk, "bus-gpadc", "apb1", 0x9ec, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_ths_clk, "bus-ths", "apb1", 0x9fc, BIT(0), 0);
+
+static const char * const audio_parents[] = { "pll-audio", "pll-com-audio" };
+static struct ccu_div i2s0_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0xa10,
+		.hw.init	= CLK_HW_INIT_PARENTS("i2s0",
+						      audio_parents,
+						      &ccu_div_ops,
+						      CLK_SET_RATE_PARENT),
+	},
+};
+
+static struct ccu_div i2s1_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0xa14,
+		.hw.init	= CLK_HW_INIT_PARENTS("i2s1",
+						      audio_parents,
+						      &ccu_div_ops,
+						      CLK_SET_RATE_PARENT),
+	},
+};
+
+static struct ccu_div i2s2_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0xa18,
+		.hw.init	= CLK_HW_INIT_PARENTS("i2s2",
+						      audio_parents,
+						      &ccu_div_ops,
+						      CLK_SET_RATE_PARENT),
+	},
+};
+
+static struct ccu_div i2s3_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0xa1c,
+		.hw.init	= CLK_HW_INIT_PARENTS("i2s3",
+						      audio_parents,
+						      &ccu_div_ops,
+						      CLK_SET_RATE_PARENT),
+	},
+};
+
+static SUNXI_CCU_GATE(bus_i2s0_clk, "bus-i2s0", "apb1", 0xa20, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_i2s1_clk, "bus-i2s1", "apb1", 0xa20, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_i2s2_clk, "bus-i2s2", "apb1", 0xa20, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_i2s3_clk, "bus-i2s3", "apb1", 0xa20, BIT(3), 0);
+
+static struct ccu_div spdif_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0xa24,
+		.hw.init	= CLK_HW_INIT_PARENTS("spdif",
+						      audio_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static SUNXI_CCU_GATE(bus_spdif_clk, "bus-spdif", "apb1", 0xa2c, BIT(0), 0);
+
+static struct ccu_div dmic_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0xa40,
+		.hw.init	= CLK_HW_INIT_PARENTS("dmic",
+						      audio_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static SUNXI_CCU_GATE(bus_dmic_clk, "bus-dmic", "apb1", 0xa4c, BIT(0), 0);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(audio_codec_dac_clk, "audio-codec-dac",
+				 audio_parents, 0xa50,
+				 0, 4,		/* M */
+				 24, 2,		/* mux */
+				 BIT(31),	/* gate */
+				 0);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(audio_codec_adc_clk, "audio-codec-adc",
+				 audio_parents, 0xa54,
+				 0, 4,		/* M */
+				 24, 2,		/* mux */
+				 BIT(31),	/* gate */
+				 0);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(audio_codec_4x_clk, "audio-codec-4x",
+				 audio_parents, 0xa58,
+				 0, 4,		/* M */
+				 24, 2,		/* mux */
+				 BIT(31),	/* gate */
+				 0);
+
+static SUNXI_CCU_GATE(bus_audio_codec_clk, "bus-audio-codec", "apb1", 0xa5c,
+		      BIT(0), 0);
+
+/*
+ * There are OHCI 12M clock source selection bits for 2 USB 2.0 ports.
+ * We will force them to 0 (12M divided from 48M).
+ */
+#define SUN50I_A100_USB0_CLK_REG		0xa70
+#define SUN50I_A100_USB1_CLK_REG		0xa74
+
+static SUNXI_CCU_GATE(usb_ohci0_clk, "usb-ohci0", "osc12M", 0xa70, BIT(31), 0);
+static SUNXI_CCU_GATE(usb_phy0_clk, "usb-phy0", "dcxo24M", 0xa70, BIT(29), 0);
+
+static SUNXI_CCU_GATE(usb_ohci1_clk, "usb-ohci1", "osc12M", 0xa74, BIT(31), 0);
+static SUNXI_CCU_GATE(usb_phy1_clk, "usb-phy1", "dcxo24M", 0xa74, BIT(29), 0);
+
+static SUNXI_CCU_GATE(bus_ohci0_clk, "bus-ohci0", "ahb3", 0xa8c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_ohci1_clk, "bus-ohci1", "ahb3", 0xa8c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_ehci0_clk, "bus-ehci0", "ahb3", 0xa8c, BIT(4), 0);
+static SUNXI_CCU_GATE(bus_ehci1_clk, "bus-ehci1", "ahb3", 0xa8c, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_otg_clk, "bus-otg", "ahb3", 0xa8c, BIT(8), 0);
+
+static SUNXI_CCU_GATE(bus_lradc_clk, "bus-lradc", "ahb3", 0xa9c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_dpss_top0_clk, "bus-dpss-top0", "ahb3",
+		      0xabc, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_dpss_top1_clk, "bus-dpss-top1", "ahb3",
+		      0xacc, BIT(0), 0);
+
+static const char * const mipi_dsi_parents[] = { "dcxo24M", "pll-periph0-2x",
+						 "pll-periph0" };
+static SUNXI_CCU_M_WITH_MUX_GATE(mipi_dsi_clk, "mipi-dsi",
+				 mipi_dsi_parents,
+				 0xb24,
+				 0, 4,		/* M */
+				 24, 2,		/* mux */
+				 BIT(31),	/* gate */
+				 0);
+
+static SUNXI_CCU_GATE(bus_mipi_dsi_clk, "bus-mipi-dsi", "ahb3",
+		      0xb4c, BIT(0), 0);
+
+static const char * const tcon_lcd_parents[] = { "pll-video0-4x",
+						  "pll-video1-4x",
+						  "pll-video2-4x",
+						  "pll-video3-4x",
+						  "pll-periph0-2x" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(tcon_lcd_clk, "tcon-lcd0",
+				  tcon_lcd_parents, 0xb60,
+				  0, 4,		/* M */
+				  8, 2,		/* P */
+				  24, 3,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_GATE(bus_tcon_lcd_clk, "bus-tcon-lcd0", "ahb3",
+		      0xb7c, BIT(0), 0);
+
+static const char * const ledc_parents[] = { "dcxo24M",
+					     "pll-periph0" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(ledc_clk, "ledc",
+				  ledc_parents, 0xbf0,
+				  0, 4,		/* M */
+				  8, 2,		/* P */
+				  24, 3,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_GATE(bus_ledc_clk, "bus-ledc", "ahb3", 0xbfc, BIT(0), 0);
+
+static const char * const csi_top_parents[] = { "pll-periph0-2x",
+						"pll-video0-2x",
+						"pll-video1-2x",
+						"pll-video2-2x",
+						"pll-video3-2x" };
+static SUNXI_CCU_M_WITH_MUX_GATE(csi_top_clk, "csi-top",
+				 csi_top_parents, 0xc04,
+				 0, 4,		/* M */
+				 24, 3,		/* mux */
+				 BIT(31),	/* gate */
+				 0);
+
+static const char * const csi0_mclk_parents[] = { "dcxo24M", "pll-video2",
+						  "pll-video3", "pll-video0",
+						  "pll-video1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(csi0_mclk_clk, "csi0-mclk",
+				 csi0_mclk_parents, 0xc08,
+				 0, 5,		/* M */
+				 24, 3,		/* mux */
+				 BIT(31),	/* gate */
+				 0);
+
+static const char * const csi1_mclk_parents[] = { "dcxo24M", "pll-video3",
+						  "pll-video0", "pll-video1",
+						  "pll-video2" };
+static SUNXI_CCU_M_WITH_MUX_GATE(csi1_mclk_clk, "csi1-mclk",
+				 csi1_mclk_parents, 0xc0c,
+				 0, 5,		/* M */
+				 24, 3,		/* mux */
+				 BIT(31),	/* gate */
+				 0);
+
+static SUNXI_CCU_GATE(bus_csi_clk, "bus-csi", "ahb3", 0xc1c, BIT(0), 0);
+
+static const char * const csi_isp_parents[] = { "pll-periph0-2x",
+						"pll-video0-2x",
+						"pll-video1-2x",
+						"pll-video2-2x",
+						"pll-video3-2x" };
+static SUNXI_CCU_M_WITH_MUX_GATE(csi_isp_clk, "csi-isp",
+				 csi_isp_parents, 0xc20,
+				 0, 5,		/* M */
+				 24, 3,		/* mux */
+				 BIT(31),	/* gate */
+				 0);
+
+/* Fixed factor clocks */
+static CLK_FIXED_FACTOR_FW_NAME(osc12M_clk, "osc12M", "hosc", 2, 1, 0);
+
+static CLK_FIXED_FACTOR_HW(pll_com_audio_clk, "pll-com-audio",
+			   &pll_com_clk.common.hw,
+			   5, 1, CLK_SET_RATE_PARENT);
+
+static CLK_FIXED_FACTOR_HW(pll_periph0_2x_clk, "pll-periph0-2x",
+			   &pll_periph0_clk.common.hw,
+			   1, 2, 0);
+
+static CLK_FIXED_FACTOR_HW(pll_periph1_2x_clk, "pll-periph1-2x",
+			   &pll_periph1_clk.common.hw,
+			   1, 2, 0);
+
+static const struct clk_hw *pll_video0_parents[] = {
+	&pll_video0_clk.common.hw
+};
+static CLK_FIXED_FACTOR_HWS(pll_video0_4x_clk, "pll-video0-4x",
+			    pll_video0_parents,
+			    1, 4, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_video0_2x_clk, "pll-video0-2x",
+			    pll_video0_parents,
+			    1, 2, CLK_SET_RATE_PARENT);
+
+static const struct clk_hw *pll_video1_parents[] = {
+	&pll_video1_clk.common.hw
+};
+static CLK_FIXED_FACTOR_HWS(pll_video1_4x_clk, "pll-video1-4x",
+			    pll_video1_parents,
+			    1, 4, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_video1_2x_clk, "pll-video1-2x",
+			    pll_video1_parents,
+			    1, 2, CLK_SET_RATE_PARENT);
+
+static const struct clk_hw *pll_video2_parents[] = {
+	&pll_video2_clk.common.hw
+};
+static CLK_FIXED_FACTOR_HWS(pll_video2_4x_clk, "pll-video2-4x",
+			    pll_video2_parents,
+			    1, 4, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_video2_2x_clk, "pll-video2-2x",
+			    pll_video2_parents,
+			    1, 2, CLK_SET_RATE_PARENT);
+
+static const struct clk_hw *pll_video3_parents[] = {
+	&pll_video3_clk.common.hw
+};
+static CLK_FIXED_FACTOR_HWS(pll_video3_4x_clk, "pll-video3-4x",
+			    pll_video3_parents,
+			    1, 4, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_video3_2x_clk, "pll-video3-2x",
+			    pll_video3_parents,
+			    1, 2, CLK_SET_RATE_PARENT);
+
+static struct ccu_common *sun50i_a100_ccu_clks[] = {
+	&pll_cpux_clk.common,
+	&pll_ddr0_clk.common,
+	&pll_periph0_clk.common,
+	&pll_periph1_clk.common,
+	&pll_gpu_clk.common,
+	&pll_video0_clk.common,
+	&pll_video1_clk.common,
+	&pll_video2_clk.common,
+	&pll_video3_clk.common,
+	&pll_ve_clk.common,
+	&pll_com_clk.common,
+	&pll_audio_clk.common,
+	&cpux_clk.common,
+	&axi_clk.common,
+	&cpux_apb_clk.common,
+	&psi_ahb1_ahb2_clk.common,
+	&ahb3_clk.common,
+	&apb1_clk.common,
+	&apb2_clk.common,
+	&mbus_clk.common,
+	&de_clk.common,
+	&bus_de_clk.common,
+	&g2d_clk.common,
+	&bus_g2d_clk.common,
+	&gpu_clk.common,
+	&bus_gpu_clk.common,
+	&ce_clk.common,
+	&bus_ce_clk.common,
+	&ve_clk.common,
+	&bus_ve_clk.common,
+	&bus_dma_clk.common,
+	&bus_msgbox_clk.common,
+	&bus_spinlock_clk.common,
+	&bus_hstimer_clk.common,
+	&avs_clk.common,
+	&bus_dbg_clk.common,
+	&bus_psi_clk.common,
+	&bus_pwm_clk.common,
+	&bus_iommu_clk.common,
+	&mbus_dma_clk.common,
+	&mbus_ve_clk.common,
+	&mbus_ce_clk.common,
+	&mbus_nand_clk.common,
+	&mbus_csi_clk.common,
+	&mbus_isp_clk.common,
+	&mbus_g2d_clk.common,
+	&bus_dram_clk.common,
+	&nand0_clk.common,
+	&nand1_clk.common,
+	&bus_nand_clk.common,
+	&mmc0_clk.common,
+	&mmc1_clk.common,
+	&mmc2_clk.common,
+	&bus_mmc0_clk.common,
+	&bus_mmc1_clk.common,
+	&bus_mmc2_clk.common,
+	&bus_uart0_clk.common,
+	&bus_uart1_clk.common,
+	&bus_uart2_clk.common,
+	&bus_uart3_clk.common,
+	&bus_uart4_clk.common,
+	&bus_i2c0_clk.common,
+	&bus_i2c1_clk.common,
+	&bus_i2c2_clk.common,
+	&bus_i2c3_clk.common,
+	&spi0_clk.common,
+	&spi1_clk.common,
+	&spi2_clk.common,
+	&bus_spi0_clk.common,
+	&bus_spi1_clk.common,
+	&bus_spi2_clk.common,
+	&emac_25m_clk.common,
+	&bus_emac_clk.common,
+	&ir_rx_clk.common,
+	&bus_ir_rx_clk.common,
+	&ir_tx_clk.common,
+	&bus_ir_tx_clk.common,
+	&bus_gpadc_clk.common,
+	&bus_ths_clk.common,
+	&i2s0_clk.common,
+	&i2s1_clk.common,
+	&i2s2_clk.common,
+	&i2s3_clk.common,
+	&bus_i2s0_clk.common,
+	&bus_i2s1_clk.common,
+	&bus_i2s2_clk.common,
+	&bus_i2s3_clk.common,
+	&spdif_clk.common,
+	&bus_spdif_clk.common,
+	&dmic_clk.common,
+	&bus_dmic_clk.common,
+	&audio_codec_dac_clk.common,
+	&audio_codec_adc_clk.common,
+	&audio_codec_4x_clk.common,
+	&bus_audio_codec_clk.common,
+	&usb_ohci0_clk.common,
+	&usb_phy0_clk.common,
+	&usb_ohci1_clk.common,
+	&usb_phy1_clk.common,
+	&bus_ohci0_clk.common,
+	&bus_ohci1_clk.common,
+	&bus_ehci0_clk.common,
+	&bus_ehci1_clk.common,
+	&bus_otg_clk.common,
+	&bus_lradc_clk.common,
+	&bus_dpss_top0_clk.common,
+	&bus_dpss_top1_clk.common,
+	&mipi_dsi_clk.common,
+	&bus_mipi_dsi_clk.common,
+	&tcon_lcd_clk.common,
+	&bus_tcon_lcd_clk.common,
+	&ledc_clk.common,
+	&bus_ledc_clk.common,
+	&csi_top_clk.common,
+	&csi0_mclk_clk.common,
+	&csi1_mclk_clk.common,
+	&bus_csi_clk.common,
+	&csi_isp_clk.common,
+};
+
+static struct clk_hw_onecell_data sun50i_a100_hw_clks = {
+	.hws	= {
+		[CLK_OSC12M]		= &osc12M_clk.hw,
+		[CLK_PLL_CPUX]		= &pll_cpux_clk.common.hw,
+		[CLK_PLL_DDR0]		= &pll_ddr0_clk.common.hw,
+		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
+		[CLK_PLL_PERIPH0_2X]	= &pll_periph0_2x_clk.hw,
+		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
+		[CLK_PLL_PERIPH1_2X]	= &pll_periph1_2x_clk.hw,
+		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
+		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
+		[CLK_PLL_VIDEO0_2X]	= &pll_video0_2x_clk.hw,
+		[CLK_PLL_VIDEO0_4X]	= &pll_video0_4x_clk.hw,
+		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
+		[CLK_PLL_VIDEO1_2X]	= &pll_video1_2x_clk.hw,
+		[CLK_PLL_VIDEO1_4X]	= &pll_video1_4x_clk.hw,
+		[CLK_PLL_VIDEO2]	= &pll_video2_clk.common.hw,
+		[CLK_PLL_VIDEO2_2X]	= &pll_video2_2x_clk.hw,
+		[CLK_PLL_VIDEO2_4X]	= &pll_video2_4x_clk.hw,
+		[CLK_PLL_VIDEO3]	= &pll_video3_clk.common.hw,
+		[CLK_PLL_VIDEO3_2X]	= &pll_video3_2x_clk.hw,
+		[CLK_PLL_VIDEO3_4X]	= &pll_video3_4x_clk.hw,
+		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
+		[CLK_PLL_COM]		= &pll_com_clk.common.hw,
+		[CLK_PLL_COM_AUDIO]	= &pll_com_audio_clk.hw,
+		[CLK_PLL_AUDIO]		= &pll_audio_clk.common.hw,
+		[CLK_CPUX]		= &cpux_clk.common.hw,
+		[CLK_AXI]		= &axi_clk.common.hw,
+		[CLK_CPUX_APB]		= &cpux_apb_clk.common.hw,
+		[CLK_PSI_AHB1_AHB2]	= &psi_ahb1_ahb2_clk.common.hw,
+		[CLK_AHB3]		= &ahb3_clk.common.hw,
+		[CLK_APB1]		= &apb1_clk.common.hw,
+		[CLK_APB2]		= &apb2_clk.common.hw,
+		[CLK_MBUS]		= &mbus_clk.common.hw,
+		[CLK_DE]		= &de_clk.common.hw,
+		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
+		[CLK_G2D]		= &g2d_clk.common.hw,
+		[CLK_BUS_G2D]		= &bus_g2d_clk.common.hw,
+		[CLK_GPU]		= &gpu_clk.common.hw,
+		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
+		[CLK_CE]		= &ce_clk.common.hw,
+		[CLK_BUS_CE]		= &bus_ce_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
+		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
+		[CLK_BUS_MSGBOX]	= &bus_msgbox_clk.common.hw,
+		[CLK_BUS_SPINLOCK]	= &bus_spinlock_clk.common.hw,
+		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+		[CLK_BUS_DBG]		= &bus_dbg_clk.common.hw,
+		[CLK_BUS_PSI]		= &bus_psi_clk.common.hw,
+		[CLK_BUS_PWM]		= &bus_pwm_clk.common.hw,
+		[CLK_BUS_IOMMU]		= &bus_iommu_clk.common.hw,
+		[CLK_MBUS_DMA]		= &mbus_dma_clk.common.hw,
+		[CLK_MBUS_VE]		= &mbus_ve_clk.common.hw,
+		[CLK_MBUS_CE]		= &mbus_ce_clk.common.hw,
+		[CLK_MBUS_NAND]		= &mbus_nand_clk.common.hw,
+		[CLK_MBUS_CSI]		= &mbus_csi_clk.common.hw,
+		[CLK_MBUS_ISP]		= &mbus_isp_clk.common.hw,
+		[CLK_MBUS_G2D]		= &mbus_g2d_clk.common.hw,
+		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
+		[CLK_NAND0]		= &nand0_clk.common.hw,
+		[CLK_NAND1]		= &nand1_clk.common.hw,
+		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC2]		= &mmc2_clk.common.hw,
+		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
+		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
+		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
+		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
+		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
+		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
+		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
+		[CLK_BUS_UART4]		= &bus_uart4_clk.common.hw,
+		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
+		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
+		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
+		[CLK_BUS_I2C3]		= &bus_i2c3_clk.common.hw,
+		[CLK_SPI0]		= &spi0_clk.common.hw,
+		[CLK_SPI1]		= &spi1_clk.common.hw,
+		[CLK_SPI2]		= &spi2_clk.common.hw,
+		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
+		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
+		[CLK_BUS_SPI2]		= &bus_spi2_clk.common.hw,
+		[CLK_EMAC_25M]		= &emac_25m_clk.common.hw,
+		[CLK_BUS_EMAC]		= &bus_emac_clk.common.hw,
+		[CLK_IR_RX]		= &ir_rx_clk.common.hw,
+		[CLK_BUS_IR_RX]		= &bus_ir_rx_clk.common.hw,
+		[CLK_IR_TX]		= &ir_tx_clk.common.hw,
+		[CLK_BUS_IR_TX]		= &bus_ir_tx_clk.common.hw,
+		[CLK_BUS_GPADC]		= &bus_gpadc_clk.common.hw,
+		[CLK_BUS_THS]		= &bus_ths_clk.common.hw,
+		[CLK_I2S0]		= &i2s0_clk.common.hw,
+		[CLK_I2S1]		= &i2s1_clk.common.hw,
+		[CLK_I2S2]		= &i2s2_clk.common.hw,
+		[CLK_I2S3]		= &i2s3_clk.common.hw,
+		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
+		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
+		[CLK_BUS_I2S2]		= &bus_i2s2_clk.common.hw,
+		[CLK_BUS_I2S3]		= &bus_i2s3_clk.common.hw,
+		[CLK_SPDIF]		= &spdif_clk.common.hw,
+		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
+		[CLK_DMIC]		= &dmic_clk.common.hw,
+		[CLK_BUS_DMIC]		= &bus_dmic_clk.common.hw,
+		[CLK_AUDIO_DAC]		= &audio_codec_dac_clk.common.hw,
+		[CLK_AUDIO_ADC]		= &audio_codec_adc_clk.common.hw,
+		[CLK_AUDIO_4X]		= &audio_codec_4x_clk.common.hw,
+		[CLK_BUS_AUDIO_CODEC]	= &bus_audio_codec_clk.common.hw,
+		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
+		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
+		[CLK_USB_OHCI1]		= &usb_ohci1_clk.common.hw,
+		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
+		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
+		[CLK_BUS_OHCI1]		= &bus_ohci1_clk.common.hw,
+		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
+		[CLK_BUS_EHCI1]		= &bus_ehci1_clk.common.hw,
+		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
+		[CLK_BUS_LRADC]		= &bus_lradc_clk.common.hw,
+		[CLK_BUS_DPSS_TOP0]	= &bus_dpss_top0_clk.common.hw,
+		[CLK_BUS_DPSS_TOP1]	= &bus_dpss_top1_clk.common.hw,
+		[CLK_MIPI_DSI]		= &mipi_dsi_clk.common.hw,
+		[CLK_BUS_MIPI_DSI]	= &bus_mipi_dsi_clk.common.hw,
+		[CLK_TCON_LCD]		= &tcon_lcd_clk.common.hw,
+		[CLK_BUS_TCON_LCD]	= &bus_tcon_lcd_clk.common.hw,
+		[CLK_LEDC]		= &ledc_clk.common.hw,
+		[CLK_BUS_LEDC]		= &bus_ledc_clk.common.hw,
+		[CLK_CSI_TOP]		= &csi_top_clk.common.hw,
+		[CLK_CSI0_MCLK]		= &csi0_mclk_clk.common.hw,
+		[CLK_CSI1_MCLK]		= &csi1_mclk_clk.common.hw,
+		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
+		[CLK_CSI_ISP]		= &csi_isp_clk.common.hw,
+	},
+	.num = CLK_NUMBER,
+};
+
+static struct ccu_reset_map sun50i_a100_ccu_resets[] = {
+	[RST_MBUS]		= { 0x540, BIT(30) },
+
+	[RST_BUS_DE]		= { 0x60c, BIT(16) },
+	[RST_BUS_G2D]		= { 0x63c, BIT(16) },
+	[RST_BUS_GPU]		= { 0x67c, BIT(16) },
+	[RST_BUS_CE]		= { 0x68c, BIT(16) },
+	[RST_BUS_VE]		= { 0x69c, BIT(16) },
+	[RST_BUS_DMA]		= { 0x70c, BIT(16) },
+	[RST_BUS_MSGBOX]	= { 0x71c, BIT(16) },
+	[RST_BUS_SPINLOCK]	= { 0x72c, BIT(16) },
+	[RST_BUS_HSTIMER]	= { 0x73c, BIT(16) },
+	[RST_BUS_DBG]		= { 0x78c, BIT(16) },
+	[RST_BUS_PSI]		= { 0x79c, BIT(16) },
+	[RST_BUS_PWM]		= { 0x7ac, BIT(16) },
+	[RST_BUS_DRAM]		= { 0x80c, BIT(16) },
+	[RST_BUS_NAND]		= { 0x82c, BIT(16) },
+	[RST_BUS_MMC0]		= { 0x84c, BIT(16) },
+	[RST_BUS_MMC1]		= { 0x84c, BIT(17) },
+	[RST_BUS_MMC2]		= { 0x84c, BIT(18) },
+	[RST_BUS_UART0]		= { 0x90c, BIT(16) },
+	[RST_BUS_UART1]		= { 0x90c, BIT(17) },
+	[RST_BUS_UART2]		= { 0x90c, BIT(18) },
+	[RST_BUS_UART3]		= { 0x90c, BIT(19) },
+	[RST_BUS_UART4]		= { 0x90c, BIT(20) },
+	[RST_BUS_I2C0]		= { 0x91c, BIT(16) },
+	[RST_BUS_I2C1]		= { 0x91c, BIT(17) },
+	[RST_BUS_I2C2]		= { 0x91c, BIT(18) },
+	[RST_BUS_I2C3]		= { 0x91c, BIT(19) },
+	[RST_BUS_SPI0]		= { 0x96c, BIT(16) },
+	[RST_BUS_SPI1]		= { 0x96c, BIT(17) },
+	[RST_BUS_SPI2]		= { 0x96c, BIT(18) },
+	[RST_BUS_EMAC]		= { 0x97c, BIT(16) },
+	[RST_BUS_IR_RX]		= { 0x99c, BIT(16) },
+	[RST_BUS_IR_TX]		= { 0x9cc, BIT(16) },
+	[RST_BUS_GPADC]		= { 0x9ec, BIT(16) },
+	[RST_BUS_THS]		= { 0x9fc, BIT(16) },
+	[RST_BUS_I2S0]		= { 0xa20, BIT(16) },
+	[RST_BUS_I2S1]		= { 0xa20, BIT(17) },
+	[RST_BUS_I2S2]		= { 0xa20, BIT(18) },
+	[RST_BUS_I2S3]		= { 0xa20, BIT(19) },
+	[RST_BUS_SPDIF]		= { 0xa2c, BIT(16) },
+	[RST_BUS_DMIC]		= { 0xa4c, BIT(16) },
+	[RST_BUS_AUDIO_CODEC]	= { 0xa5c, BIT(16) },
+
+	[RST_USB_PHY0]		= { 0xa70, BIT(30) },
+	[RST_USB_PHY1]		= { 0xa74, BIT(30) },
+
+	[RST_BUS_OHCI0]		= { 0xa8c, BIT(16) },
+	[RST_BUS_OHCI1]		= { 0xa8c, BIT(17) },
+	[RST_BUS_EHCI0]		= { 0xa8c, BIT(20) },
+	[RST_BUS_EHCI1]		= { 0xa8c, BIT(21) },
+	[RST_BUS_OTG]		= { 0xa8c, BIT(24) },
+
+	[RST_BUS_LRADC]		= { 0xa9c, BIT(16) },
+	[RST_BUS_DPSS_TOP0]	= { 0xabc, BIT(16) },
+	[RST_BUS_DPSS_TOP1]	= { 0xacc, BIT(16) },
+	[RST_BUS_MIPI_DSI]	= { 0xb4c, BIT(16) },
+	[RST_BUS_TCON_LCD]	= { 0xb7c, BIT(16) },
+	[RST_BUS_LVDS]		= { 0xbac, BIT(16) },
+	[RST_BUS_LEDC]		= { 0xbfc, BIT(16) },
+	[RST_BUS_CSI]		= { 0xc1c, BIT(16) },
+	[RST_BUS_CSI_ISP]	= { 0xc2c, BIT(16) },
+};
+
+static const struct sunxi_ccu_desc sun50i_a100_ccu_desc = {
+	.ccu_clks	= sun50i_a100_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun50i_a100_ccu_clks),
+
+	.hw_clks	= &sun50i_a100_hw_clks,
+
+	.resets		= sun50i_a100_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun50i_a100_ccu_resets),
+};
+
+static const u32 sun50i_a100_pll_regs[] = {
+	SUN50I_A100_PLL_CPUX_REG,
+	SUN50I_A100_PLL_DDR0_REG,
+	SUN50I_A100_PLL_PERIPH0_REG,
+	SUN50I_A100_PLL_PERIPH1_REG,
+	SUN50I_A100_PLL_GPU_REG,
+	SUN50I_A100_PLL_VIDEO0_REG,
+	SUN50I_A100_PLL_VIDEO1_REG,
+	SUN50I_A100_PLL_VIDEO2_REG,
+	SUN50I_A100_PLL_VIDEO3_REG,
+	SUN50I_A100_PLL_VE_REG,
+	SUN50I_A100_PLL_COM_REG,
+	SUN50I_A100_PLL_AUDIO_REG,
+};
+
+static const u32 sun50i_a100_pll_video_regs[] = {
+	SUN50I_A100_PLL_VIDEO0_REG,
+	SUN50I_A100_PLL_VIDEO1_REG,
+	SUN50I_A100_PLL_VIDEO2_REG,
+	SUN50I_A100_PLL_VIDEO3_REG,
+};
+
+static const u32 sun50i_a100_usb2_clk_regs[] = {
+	SUN50I_A100_USB0_CLK_REG,
+	SUN50I_A100_USB1_CLK_REG,
+};
+
+static struct ccu_pll_nb sun50i_a100_pll_cpu_nb = {
+	.common = &pll_cpux_clk.common,
+	/* copy from pll_cpux_clk */
+	.enable = BIT(27),
+	.lock   = BIT(28),
+};
+
+static struct ccu_mux_nb sun50i_a100_cpu_nb = {
+	.common         = &cpux_clk.common,
+	.cm             = &cpux_clk.mux,
+	.delay_us       = 1,
+	.bypass_index   = 4, /* index of pll periph0 */
+};
+
+static int sun50i_a100_ccu_probe(struct platform_device *pdev)
+{
+	void __iomem *reg;
+	u32 val;
+	int i, ret;
+
+	reg = devm_platform_ioremap_resource(pdev, 0);
+	if (IS_ERR(reg))
+		return PTR_ERR(reg);
+
+	/*
+	 * Enable lock and enable bits on all PLLs.
+	 *
+	 * Due to the current design, multiple PLLs share one power switch,
+	 * so switching PLL is easy to cause stability problems.
+	 * When initializing, we enable them by default. When disable,
+	 * we only turn off the output of PLL.
+	 */
+	for (i = 0; i < ARRAY_SIZE(sun50i_a100_pll_regs); i++) {
+		val = readl(reg + sun50i_a100_pll_regs[i]);
+		val |= SUN50I_A100_PLL_LOCK_ENABLE | SUN50I_A100_PLL_ENABLE;
+		writel(val, reg + sun50i_a100_pll_regs[i]);
+	}
+
+	/*
+	 * In order to pass the EMI certification, the SDM function of
+	 * the peripheral 1 bus is enabled, and the frequency is still
+	 * calculated using the previous division factor.
+	 */
+	writel(SUN50I_A100_PLL_PERIPH1_PATTERN0,
+	       reg + SUN50I_A100_PLL_PERIPH1_PATTERN0_REG);
+
+	val = readl(reg + SUN50I_A100_PLL_PERIPH1_REG);
+	val |= SUN50I_A100_PLL_SDM_ENABLE;
+	writel(val, reg + SUN50I_A100_PLL_PERIPH1_REG);
+
+	/*
+	 * Force the output divider of video PLLs to 0.
+	 *
+	 * See the comment before pll-video0 definition for the reason.
+	 */
+	for (i = 0; i < ARRAY_SIZE(sun50i_a100_pll_video_regs); i++) {
+		val = readl(reg + sun50i_a100_pll_video_regs[i]);
+		val &= ~BIT(0);
+		writel(val, reg + sun50i_a100_pll_video_regs[i]);
+	}
+
+	/*
+	 * Enforce m1 = 0, m0 = 1 for Audio PLL
+	 *
+	 * See the comment before pll-audio definition for the reason.
+	 */
+	val = readl(reg + SUN50I_A100_PLL_AUDIO_REG);
+	val &= ~BIT(1);
+	val |= BIT(0);
+	writel(val, reg + SUN50I_A100_PLL_AUDIO_REG);
+
+	/*
+	 * Force OHCI 12M clock sources to 00 (12MHz divided from 48MHz)
+	 *
+	 * This clock mux is still mysterious, and the code just enforces
+	 * it to have a valid clock parent.
+	 */
+	for (i = 0; i < ARRAY_SIZE(sun50i_a100_usb2_clk_regs); i++) {
+		val = readl(reg + sun50i_a100_usb2_clk_regs[i]);
+		val &= ~GENMASK(25, 24);
+		writel(val, reg + sun50i_a100_usb2_clk_regs[i]);
+	}
+
+	ret = devm_sunxi_ccu_probe(&pdev->dev, reg, &sun50i_a100_ccu_desc);
+	if (ret)
+		return ret;
+
+	/* Gate then ungate PLL CPU after any rate changes */
+	ccu_pll_notifier_register(&sun50i_a100_pll_cpu_nb);
+
+	/* Reparent CPU during PLL CPU rate changes */
+	ccu_mux_notifier_register(pll_cpux_clk.common.hw.clk,
+				  &sun50i_a100_cpu_nb);
+
+	return 0;
+}
+
+static const struct of_device_id sun50i_a100_ccu_ids[] = {
+	{ .compatible = "allwinner,sun50i-a100-ccu" },
+	{ }
+};
+
+static struct platform_driver sun50i_a100_ccu_driver = {
+	.probe	= sun50i_a100_ccu_probe,
+	.driver	= {
+		.name	= "sun50i-a100-ccu",
+		.suppress_bind_attrs = true,
+		.of_match_table	= sun50i_a100_ccu_ids,
+	},
+};
+module_platform_driver(sun50i_a100_ccu_driver);
diff --git a/drivers/clk/sunxi-ng/sun50i-a100-ccu.h b/drivers/clk/sunxi-ng/sun50i-a100-ccu.h
new file mode 100644
index 000000000000..21ce92bb1d5f
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun50i-a100-ccu.h
@@ -0,0 +1,56 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2020 Yangtao Li <frank@allwinnertech.com>
+ */
+
+#ifndef _CCU_SUN50I_A100_H_
+#define _CCU_SUN50I_A100_H_
+
+#include <dt-bindings/clock/sun50i-a100-ccu.h>
+#include <dt-bindings/reset/sun50i-a100-ccu.h>
+
+#define CLK_OSC12M		0
+#define CLK_PLL_CPUX		1
+#define CLK_PLL_DDR0		2
+
+/* PLL_PERIPH0 exported for PRCM */
+
+#define CLK_PLL_PERIPH0_2X	4
+#define CLK_PLL_PERIPH1		5
+#define CLK_PLL_PERIPH1_2X	6
+#define CLK_PLL_GPU		7
+#define CLK_PLL_VIDEO0		8
+#define CLK_PLL_VIDEO0_2X	9
+#define CLK_PLL_VIDEO0_4X	10
+#define CLK_PLL_VIDEO1		11
+#define CLK_PLL_VIDEO1_2X	12
+#define CLK_PLL_VIDEO1_4X	13
+#define CLK_PLL_VIDEO2		14
+#define CLK_PLL_VIDEO2_2X	15
+#define CLK_PLL_VIDEO2_4X	16
+#define CLK_PLL_VIDEO3		17
+#define CLK_PLL_VIDEO3_2X	18
+#define CLK_PLL_VIDEO3_4X	19
+#define CLK_PLL_VE		20
+#define CLK_PLL_COM		21
+#define CLK_PLL_COM_AUDIO	22
+#define CLK_PLL_AUDIO		23
+
+/* CPUX clock exported for DVFS */
+
+#define CLK_AXI			25
+#define CLK_CPUX_APB		26
+#define CLK_PSI_AHB1_AHB2	27
+#define CLK_AHB3		28
+
+/* APB1 clock exported for PIO */
+
+#define CLK_APB2		30
+
+/* All module clocks and bus gates are exported except DRAM */
+
+#define CLK_BUS_DRAM		58
+
+#define CLK_NUMBER		(CLK_CSI_ISP + 1)
+
+#endif /* _CCU_SUN50I_A100_H_ */
diff --git a/drivers/clk/sunxi-ng/sun50i-a100-r-ccu.c b/drivers/clk/sunxi-ng/sun50i-a100-r-ccu.c
new file mode 100644
index 000000000000..078ebdf8b093
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun50i-a100-r-ccu.c
@@ -0,0 +1,215 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2020 Yangtao Li <frank@allwinnertech.com>
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/module.h>
+#include <linux/of_address.h>
+#include <linux/platform_device.h>
+
+#include "ccu_common.h"
+#include "ccu_reset.h"
+
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_mp.h"
+#include "ccu_nm.h"
+
+#include "sun50i-a100-r-ccu.h"
+
+static const char * const cpus_r_apb2_parents[] = { "dcxo24M", "osc32k",
+						     "iosc", "pll-periph0" };
+static const struct ccu_mux_var_prediv cpus_r_apb2_predivs[] = {
+	{ .index = 3, .shift = 0, .width = 5 },
+};
+
+static struct ccu_div r_cpus_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+
+	.mux		= {
+		.shift	= 24,
+		.width	= 2,
+
+		.var_predivs	= cpus_r_apb2_predivs,
+		.n_var_predivs	= ARRAY_SIZE(cpus_r_apb2_predivs),
+	},
+
+	.common		= {
+		.reg		= 0x000,
+		.features	= CCU_FEATURE_VARIABLE_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("cpus",
+						      cpus_r_apb2_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static CLK_FIXED_FACTOR_HW(r_ahb_clk, "r-ahb", &r_cpus_clk.common.hw, 1, 1, 0);
+
+static struct ccu_div r_apb1_clk = {
+	.div		= _SUNXI_CCU_DIV(0, 2),
+
+	.common		= {
+		.reg		= 0x00c,
+		.hw.init	= CLK_HW_INIT("r-apb1",
+					      "r-ahb",
+					      &ccu_div_ops,
+					      0),
+	},
+};
+
+static struct ccu_div r_apb2_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+
+	.mux		= {
+		.shift	= 24,
+		.width	= 2,
+
+		.var_predivs	= cpus_r_apb2_predivs,
+		.n_var_predivs	= ARRAY_SIZE(cpus_r_apb2_predivs),
+	},
+
+	.common		= {
+		.reg		= 0x010,
+		.features	= CCU_FEATURE_VARIABLE_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("r-apb2",
+						      cpus_r_apb2_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static const struct clk_parent_data clk_parent_r_apb1[] = {
+	{ .hw = &r_apb1_clk.common.hw },
+};
+
+static const struct clk_parent_data clk_parent_r_apb2[] = {
+	{ .hw = &r_apb2_clk.common.hw },
+};
+
+static SUNXI_CCU_GATE_DATA(r_apb1_timer_clk, "r-apb1-timer", clk_parent_r_apb1,
+			   0x11c, BIT(0), 0);
+
+static SUNXI_CCU_GATE_DATA(r_apb1_twd_clk, "r-apb1-twd", clk_parent_r_apb1,
+			   0x12c, BIT(0), 0);
+
+static const char * const r_apb1_pwm_clk_parents[] = { "dcxo24M", "osc32k",
+						       "iosc" };
+static SUNXI_CCU_MUX(r_apb1_pwm_clk, "r-apb1-pwm", r_apb1_pwm_clk_parents,
+		     0x130, 24, 2, 0);
+
+static SUNXI_CCU_GATE_DATA(r_apb1_bus_pwm_clk, "r-apb1-bus-pwm",
+			   clk_parent_r_apb1, 0x13c, BIT(0), 0);
+
+static SUNXI_CCU_GATE_DATA(r_apb1_ppu_clk, "r-apb1-ppu", clk_parent_r_apb1,
+			   0x17c, BIT(0), 0);
+
+static SUNXI_CCU_GATE_DATA(r_apb2_uart_clk, "r-apb2-uart", clk_parent_r_apb2,
+			   0x18c, BIT(0), 0);
+
+static SUNXI_CCU_GATE_DATA(r_apb2_i2c0_clk, "r-apb2-i2c0", clk_parent_r_apb2,
+			   0x19c, BIT(0), 0);
+
+static SUNXI_CCU_GATE_DATA(r_apb2_i2c1_clk, "r-apb2-i2c1", clk_parent_r_apb2,
+			   0x19c, BIT(1), 0);
+
+static const char * const r_apb1_ir_rx_parents[] = { "osc32k", "dcxo24M" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(r_apb1_ir_rx_clk, "r-apb1-ir-rx",
+				  r_apb1_ir_rx_parents, 0x1c0,
+				  0, 5,		/* M */
+				  8, 2,		/* P */
+				  24, 1,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_GATE_DATA(r_apb1_bus_ir_rx_clk, "r-apb1-bus-ir-rx",
+			   clk_parent_r_apb1, 0x1cc, BIT(0), 0);
+
+static SUNXI_CCU_GATE(r_ahb_bus_rtc_clk, "r-ahb-rtc", "r-ahb",
+		      0x20c, BIT(0), 0);
+
+static struct ccu_common *sun50i_a100_r_ccu_clks[] = {
+	&r_cpus_clk.common,
+	&r_apb1_clk.common,
+	&r_apb2_clk.common,
+	&r_apb1_timer_clk.common,
+	&r_apb1_twd_clk.common,
+	&r_apb1_pwm_clk.common,
+	&r_apb1_bus_pwm_clk.common,
+	&r_apb1_ppu_clk.common,
+	&r_apb2_uart_clk.common,
+	&r_apb2_i2c0_clk.common,
+	&r_apb2_i2c1_clk.common,
+	&r_apb1_ir_rx_clk.common,
+	&r_apb1_bus_ir_rx_clk.common,
+	&r_ahb_bus_rtc_clk.common,
+};
+
+static struct clk_hw_onecell_data sun50i_a100_r_hw_clks = {
+	.hws	= {
+		[CLK_R_CPUS]		= &r_cpus_clk.common.hw,
+		[CLK_R_AHB]		= &r_ahb_clk.hw,
+		[CLK_R_APB1]		= &r_apb1_clk.common.hw,
+		[CLK_R_APB2]		= &r_apb2_clk.common.hw,
+		[CLK_R_APB1_TIMER]	= &r_apb1_timer_clk.common.hw,
+		[CLK_R_APB1_TWD]	= &r_apb1_twd_clk.common.hw,
+		[CLK_R_APB1_PWM]	= &r_apb1_pwm_clk.common.hw,
+		[CLK_R_APB1_BUS_PWM]	= &r_apb1_bus_pwm_clk.common.hw,
+		[CLK_R_APB1_PPU]	= &r_apb1_ppu_clk.common.hw,
+		[CLK_R_APB2_UART]	= &r_apb2_uart_clk.common.hw,
+		[CLK_R_APB2_I2C0]	= &r_apb2_i2c0_clk.common.hw,
+		[CLK_R_APB2_I2C1]	= &r_apb2_i2c1_clk.common.hw,
+		[CLK_R_APB1_IR]		= &r_apb1_ir_rx_clk.common.hw,
+		[CLK_R_APB1_BUS_IR]	= &r_apb1_bus_ir_rx_clk.common.hw,
+		[CLK_R_AHB_BUS_RTC]	= &r_ahb_bus_rtc_clk.common.hw,
+	},
+	.num	= CLK_NUMBER,
+};
+
+static struct ccu_reset_map sun50i_a100_r_ccu_resets[] = {
+	[RST_R_APB1_TIMER]	=  { 0x11c, BIT(16) },
+	[RST_R_APB1_BUS_PWM]	=  { 0x13c, BIT(16) },
+	[RST_R_APB1_PPU]	=  { 0x17c, BIT(16) },
+	[RST_R_APB2_UART]	=  { 0x18c, BIT(16) },
+	[RST_R_APB2_I2C0]	=  { 0x19c, BIT(16) },
+	[RST_R_APB2_I2C1]	=  { 0x19c, BIT(17) },
+	[RST_R_APB1_BUS_IR]	=  { 0x1cc, BIT(16) },
+	[RST_R_AHB_BUS_RTC]	=  { 0x20c, BIT(16) },
+};
+
+static const struct sunxi_ccu_desc sun50i_a100_r_ccu_desc = {
+	.ccu_clks	= sun50i_a100_r_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun50i_a100_r_ccu_clks),
+
+	.hw_clks	= &sun50i_a100_r_hw_clks,
+
+	.resets		= sun50i_a100_r_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun50i_a100_r_ccu_resets),
+};
+
+static int sun50i_a100_r_ccu_probe(struct platform_device *pdev)
+{
+	void __iomem *reg;
+
+	reg = devm_platform_ioremap_resource(pdev, 0);
+	if (IS_ERR(reg))
+		return PTR_ERR(reg);
+
+	return devm_sunxi_ccu_probe(&pdev->dev, reg, &sun50i_a100_r_ccu_desc);
+}
+
+static const struct of_device_id sun50i_a100_r_ccu_ids[] = {
+	{ .compatible = "allwinner,sun50i-a100-r-ccu" },
+	{ }
+};
+
+static struct platform_driver sun50i_a100_r_ccu_driver = {
+	.probe	= sun50i_a100_r_ccu_probe,
+	.driver	= {
+		.name	= "sun50i-a100-r-ccu",
+		.suppress_bind_attrs = true,
+		.of_match_table	= sun50i_a100_r_ccu_ids,
+	},
+};
+module_platform_driver(sun50i_a100_r_ccu_driver);
diff --git a/drivers/clk/sunxi-ng/sun50i-a100-r-ccu.h b/drivers/clk/sunxi-ng/sun50i-a100-r-ccu.h
new file mode 100644
index 000000000000..3a8f187a51b7
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun50i-a100-r-ccu.h
@@ -0,0 +1,21 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2020 Yangtao Li <frank@allwinnertech.com>
+ */
+
+#ifndef _CCU_SUN50I_A100_R_H
+#define _CCU_SUN50I_A100_R_H
+
+#include <dt-bindings/clock/sun50i-a100-r-ccu.h>
+#include <dt-bindings/reset/sun50i-a100-r-ccu.h>
+
+#define CLK_R_CPUS		0
+#define CLK_R_AHB		1
+
+/* exported except APB1 for R_PIO */
+
+#define CLK_R_APB2		3
+
+#define CLK_NUMBER	(CLK_R_AHB_BUS_RTC + 1)
+
+#endif /* _CCU_SUN50I_A100_R_H */
diff --git a/drivers/clk/sunxi-ng/sun50i-a64-ccu.c b/drivers/clk/sunxi-ng/sun50i-a64-ccu.c
new file mode 100644
index 000000000000..ffc5ef5fab3c
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun50i-a64-ccu.c
@@ -0,0 +1,985 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (c) 2016 Maxime Ripard. All rights reserved.
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/io.h>
+#include <linux/of_address.h>
+#include <linux/platform_device.h>
+
+#include "ccu_common.h"
+#include "ccu_reset.h"
+
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_mp.h"
+#include "ccu_mult.h"
+#include "ccu_nk.h"
+#include "ccu_nkm.h"
+#include "ccu_nkmp.h"
+#include "ccu_nm.h"
+#include "ccu_phase.h"
+
+#include "sun50i-a64-ccu.h"
+
+static struct ccu_nkmp pll_cpux_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT(8, 5),
+	.k		= _SUNXI_CCU_MULT(4, 2),
+	.m		= _SUNXI_CCU_DIV(0, 2),
+	.p		= _SUNXI_CCU_DIV_MAX(16, 2, 4),
+	.common		= {
+		.reg		= 0x000,
+		.hw.init	= CLK_HW_INIT("pll-cpux",
+					      "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+/*
+ * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
+ * the base (2x, 4x and 8x), and one variable divider (the one true
+ * pll audio).
+ *
+ * With sigma-delta modulation for fractional-N on the audio PLL,
+ * we have to use specific dividers. This means the variable divider
+ * can no longer be used, as the audio codec requests the exact clock
+ * rates we support through this mechanism. So we now hard code the
+ * variable divider to 1. This means the clock rates will no longer
+ * match the clock names.
+ */
+#define SUN50I_A64_PLL_AUDIO_REG	0x008
+
+static struct ccu_sdm_setting pll_audio_sdm_table[] = {
+	{ .rate = 22579200, .pattern = 0xc0010d84, .m = 8, .n = 7 },
+	{ .rate = 24576000, .pattern = 0xc000ac02, .m = 14, .n = 14 },
+};
+
+static SUNXI_CCU_NM_WITH_SDM_GATE_LOCK(pll_audio_base_clk, "pll-audio-base",
+				       "osc24M", 0x008,
+				       8, 7,	/* N */
+				       0, 5,	/* M */
+				       pll_audio_sdm_table, BIT(24),
+				       0x284, BIT(31),
+				       BIT(31),	/* gate */
+				       BIT(28),	/* lock */
+				       CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK_MIN_MAX(pll_video0_clk, "pll-video0",
+						"osc24M", 0x010,
+						192000000,	/* Minimum rate */
+						1008000000,	/* Maximum rate */
+						8, 7,		/* N */
+						0, 4,		/* M */
+						BIT(24),	/* frac enable */
+						BIT(25),	/* frac select */
+						270000000,	/* frac rate 0 */
+						297000000,	/* frac rate 1 */
+						BIT(31),	/* gate */
+						BIT(28),	/* lock */
+						CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_ve_clk, "pll-ve",
+					"osc24M", 0x018,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_ddr0_clk, "pll-ddr0",
+				    "osc24M", 0x020,
+				    8, 5,	/* N */
+				    4, 2,	/* K */
+				    0, 2,	/* M */
+				    BIT(31),	/* gate */
+				    BIT(28),	/* lock */
+				    CLK_SET_RATE_UNGATE);
+
+static struct ccu_nk pll_periph0_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT(8, 5),
+	.k		= _SUNXI_CCU_MULT_MIN(4, 2, 2),
+	.fixed_post_div	= 2,
+	.common		= {
+		.reg		= 0x028,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-periph0", "osc24M",
+					      &ccu_nk_ops, CLK_SET_RATE_UNGATE),
+	},
+};
+
+static struct ccu_nk pll_periph1_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT(8, 5),
+	.k		= _SUNXI_CCU_MULT_MIN(4, 2, 2),
+	.fixed_post_div	= 2,
+	.common		= {
+		.reg		= 0x02c,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-periph1", "osc24M",
+					      &ccu_nk_ops, CLK_SET_RATE_UNGATE),
+	},
+};
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK_MIN_MAX(pll_video1_clk, "pll-video1",
+						"osc24M", 0x030,
+						192000000,	/* Minimum rate */
+						1008000000,	/* Maximum rate */
+						8, 7,		/* N */
+						0, 4,		/* M */
+						BIT(24),	/* frac enable */
+						BIT(25),	/* frac select */
+						270000000,	/* frac rate 0 */
+						297000000,	/* frac rate 1 */
+						BIT(31),	/* gate */
+						BIT(28),	/* lock */
+						CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_gpu_clk, "pll-gpu",
+					"osc24M", 0x038,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+/*
+ * The output function can be changed to something more complex that
+ * we do not handle yet.
+ *
+ * Hardcode the mode so that we don't fall in that case.
+ */
+#define SUN50I_A64_PLL_MIPI_REG		0x040
+
+static struct ccu_nkm pll_mipi_clk = {
+	/*
+	 * The bit 23 and 22 are called "LDO{1,2}_EN" on the SoC's
+	 * user manual, and by experiments the PLL doesn't work without
+	 * these bits toggled.
+	 */
+	.enable		= BIT(31) | BIT(23) | BIT(22),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT(8, 4),
+	.k		= _SUNXI_CCU_MULT_MIN(4, 2, 2),
+	.m		= _SUNXI_CCU_DIV(0, 4),
+	.common		= {
+		.reg		= 0x040,
+		.hw.init	= CLK_HW_INIT("pll-mipi", "pll-video0",
+					      &ccu_nkm_ops, CLK_SET_RATE_UNGATE),
+	},
+};
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_hsic_clk, "pll-hsic",
+					"osc24M", 0x044,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_de_clk, "pll-de",
+					"osc24M", 0x048,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_GATE_LOCK(pll_ddr1_clk, "pll-ddr1",
+				   "osc24M", 0x04c,
+				   8, 7,	/* N */
+				   0, 2,	/* M */
+				   BIT(31),	/* gate */
+				   BIT(28),	/* lock */
+				   CLK_SET_RATE_UNGATE);
+
+static const char * const cpux_parents[] = { "osc32k", "osc24M",
+					     "pll-cpux", "pll-cpux" };
+static SUNXI_CCU_MUX(cpux_clk, "cpux", cpux_parents,
+		     0x050, 16, 2, CLK_SET_RATE_PARENT | CLK_IS_CRITICAL);
+
+static SUNXI_CCU_M(axi_clk, "axi", "cpux", 0x050, 0, 2, 0);
+
+static const char * const ahb1_parents[] = { "osc32k", "osc24M",
+					     "axi", "pll-periph0" };
+static const struct ccu_mux_var_prediv ahb1_predivs[] = {
+	{ .index = 3, .shift = 6, .width = 2 },
+};
+static struct ccu_div ahb1_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
+
+	.mux		= {
+		.shift	= 12,
+		.width	= 2,
+
+		.var_predivs	= ahb1_predivs,
+		.n_var_predivs	= ARRAY_SIZE(ahb1_predivs),
+	},
+
+	.common		= {
+		.reg		= 0x054,
+		.features	= CCU_FEATURE_VARIABLE_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("ahb1",
+						      ahb1_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static struct clk_div_table apb1_div_table[] = {
+	{ .val = 0, .div = 2 },
+	{ .val = 1, .div = 2 },
+	{ .val = 2, .div = 4 },
+	{ .val = 3, .div = 8 },
+	{ /* Sentinel */ },
+};
+static SUNXI_CCU_DIV_TABLE(apb1_clk, "apb1", "ahb1",
+			   0x054, 8, 2, apb1_div_table, 0);
+
+static const char * const apb2_parents[] = { "osc32k", "osc24M",
+					     "pll-periph0-2x",
+					     "pll-periph0-2x" };
+static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", apb2_parents, 0x058,
+			     0, 5,	/* M */
+			     16, 2,	/* P */
+			     24, 2,	/* mux */
+			     0);
+
+static const char * const ahb2_parents[] = { "ahb1", "pll-periph0" };
+static const struct ccu_mux_fixed_prediv ahb2_fixed_predivs[] = {
+	{ .index = 1, .div = 2 },
+};
+static struct ccu_mux ahb2_clk = {
+	.mux		= {
+		.shift	= 0,
+		.width	= 1,
+		.fixed_predivs	= ahb2_fixed_predivs,
+		.n_predivs	= ARRAY_SIZE(ahb2_fixed_predivs),
+	},
+
+	.common		= {
+		.reg		= 0x05c,
+		.features	= CCU_FEATURE_FIXED_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("ahb2",
+						      ahb2_parents,
+						      &ccu_mux_ops,
+						      0),
+	},
+};
+
+static SUNXI_CCU_GATE(bus_mipi_dsi_clk,	"bus-mipi-dsi",	"ahb1",
+		      0x060, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_ce_clk,	"bus-ce",	"ahb1",
+		      0x060, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_dma_clk,	"bus-dma",	"ahb1",
+		      0x060, BIT(6), 0);
+static SUNXI_CCU_GATE(bus_mmc0_clk,	"bus-mmc0",	"ahb1",
+		      0x060, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_mmc1_clk,	"bus-mmc1",	"ahb1",
+		      0x060, BIT(9), 0);
+static SUNXI_CCU_GATE(bus_mmc2_clk,	"bus-mmc2",	"ahb1",
+		      0x060, BIT(10), 0);
+static SUNXI_CCU_GATE(bus_nand_clk,	"bus-nand",	"ahb1",
+		      0x060, BIT(13), 0);
+static SUNXI_CCU_GATE(bus_dram_clk,	"bus-dram",	"ahb1",
+		      0x060, BIT(14), 0);
+static SUNXI_CCU_GATE(bus_emac_clk,	"bus-emac",	"ahb2",
+		      0x060, BIT(17), 0);
+static SUNXI_CCU_GATE(bus_ts_clk,	"bus-ts",	"ahb1",
+		      0x060, BIT(18), 0);
+static SUNXI_CCU_GATE(bus_hstimer_clk,	"bus-hstimer",	"ahb1",
+		      0x060, BIT(19), 0);
+static SUNXI_CCU_GATE(bus_spi0_clk,	"bus-spi0",	"ahb1",
+		      0x060, BIT(20), 0);
+static SUNXI_CCU_GATE(bus_spi1_clk,	"bus-spi1",	"ahb1",
+		      0x060, BIT(21), 0);
+static SUNXI_CCU_GATE(bus_otg_clk,	"bus-otg",	"ahb1",
+		      0x060, BIT(23), 0);
+static SUNXI_CCU_GATE(bus_ehci0_clk,	"bus-ehci0",	"ahb1",
+		      0x060, BIT(24), 0);
+static SUNXI_CCU_GATE(bus_ehci1_clk,	"bus-ehci1",	"ahb2",
+		      0x060, BIT(25), 0);
+static SUNXI_CCU_GATE(bus_ohci0_clk,	"bus-ohci0",	"ahb1",
+		      0x060, BIT(28), 0);
+static SUNXI_CCU_GATE(bus_ohci1_clk,	"bus-ohci1",	"ahb2",
+		      0x060, BIT(29), 0);
+
+static SUNXI_CCU_GATE(bus_ve_clk,	"bus-ve",	"ahb1",
+		      0x064, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_tcon0_clk,	"bus-tcon0",	"ahb1",
+		      0x064, BIT(3), 0);
+static SUNXI_CCU_GATE(bus_tcon1_clk,	"bus-tcon1",	"ahb1",
+		      0x064, BIT(4), 0);
+static SUNXI_CCU_GATE(bus_deinterlace_clk,	"bus-deinterlace",	"ahb1",
+		      0x064, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_csi_clk,	"bus-csi",	"ahb1",
+		      0x064, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_hdmi_clk,	"bus-hdmi",	"ahb1",
+		      0x064, BIT(11), 0);
+static SUNXI_CCU_GATE(bus_de_clk,	"bus-de",	"ahb1",
+		      0x064, BIT(12), 0);
+static SUNXI_CCU_GATE(bus_gpu_clk,	"bus-gpu",	"ahb1",
+		      0x064, BIT(20), 0);
+static SUNXI_CCU_GATE(bus_msgbox_clk,	"bus-msgbox",	"ahb1",
+		      0x064, BIT(21), 0);
+static SUNXI_CCU_GATE(bus_spinlock_clk,	"bus-spinlock",	"ahb1",
+		      0x064, BIT(22), 0);
+
+static SUNXI_CCU_GATE(bus_codec_clk,	"bus-codec",	"apb1",
+		      0x068, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_spdif_clk,	"bus-spdif",	"apb1",
+		      0x068, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_pio_clk,	"bus-pio",	"apb1",
+		      0x068, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_ths_clk,	"bus-ths",	"apb1",
+		      0x068, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_i2s0_clk,	"bus-i2s0",	"apb1",
+		      0x068, BIT(12), 0);
+static SUNXI_CCU_GATE(bus_i2s1_clk,	"bus-i2s1",	"apb1",
+		      0x068, BIT(13), 0);
+static SUNXI_CCU_GATE(bus_i2s2_clk,	"bus-i2s2",	"apb1",
+		      0x068, BIT(14), 0);
+
+static SUNXI_CCU_GATE(bus_i2c0_clk,	"bus-i2c0",	"apb2",
+		      0x06c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_i2c1_clk,	"bus-i2c1",	"apb2",
+		      0x06c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_i2c2_clk,	"bus-i2c2",	"apb2",
+		      0x06c, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_scr_clk,	"bus-scr",	"apb2",
+		      0x06c, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_uart0_clk,	"bus-uart0",	"apb2",
+		      0x06c, BIT(16), 0);
+static SUNXI_CCU_GATE(bus_uart1_clk,	"bus-uart1",	"apb2",
+		      0x06c, BIT(17), 0);
+static SUNXI_CCU_GATE(bus_uart2_clk,	"bus-uart2",	"apb2",
+		      0x06c, BIT(18), 0);
+static SUNXI_CCU_GATE(bus_uart3_clk,	"bus-uart3",	"apb2",
+		      0x06c, BIT(19), 0);
+static SUNXI_CCU_GATE(bus_uart4_clk,	"bus-uart4",	"apb2",
+		      0x06c, BIT(20), 0);
+
+static SUNXI_CCU_GATE(bus_dbg_clk,	"bus-dbg",	"ahb1",
+		      0x070, BIT(7), 0);
+
+static struct clk_div_table ths_div_table[] = {
+	{ .val = 0, .div = 1 },
+	{ .val = 1, .div = 2 },
+	{ .val = 2, .div = 4 },
+	{ .val = 3, .div = 6 },
+	{ /* Sentinel */ },
+};
+static const char * const ths_parents[] = { "osc24M" };
+static struct ccu_div ths_clk = {
+	.enable	= BIT(31),
+	.div	= _SUNXI_CCU_DIV_TABLE(0, 2, ths_div_table),
+	.mux	= _SUNXI_CCU_MUX(24, 2),
+	.common	= {
+		.reg		= 0x074,
+		.hw.init	= CLK_HW_INIT_PARENTS("ths",
+						      ths_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static const char * const mod0_default_parents[] = { "osc24M", "pll-periph0",
+						     "pll-periph1" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand_clk, "nand", mod0_default_parents, 0x080,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+/*
+ * MMC clocks are the new timing mode (see A83T & H3) variety, but without
+ * the mode switch. This means they have a 2x post divider between the clock
+ * and the MMC module. This is not documented in the manual, but is taken
+ * into consideration when setting the mmc module clocks in the BSP kernel.
+ * Without it, MMC performance is degraded.
+ *
+ * We model it here to be consistent with other SoCs supporting this mode.
+ * The alternative would be to add the 2x multiplier when setting the MMC
+ * module clock in the MMC driver, just for the A64.
+ */
+static const char * const mmc_default_parents[] = { "osc24M", "pll-periph0-2x",
+						    "pll-periph1-2x" };
+static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc0_clk, "mmc0",
+					  mmc_default_parents, 0x088,
+					  0, 4,		/* M */
+					  16, 2,	/* P */
+					  24, 2,	/* mux */
+					  BIT(31),	/* gate */
+					  2,		/* post-div */
+					  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc1_clk, "mmc1",
+					  mmc_default_parents, 0x08c,
+					  0, 4,		/* M */
+					  16, 2,	/* P */
+					  24, 2,	/* mux */
+					  BIT(31),	/* gate */
+					  2,		/* post-div */
+					  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc2_clk, "mmc2",
+					  mmc_default_parents, 0x090,
+					  0, 4,		/* M */
+					  16, 2,	/* P */
+					  24, 2,	/* mux */
+					  BIT(31),	/* gate */
+					  2,		/* post-div */
+					  0);
+
+static const char * const ts_parents[] = { "osc24M", "pll-periph0", };
+static SUNXI_CCU_MP_WITH_MUX_GATE(ts_clk, "ts", ts_parents, 0x098,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 4,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(ce_clk, "ce", mmc_default_parents, 0x09c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents, 0x0a0,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents, 0x0a4,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static const char * const i2s_parents[] = { "pll-audio-8x", "pll-audio-4x",
+					    "pll-audio-2x", "pll-audio" };
+static SUNXI_CCU_MUX_WITH_GATE(i2s0_clk, "i2s0", i2s_parents,
+			       0x0b0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_MUX_WITH_GATE(i2s1_clk, "i2s1", i2s_parents,
+			       0x0b4, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_MUX_WITH_GATE(i2s2_clk, "i2s2", i2s_parents,
+			       0x0b8, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M_WITH_GATE(spdif_clk, "spdif", "pll-audio",
+			     0x0c0, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"osc24M",
+		      0x0cc, BIT(8), 0);
+static SUNXI_CCU_GATE(usb_phy1_clk,	"usb-phy1",	"osc24M",
+		      0x0cc, BIT(9), 0);
+static SUNXI_CCU_GATE(usb_hsic_clk,	"usb-hsic",	"pll-hsic",
+		      0x0cc, BIT(10), 0);
+static SUNXI_CCU_GATE(usb_hsic_12m_clk,	"usb-hsic-12M",	"osc12M",
+		      0x0cc, BIT(11), 0);
+static SUNXI_CCU_GATE(usb_ohci0_clk,	"usb-ohci0",	"osc12M",
+		      0x0cc, BIT(16), 0);
+static SUNXI_CCU_GATE(usb_ohci1_clk,	"usb-ohci1",	"usb-ohci0",
+		      0x0cc, BIT(17), 0);
+
+static const char * const dram_parents[] = { "pll-ddr0", "pll-ddr1" };
+static SUNXI_CCU_M_WITH_MUX(dram_clk, "dram", dram_parents,
+			    0x0f4, 0, 4, 20, 2, CLK_IS_CRITICAL);
+
+static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"dram",
+		      0x100, BIT(0), 0);
+static SUNXI_CCU_GATE(dram_csi_clk,	"dram-csi",	"dram",
+		      0x100, BIT(1), 0);
+static SUNXI_CCU_GATE(dram_deinterlace_clk,	"dram-deinterlace",	"dram",
+		      0x100, BIT(2), 0);
+static SUNXI_CCU_GATE(dram_ts_clk,	"dram-ts",	"dram",
+		      0x100, BIT(3), 0);
+
+static const char * const de_parents[] = { "pll-periph0-2x", "pll-de" };
+static SUNXI_CCU_M_WITH_MUX_GATE(de_clk, "de", de_parents,
+				 0x104, 0, 4, 24, 3, BIT(31),
+				 CLK_SET_RATE_PARENT);
+
+static const char * const tcon0_parents[] = { "pll-mipi", "pll-video0-2x" };
+static const u8 tcon0_table[] = { 0, 2, };
+static SUNXI_CCU_MUX_TABLE_WITH_GATE(tcon0_clk, "tcon0", tcon0_parents,
+				     tcon0_table, 0x118, 24, 3, BIT(31),
+				     CLK_SET_RATE_PARENT);
+
+static const char * const tcon1_parents[] = { "pll-video0", "pll-video1" };
+static const u8 tcon1_table[] = { 0, 2, };
+static struct ccu_div tcon1_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV(0, 4),
+	.mux		= _SUNXI_CCU_MUX_TABLE(24, 2, tcon1_table),
+	.common		= {
+		.reg		= 0x11c,
+		.hw.init	= CLK_HW_INIT_PARENTS("tcon1",
+						      tcon1_parents,
+						      &ccu_div_ops,
+						      CLK_SET_RATE_PARENT),
+	},
+};
+
+static const char * const deinterlace_parents[] = { "pll-periph0", "pll-periph1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(deinterlace_clk, "deinterlace", deinterlace_parents,
+				 0x124, 0, 4, 24, 3, BIT(31), 0);
+
+static SUNXI_CCU_GATE(csi_misc_clk,	"csi-misc",	"osc24M",
+		      0x130, BIT(31), 0);
+
+static const char * const csi_sclk_parents[] = { "pll-periph0", "pll-periph1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(csi_sclk_clk, "csi-sclk", csi_sclk_parents,
+				 0x134, 16, 4, 24, 3, BIT(31), 0);
+
+static const char * const csi_mclk_parents[] = { "osc24M", "pll-video1", "pll-periph1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(csi_mclk_clk, "csi-mclk", csi_mclk_parents,
+				 0x134, 0, 5, 8, 3, BIT(15), 0);
+
+static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve",
+			     0x13c, 16, 3, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(ac_dig_clk,	"ac-dig",	"pll-audio",
+		      0x140, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(ac_dig_4x_clk,	"ac-dig-4x",	"pll-audio-4x",
+		      0x140, BIT(30), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(avs_clk,		"avs",		"osc24M",
+		      0x144, BIT(31), 0);
+
+static const char * const hdmi_parents[] = { "pll-video0", "pll-video1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(hdmi_clk, "hdmi", hdmi_parents,
+				 0x150, 0, 4, 24, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(hdmi_ddc_clk,	"hdmi-ddc",	"osc24M",
+		      0x154, BIT(31), 0);
+
+static const char * const mbus_parents[] = { "osc24M", "pll-periph0-2x",
+						 "pll-ddr0", "pll-ddr1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents,
+				 0x15c, 0, 3, 24, 2, BIT(31), CLK_IS_CRITICAL);
+
+static const char * const dsi_dphy_parents[] = { "pll-video0", "pll-periph0" };
+static const u8 dsi_dphy_table[] = { 0, 2, };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(dsi_dphy_clk, "dsi-dphy",
+				       dsi_dphy_parents, dsi_dphy_table,
+				       0x168, 0, 4, 8, 2, BIT(15), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M_WITH_GATE(gpu_clk, "gpu", "pll-gpu",
+			     0x1a0, 0, 3, BIT(31), CLK_SET_RATE_PARENT);
+
+/* Fixed Factor clocks */
+static CLK_FIXED_FACTOR_FW_NAME(osc12M_clk, "osc12M", "hosc", 2, 1, 0);
+
+static const struct clk_hw *clk_parent_pll_audio[] = {
+	&pll_audio_base_clk.common.hw
+};
+
+/* We hardcode the divider to 1 for now */
+static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
+			    clk_parent_pll_audio,
+			    1, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
+			    clk_parent_pll_audio,
+			    2, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
+			    clk_parent_pll_audio,
+			    1, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
+			    clk_parent_pll_audio,
+			    1, 2, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HW(pll_periph0_2x_clk, "pll-periph0-2x",
+			   &pll_periph0_clk.common.hw,
+			   1, 2, 0);
+static CLK_FIXED_FACTOR_HW(pll_periph1_2x_clk, "pll-periph1-2x",
+			   &pll_periph1_clk.common.hw,
+			   1, 2, 0);
+static CLK_FIXED_FACTOR_HW(pll_video0_2x_clk, "pll-video0-2x",
+			   &pll_video0_clk.common.hw,
+			   1, 2, CLK_SET_RATE_PARENT);
+
+static struct ccu_common *sun50i_a64_ccu_clks[] = {
+	&pll_cpux_clk.common,
+	&pll_audio_base_clk.common,
+	&pll_video0_clk.common,
+	&pll_ve_clk.common,
+	&pll_ddr0_clk.common,
+	&pll_periph0_clk.common,
+	&pll_periph1_clk.common,
+	&pll_video1_clk.common,
+	&pll_gpu_clk.common,
+	&pll_mipi_clk.common,
+	&pll_hsic_clk.common,
+	&pll_de_clk.common,
+	&pll_ddr1_clk.common,
+	&cpux_clk.common,
+	&axi_clk.common,
+	&ahb1_clk.common,
+	&apb1_clk.common,
+	&apb2_clk.common,
+	&ahb2_clk.common,
+	&bus_mipi_dsi_clk.common,
+	&bus_ce_clk.common,
+	&bus_dma_clk.common,
+	&bus_mmc0_clk.common,
+	&bus_mmc1_clk.common,
+	&bus_mmc2_clk.common,
+	&bus_nand_clk.common,
+	&bus_dram_clk.common,
+	&bus_emac_clk.common,
+	&bus_ts_clk.common,
+	&bus_hstimer_clk.common,
+	&bus_spi0_clk.common,
+	&bus_spi1_clk.common,
+	&bus_otg_clk.common,
+	&bus_ehci0_clk.common,
+	&bus_ehci1_clk.common,
+	&bus_ohci0_clk.common,
+	&bus_ohci1_clk.common,
+	&bus_ve_clk.common,
+	&bus_tcon0_clk.common,
+	&bus_tcon1_clk.common,
+	&bus_deinterlace_clk.common,
+	&bus_csi_clk.common,
+	&bus_hdmi_clk.common,
+	&bus_de_clk.common,
+	&bus_gpu_clk.common,
+	&bus_msgbox_clk.common,
+	&bus_spinlock_clk.common,
+	&bus_codec_clk.common,
+	&bus_spdif_clk.common,
+	&bus_pio_clk.common,
+	&bus_ths_clk.common,
+	&bus_i2s0_clk.common,
+	&bus_i2s1_clk.common,
+	&bus_i2s2_clk.common,
+	&bus_i2c0_clk.common,
+	&bus_i2c1_clk.common,
+	&bus_i2c2_clk.common,
+	&bus_scr_clk.common,
+	&bus_uart0_clk.common,
+	&bus_uart1_clk.common,
+	&bus_uart2_clk.common,
+	&bus_uart3_clk.common,
+	&bus_uart4_clk.common,
+	&bus_dbg_clk.common,
+	&ths_clk.common,
+	&nand_clk.common,
+	&mmc0_clk.common,
+	&mmc1_clk.common,
+	&mmc2_clk.common,
+	&ts_clk.common,
+	&ce_clk.common,
+	&spi0_clk.common,
+	&spi1_clk.common,
+	&i2s0_clk.common,
+	&i2s1_clk.common,
+	&i2s2_clk.common,
+	&spdif_clk.common,
+	&usb_phy0_clk.common,
+	&usb_phy1_clk.common,
+	&usb_hsic_clk.common,
+	&usb_hsic_12m_clk.common,
+	&usb_ohci0_clk.common,
+	&usb_ohci1_clk.common,
+	&dram_clk.common,
+	&dram_ve_clk.common,
+	&dram_csi_clk.common,
+	&dram_deinterlace_clk.common,
+	&dram_ts_clk.common,
+	&de_clk.common,
+	&tcon0_clk.common,
+	&tcon1_clk.common,
+	&deinterlace_clk.common,
+	&csi_misc_clk.common,
+	&csi_sclk_clk.common,
+	&csi_mclk_clk.common,
+	&ve_clk.common,
+	&ac_dig_clk.common,
+	&ac_dig_4x_clk.common,
+	&avs_clk.common,
+	&hdmi_clk.common,
+	&hdmi_ddc_clk.common,
+	&mbus_clk.common,
+	&dsi_dphy_clk.common,
+	&gpu_clk.common,
+};
+
+static struct clk_hw_onecell_data sun50i_a64_hw_clks = {
+	.hws	= {
+		[CLK_OSC_12M]		= &osc12M_clk.hw,
+		[CLK_PLL_CPUX]		= &pll_cpux_clk.common.hw,
+		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
+		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
+		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
+		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
+		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
+		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
+		[CLK_PLL_VIDEO0_2X]	= &pll_video0_2x_clk.hw,
+		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
+		[CLK_PLL_DDR0]		= &pll_ddr0_clk.common.hw,
+		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
+		[CLK_PLL_PERIPH0_2X]	= &pll_periph0_2x_clk.hw,
+		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
+		[CLK_PLL_PERIPH1_2X]	= &pll_periph1_2x_clk.hw,
+		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
+		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
+		[CLK_PLL_MIPI]  	= &pll_mipi_clk.common.hw,
+		[CLK_PLL_HSIC]		= &pll_hsic_clk.common.hw,
+		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
+		[CLK_PLL_DDR1]		= &pll_ddr1_clk.common.hw,
+		[CLK_CPUX]		= &cpux_clk.common.hw,
+		[CLK_AXI]		= &axi_clk.common.hw,
+		[CLK_AHB1]		= &ahb1_clk.common.hw,
+		[CLK_APB1]		= &apb1_clk.common.hw,
+		[CLK_APB2]		= &apb2_clk.common.hw,
+		[CLK_AHB2]		= &ahb2_clk.common.hw,
+		[CLK_BUS_MIPI_DSI]	= &bus_mipi_dsi_clk.common.hw,
+		[CLK_BUS_CE]		= &bus_ce_clk.common.hw,
+		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
+		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
+		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
+		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
+		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
+		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
+		[CLK_BUS_EMAC]		= &bus_emac_clk.common.hw,
+		[CLK_BUS_TS]		= &bus_ts_clk.common.hw,
+		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
+		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
+		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
+		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
+		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
+		[CLK_BUS_EHCI1]		= &bus_ehci1_clk.common.hw,
+		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
+		[CLK_BUS_OHCI1]		= &bus_ohci1_clk.common.hw,
+		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
+		[CLK_BUS_TCON0]		= &bus_tcon0_clk.common.hw,
+		[CLK_BUS_TCON1]		= &bus_tcon1_clk.common.hw,
+		[CLK_BUS_DEINTERLACE]	= &bus_deinterlace_clk.common.hw,
+		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
+		[CLK_BUS_HDMI]		= &bus_hdmi_clk.common.hw,
+		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
+		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
+		[CLK_BUS_MSGBOX]	= &bus_msgbox_clk.common.hw,
+		[CLK_BUS_SPINLOCK]	= &bus_spinlock_clk.common.hw,
+		[CLK_BUS_CODEC]		= &bus_codec_clk.common.hw,
+		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
+		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
+		[CLK_BUS_THS]		= &bus_ths_clk.common.hw,
+		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
+		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
+		[CLK_BUS_I2S2]		= &bus_i2s2_clk.common.hw,
+		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
+		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
+		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
+		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
+		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
+		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
+		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
+		[CLK_BUS_UART4]		= &bus_uart4_clk.common.hw,
+		[CLK_BUS_SCR]		= &bus_scr_clk.common.hw,
+		[CLK_BUS_DBG]		= &bus_dbg_clk.common.hw,
+		[CLK_THS]		= &ths_clk.common.hw,
+		[CLK_NAND]		= &nand_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC2]		= &mmc2_clk.common.hw,
+		[CLK_TS]		= &ts_clk.common.hw,
+		[CLK_CE]		= &ce_clk.common.hw,
+		[CLK_SPI0]		= &spi0_clk.common.hw,
+		[CLK_SPI1]		= &spi1_clk.common.hw,
+		[CLK_I2S0]		= &i2s0_clk.common.hw,
+		[CLK_I2S1]		= &i2s1_clk.common.hw,
+		[CLK_I2S2]		= &i2s2_clk.common.hw,
+		[CLK_SPDIF]		= &spdif_clk.common.hw,
+		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
+		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
+		[CLK_USB_HSIC]		= &usb_hsic_clk.common.hw,
+		[CLK_USB_HSIC_12M]	= &usb_hsic_12m_clk.common.hw,
+		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
+		[CLK_USB_OHCI1]		= &usb_ohci1_clk.common.hw,
+		[CLK_DRAM]		= &dram_clk.common.hw,
+		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
+		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
+		[CLK_DRAM_DEINTERLACE]	= &dram_deinterlace_clk.common.hw,
+		[CLK_DRAM_TS]		= &dram_ts_clk.common.hw,
+		[CLK_DE]		= &de_clk.common.hw,
+		[CLK_TCON0]		= &tcon0_clk.common.hw,
+		[CLK_TCON1]		= &tcon1_clk.common.hw,
+		[CLK_DEINTERLACE]	= &deinterlace_clk.common.hw,
+		[CLK_CSI_MISC]		= &csi_misc_clk.common.hw,
+		[CLK_CSI_SCLK]		= &csi_sclk_clk.common.hw,
+		[CLK_CSI_MCLK]		= &csi_mclk_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_AC_DIG]		= &ac_dig_clk.common.hw,
+		[CLK_AC_DIG_4X]		= &ac_dig_4x_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+		[CLK_HDMI]		= &hdmi_clk.common.hw,
+		[CLK_HDMI_DDC]		= &hdmi_ddc_clk.common.hw,
+		[CLK_MBUS]		= &mbus_clk.common.hw,
+		[CLK_DSI_DPHY]		= &dsi_dphy_clk.common.hw,
+		[CLK_GPU]		= &gpu_clk.common.hw,
+	},
+	.num	= CLK_NUMBER,
+};
+
+static struct ccu_reset_map sun50i_a64_ccu_resets[] = {
+	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
+	[RST_USB_PHY1]		=  { 0x0cc, BIT(1) },
+	[RST_USB_HSIC]		=  { 0x0cc, BIT(2) },
+
+	[RST_DRAM]		=  { 0x0f4, BIT(31) },
+	[RST_MBUS]		=  { 0x0fc, BIT(31) },
+
+	[RST_BUS_MIPI_DSI]	=  { 0x2c0, BIT(1) },
+	[RST_BUS_CE]		=  { 0x2c0, BIT(5) },
+	[RST_BUS_DMA]		=  { 0x2c0, BIT(6) },
+	[RST_BUS_MMC0]		=  { 0x2c0, BIT(8) },
+	[RST_BUS_MMC1]		=  { 0x2c0, BIT(9) },
+	[RST_BUS_MMC2]		=  { 0x2c0, BIT(10) },
+	[RST_BUS_NAND]		=  { 0x2c0, BIT(13) },
+	[RST_BUS_DRAM]		=  { 0x2c0, BIT(14) },
+	[RST_BUS_EMAC]		=  { 0x2c0, BIT(17) },
+	[RST_BUS_TS]		=  { 0x2c0, BIT(18) },
+	[RST_BUS_HSTIMER]	=  { 0x2c0, BIT(19) },
+	[RST_BUS_SPI0]		=  { 0x2c0, BIT(20) },
+	[RST_BUS_SPI1]		=  { 0x2c0, BIT(21) },
+	[RST_BUS_OTG]		=  { 0x2c0, BIT(23) },
+	[RST_BUS_EHCI0]		=  { 0x2c0, BIT(24) },
+	[RST_BUS_EHCI1]		=  { 0x2c0, BIT(25) },
+	[RST_BUS_OHCI0]		=  { 0x2c0, BIT(28) },
+	[RST_BUS_OHCI1]		=  { 0x2c0, BIT(29) },
+
+	[RST_BUS_VE]		=  { 0x2c4, BIT(0) },
+	[RST_BUS_TCON0]		=  { 0x2c4, BIT(3) },
+	[RST_BUS_TCON1]		=  { 0x2c4, BIT(4) },
+	[RST_BUS_DEINTERLACE]	=  { 0x2c4, BIT(5) },
+	[RST_BUS_CSI]		=  { 0x2c4, BIT(8) },
+	[RST_BUS_HDMI0]		=  { 0x2c4, BIT(10) },
+	[RST_BUS_HDMI1]		=  { 0x2c4, BIT(11) },
+	[RST_BUS_DE]		=  { 0x2c4, BIT(12) },
+	[RST_BUS_GPU]		=  { 0x2c4, BIT(20) },
+	[RST_BUS_MSGBOX]	=  { 0x2c4, BIT(21) },
+	[RST_BUS_SPINLOCK]	=  { 0x2c4, BIT(22) },
+	[RST_BUS_DBG]		=  { 0x2c4, BIT(31) },
+
+	[RST_BUS_LVDS]		=  { 0x2c8, BIT(0) },
+
+	[RST_BUS_CODEC]		=  { 0x2d0, BIT(0) },
+	[RST_BUS_SPDIF]		=  { 0x2d0, BIT(1) },
+	[RST_BUS_THS]		=  { 0x2d0, BIT(8) },
+	[RST_BUS_I2S0]		=  { 0x2d0, BIT(12) },
+	[RST_BUS_I2S1]		=  { 0x2d0, BIT(13) },
+	[RST_BUS_I2S2]		=  { 0x2d0, BIT(14) },
+
+	[RST_BUS_I2C0]		=  { 0x2d8, BIT(0) },
+	[RST_BUS_I2C1]		=  { 0x2d8, BIT(1) },
+	[RST_BUS_I2C2]		=  { 0x2d8, BIT(2) },
+	[RST_BUS_SCR]		=  { 0x2d8, BIT(5) },
+	[RST_BUS_UART0]		=  { 0x2d8, BIT(16) },
+	[RST_BUS_UART1]		=  { 0x2d8, BIT(17) },
+	[RST_BUS_UART2]		=  { 0x2d8, BIT(18) },
+	[RST_BUS_UART3]		=  { 0x2d8, BIT(19) },
+	[RST_BUS_UART4]		=  { 0x2d8, BIT(20) },
+};
+
+static const struct sunxi_ccu_desc sun50i_a64_ccu_desc = {
+	.ccu_clks	= sun50i_a64_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun50i_a64_ccu_clks),
+
+	.hw_clks	= &sun50i_a64_hw_clks,
+
+	.resets		= sun50i_a64_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun50i_a64_ccu_resets),
+};
+
+static struct ccu_pll_nb sun50i_a64_pll_cpu_nb = {
+	.common	= &pll_cpux_clk.common,
+	/* copy from pll_cpux_clk */
+	.enable	= BIT(31),
+	.lock	= BIT(28),
+};
+
+static struct ccu_mux_nb sun50i_a64_cpu_nb = {
+	.common		= &cpux_clk.common,
+	.cm		= &cpux_clk.mux,
+	.delay_us	= 1, /* > 8 clock cycles at 24 MHz */
+	.bypass_index	= 1, /* index of 24 MHz oscillator */
+};
+
+static int sun50i_a64_ccu_probe(struct platform_device *pdev)
+{
+	struct resource *res;
+	void __iomem *reg;
+	u32 val;
+	int ret;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	reg = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(reg))
+		return PTR_ERR(reg);
+
+	/* Force the PLL-Audio-1x divider to 1 */
+	val = readl(reg + SUN50I_A64_PLL_AUDIO_REG);
+	val &= ~GENMASK(19, 16);
+	writel(val | (0 << 16), reg + SUN50I_A64_PLL_AUDIO_REG);
+
+	writel(0x515, reg + SUN50I_A64_PLL_MIPI_REG);
+
+	ret = devm_sunxi_ccu_probe(&pdev->dev, reg, &sun50i_a64_ccu_desc);
+	if (ret)
+		return ret;
+
+	/* Gate then ungate PLL CPU after any rate changes */
+	ccu_pll_notifier_register(&sun50i_a64_pll_cpu_nb);
+
+	/* Reparent CPU during PLL CPU rate changes */
+	ccu_mux_notifier_register(pll_cpux_clk.common.hw.clk,
+				  &sun50i_a64_cpu_nb);
+
+	return 0;
+}
+
+static const struct of_device_id sun50i_a64_ccu_ids[] = {
+	{ .compatible = "allwinner,sun50i-a64-ccu" },
+	{ }
+};
+
+static struct platform_driver sun50i_a64_ccu_driver = {
+	.probe	= sun50i_a64_ccu_probe,
+	.driver	= {
+		.name	= "sun50i-a64-ccu",
+		.suppress_bind_attrs = true,
+		.of_match_table	= sun50i_a64_ccu_ids,
+	},
+};
+builtin_platform_driver(sun50i_a64_ccu_driver);
diff --git a/drivers/clk/sunxi-ng/sun50i-a64-ccu.h b/drivers/clk/sunxi-ng/sun50i-a64-ccu.h
new file mode 100644
index 000000000000..54d1f96f4b68
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun50i-a64-ccu.h
@@ -0,0 +1,62 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright 2016 Maxime Ripard
+ *
+ * Maxime Ripard <maxime.ripard@free-electrons.com>
+ */
+
+#ifndef _CCU_SUN50I_A64_H_
+#define _CCU_SUN50I_A64_H_
+
+#include <dt-bindings/clock/sun50i-a64-ccu.h>
+#include <dt-bindings/reset/sun50i-a64-ccu.h>
+
+#define CLK_OSC_12M			0
+#define CLK_PLL_CPUX			1
+#define CLK_PLL_AUDIO_BASE		2
+#define CLK_PLL_AUDIO			3
+#define CLK_PLL_AUDIO_2X		4
+#define CLK_PLL_AUDIO_4X		5
+#define CLK_PLL_AUDIO_8X		6
+
+/* PLL_VIDEO0 exported for HDMI PHY */
+
+#define CLK_PLL_VIDEO0_2X		8
+#define CLK_PLL_VE			9
+#define CLK_PLL_DDR0			10
+
+/* PLL_PERIPH0 exported for PRCM */
+
+#define CLK_PLL_PERIPH0_2X		12
+#define CLK_PLL_PERIPH1			13
+#define CLK_PLL_PERIPH1_2X		14
+#define CLK_PLL_VIDEO1			15
+#define CLK_PLL_GPU			16
+#define CLK_PLL_MIPI			17
+#define CLK_PLL_HSIC			18
+#define CLK_PLL_DE			19
+#define CLK_PLL_DDR1			20
+#define CLK_AXI				22
+#define CLK_APB				23
+#define CLK_AHB1			24
+#define CLK_APB1			25
+#define CLK_APB2			26
+#define CLK_AHB2			27
+
+/* All the bus gates are exported */
+
+/* The first bunch of module clocks are exported */
+
+#define CLK_USB_OHCI0_12M		90
+
+#define CLK_USB_OHCI1_12M		92
+
+#define CLK_DRAM			94
+
+/* All the DRAM gates are exported */
+
+/* And the DSI and GPU module clock is exported */
+
+#define CLK_NUMBER			(CLK_GPU + 1)
+
+#endif /* _CCU_SUN50I_A64_H_ */
diff --git a/drivers/clk/sunxi-ng/sun50i-h6-ccu.c b/drivers/clk/sunxi-ng/sun50i-h6-ccu.c
new file mode 100644
index 000000000000..8876358710c5
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun50i-h6-ccu.c
@@ -0,0 +1,1259 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2017 Icenowy Zheng <icenowy@aosc.io>
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/io.h>
+#include <linux/of_address.h>
+#include <linux/platform_device.h>
+
+#include "ccu_common.h"
+#include "ccu_reset.h"
+
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_mp.h"
+#include "ccu_mult.h"
+#include "ccu_nk.h"
+#include "ccu_nkm.h"
+#include "ccu_nkmp.h"
+#include "ccu_nm.h"
+
+#include "sun50i-h6-ccu.h"
+
+/*
+ * The CPU PLL is actually NP clock, with P being /1, /2 or /4. However
+ * P should only be used for output frequencies lower than 288 MHz.
+ *
+ * For now we can just model it as a multiplier clock, and force P to /1.
+ *
+ * The M factor is present in the register's description, but not in the
+ * frequency formula, and it's documented as "M is only used for backdoor
+ * testing", so it's not modelled and then force to 0.
+ */
+#define SUN50I_H6_PLL_CPUX_REG		0x000
+static struct ccu_mult pll_cpux_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.mult		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.common		= {
+		.reg		= 0x000,
+		.hw.init	= CLK_HW_INIT("pll-cpux", "osc24M",
+					      &ccu_mult_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+/* Some PLLs are input * N / div1 / P. Model them as NKMP with no K */
+#define SUN50I_H6_PLL_DDR0_REG		0x010
+static struct ccu_nkmp pll_ddr0_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
+	.common		= {
+		.reg		= 0x010,
+		.hw.init	= CLK_HW_INIT("pll-ddr0", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_H6_PLL_PERIPH0_REG	0x020
+static struct ccu_nkmp pll_periph0_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
+	.fixed_post_div	= 4,
+	.common		= {
+		.reg		= 0x020,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-periph0", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_H6_PLL_PERIPH1_REG	0x028
+static struct ccu_nkmp pll_periph1_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
+	.fixed_post_div	= 4,
+	.common		= {
+		.reg		= 0x028,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-periph1", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_H6_PLL_GPU_REG		0x030
+static struct ccu_nkmp pll_gpu_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
+	.common		= {
+		.reg		= 0x030,
+		.hw.init	= CLK_HW_INIT("pll-gpu", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+/*
+ * For Video PLLs, the output divider is described as "used for testing"
+ * in the user manual. So it's not modelled and forced to 0.
+ */
+#define SUN50I_H6_PLL_VIDEO0_REG	0x040
+static struct ccu_nm pll_video0_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.fixed_post_div	= 4,
+	.min_rate	= 288000000,
+	.max_rate	= 2400000000UL,
+	.common		= {
+		.reg		= 0x040,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-video0", "osc24M",
+					      &ccu_nm_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_H6_PLL_VIDEO1_REG	0x048
+static struct ccu_nm pll_video1_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.fixed_post_div	= 4,
+	.min_rate	= 288000000,
+	.max_rate	= 2400000000UL,
+	.common		= {
+		.reg		= 0x048,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-video1", "osc24M",
+					      &ccu_nm_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_H6_PLL_VE_REG		0x058
+static struct ccu_nkmp pll_ve_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
+	.common		= {
+		.reg		= 0x058,
+		.hw.init	= CLK_HW_INIT("pll-ve", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_H6_PLL_DE_REG		0x060
+static struct ccu_nkmp pll_de_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
+	.common		= {
+		.reg		= 0x060,
+		.hw.init	= CLK_HW_INIT("pll-de", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_H6_PLL_HSIC_REG		0x070
+static struct ccu_nkmp pll_hsic_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
+	.common		= {
+		.reg		= 0x070,
+		.hw.init	= CLK_HW_INIT("pll-hsic", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+/*
+ * The Audio PLL is supposed to have 3 outputs: 2 fixed factors from
+ * the base (2x and 4x), and one variable divider (the one true pll audio).
+ *
+ * We don't have any need for the variable divider for now, so we just
+ * hardcode it to match with the clock names.
+ */
+#define SUN50I_H6_PLL_AUDIO_REG		0x078
+
+static struct ccu_sdm_setting pll_audio_sdm_table[] = {
+	{ .rate = 541900800, .pattern = 0xc001288d, .m = 1, .n = 22 },
+	{ .rate = 589824000, .pattern = 0xc00126e9, .m = 1, .n = 24 },
+};
+
+static struct ccu_nm pll_audio_base_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.sdm		= _SUNXI_CCU_SDM(pll_audio_sdm_table,
+					 BIT(24), 0x178, BIT(31)),
+	.common		= {
+		.features	= CCU_FEATURE_SIGMA_DELTA_MOD,
+		.reg		= 0x078,
+		.hw.init	= CLK_HW_INIT("pll-audio-base", "osc24M",
+					      &ccu_nm_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static const char * const cpux_parents[] = { "osc24M", "osc32k",
+					     "iosc", "pll-cpux" };
+static SUNXI_CCU_MUX(cpux_clk, "cpux", cpux_parents,
+		     0x500, 24, 2, CLK_SET_RATE_PARENT | CLK_IS_CRITICAL);
+static SUNXI_CCU_M(axi_clk, "axi", "cpux", 0x500, 0, 2, 0);
+static SUNXI_CCU_M(cpux_apb_clk, "cpux-apb", "cpux", 0x500, 8, 2, 0);
+
+static const char * const psi_ahb1_ahb2_parents[] = { "osc24M", "osc32k",
+						      "iosc", "pll-periph0" };
+static SUNXI_CCU_MP_WITH_MUX(psi_ahb1_ahb2_clk, "psi-ahb1-ahb2",
+			     psi_ahb1_ahb2_parents,
+			     0x510,
+			     0, 2,	/* M */
+			     8, 2,	/* P */
+			     24, 2,	/* mux */
+			     0);
+
+static const char * const ahb3_apb1_apb2_parents[] = { "osc24M", "osc32k",
+						       "psi-ahb1-ahb2",
+						       "pll-periph0" };
+static SUNXI_CCU_MP_WITH_MUX(ahb3_clk, "ahb3", ahb3_apb1_apb2_parents, 0x51c,
+			     0, 2,	/* M */
+			     8, 2,	/* P */
+			     24, 2,	/* mux */
+			     0);
+
+static SUNXI_CCU_MP_WITH_MUX(apb1_clk, "apb1", ahb3_apb1_apb2_parents, 0x520,
+			     0, 2,	/* M */
+			     8, 2,	/* P */
+			     24, 2,	/* mux */
+			     0);
+
+static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", ahb3_apb1_apb2_parents, 0x524,
+			     0, 2,	/* M */
+			     8, 2,	/* P */
+			     24, 2,	/* mux */
+			     0);
+
+static const char * const mbus_parents[] = { "osc24M", "pll-periph0-2x",
+					     "pll-ddr0", "pll-periph0-4x" };
+static SUNXI_CCU_M_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents, 0x540,
+				       0, 3,	/* M */
+				       24, 2,	/* mux */
+				       BIT(31),	/* gate */
+				       CLK_IS_CRITICAL);
+
+static const char * const de_parents[] = { "pll-de", "pll-periph0-2x" };
+static SUNXI_CCU_M_WITH_MUX_GATE(de_clk, "de", de_parents, 0x600,
+				       0, 4,	/* M */
+				       24, 1,	/* mux */
+				       BIT(31),	/* gate */
+				       CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(bus_de_clk, "bus-de", "psi-ahb1-ahb2",
+		      0x60c, BIT(0), 0);
+
+static const char * const deinterlace_parents[] = { "pll-periph0",
+						    "pll-periph1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(deinterlace_clk, "deinterlace",
+				       deinterlace_parents,
+				       0x620,
+				       0, 4,	/* M */
+				       24, 1,	/* mux */
+				       BIT(31),	/* gate */
+				       0);
+
+static SUNXI_CCU_GATE(bus_deinterlace_clk, "bus-deinterlace", "psi-ahb1-ahb2",
+		      0x62c, BIT(0), 0);
+
+static const char * const gpu_parents[] = { "pll-gpu" };
+static SUNXI_CCU_M_WITH_MUX_GATE(gpu_clk, "gpu", gpu_parents, 0x670,
+				       0, 3,	/* M */
+				       24, 1,	/* mux */
+				       BIT(31),	/* gate */
+				       CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(bus_gpu_clk, "bus-gpu", "psi-ahb1-ahb2",
+		      0x67c, BIT(0), 0);
+
+/* Also applies to EMCE */
+static const char * const ce_parents[] = { "osc24M", "pll-periph0-2x" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(ce_clk, "ce", ce_parents, 0x680,
+					0, 4,	/* M */
+					8, 2,	/* N */
+					24, 1,	/* mux */
+					BIT(31),/* gate */
+					0);
+
+static SUNXI_CCU_GATE(bus_ce_clk, "bus-ce", "psi-ahb1-ahb2",
+		      0x68c, BIT(0), 0);
+
+static const char * const ve_parents[] = { "pll-ve" };
+static SUNXI_CCU_M_WITH_MUX_GATE(ve_clk, "ve", ve_parents, 0x690,
+				       0, 3,	/* M */
+				       24, 1,	/* mux */
+				       BIT(31),	/* gate */
+				       CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(bus_ve_clk, "bus-ve", "psi-ahb1-ahb2",
+		      0x69c, BIT(0), 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(emce_clk, "emce", ce_parents, 0x6b0,
+					0, 4,	/* M */
+					8, 2,	/* N */
+					24, 1,	/* mux */
+					BIT(31),/* gate */
+					0);
+
+static SUNXI_CCU_GATE(bus_emce_clk, "bus-emce", "psi-ahb1-ahb2",
+		      0x6bc, BIT(0), 0);
+
+static const char * const vp9_parents[] = { "pll-ve", "pll-periph0-2x" };
+static SUNXI_CCU_M_WITH_MUX_GATE(vp9_clk, "vp9", vp9_parents, 0x6c0,
+				       0, 3,	/* M */
+				       24, 1,	/* mux */
+				       BIT(31),	/* gate */
+				       0);
+
+static SUNXI_CCU_GATE(bus_vp9_clk, "bus-vp9", "psi-ahb1-ahb2",
+		      0x6cc, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_dma_clk, "bus-dma", "psi-ahb1-ahb2",
+		      0x70c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_msgbox_clk, "bus-msgbox", "psi-ahb1-ahb2",
+		      0x71c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_spinlock_clk, "bus-spinlock", "psi-ahb1-ahb2",
+		      0x72c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_hstimer_clk, "bus-hstimer", "psi-ahb1-ahb2",
+		      0x73c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(avs_clk, "avs", "osc24M", 0x740, BIT(31), 0);
+
+static SUNXI_CCU_GATE(bus_dbg_clk, "bus-dbg", "psi-ahb1-ahb2",
+		      0x78c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_psi_clk, "bus-psi", "psi-ahb1-ahb2",
+		      0x79c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_pwm_clk, "bus-pwm", "apb1", 0x7ac, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_iommu_clk, "bus-iommu", "apb1", 0x7bc, BIT(0), 0);
+
+static const char * const dram_parents[] = { "pll-ddr0" };
+static struct ccu_div dram_clk = {
+	.div		= _SUNXI_CCU_DIV(0, 2),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common	= {
+		.reg		= 0x800,
+		.hw.init	= CLK_HW_INIT_PARENTS("dram",
+						      dram_parents,
+						      &ccu_div_ops,
+						      CLK_IS_CRITICAL),
+	},
+};
+
+static SUNXI_CCU_GATE(mbus_dma_clk, "mbus-dma", "mbus",
+		      0x804, BIT(0), 0);
+static SUNXI_CCU_GATE(mbus_ve_clk, "mbus-ve", "mbus",
+		      0x804, BIT(1), 0);
+static SUNXI_CCU_GATE(mbus_ce_clk, "mbus-ce", "mbus",
+		      0x804, BIT(2), 0);
+static SUNXI_CCU_GATE(mbus_ts_clk, "mbus-ts", "mbus",
+		      0x804, BIT(3), 0);
+static SUNXI_CCU_GATE(mbus_nand_clk, "mbus-nand", "mbus",
+		      0x804, BIT(5), 0);
+static SUNXI_CCU_GATE(mbus_csi_clk, "mbus-csi", "mbus",
+		      0x804, BIT(8), 0);
+static SUNXI_CCU_GATE(mbus_deinterlace_clk, "mbus-deinterlace", "mbus",
+		      0x804, BIT(11), 0);
+
+static SUNXI_CCU_GATE(bus_dram_clk, "bus-dram", "psi-ahb1-ahb2",
+		      0x80c, BIT(0), CLK_IS_CRITICAL);
+
+static const char * const nand_spi_parents[] = { "osc24M", "pll-periph0",
+					     "pll-periph1", "pll-periph0-2x",
+					     "pll-periph1-2x" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand0_clk, "nand0", nand_spi_parents, 0x810,
+					0, 4,	/* M */
+					8, 2,	/* N */
+					24, 3,	/* mux */
+					BIT(31),/* gate */
+					0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand1_clk, "nand1", nand_spi_parents, 0x814,
+					0, 4,	/* M */
+					8, 2,	/* N */
+					24, 3,	/* mux */
+					BIT(31),/* gate */
+					0);
+
+static SUNXI_CCU_GATE(bus_nand_clk, "bus-nand", "ahb3", 0x82c, BIT(0), 0);
+
+static const char * const mmc_parents[] = { "osc24M", "pll-periph0-2x",
+					    "pll-periph1-2x" };
+static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc0_clk, "mmc0", mmc_parents, 0x830,
+					  0, 4,		/* M */
+					  8, 2,		/* N */
+					  24, 2,	/* mux */
+					  BIT(31),	/* gate */
+					  2,		/* post-div */
+					  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc1_clk, "mmc1", mmc_parents, 0x834,
+					  0, 4,		/* M */
+					  8, 2,		/* N */
+					  24, 2,	/* mux */
+					  BIT(31),	/* gate */
+					  2,		/* post-div */
+					  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc2_clk, "mmc2", mmc_parents, 0x838,
+					  0, 4,		/* M */
+					  8, 2,		/* N */
+					  24, 2,	/* mux */
+					  BIT(31),	/* gate */
+					  2,		/* post-div */
+					  0);
+
+static SUNXI_CCU_GATE(bus_mmc0_clk, "bus-mmc0", "ahb3", 0x84c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_mmc1_clk, "bus-mmc1", "ahb3", 0x84c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_mmc2_clk, "bus-mmc2", "ahb3", 0x84c, BIT(2), 0);
+
+static SUNXI_CCU_GATE(bus_uart0_clk, "bus-uart0", "apb2", 0x90c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_uart1_clk, "bus-uart1", "apb2", 0x90c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_uart2_clk, "bus-uart2", "apb2", 0x90c, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_uart3_clk, "bus-uart3", "apb2", 0x90c, BIT(3), 0);
+
+static SUNXI_CCU_GATE(bus_i2c0_clk, "bus-i2c0", "apb2", 0x91c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_i2c1_clk, "bus-i2c1", "apb2", 0x91c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_i2c2_clk, "bus-i2c2", "apb2", 0x91c, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_i2c3_clk, "bus-i2c3", "apb2", 0x91c, BIT(3), 0);
+
+static SUNXI_CCU_GATE(bus_scr0_clk, "bus-scr0", "apb2", 0x93c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_scr1_clk, "bus-scr1", "apb2", 0x93c, BIT(1), 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", nand_spi_parents, 0x940,
+					0, 4,	/* M */
+					8, 2,	/* N */
+					24, 3,	/* mux */
+					BIT(31),/* gate */
+					0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", nand_spi_parents, 0x944,
+					0, 4,	/* M */
+					8, 2,	/* N */
+					24, 3,	/* mux */
+					BIT(31),/* gate */
+					0);
+
+static SUNXI_CCU_GATE(bus_spi0_clk, "bus-spi0", "ahb3", 0x96c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_spi1_clk, "bus-spi1", "ahb3", 0x96c, BIT(1), 0);
+
+static SUNXI_CCU_GATE(bus_emac_clk, "bus-emac", "ahb3", 0x97c, BIT(0), 0);
+
+static const char * const ts_parents[] = { "osc24M", "pll-periph0" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(ts_clk, "ts", ts_parents, 0x9b0,
+					0, 4,	/* M */
+					8, 2,	/* N */
+					24, 1,	/* mux */
+					BIT(31),/* gate */
+					0);
+
+static SUNXI_CCU_GATE(bus_ts_clk, "bus-ts", "ahb3", 0x9bc, BIT(0), 0);
+
+static const char * const ir_tx_parents[] = { "osc32k", "osc24M" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(ir_tx_clk, "ir-tx", ir_tx_parents, 0x9c0,
+					0, 4,	/* M */
+					8, 2,	/* N */
+					24, 1,	/* mux */
+					BIT(31),/* gate */
+					0);
+
+static SUNXI_CCU_GATE(bus_ir_tx_clk, "bus-ir-tx", "apb1", 0x9cc, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_ths_clk, "bus-ths", "apb1", 0x9fc, BIT(0), 0);
+
+static const char * const audio_parents[] = { "pll-audio", "pll-audio-2x", "pll-audio-4x" };
+static struct ccu_div i2s3_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0xa0c,
+		.hw.init	= CLK_HW_INIT_PARENTS("i2s3",
+						      audio_parents,
+						      &ccu_div_ops,
+						      CLK_SET_RATE_PARENT),
+	},
+};
+
+static struct ccu_div i2s0_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0xa10,
+		.hw.init	= CLK_HW_INIT_PARENTS("i2s0",
+						      audio_parents,
+						      &ccu_div_ops,
+						      CLK_SET_RATE_PARENT),
+	},
+};
+
+static struct ccu_div i2s1_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0xa14,
+		.hw.init	= CLK_HW_INIT_PARENTS("i2s1",
+						      audio_parents,
+						      &ccu_div_ops,
+						      CLK_SET_RATE_PARENT),
+	},
+};
+
+static struct ccu_div i2s2_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0xa18,
+		.hw.init	= CLK_HW_INIT_PARENTS("i2s2",
+						      audio_parents,
+						      &ccu_div_ops,
+						      CLK_SET_RATE_PARENT),
+	},
+};
+
+static SUNXI_CCU_GATE(bus_i2s0_clk, "bus-i2s0", "apb1", 0xa1c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_i2s1_clk, "bus-i2s1", "apb1", 0xa1c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_i2s2_clk, "bus-i2s2", "apb1", 0xa1c, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_i2s3_clk, "bus-i2s3", "apb1", 0xa1c, BIT(3), 0);
+
+static struct ccu_div spdif_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0xa20,
+		.hw.init	= CLK_HW_INIT_PARENTS("spdif",
+						      audio_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static SUNXI_CCU_GATE(bus_spdif_clk, "bus-spdif", "apb1", 0xa2c, BIT(0), 0);
+
+static struct ccu_div dmic_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0xa40,
+		.hw.init	= CLK_HW_INIT_PARENTS("dmic",
+						      audio_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static SUNXI_CCU_GATE(bus_dmic_clk, "bus-dmic", "apb1", 0xa4c, BIT(0), 0);
+
+static struct ccu_div audio_hub_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0xa60,
+		.hw.init	= CLK_HW_INIT_PARENTS("audio-hub",
+						      audio_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static SUNXI_CCU_GATE(bus_audio_hub_clk, "bus-audio-hub", "apb1", 0xa6c, BIT(0), 0);
+
+/*
+ * There are OHCI 12M clock source selection bits for 2 USB 2.0 ports.
+ * We will force them to 0 (12M divided from 48M).
+ */
+#define SUN50I_H6_USB0_CLK_REG		0xa70
+#define SUN50I_H6_USB3_CLK_REG		0xa7c
+
+static SUNXI_CCU_GATE(usb_ohci0_clk, "usb-ohci0", "osc12M", 0xa70, BIT(31), 0);
+static SUNXI_CCU_GATE(usb_phy0_clk, "usb-phy0", "osc24M", 0xa70, BIT(29), 0);
+
+static SUNXI_CCU_GATE(usb_phy1_clk, "usb-phy1", "osc24M", 0xa74, BIT(29), 0);
+
+static SUNXI_CCU_GATE(usb_ohci3_clk, "usb-ohci3", "osc12M", 0xa7c, BIT(31), 0);
+static SUNXI_CCU_GATE(usb_phy3_clk, "usb-phy3", "osc12M", 0xa7c, BIT(29), 0);
+static SUNXI_CCU_GATE(usb_hsic_12m_clk, "usb-hsic-12M", "osc12M", 0xa7c, BIT(27), 0);
+static SUNXI_CCU_GATE(usb_hsic_clk, "usb-hsic", "pll-hsic", 0xa7c, BIT(26), 0);
+
+static SUNXI_CCU_GATE(bus_ohci0_clk, "bus-ohci0", "ahb3", 0xa8c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_ohci3_clk, "bus-ohci3", "ahb3", 0xa8c, BIT(3), 0);
+static SUNXI_CCU_GATE(bus_ehci0_clk, "bus-ehci0", "ahb3", 0xa8c, BIT(4), 0);
+static SUNXI_CCU_GATE(bus_xhci_clk, "bus-xhci", "ahb3", 0xa8c, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_ehci3_clk, "bus-ehci3", "ahb3", 0xa8c, BIT(7), 0);
+static SUNXI_CCU_GATE(bus_otg_clk, "bus-otg", "ahb3", 0xa8c, BIT(8), 0);
+
+static struct clk_fixed_factor pll_periph0_4x_clk;
+static CLK_FIXED_FACTOR_HW(pcie_ref_100m_clk, "pcie-ref-100M",
+			   &pll_periph0_4x_clk.hw, 24, 1, 0);
+static SUNXI_CCU_GATE(pcie_ref_clk, "pcie-ref", "pcie-ref-100M",
+		      0xab0, BIT(31), 0);
+static SUNXI_CCU_GATE(pcie_ref_out_clk, "pcie-ref-out", "pcie-ref",
+		      0xab0, BIT(30), 0);
+
+static SUNXI_CCU_M_WITH_GATE(pcie_maxi_clk, "pcie-maxi",
+			     "pll-periph0", 0xab4,
+			     0, 4,	/* M */
+			     BIT(31),	/* gate */
+			     0);
+
+static SUNXI_CCU_M_WITH_GATE(pcie_aux_clk, "pcie-aux", "osc24M", 0xab8,
+			     0, 5,	/* M */
+			     BIT(31),	/* gate */
+			     0);
+
+static SUNXI_CCU_GATE(bus_pcie_clk, "bus-pcie", "psi-ahb1-ahb2",
+		      0xabc, BIT(0), 0);
+
+static const char * const hdmi_parents[] = { "pll-video0", "pll-video1",
+					      "pll-video1-4x" };
+static SUNXI_CCU_M_WITH_MUX_GATE(hdmi_clk, "hdmi", hdmi_parents, 0xb00,
+				 0, 4,		/* M */
+				 24, 2,		/* mux */
+				 BIT(31),	/* gate */
+				 0);
+
+static SUNXI_CCU_GATE(hdmi_slow_clk, "hdmi-slow", "osc24M", 0xb04, BIT(31), 0);
+
+static const char * const hdmi_cec_parents[] = { "osc32k", "pll-periph0-2x" };
+static const struct ccu_mux_fixed_prediv hdmi_cec_predivs[] = {
+	{ .index = 1, .div = 36621 },
+};
+
+#define SUN50I_H6_HDMI_CEC_CLK_REG		0xb10
+static struct ccu_mux hdmi_cec_clk = {
+	.enable		= BIT(31),
+
+	.mux		= {
+		.shift	= 24,
+		.width	= 2,
+
+		.fixed_predivs	= hdmi_cec_predivs,
+		.n_predivs	= ARRAY_SIZE(hdmi_cec_predivs),
+	},
+
+	.common		= {
+		.reg		= 0xb10,
+		.features	= CCU_FEATURE_FIXED_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("hdmi-cec",
+						      hdmi_cec_parents,
+						      &ccu_mux_ops,
+						      0),
+	},
+};
+
+static SUNXI_CCU_GATE(bus_hdmi_clk, "bus-hdmi", "ahb3", 0xb1c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_tcon_top_clk, "bus-tcon-top", "ahb3",
+		      0xb5c, BIT(0), 0);
+
+static const char * const tcon_lcd0_parents[] = { "pll-video0",
+						  "pll-video0-4x",
+						  "pll-video1" };
+static SUNXI_CCU_MUX_WITH_GATE(tcon_lcd0_clk, "tcon-lcd0",
+			       tcon_lcd0_parents, 0xb60,
+			       24, 3,	/* mux */
+			       BIT(31),	/* gate */
+			       CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(bus_tcon_lcd0_clk, "bus-tcon-lcd0", "ahb3",
+		      0xb7c, BIT(0), 0);
+
+static const char * const tcon_tv0_parents[] = { "pll-video0",
+						 "pll-video0-4x",
+						 "pll-video1",
+						 "pll-video1-4x" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(tcon_tv0_clk, "tcon-tv0",
+				  tcon_tv0_parents, 0xb80,
+				  0, 4,		/* M */
+				  8, 2,		/* P */
+				  24, 3,	/* mux */
+				  BIT(31),	/* gate */
+				  CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(bus_tcon_tv0_clk, "bus-tcon-tv0", "ahb3",
+		      0xb9c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(csi_cci_clk, "csi-cci", "osc24M", 0xc00, BIT(0), 0);
+
+static const char * const csi_top_parents[] = { "pll-video0", "pll-ve",
+					      "pll-periph0" };
+static const u8 csi_top_table[] = { 0, 2, 3 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi_top_clk, "csi-top",
+				       csi_top_parents, csi_top_table, 0xc04,
+				       0, 4,	/* M */
+				       24, 3,	/* mux */
+				       BIT(31),	/* gate */
+				       0);
+
+static const char * const csi_mclk_parents[] = { "osc24M", "pll-video0",
+					       "pll-periph0", "pll-periph1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(csi_mclk_clk, "csi-mclk",
+				 csi_mclk_parents, 0xc08,
+				 0, 5,		/* M */
+				 24, 3,		/* mux */
+				 BIT(31),	/* gate */
+				 0);
+
+static SUNXI_CCU_GATE(bus_csi_clk, "bus-csi", "ahb3", 0xc2c, BIT(0), 0);
+
+static const char * const hdcp_parents[] = { "pll-periph0", "pll-periph1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(hdcp_clk, "hdcp", hdcp_parents, 0xc40,
+				 0, 4,		/* M */
+				 24, 2,		/* mux */
+				 BIT(31),	/* gate */
+				 0);
+
+static SUNXI_CCU_GATE(bus_hdcp_clk, "bus-hdcp", "ahb3", 0xc4c, BIT(0), 0);
+
+/* Fixed factor clocks */
+static CLK_FIXED_FACTOR_FW_NAME(osc12M_clk, "osc12M", "hosc", 2, 1, 0);
+
+static const struct clk_hw *clk_parent_pll_audio[] = {
+	&pll_audio_base_clk.common.hw
+};
+
+/*
+ * The divider of pll-audio is fixed to 24 for now, so 24576000 and 22579200
+ * rates can be set exactly in conjunction with sigma-delta modulation.
+ */
+static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
+			    clk_parent_pll_audio,
+			    24, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
+			    clk_parent_pll_audio,
+			    4, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
+			    clk_parent_pll_audio,
+			    2, 1, CLK_SET_RATE_PARENT);
+
+static const struct clk_hw *pll_periph0_parents[] = {
+	&pll_periph0_clk.common.hw
+};
+static CLK_FIXED_FACTOR_HWS(pll_periph0_4x_clk, "pll-periph0-4x",
+			    pll_periph0_parents,
+			    1, 4, 0);
+static CLK_FIXED_FACTOR_HWS(pll_periph0_2x_clk, "pll-periph0-2x",
+			    pll_periph0_parents,
+			    1, 2, 0);
+
+static const struct clk_hw *pll_periph1_parents[] = {
+	&pll_periph1_clk.common.hw
+};
+static CLK_FIXED_FACTOR_HWS(pll_periph1_4x_clk, "pll-periph1-4x",
+			    pll_periph1_parents,
+			    1, 4, 0);
+static CLK_FIXED_FACTOR_HWS(pll_periph1_2x_clk, "pll-periph1-2x",
+			    pll_periph1_parents,
+			    1, 2, 0);
+
+static CLK_FIXED_FACTOR_HW(pll_video0_4x_clk, "pll-video0-4x",
+			   &pll_video0_clk.common.hw,
+			   1, 4, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HW(pll_video1_4x_clk, "pll-video1-4x",
+			   &pll_video1_clk.common.hw,
+			   1, 4, CLK_SET_RATE_PARENT);
+
+static struct ccu_common *sun50i_h6_ccu_clks[] = {
+	&pll_cpux_clk.common,
+	&pll_ddr0_clk.common,
+	&pll_periph0_clk.common,
+	&pll_periph1_clk.common,
+	&pll_gpu_clk.common,
+	&pll_video0_clk.common,
+	&pll_video1_clk.common,
+	&pll_ve_clk.common,
+	&pll_de_clk.common,
+	&pll_hsic_clk.common,
+	&pll_audio_base_clk.common,
+	&cpux_clk.common,
+	&axi_clk.common,
+	&cpux_apb_clk.common,
+	&psi_ahb1_ahb2_clk.common,
+	&ahb3_clk.common,
+	&apb1_clk.common,
+	&apb2_clk.common,
+	&mbus_clk.common,
+	&de_clk.common,
+	&bus_de_clk.common,
+	&deinterlace_clk.common,
+	&bus_deinterlace_clk.common,
+	&gpu_clk.common,
+	&bus_gpu_clk.common,
+	&ce_clk.common,
+	&bus_ce_clk.common,
+	&ve_clk.common,
+	&bus_ve_clk.common,
+	&emce_clk.common,
+	&bus_emce_clk.common,
+	&vp9_clk.common,
+	&bus_vp9_clk.common,
+	&bus_dma_clk.common,
+	&bus_msgbox_clk.common,
+	&bus_spinlock_clk.common,
+	&bus_hstimer_clk.common,
+	&avs_clk.common,
+	&bus_dbg_clk.common,
+	&bus_psi_clk.common,
+	&bus_pwm_clk.common,
+	&bus_iommu_clk.common,
+	&dram_clk.common,
+	&mbus_dma_clk.common,
+	&mbus_ve_clk.common,
+	&mbus_ce_clk.common,
+	&mbus_ts_clk.common,
+	&mbus_nand_clk.common,
+	&mbus_csi_clk.common,
+	&mbus_deinterlace_clk.common,
+	&bus_dram_clk.common,
+	&nand0_clk.common,
+	&nand1_clk.common,
+	&bus_nand_clk.common,
+	&mmc0_clk.common,
+	&mmc1_clk.common,
+	&mmc2_clk.common,
+	&bus_mmc0_clk.common,
+	&bus_mmc1_clk.common,
+	&bus_mmc2_clk.common,
+	&bus_uart0_clk.common,
+	&bus_uart1_clk.common,
+	&bus_uart2_clk.common,
+	&bus_uart3_clk.common,
+	&bus_i2c0_clk.common,
+	&bus_i2c1_clk.common,
+	&bus_i2c2_clk.common,
+	&bus_i2c3_clk.common,
+	&bus_scr0_clk.common,
+	&bus_scr1_clk.common,
+	&spi0_clk.common,
+	&spi1_clk.common,
+	&bus_spi0_clk.common,
+	&bus_spi1_clk.common,
+	&bus_emac_clk.common,
+	&ts_clk.common,
+	&bus_ts_clk.common,
+	&ir_tx_clk.common,
+	&bus_ir_tx_clk.common,
+	&bus_ths_clk.common,
+	&i2s3_clk.common,
+	&i2s0_clk.common,
+	&i2s1_clk.common,
+	&i2s2_clk.common,
+	&bus_i2s0_clk.common,
+	&bus_i2s1_clk.common,
+	&bus_i2s2_clk.common,
+	&bus_i2s3_clk.common,
+	&spdif_clk.common,
+	&bus_spdif_clk.common,
+	&dmic_clk.common,
+	&bus_dmic_clk.common,
+	&audio_hub_clk.common,
+	&bus_audio_hub_clk.common,
+	&usb_ohci0_clk.common,
+	&usb_phy0_clk.common,
+	&usb_phy1_clk.common,
+	&usb_ohci3_clk.common,
+	&usb_phy3_clk.common,
+	&usb_hsic_12m_clk.common,
+	&usb_hsic_clk.common,
+	&bus_ohci0_clk.common,
+	&bus_ohci3_clk.common,
+	&bus_ehci0_clk.common,
+	&bus_xhci_clk.common,
+	&bus_ehci3_clk.common,
+	&bus_otg_clk.common,
+	&pcie_ref_clk.common,
+	&pcie_ref_out_clk.common,
+	&pcie_maxi_clk.common,
+	&pcie_aux_clk.common,
+	&bus_pcie_clk.common,
+	&hdmi_clk.common,
+	&hdmi_slow_clk.common,
+	&hdmi_cec_clk.common,
+	&bus_hdmi_clk.common,
+	&bus_tcon_top_clk.common,
+	&tcon_lcd0_clk.common,
+	&bus_tcon_lcd0_clk.common,
+	&tcon_tv0_clk.common,
+	&bus_tcon_tv0_clk.common,
+	&csi_cci_clk.common,
+	&csi_top_clk.common,
+	&csi_mclk_clk.common,
+	&bus_csi_clk.common,
+	&hdcp_clk.common,
+	&bus_hdcp_clk.common,
+};
+
+static struct clk_hw_onecell_data sun50i_h6_hw_clks = {
+	.hws	= {
+		[CLK_OSC12M]		= &osc12M_clk.hw,
+		[CLK_PLL_CPUX]		= &pll_cpux_clk.common.hw,
+		[CLK_PLL_DDR0]		= &pll_ddr0_clk.common.hw,
+		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
+		[CLK_PLL_PERIPH0_2X]	= &pll_periph0_2x_clk.hw,
+		[CLK_PLL_PERIPH0_4X]	= &pll_periph0_4x_clk.hw,
+		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
+		[CLK_PLL_PERIPH1_2X]	= &pll_periph1_2x_clk.hw,
+		[CLK_PLL_PERIPH1_4X]	= &pll_periph1_4x_clk.hw,
+		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
+		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
+		[CLK_PLL_VIDEO0_4X]	= &pll_video0_4x_clk.hw,
+		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
+		[CLK_PLL_VIDEO1_4X]	= &pll_video1_4x_clk.hw,
+		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
+		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
+		[CLK_PLL_HSIC]		= &pll_hsic_clk.common.hw,
+		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
+		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
+		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
+		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
+		[CLK_CPUX]		= &cpux_clk.common.hw,
+		[CLK_AXI]		= &axi_clk.common.hw,
+		[CLK_CPUX_APB]		= &cpux_apb_clk.common.hw,
+		[CLK_PSI_AHB1_AHB2]	= &psi_ahb1_ahb2_clk.common.hw,
+		[CLK_AHB3]		= &ahb3_clk.common.hw,
+		[CLK_APB1]		= &apb1_clk.common.hw,
+		[CLK_APB2]		= &apb2_clk.common.hw,
+		[CLK_MBUS]		= &mbus_clk.common.hw,
+		[CLK_DE]		= &de_clk.common.hw,
+		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
+		[CLK_DEINTERLACE]	= &deinterlace_clk.common.hw,
+		[CLK_BUS_DEINTERLACE]	= &bus_deinterlace_clk.common.hw,
+		[CLK_GPU]		= &gpu_clk.common.hw,
+		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
+		[CLK_CE]		= &ce_clk.common.hw,
+		[CLK_BUS_CE]		= &bus_ce_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
+		[CLK_EMCE]		= &emce_clk.common.hw,
+		[CLK_BUS_EMCE]		= &bus_emce_clk.common.hw,
+		[CLK_VP9]		= &vp9_clk.common.hw,
+		[CLK_BUS_VP9]		= &bus_vp9_clk.common.hw,
+		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
+		[CLK_BUS_MSGBOX]	= &bus_msgbox_clk.common.hw,
+		[CLK_BUS_SPINLOCK]	= &bus_spinlock_clk.common.hw,
+		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+		[CLK_BUS_DBG]		= &bus_dbg_clk.common.hw,
+		[CLK_BUS_PSI]		= &bus_psi_clk.common.hw,
+		[CLK_BUS_PWM]		= &bus_pwm_clk.common.hw,
+		[CLK_BUS_IOMMU]		= &bus_iommu_clk.common.hw,
+		[CLK_DRAM]		= &dram_clk.common.hw,
+		[CLK_MBUS_DMA]		= &mbus_dma_clk.common.hw,
+		[CLK_MBUS_VE]		= &mbus_ve_clk.common.hw,
+		[CLK_MBUS_CE]		= &mbus_ce_clk.common.hw,
+		[CLK_MBUS_TS]		= &mbus_ts_clk.common.hw,
+		[CLK_MBUS_NAND]		= &mbus_nand_clk.common.hw,
+		[CLK_MBUS_CSI]		= &mbus_csi_clk.common.hw,
+		[CLK_MBUS_DEINTERLACE]	= &mbus_deinterlace_clk.common.hw,
+		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
+		[CLK_NAND0]		= &nand0_clk.common.hw,
+		[CLK_NAND1]		= &nand1_clk.common.hw,
+		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC2]		= &mmc2_clk.common.hw,
+		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
+		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
+		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
+		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
+		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
+		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
+		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
+		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
+		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
+		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
+		[CLK_BUS_I2C3]		= &bus_i2c3_clk.common.hw,
+		[CLK_BUS_SCR0]		= &bus_scr0_clk.common.hw,
+		[CLK_BUS_SCR1]		= &bus_scr1_clk.common.hw,
+		[CLK_SPI0]		= &spi0_clk.common.hw,
+		[CLK_SPI1]		= &spi1_clk.common.hw,
+		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
+		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
+		[CLK_BUS_EMAC]		= &bus_emac_clk.common.hw,
+		[CLK_TS]		= &ts_clk.common.hw,
+		[CLK_BUS_TS]		= &bus_ts_clk.common.hw,
+		[CLK_IR_TX]		= &ir_tx_clk.common.hw,
+		[CLK_BUS_IR_TX]		= &bus_ir_tx_clk.common.hw,
+		[CLK_BUS_THS]		= &bus_ths_clk.common.hw,
+		[CLK_I2S3]		= &i2s3_clk.common.hw,
+		[CLK_I2S0]		= &i2s0_clk.common.hw,
+		[CLK_I2S1]		= &i2s1_clk.common.hw,
+		[CLK_I2S2]		= &i2s2_clk.common.hw,
+		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
+		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
+		[CLK_BUS_I2S2]		= &bus_i2s2_clk.common.hw,
+		[CLK_BUS_I2S3]		= &bus_i2s3_clk.common.hw,
+		[CLK_SPDIF]		= &spdif_clk.common.hw,
+		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
+		[CLK_DMIC]		= &dmic_clk.common.hw,
+		[CLK_BUS_DMIC]		= &bus_dmic_clk.common.hw,
+		[CLK_AUDIO_HUB]		= &audio_hub_clk.common.hw,
+		[CLK_BUS_AUDIO_HUB]	= &bus_audio_hub_clk.common.hw,
+		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
+		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
+		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
+		[CLK_USB_OHCI3]		= &usb_ohci3_clk.common.hw,
+		[CLK_USB_PHY3]		= &usb_phy3_clk.common.hw,
+		[CLK_USB_HSIC_12M]	= &usb_hsic_12m_clk.common.hw,
+		[CLK_USB_HSIC]		= &usb_hsic_clk.common.hw,
+		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
+		[CLK_BUS_OHCI3]		= &bus_ohci3_clk.common.hw,
+		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
+		[CLK_BUS_XHCI]		= &bus_xhci_clk.common.hw,
+		[CLK_BUS_EHCI3]		= &bus_ehci3_clk.common.hw,
+		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
+		[CLK_PCIE_REF_100M]	= &pcie_ref_100m_clk.hw,
+		[CLK_PCIE_REF]		= &pcie_ref_clk.common.hw,
+		[CLK_PCIE_REF_OUT]	= &pcie_ref_out_clk.common.hw,
+		[CLK_PCIE_MAXI]		= &pcie_maxi_clk.common.hw,
+		[CLK_PCIE_AUX]		= &pcie_aux_clk.common.hw,
+		[CLK_BUS_PCIE]		= &bus_pcie_clk.common.hw,
+		[CLK_HDMI]		= &hdmi_clk.common.hw,
+		[CLK_HDMI_SLOW]		= &hdmi_slow_clk.common.hw,
+		[CLK_HDMI_CEC]		= &hdmi_cec_clk.common.hw,
+		[CLK_BUS_HDMI]		= &bus_hdmi_clk.common.hw,
+		[CLK_BUS_TCON_TOP]	= &bus_tcon_top_clk.common.hw,
+		[CLK_TCON_LCD0]		= &tcon_lcd0_clk.common.hw,
+		[CLK_BUS_TCON_LCD0]	= &bus_tcon_lcd0_clk.common.hw,
+		[CLK_TCON_TV0]		= &tcon_tv0_clk.common.hw,
+		[CLK_BUS_TCON_TV0]	= &bus_tcon_tv0_clk.common.hw,
+		[CLK_CSI_CCI]		= &csi_cci_clk.common.hw,
+		[CLK_CSI_TOP]		= &csi_top_clk.common.hw,
+		[CLK_CSI_MCLK]		= &csi_mclk_clk.common.hw,
+		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
+		[CLK_HDCP]		= &hdcp_clk.common.hw,
+		[CLK_BUS_HDCP]		= &bus_hdcp_clk.common.hw,
+	},
+	.num = CLK_NUMBER,
+};
+
+static struct ccu_reset_map sun50i_h6_ccu_resets[] = {
+	[RST_MBUS]		= { 0x540, BIT(30) },
+
+	[RST_BUS_DE]		= { 0x60c, BIT(16) },
+	[RST_BUS_DEINTERLACE]	= { 0x62c, BIT(16) },
+	[RST_BUS_GPU]		= { 0x67c, BIT(16) },
+	[RST_BUS_CE]		= { 0x68c, BIT(16) },
+	[RST_BUS_VE]		= { 0x69c, BIT(16) },
+	[RST_BUS_EMCE]		= { 0x6bc, BIT(16) },
+	[RST_BUS_VP9]		= { 0x6cc, BIT(16) },
+	[RST_BUS_DMA]		= { 0x70c, BIT(16) },
+	[RST_BUS_MSGBOX]	= { 0x71c, BIT(16) },
+	[RST_BUS_SPINLOCK]	= { 0x72c, BIT(16) },
+	[RST_BUS_HSTIMER]	= { 0x73c, BIT(16) },
+	[RST_BUS_DBG]		= { 0x78c, BIT(16) },
+	[RST_BUS_PSI]		= { 0x79c, BIT(16) },
+	[RST_BUS_PWM]		= { 0x7ac, BIT(16) },
+	[RST_BUS_IOMMU]		= { 0x7bc, BIT(16) },
+	[RST_BUS_DRAM]		= { 0x80c, BIT(16) },
+	[RST_BUS_NAND]		= { 0x82c, BIT(16) },
+	[RST_BUS_MMC0]		= { 0x84c, BIT(16) },
+	[RST_BUS_MMC1]		= { 0x84c, BIT(17) },
+	[RST_BUS_MMC2]		= { 0x84c, BIT(18) },
+	[RST_BUS_UART0]		= { 0x90c, BIT(16) },
+	[RST_BUS_UART1]		= { 0x90c, BIT(17) },
+	[RST_BUS_UART2]		= { 0x90c, BIT(18) },
+	[RST_BUS_UART3]		= { 0x90c, BIT(19) },
+	[RST_BUS_I2C0]		= { 0x91c, BIT(16) },
+	[RST_BUS_I2C1]		= { 0x91c, BIT(17) },
+	[RST_BUS_I2C2]		= { 0x91c, BIT(18) },
+	[RST_BUS_I2C3]		= { 0x91c, BIT(19) },
+	[RST_BUS_SCR0]		= { 0x93c, BIT(16) },
+	[RST_BUS_SCR1]		= { 0x93c, BIT(17) },
+	[RST_BUS_SPI0]		= { 0x96c, BIT(16) },
+	[RST_BUS_SPI1]		= { 0x96c, BIT(17) },
+	[RST_BUS_EMAC]		= { 0x97c, BIT(16) },
+	[RST_BUS_TS]		= { 0x9bc, BIT(16) },
+	[RST_BUS_IR_TX]		= { 0x9cc, BIT(16) },
+	[RST_BUS_THS]		= { 0x9fc, BIT(16) },
+	[RST_BUS_I2S0]		= { 0xa1c, BIT(16) },
+	[RST_BUS_I2S1]		= { 0xa1c, BIT(17) },
+	[RST_BUS_I2S2]		= { 0xa1c, BIT(18) },
+	[RST_BUS_I2S3]		= { 0xa1c, BIT(19) },
+	[RST_BUS_SPDIF]		= { 0xa2c, BIT(16) },
+	[RST_BUS_DMIC]		= { 0xa4c, BIT(16) },
+	[RST_BUS_AUDIO_HUB]	= { 0xa6c, BIT(16) },
+
+	[RST_USB_PHY0]		= { 0xa70, BIT(30) },
+	[RST_USB_PHY1]		= { 0xa74, BIT(30) },
+	[RST_USB_PHY3]		= { 0xa7c, BIT(30) },
+	[RST_USB_HSIC]		= { 0xa7c, BIT(28) },
+
+	[RST_BUS_OHCI0]		= { 0xa8c, BIT(16) },
+	[RST_BUS_OHCI3]		= { 0xa8c, BIT(19) },
+	[RST_BUS_EHCI0]		= { 0xa8c, BIT(20) },
+	[RST_BUS_XHCI]		= { 0xa8c, BIT(21) },
+	[RST_BUS_EHCI3]		= { 0xa8c, BIT(23) },
+	[RST_BUS_OTG]		= { 0xa8c, BIT(24) },
+	[RST_BUS_PCIE]		= { 0xabc, BIT(16) },
+
+	[RST_PCIE_POWERUP]	= { 0xabc, BIT(17) },
+
+	[RST_BUS_HDMI]		= { 0xb1c, BIT(16) },
+	[RST_BUS_HDMI_SUB]	= { 0xb1c, BIT(17) },
+	[RST_BUS_TCON_TOP]	= { 0xb5c, BIT(16) },
+	[RST_BUS_TCON_LCD0]	= { 0xb7c, BIT(16) },
+	[RST_BUS_TCON_TV0]	= { 0xb9c, BIT(16) },
+	[RST_BUS_CSI]		= { 0xc2c, BIT(16) },
+	[RST_BUS_HDCP]		= { 0xc4c, BIT(16) },
+};
+
+static const struct sunxi_ccu_desc sun50i_h6_ccu_desc = {
+	.ccu_clks	= sun50i_h6_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun50i_h6_ccu_clks),
+
+	.hw_clks	= &sun50i_h6_hw_clks,
+
+	.resets		= sun50i_h6_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun50i_h6_ccu_resets),
+};
+
+static const u32 pll_regs[] = {
+	SUN50I_H6_PLL_CPUX_REG,
+	SUN50I_H6_PLL_DDR0_REG,
+	SUN50I_H6_PLL_PERIPH0_REG,
+	SUN50I_H6_PLL_PERIPH1_REG,
+	SUN50I_H6_PLL_GPU_REG,
+	SUN50I_H6_PLL_VIDEO0_REG,
+	SUN50I_H6_PLL_VIDEO1_REG,
+	SUN50I_H6_PLL_VE_REG,
+	SUN50I_H6_PLL_DE_REG,
+	SUN50I_H6_PLL_HSIC_REG,
+	SUN50I_H6_PLL_AUDIO_REG,
+};
+
+static const u32 pll_video_regs[] = {
+	SUN50I_H6_PLL_VIDEO0_REG,
+	SUN50I_H6_PLL_VIDEO1_REG,
+};
+
+static const u32 usb2_clk_regs[] = {
+	SUN50I_H6_USB0_CLK_REG,
+	SUN50I_H6_USB3_CLK_REG,
+};
+
+static int sun50i_h6_ccu_probe(struct platform_device *pdev)
+{
+	struct resource *res;
+	void __iomem *reg;
+	u32 val;
+	int i;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	reg = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(reg))
+		return PTR_ERR(reg);
+
+	/* Enable the lock bits on all PLLs */
+	for (i = 0; i < ARRAY_SIZE(pll_regs); i++) {
+		val = readl(reg + pll_regs[i]);
+		val |= BIT(29);
+		writel(val, reg + pll_regs[i]);
+	}
+
+	/*
+	 * Force the output divider of video PLLs to 0.
+	 *
+	 * See the comment before pll-video0 definition for the reason.
+	 */
+	for (i = 0; i < ARRAY_SIZE(pll_video_regs); i++) {
+		val = readl(reg + pll_video_regs[i]);
+		val &= ~BIT(0);
+		writel(val, reg + pll_video_regs[i]);
+	}
+
+	/*
+	 * Force OHCI 12M clock sources to 00 (12MHz divided from 48MHz)
+	 *
+	 * This clock mux is still mysterious, and the code just enforces
+	 * it to have a valid clock parent.
+	 */
+	for (i = 0; i < ARRAY_SIZE(usb2_clk_regs); i++) {
+		val = readl(reg + usb2_clk_regs[i]);
+		val &= ~GENMASK(25, 24);
+		writel (val, reg + usb2_clk_regs[i]);
+	}
+
+	/*
+	 * Force the post-divider of pll-audio to 12 and the output divider
+	 * of it to 2, so 24576000 and 22579200 rates can be set exactly.
+	 */
+	val = readl(reg + SUN50I_H6_PLL_AUDIO_REG);
+	val &= ~(GENMASK(21, 16) | BIT(0));
+	writel(val | (11 << 16) | BIT(0), reg + SUN50I_H6_PLL_AUDIO_REG);
+
+	/*
+	 * First clock parent (osc32K) is unusable for CEC. But since there
+	 * is no good way to force parent switch (both run with same frequency),
+	 * just set second clock parent here.
+	 */
+	val = readl(reg + SUN50I_H6_HDMI_CEC_CLK_REG);
+	val |= BIT(24);
+	writel(val, reg + SUN50I_H6_HDMI_CEC_CLK_REG);
+
+	return devm_sunxi_ccu_probe(&pdev->dev, reg, &sun50i_h6_ccu_desc);
+}
+
+static const struct of_device_id sun50i_h6_ccu_ids[] = {
+	{ .compatible = "allwinner,sun50i-h6-ccu" },
+	{ }
+};
+
+static struct platform_driver sun50i_h6_ccu_driver = {
+	.probe	= sun50i_h6_ccu_probe,
+	.driver	= {
+		.name	= "sun50i-h6-ccu",
+		.suppress_bind_attrs = true,
+		.of_match_table	= sun50i_h6_ccu_ids,
+	},
+};
+builtin_platform_driver(sun50i_h6_ccu_driver);
diff --git a/drivers/clk/sunxi-ng/sun50i-h6-ccu.h b/drivers/clk/sunxi-ng/sun50i-h6-ccu.h
new file mode 100644
index 000000000000..9406f9a6a8aa
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun50i-h6-ccu.h
@@ -0,0 +1,56 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright 2016 Icenowy Zheng <icenowy@aosc.io>
+ */
+
+#ifndef _CCU_SUN50I_H6_H_
+#define _CCU_SUN50I_H6_H_
+
+#include <dt-bindings/clock/sun50i-h6-ccu.h>
+#include <dt-bindings/reset/sun50i-h6-ccu.h>
+
+#define CLK_OSC12M		0
+#define CLK_PLL_CPUX		1
+#define CLK_PLL_DDR0		2
+
+/* PLL_PERIPH0 exported for PRCM */
+
+#define CLK_PLL_PERIPH0_2X	4
+#define CLK_PLL_PERIPH0_4X	5
+#define CLK_PLL_PERIPH1		6
+#define CLK_PLL_PERIPH1_2X	7
+#define CLK_PLL_PERIPH1_4X	8
+#define CLK_PLL_GPU		9
+#define CLK_PLL_VIDEO0		10
+#define CLK_PLL_VIDEO0_4X	11
+#define CLK_PLL_VIDEO1		12
+#define CLK_PLL_VIDEO1_4X	13
+#define CLK_PLL_VE		14
+#define CLK_PLL_DE		15
+#define CLK_PLL_HSIC		16
+#define CLK_PLL_AUDIO_BASE	17
+#define CLK_PLL_AUDIO		18
+#define CLK_PLL_AUDIO_2X	19
+#define CLK_PLL_AUDIO_4X	20
+
+/* CPUX clock exported for DVFS */
+
+#define CLK_AXI			22
+#define CLK_CPUX_APB		23
+#define CLK_PSI_AHB1_AHB2	24
+#define CLK_AHB3		25
+
+/* APB1 clock exported for PIO */
+
+#define CLK_APB2		27
+#define CLK_MBUS		28
+
+/* All module clocks and bus gates are exported except DRAM */
+
+#define CLK_DRAM		52
+
+#define CLK_BUS_DRAM		60
+
+#define CLK_NUMBER		(CLK_BUS_HDCP + 1)
+
+#endif /* _CCU_SUN50I_H6_H_ */
diff --git a/drivers/clk/sunxi-ng/sun50i-h6-r-ccu.c b/drivers/clk/sunxi-ng/sun50i-h6-r-ccu.c
new file mode 100644
index 000000000000..bb7f9ed78c4c
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun50i-h6-r-ccu.c
@@ -0,0 +1,250 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2017 Icenowy Zheng <icenowy@aosc.xyz>
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/of_address.h>
+#include <linux/platform_device.h>
+
+#include "ccu_common.h"
+#include "ccu_reset.h"
+
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_mp.h"
+#include "ccu_nm.h"
+
+#include "sun50i-h6-r-ccu.h"
+
+/*
+ * Information about AR100 and AHB/APB clocks in R_CCU are gathered from
+ * clock definitions in the BSP source code.
+ */
+
+static const char * const ar100_r_apb2_parents[] = { "osc24M", "osc32k",
+						     "iosc", "pll-periph0" };
+static const struct ccu_mux_var_prediv ar100_r_apb2_predivs[] = {
+	{ .index = 3, .shift = 0, .width = 5 },
+};
+
+static struct ccu_div ar100_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+
+	.mux		= {
+		.shift	= 24,
+		.width	= 2,
+
+		.var_predivs	= ar100_r_apb2_predivs,
+		.n_var_predivs	= ARRAY_SIZE(ar100_r_apb2_predivs),
+	},
+
+	.common		= {
+		.reg		= 0x000,
+		.features	= CCU_FEATURE_VARIABLE_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("ar100",
+						      ar100_r_apb2_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static CLK_FIXED_FACTOR_HW(r_ahb_clk, "r-ahb", &ar100_clk.common.hw, 1, 1, 0);
+
+static SUNXI_CCU_M(r_apb1_clk, "r-apb1", "r-ahb", 0x00c, 0, 2, 0);
+
+static struct ccu_div r_apb2_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+
+	.mux		= {
+		.shift	= 24,
+		.width	= 2,
+
+		.var_predivs	= ar100_r_apb2_predivs,
+		.n_var_predivs	= ARRAY_SIZE(ar100_r_apb2_predivs),
+	},
+
+	.common		= {
+		.reg		= 0x010,
+		.features	= CCU_FEATURE_VARIABLE_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("r-apb2",
+						      ar100_r_apb2_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+/*
+ * Information about the gate/resets are gathered from the clock header file
+ * in the BSP source code, although most of them are unused. The existence
+ * of the hardware block is verified with "3.1 Memory Mapping" chapter in
+ * "Allwinner H6 V200 User Manual V1.1"; and the parent APB buses are verified
+ * with "3.3.2.1 System Bus Tree" chapter inthe same document.
+ */
+static SUNXI_CCU_GATE(r_apb1_timer_clk,	"r-apb1-timer",	"r-apb1",
+		      0x11c, BIT(0), 0);
+static SUNXI_CCU_GATE(r_apb1_twd_clk,	"r-apb1-twd",	"r-apb1",
+		      0x12c, BIT(0), 0);
+static SUNXI_CCU_GATE(r_apb1_pwm_clk,	"r-apb1-pwm",	"r-apb1",
+		      0x13c, BIT(0), 0);
+static SUNXI_CCU_GATE(r_apb2_uart_clk,	"r-apb2-uart",	"r-apb2",
+		      0x18c, BIT(0), 0);
+static SUNXI_CCU_GATE(r_apb2_i2c_clk,	"r-apb2-i2c",	"r-apb2",
+		      0x19c, BIT(0), 0);
+static SUNXI_CCU_GATE(r_apb2_rsb_clk,	"r-apb2-rsb",	"r-apb2",
+		      0x1bc, BIT(0), 0);
+static SUNXI_CCU_GATE(r_apb1_ir_clk,	"r-apb1-ir",	"r-apb1",
+		      0x1cc, BIT(0), 0);
+static SUNXI_CCU_GATE(r_apb1_w1_clk,	"r-apb1-w1",	"r-apb1",
+		      0x1ec, BIT(0), 0);
+
+/* Information of IR(RX) mod clock is gathered from BSP source code */
+static const char * const r_mod0_default_parents[] = { "osc32k", "osc24M" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(ir_clk, "ir",
+				  r_mod0_default_parents, 0x1c0,
+				  0, 5,		/* M */
+				  8, 2,		/* P */
+				  24, 1,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+/*
+ * BSP didn't use the 1-wire function at all now, and the information about
+ * this mod clock is guessed from the IR mod clock above. The existence of
+ * this mod clock is proven by BSP clock header, and the dividers are verified
+ * by contents in the 1-wire related chapter of the User Manual.
+ */
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(w1_clk, "w1",
+				  r_mod0_default_parents, 0x1e0,
+				  0, 5,		/* M */
+				  8, 2,		/* P */
+				  24, 1,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static struct ccu_common *sun50i_h6_r_ccu_clks[] = {
+	&ar100_clk.common,
+	&r_apb1_clk.common,
+	&r_apb2_clk.common,
+	&r_apb1_timer_clk.common,
+	&r_apb1_twd_clk.common,
+	&r_apb1_pwm_clk.common,
+	&r_apb2_uart_clk.common,
+	&r_apb2_i2c_clk.common,
+	&r_apb2_rsb_clk.common,
+	&r_apb1_ir_clk.common,
+	&r_apb1_w1_clk.common,
+	&ir_clk.common,
+	&w1_clk.common,
+};
+
+static struct ccu_common *sun50i_h616_r_ccu_clks[] = {
+	&r_apb1_clk.common,
+	&r_apb2_clk.common,
+	&r_apb1_twd_clk.common,
+	&r_apb2_i2c_clk.common,
+	&r_apb2_rsb_clk.common,
+	&r_apb1_ir_clk.common,
+	&ir_clk.common,
+};
+
+static struct clk_hw_onecell_data sun50i_h6_r_hw_clks = {
+	.hws	= {
+		[CLK_AR100]		= &ar100_clk.common.hw,
+		[CLK_R_AHB]		= &r_ahb_clk.hw,
+		[CLK_R_APB1]		= &r_apb1_clk.common.hw,
+		[CLK_R_APB2]		= &r_apb2_clk.common.hw,
+		[CLK_R_APB1_TIMER]	= &r_apb1_timer_clk.common.hw,
+		[CLK_R_APB1_TWD]	= &r_apb1_twd_clk.common.hw,
+		[CLK_R_APB1_PWM]	= &r_apb1_pwm_clk.common.hw,
+		[CLK_R_APB2_UART]	= &r_apb2_uart_clk.common.hw,
+		[CLK_R_APB2_I2C]	= &r_apb2_i2c_clk.common.hw,
+		[CLK_R_APB2_RSB]	= &r_apb2_rsb_clk.common.hw,
+		[CLK_R_APB1_IR]		= &r_apb1_ir_clk.common.hw,
+		[CLK_R_APB1_W1]		= &r_apb1_w1_clk.common.hw,
+		[CLK_IR]		= &ir_clk.common.hw,
+		[CLK_W1]		= &w1_clk.common.hw,
+	},
+	.num	= CLK_NUMBER,
+};
+
+static struct clk_hw_onecell_data sun50i_h616_r_hw_clks = {
+	.hws	= {
+		[CLK_R_AHB]		= &r_ahb_clk.hw,
+		[CLK_R_APB1]		= &r_apb1_clk.common.hw,
+		[CLK_R_APB2]		= &r_apb2_clk.common.hw,
+		[CLK_R_APB1_TWD]	= &r_apb1_twd_clk.common.hw,
+		[CLK_R_APB2_I2C]	= &r_apb2_i2c_clk.common.hw,
+		[CLK_R_APB2_RSB]	= &r_apb2_rsb_clk.common.hw,
+		[CLK_R_APB1_IR]		= &r_apb1_ir_clk.common.hw,
+		[CLK_IR]		= &ir_clk.common.hw,
+	},
+	.num	= CLK_NUMBER,
+};
+
+static struct ccu_reset_map sun50i_h6_r_ccu_resets[] = {
+	[RST_R_APB1_TIMER]	=  { 0x11c, BIT(16) },
+	[RST_R_APB1_TWD]	=  { 0x12c, BIT(16) },
+	[RST_R_APB1_PWM]	=  { 0x13c, BIT(16) },
+	[RST_R_APB2_UART]	=  { 0x18c, BIT(16) },
+	[RST_R_APB2_I2C]	=  { 0x19c, BIT(16) },
+	[RST_R_APB2_RSB]	=  { 0x1bc, BIT(16) },
+	[RST_R_APB1_IR]		=  { 0x1cc, BIT(16) },
+	[RST_R_APB1_W1]		=  { 0x1ec, BIT(16) },
+};
+
+static struct ccu_reset_map sun50i_h616_r_ccu_resets[] = {
+	[RST_R_APB1_TWD]	=  { 0x12c, BIT(16) },
+	[RST_R_APB2_I2C]	=  { 0x19c, BIT(16) },
+	[RST_R_APB2_RSB]	=  { 0x1bc, BIT(16) },
+	[RST_R_APB1_IR]		=  { 0x1cc, BIT(16) },
+};
+
+static const struct sunxi_ccu_desc sun50i_h6_r_ccu_desc = {
+	.ccu_clks	= sun50i_h6_r_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun50i_h6_r_ccu_clks),
+
+	.hw_clks	= &sun50i_h6_r_hw_clks,
+
+	.resets		= sun50i_h6_r_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun50i_h6_r_ccu_resets),
+};
+
+static const struct sunxi_ccu_desc sun50i_h616_r_ccu_desc = {
+	.ccu_clks	= sun50i_h616_r_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun50i_h616_r_ccu_clks),
+
+	.hw_clks	= &sun50i_h616_r_hw_clks,
+
+	.resets		= sun50i_h616_r_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun50i_h616_r_ccu_resets),
+};
+
+static void __init sunxi_r_ccu_init(struct device_node *node,
+				    const struct sunxi_ccu_desc *desc)
+{
+	void __iomem *reg;
+
+	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
+	if (IS_ERR(reg)) {
+		pr_err("%pOF: Could not map the clock registers\n", node);
+		return;
+	}
+
+	of_sunxi_ccu_probe(node, reg, desc);
+}
+
+static void __init sun50i_h6_r_ccu_setup(struct device_node *node)
+{
+	sunxi_r_ccu_init(node, &sun50i_h6_r_ccu_desc);
+}
+CLK_OF_DECLARE(sun50i_h6_r_ccu, "allwinner,sun50i-h6-r-ccu",
+	       sun50i_h6_r_ccu_setup);
+
+static void __init sun50i_h616_r_ccu_setup(struct device_node *node)
+{
+	sunxi_r_ccu_init(node, &sun50i_h616_r_ccu_desc);
+}
+CLK_OF_DECLARE(sun50i_h616_r_ccu, "allwinner,sun50i-h616-r-ccu",
+	       sun50i_h616_r_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/sun50i-h6-r-ccu.h b/drivers/clk/sunxi-ng/sun50i-h6-r-ccu.h
new file mode 100644
index 000000000000..7e290b840803
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun50i-h6-r-ccu.h
@@ -0,0 +1,19 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright 2017 Icenowy Zheng <icenowy@aosc.xyz>
+ */
+
+#ifndef _CCU_SUN50I_H6_R_H
+#define _CCU_SUN50I_H6_R_H
+
+#include <dt-bindings/clock/sun50i-h6-r-ccu.h>
+#include <dt-bindings/reset/sun50i-h6-r-ccu.h>
+
+/* AHB/APB bus clocks are not exported except APB1 for R_PIO */
+#define CLK_R_AHB	1
+
+#define CLK_R_APB2	3
+
+#define CLK_NUMBER	(CLK_R_APB2_RSB + 1)
+
+#endif /* _CCU_SUN50I_H6_R_H */
diff --git a/drivers/clk/sunxi-ng/sun50i-h616-ccu.c b/drivers/clk/sunxi-ng/sun50i-h616-ccu.c
new file mode 100644
index 000000000000..71d75833253f
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun50i-h616-ccu.c
@@ -0,0 +1,1148 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2020 Arm Ltd.
+ * Based on the H6 CCU driver, which is:
+ *   Copyright (c) 2017 Icenowy Zheng <icenowy@aosc.io>
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/io.h>
+#include <linux/of_address.h>
+#include <linux/platform_device.h>
+
+#include "ccu_common.h"
+#include "ccu_reset.h"
+
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_mp.h"
+#include "ccu_mult.h"
+#include "ccu_nk.h"
+#include "ccu_nkm.h"
+#include "ccu_nkmp.h"
+#include "ccu_nm.h"
+
+#include "sun50i-h616-ccu.h"
+
+/*
+ * The CPU PLL is actually NP clock, with P being /1, /2 or /4. However
+ * P should only be used for output frequencies lower than 288 MHz.
+ *
+ * For now we can just model it as a multiplier clock, and force P to /1.
+ *
+ * The M factor is present in the register's description, but not in the
+ * frequency formula, and it's documented as "M is only used for backdoor
+ * testing", so it's not modelled and then force to 0.
+ */
+#define SUN50I_H616_PLL_CPUX_REG	0x000
+static struct ccu_mult pll_cpux_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.mult		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.common		= {
+		.reg		= 0x000,
+		.hw.init	= CLK_HW_INIT("pll-cpux", "osc24M",
+					      &ccu_mult_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+/* Some PLLs are input * N / div1 / P. Model them as NKMP with no K */
+#define SUN50I_H616_PLL_DDR0_REG	0x010
+static struct ccu_nkmp pll_ddr0_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
+	.common		= {
+		.reg		= 0x010,
+		.hw.init	= CLK_HW_INIT("pll-ddr0", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_H616_PLL_DDR1_REG	0x018
+static struct ccu_nkmp pll_ddr1_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
+	.common		= {
+		.reg		= 0x018,
+		.hw.init	= CLK_HW_INIT("pll-ddr1", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_H616_PLL_PERIPH0_REG	0x020
+static struct ccu_nkmp pll_periph0_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
+	.fixed_post_div	= 2,
+	.common		= {
+		.reg		= 0x020,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-periph0", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_H616_PLL_PERIPH1_REG	0x028
+static struct ccu_nkmp pll_periph1_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
+	.fixed_post_div	= 2,
+	.common		= {
+		.reg		= 0x028,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-periph1", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_H616_PLL_GPU_REG		0x030
+static struct ccu_nkmp pll_gpu_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
+	.common		= {
+		.reg		= 0x030,
+		.hw.init	= CLK_HW_INIT("pll-gpu", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+/*
+ * For Video PLLs, the output divider is described as "used for testing"
+ * in the user manual. So it's not modelled and forced to 0.
+ */
+#define SUN50I_H616_PLL_VIDEO0_REG	0x040
+static struct ccu_nm pll_video0_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.fixed_post_div	= 4,
+	.min_rate	= 288000000,
+	.max_rate	= 2400000000UL,
+	.common		= {
+		.reg		= 0x040,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-video0", "osc24M",
+					      &ccu_nm_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_H616_PLL_VIDEO1_REG	0x048
+static struct ccu_nm pll_video1_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.fixed_post_div	= 4,
+	.min_rate	= 288000000,
+	.max_rate	= 2400000000UL,
+	.common		= {
+		.reg		= 0x048,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-video1", "osc24M",
+					      &ccu_nm_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_H616_PLL_VIDEO2_REG	0x050
+static struct ccu_nm pll_video2_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.fixed_post_div	= 4,
+	.min_rate	= 288000000,
+	.max_rate	= 2400000000UL,
+	.common		= {
+		.reg		= 0x050,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-video2", "osc24M",
+					      &ccu_nm_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_H616_PLL_VE_REG		0x058
+static struct ccu_nkmp pll_ve_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
+	.common		= {
+		.reg		= 0x058,
+		.hw.init	= CLK_HW_INIT("pll-ve", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+#define SUN50I_H616_PLL_DE_REG		0x060
+static struct ccu_nkmp pll_de_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 1), /* output divider */
+	.common		= {
+		.reg		= 0x060,
+		.hw.init	= CLK_HW_INIT("pll-de", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+/*
+ * TODO: Determine SDM settings for the audio PLL. The manual suggests
+ * PLL_FACTOR_N=16, PLL_POST_DIV_P=2, OUTPUT_DIV=2, pattern=0xe000c49b
+ * for 24.576 MHz, and PLL_FACTOR_N=22, PLL_POST_DIV_P=3, OUTPUT_DIV=2,
+ * pattern=0xe001288c for 22.5792 MHz.
+ * This clashes with our fixed PLL_POST_DIV_P.
+ */
+#define SUN50I_H616_PLL_AUDIO_REG	0x078
+static struct ccu_nm pll_audio_hs_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(1, 1), /* input divider */
+	.common		= {
+		.reg		= 0x078,
+		.hw.init	= CLK_HW_INIT("pll-audio-hs", "osc24M",
+					      &ccu_nm_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static const char * const cpux_parents[] = { "osc24M", "osc32k",
+					"iosc", "pll-cpux", "pll-periph0" };
+static SUNXI_CCU_MUX(cpux_clk, "cpux", cpux_parents,
+		     0x500, 24, 3, CLK_SET_RATE_PARENT | CLK_IS_CRITICAL);
+static SUNXI_CCU_M(axi_clk, "axi", "cpux", 0x500, 0, 2, 0);
+static SUNXI_CCU_M(cpux_apb_clk, "cpux-apb", "cpux", 0x500, 8, 2, 0);
+
+static const char * const psi_ahb1_ahb2_parents[] = { "osc24M", "osc32k",
+						      "iosc", "pll-periph0" };
+static SUNXI_CCU_MP_WITH_MUX(psi_ahb1_ahb2_clk, "psi-ahb1-ahb2",
+			     psi_ahb1_ahb2_parents,
+			     0x510,
+			     0, 2,	/* M */
+			     8, 2,	/* P */
+			     24, 2,	/* mux */
+			     0);
+
+static const char * const ahb3_apb1_apb2_parents[] = { "osc24M", "osc32k",
+						       "psi-ahb1-ahb2",
+						       "pll-periph0" };
+static SUNXI_CCU_MP_WITH_MUX(ahb3_clk, "ahb3", ahb3_apb1_apb2_parents, 0x51c,
+			     0, 2,	/* M */
+			     8, 2,	/* P */
+			     24, 2,	/* mux */
+			     0);
+
+static SUNXI_CCU_MP_WITH_MUX(apb1_clk, "apb1", ahb3_apb1_apb2_parents, 0x520,
+			     0, 2,	/* M */
+			     8, 2,	/* P */
+			     24, 2,	/* mux */
+			     0);
+
+static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", ahb3_apb1_apb2_parents, 0x524,
+			     0, 2,	/* M */
+			     8, 2,	/* P */
+			     24, 2,	/* mux */
+			     0);
+
+static const char * const mbus_parents[] = { "osc24M", "pll-periph0-2x",
+					     "pll-ddr0", "pll-ddr1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents, 0x540,
+					0, 3,	/* M */
+					24, 2,	/* mux */
+					BIT(31),	/* gate */
+					CLK_IS_CRITICAL);
+
+static const char * const de_parents[] = { "pll-de", "pll-periph0-2x" };
+static SUNXI_CCU_M_WITH_MUX_GATE(de_clk, "de", de_parents, 0x600,
+				       0, 4,	/* M */
+				       24, 1,	/* mux */
+				       BIT(31),	/* gate */
+				       CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(bus_de_clk, "bus-de", "psi-ahb1-ahb2",
+		      0x60c, BIT(0), 0);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(deinterlace_clk, "deinterlace",
+				       de_parents,
+				       0x620,
+				       0, 4,	/* M */
+				       24, 1,	/* mux */
+				       BIT(31),	/* gate */
+				       0);
+
+static SUNXI_CCU_GATE(bus_deinterlace_clk, "bus-deinterlace", "psi-ahb1-ahb2",
+		      0x62c, BIT(0), 0);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(g2d_clk, "g2d", de_parents, 0x630,
+				       0, 4,	/* M */
+				       24, 1,	/* mux */
+				       BIT(31),	/* gate */
+				       0);
+
+static SUNXI_CCU_GATE(bus_g2d_clk, "bus-g2d", "psi-ahb1-ahb2",
+		      0x63c, BIT(0), 0);
+
+static const char * const gpu0_parents[] = { "pll-gpu", "gpu1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(gpu0_clk, "gpu0", gpu0_parents, 0x670,
+				       0, 2,	/* M */
+				       24, 1,	/* mux */
+				       BIT(31),	/* gate */
+				       CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M_WITH_GATE(gpu1_clk, "gpu1", "pll-periph0-2x", 0x674,
+					0, 2,	/* M */
+					BIT(31),/* gate */
+					0);
+
+static SUNXI_CCU_GATE(bus_gpu_clk, "bus-gpu", "psi-ahb1-ahb2",
+		      0x67c, BIT(0), 0);
+
+static const char * const ce_parents[] = { "osc24M", "pll-periph0-2x" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(ce_clk, "ce", ce_parents, 0x680,
+					0, 4,	/* M */
+					8, 2,	/* N */
+					24, 1,	/* mux */
+					BIT(31),/* gate */
+					0);
+
+static SUNXI_CCU_GATE(bus_ce_clk, "bus-ce", "psi-ahb1-ahb2",
+		      0x68c, BIT(0), 0);
+
+static const char * const ve_parents[] = { "pll-ve" };
+static SUNXI_CCU_M_WITH_MUX_GATE(ve_clk, "ve", ve_parents, 0x690,
+				       0, 3,	/* M */
+				       24, 1,	/* mux */
+				       BIT(31),	/* gate */
+				       CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(bus_ve_clk, "bus-ve", "psi-ahb1-ahb2",
+		      0x69c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_dma_clk, "bus-dma", "psi-ahb1-ahb2",
+		      0x70c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_hstimer_clk, "bus-hstimer", "psi-ahb1-ahb2",
+		      0x73c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(avs_clk, "avs", "osc24M", 0x740, BIT(31), 0);
+
+static SUNXI_CCU_GATE(bus_dbg_clk, "bus-dbg", "psi-ahb1-ahb2",
+		      0x78c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_psi_clk, "bus-psi", "psi-ahb1-ahb2",
+		      0x79c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_pwm_clk, "bus-pwm", "apb1", 0x7ac, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_iommu_clk, "bus-iommu", "apb1", 0x7bc, BIT(0), 0);
+
+static const char * const dram_parents[] = { "pll-ddr0", "pll-ddr1" };
+static struct ccu_div dram_clk = {
+	.div		= _SUNXI_CCU_DIV(0, 2),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common	= {
+		.reg		= 0x800,
+		.hw.init	= CLK_HW_INIT_PARENTS("dram",
+						      dram_parents,
+						      &ccu_div_ops,
+						      CLK_IS_CRITICAL),
+	},
+};
+
+static SUNXI_CCU_GATE(mbus_dma_clk, "mbus-dma", "mbus",
+		      0x804, BIT(0), 0);
+static SUNXI_CCU_GATE(mbus_ve_clk, "mbus-ve", "mbus",
+		      0x804, BIT(1), 0);
+static SUNXI_CCU_GATE(mbus_ce_clk, "mbus-ce", "mbus",
+		      0x804, BIT(2), 0);
+static SUNXI_CCU_GATE(mbus_ts_clk, "mbus-ts", "mbus",
+		      0x804, BIT(3), 0);
+static SUNXI_CCU_GATE(mbus_nand_clk, "mbus-nand", "mbus",
+		      0x804, BIT(5), 0);
+static SUNXI_CCU_GATE(mbus_g2d_clk, "mbus-g2d", "mbus",
+		      0x804, BIT(10), 0);
+
+static SUNXI_CCU_GATE(bus_dram_clk, "bus-dram", "psi-ahb1-ahb2",
+		      0x80c, BIT(0), CLK_IS_CRITICAL);
+
+static const char * const nand_spi_parents[] = { "osc24M", "pll-periph0",
+					     "pll-periph1", "pll-periph0-2x",
+					     "pll-periph1-2x" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand0_clk, "nand0", nand_spi_parents, 0x810,
+					0, 4,	/* M */
+					8, 2,	/* N */
+					24, 3,	/* mux */
+					BIT(31),/* gate */
+					0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand1_clk, "nand1", nand_spi_parents, 0x814,
+					0, 4,	/* M */
+					8, 2,	/* N */
+					24, 3,	/* mux */
+					BIT(31),/* gate */
+					0);
+
+static SUNXI_CCU_GATE(bus_nand_clk, "bus-nand", "ahb3", 0x82c, BIT(0), 0);
+
+static const char * const mmc_parents[] = { "osc24M", "pll-periph0-2x",
+					    "pll-periph1-2x" };
+static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc0_clk, "mmc0", mmc_parents, 0x830,
+					  0, 4,		/* M */
+					  8, 2,		/* N */
+					  24, 2,	/* mux */
+					  BIT(31),	/* gate */
+					  2,		/* post-div */
+					  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc1_clk, "mmc1", mmc_parents, 0x834,
+					  0, 4,		/* M */
+					  8, 2,		/* N */
+					  24, 2,	/* mux */
+					  BIT(31),	/* gate */
+					  2,		/* post-div */
+					  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE_POSTDIV(mmc2_clk, "mmc2", mmc_parents, 0x838,
+					  0, 4,		/* M */
+					  8, 2,		/* N */
+					  24, 2,	/* mux */
+					  BIT(31),	/* gate */
+					  2,		/* post-div */
+					  0);
+
+static SUNXI_CCU_GATE(bus_mmc0_clk, "bus-mmc0", "ahb3", 0x84c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_mmc1_clk, "bus-mmc1", "ahb3", 0x84c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_mmc2_clk, "bus-mmc2", "ahb3", 0x84c, BIT(2), 0);
+
+static SUNXI_CCU_GATE(bus_uart0_clk, "bus-uart0", "apb2", 0x90c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_uart1_clk, "bus-uart1", "apb2", 0x90c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_uart2_clk, "bus-uart2", "apb2", 0x90c, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_uart3_clk, "bus-uart3", "apb2", 0x90c, BIT(3), 0);
+static SUNXI_CCU_GATE(bus_uart4_clk, "bus-uart4", "apb2", 0x90c, BIT(4), 0);
+static SUNXI_CCU_GATE(bus_uart5_clk, "bus-uart5", "apb2", 0x90c, BIT(5), 0);
+
+static SUNXI_CCU_GATE(bus_i2c0_clk, "bus-i2c0", "apb2", 0x91c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_i2c1_clk, "bus-i2c1", "apb2", 0x91c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_i2c2_clk, "bus-i2c2", "apb2", 0x91c, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_i2c3_clk, "bus-i2c3", "apb2", 0x91c, BIT(3), 0);
+static SUNXI_CCU_GATE(bus_i2c4_clk, "bus-i2c4", "apb2", 0x91c, BIT(4), 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", nand_spi_parents, 0x940,
+					0, 4,	/* M */
+					8, 2,	/* N */
+					24, 3,	/* mux */
+					BIT(31),/* gate */
+					0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", nand_spi_parents, 0x944,
+					0, 4,	/* M */
+					8, 2,	/* N */
+					24, 3,	/* mux */
+					BIT(31),/* gate */
+					0);
+
+static SUNXI_CCU_GATE(bus_spi0_clk, "bus-spi0", "ahb3", 0x96c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_spi1_clk, "bus-spi1", "ahb3", 0x96c, BIT(1), 0);
+
+static SUNXI_CCU_GATE(emac_25m_clk, "emac-25m", "ahb3", 0x970,
+		      BIT(31) | BIT(30), 0);
+
+static SUNXI_CCU_GATE(bus_emac0_clk, "bus-emac0", "ahb3", 0x97c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_emac1_clk, "bus-emac1", "ahb3", 0x97c, BIT(1), 0);
+
+static const char * const ts_parents[] = { "osc24M", "pll-periph0" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(ts_clk, "ts", ts_parents, 0x9b0,
+					0, 4,	/* M */
+					8, 2,	/* N */
+					24, 1,	/* mux */
+					BIT(31),/* gate */
+					0);
+
+static SUNXI_CCU_GATE(bus_ts_clk, "bus-ts", "ahb3", 0x9bc, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_ths_clk, "bus-ths", "apb1", 0x9fc, BIT(0), 0);
+
+static const char * const audio_parents[] = { "pll-audio-1x", "pll-audio-2x",
+					      "pll-audio-4x", "pll-audio-hs" };
+static struct ccu_div spdif_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0xa20,
+		.hw.init	= CLK_HW_INIT_PARENTS("spdif",
+						      audio_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static SUNXI_CCU_GATE(bus_spdif_clk, "bus-spdif", "apb1", 0xa2c, BIT(0), 0);
+
+static struct ccu_div dmic_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0xa40,
+		.hw.init	= CLK_HW_INIT_PARENTS("dmic",
+						      audio_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static SUNXI_CCU_GATE(bus_dmic_clk, "bus-dmic", "apb1", 0xa4c, BIT(0), 0);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(audio_codec_1x_clk, "audio-codec-1x",
+				 audio_parents, 0xa50,
+				 0, 4,	/* M */
+				 24, 2,	/* mux */
+				 BIT(31),	/* gate */
+				 CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M_WITH_MUX_GATE(audio_codec_4x_clk, "audio-codec-4x",
+				 audio_parents, 0xa54,
+				 0, 4,	/* M */
+				 24, 2,	/* mux */
+				 BIT(31),	/* gate */
+				 CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(bus_audio_codec_clk, "bus-audio-codec", "apb1", 0xa5c,
+		BIT(0), 0);
+
+static struct ccu_div audio_hub_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV_FLAGS(8, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0xa60,
+		.hw.init	= CLK_HW_INIT_PARENTS("audio-hub",
+						      audio_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static SUNXI_CCU_GATE(bus_audio_hub_clk, "bus-audio-hub", "apb1", 0xa6c, BIT(0), 0);
+
+/*
+ * There are OHCI 12M clock source selection bits for the four USB 2.0 ports.
+ * We will force them to 0 (12M divided from 48M).
+ */
+#define SUN50I_H616_USB0_CLK_REG		0xa70
+#define SUN50I_H616_USB1_CLK_REG		0xa74
+#define SUN50I_H616_USB2_CLK_REG		0xa78
+#define SUN50I_H616_USB3_CLK_REG		0xa7c
+
+static SUNXI_CCU_GATE(usb_ohci0_clk, "usb-ohci0", "osc12M", 0xa70, BIT(31), 0);
+static SUNXI_CCU_GATE(usb_phy0_clk, "usb-phy0", "osc24M", 0xa70, BIT(29), 0);
+
+static SUNXI_CCU_GATE(usb_ohci1_clk, "usb-ohci1", "osc12M", 0xa74, BIT(31), 0);
+static SUNXI_CCU_GATE(usb_phy1_clk, "usb-phy1", "osc24M", 0xa74, BIT(29), 0);
+
+static SUNXI_CCU_GATE(usb_ohci2_clk, "usb-ohci2", "osc12M", 0xa78, BIT(31), 0);
+static SUNXI_CCU_GATE(usb_phy2_clk, "usb-phy2", "osc24M", 0xa78, BIT(29), 0);
+
+static SUNXI_CCU_GATE(usb_ohci3_clk, "usb-ohci3", "osc12M", 0xa7c, BIT(31), 0);
+static SUNXI_CCU_GATE(usb_phy3_clk, "usb-phy3", "osc24M", 0xa7c, BIT(29), 0);
+
+static SUNXI_CCU_GATE(bus_ohci0_clk, "bus-ohci0", "ahb3", 0xa8c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_ohci1_clk, "bus-ohci1", "ahb3", 0xa8c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_ohci2_clk, "bus-ohci2", "ahb3", 0xa8c, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_ohci3_clk, "bus-ohci3", "ahb3", 0xa8c, BIT(3), 0);
+static SUNXI_CCU_GATE(bus_ehci0_clk, "bus-ehci0", "ahb3", 0xa8c, BIT(4), 0);
+static SUNXI_CCU_GATE(bus_ehci1_clk, "bus-ehci1", "ahb3", 0xa8c, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_ehci2_clk, "bus-ehci2", "ahb3", 0xa8c, BIT(6), 0);
+static SUNXI_CCU_GATE(bus_ehci3_clk, "bus-ehci3", "ahb3", 0xa8c, BIT(7), 0);
+static SUNXI_CCU_GATE(bus_otg_clk, "bus-otg", "ahb3", 0xa8c, BIT(8), 0);
+
+static SUNXI_CCU_GATE(bus_keyadc_clk, "bus-keyadc", "apb1", 0xa9c, BIT(0), 0);
+
+static const char * const hdmi_parents[] = { "pll-video0", "pll-video0-4x",
+					     "pll-video2", "pll-video2-4x" };
+static SUNXI_CCU_M_WITH_MUX_GATE(hdmi_clk, "hdmi", hdmi_parents, 0xb00,
+				 0, 4,		/* M */
+				 24, 2,		/* mux */
+				 BIT(31),	/* gate */
+				 0);
+
+static SUNXI_CCU_GATE(hdmi_slow_clk, "hdmi-slow", "osc24M", 0xb04, BIT(31), 0);
+
+static const char * const hdmi_cec_parents[] = { "osc32k", "pll-periph0-2x" };
+static const struct ccu_mux_fixed_prediv hdmi_cec_predivs[] = {
+	{ .index = 1, .div = 36621 },
+};
+
+#define SUN50I_H616_HDMI_CEC_CLK_REG		0xb10
+static struct ccu_mux hdmi_cec_clk = {
+	.enable		= BIT(31) | BIT(30),
+
+	.mux		= {
+		.shift	= 24,
+		.width	= 2,
+
+		.fixed_predivs	= hdmi_cec_predivs,
+		.n_predivs	= ARRAY_SIZE(hdmi_cec_predivs),
+	},
+
+	.common		= {
+		.reg		= 0xb10,
+		.features	= CCU_FEATURE_FIXED_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("hdmi-cec",
+						      hdmi_cec_parents,
+						      &ccu_mux_ops,
+						      0),
+	},
+};
+
+static SUNXI_CCU_GATE(bus_hdmi_clk, "bus-hdmi", "ahb3", 0xb1c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(bus_tcon_top_clk, "bus-tcon-top", "ahb3",
+		      0xb5c, BIT(0), 0);
+
+static const char * const tcon_tv_parents[] = { "pll-video0",
+						"pll-video0-4x",
+						"pll-video1",
+						"pll-video1-4x" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(tcon_tv0_clk, "tcon-tv0",
+				  tcon_tv_parents, 0xb80,
+				  0, 4,		/* M */
+				  8, 2,		/* P */
+				  24, 3,	/* mux */
+				  BIT(31),	/* gate */
+				  CLK_SET_RATE_PARENT);
+static SUNXI_CCU_MP_WITH_MUX_GATE(tcon_tv1_clk, "tcon-tv1",
+				  tcon_tv_parents, 0xb84,
+				  0, 4,		/* M */
+				  8, 2,		/* P */
+				  24, 3,	/* mux */
+				  BIT(31),	/* gate */
+				  CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(bus_tcon_tv0_clk, "bus-tcon-tv0", "ahb3",
+		      0xb9c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_tcon_tv1_clk, "bus-tcon-tv1", "ahb3",
+		      0xb9c, BIT(1), 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(tve0_clk, "tve0",
+				  tcon_tv_parents, 0xbb0,
+				  0, 4,		/* M */
+				  8, 2,		/* P */
+				  24, 3,	/* mux */
+				  BIT(31),	/* gate */
+				  CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(bus_tve_top_clk, "bus-tve-top", "ahb3",
+		      0xbbc, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_tve0_clk, "bus-tve0", "ahb3",
+		      0xbbc, BIT(1), 0);
+
+static const char * const hdcp_parents[] = { "pll-periph0", "pll-periph1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(hdcp_clk, "hdcp", hdcp_parents, 0xc40,
+				 0, 4,		/* M */
+				 24, 2,		/* mux */
+				 BIT(31),	/* gate */
+				 0);
+
+static SUNXI_CCU_GATE(bus_hdcp_clk, "bus-hdcp", "ahb3", 0xc4c, BIT(0), 0);
+
+/* Fixed factor clocks */
+static CLK_FIXED_FACTOR_FW_NAME(osc12M_clk, "osc12M", "hosc", 2, 1, 0);
+
+static const struct clk_hw *clk_parent_pll_audio[] = {
+	&pll_audio_hs_clk.common.hw
+};
+
+/*
+ * The divider of pll-audio is fixed to 24 for now, so 24576000 and 22579200
+ * rates can be set exactly in conjunction with sigma-delta modulation.
+ */
+static CLK_FIXED_FACTOR_HWS(pll_audio_1x_clk, "pll-audio-1x",
+			    clk_parent_pll_audio,
+			    96, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
+			    clk_parent_pll_audio,
+			    48, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
+			    clk_parent_pll_audio,
+			    24, 1, CLK_SET_RATE_PARENT);
+
+static const struct clk_hw *pll_periph0_parents[] = {
+	&pll_periph0_clk.common.hw
+};
+
+static CLK_FIXED_FACTOR_HWS(pll_periph0_2x_clk, "pll-periph0-2x",
+			    pll_periph0_parents,
+			    1, 2, 0);
+
+static const struct clk_hw *pll_periph1_parents[] = {
+	&pll_periph1_clk.common.hw
+};
+
+static CLK_FIXED_FACTOR_HWS(pll_periph1_2x_clk, "pll-periph1-2x",
+			    pll_periph1_parents,
+			    1, 2, 0);
+
+static CLK_FIXED_FACTOR_HW(pll_video0_4x_clk, "pll-video0-4x",
+			   &pll_video0_clk.common.hw,
+			   1, 4, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HW(pll_video1_4x_clk, "pll-video1-4x",
+			   &pll_video1_clk.common.hw,
+			   1, 4, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HW(pll_video2_4x_clk, "pll-video2-4x",
+			   &pll_video2_clk.common.hw,
+			   1, 4, CLK_SET_RATE_PARENT);
+
+static struct ccu_common *sun50i_h616_ccu_clks[] = {
+	&pll_cpux_clk.common,
+	&pll_ddr0_clk.common,
+	&pll_ddr1_clk.common,
+	&pll_periph0_clk.common,
+	&pll_periph1_clk.common,
+	&pll_gpu_clk.common,
+	&pll_video0_clk.common,
+	&pll_video1_clk.common,
+	&pll_video2_clk.common,
+	&pll_ve_clk.common,
+	&pll_de_clk.common,
+	&pll_audio_hs_clk.common,
+	&cpux_clk.common,
+	&axi_clk.common,
+	&cpux_apb_clk.common,
+	&psi_ahb1_ahb2_clk.common,
+	&ahb3_clk.common,
+	&apb1_clk.common,
+	&apb2_clk.common,
+	&mbus_clk.common,
+	&de_clk.common,
+	&bus_de_clk.common,
+	&deinterlace_clk.common,
+	&bus_deinterlace_clk.common,
+	&g2d_clk.common,
+	&bus_g2d_clk.common,
+	&gpu0_clk.common,
+	&bus_gpu_clk.common,
+	&gpu1_clk.common,
+	&ce_clk.common,
+	&bus_ce_clk.common,
+	&ve_clk.common,
+	&bus_ve_clk.common,
+	&bus_dma_clk.common,
+	&bus_hstimer_clk.common,
+	&avs_clk.common,
+	&bus_dbg_clk.common,
+	&bus_psi_clk.common,
+	&bus_pwm_clk.common,
+	&bus_iommu_clk.common,
+	&dram_clk.common,
+	&mbus_dma_clk.common,
+	&mbus_ve_clk.common,
+	&mbus_ce_clk.common,
+	&mbus_ts_clk.common,
+	&mbus_nand_clk.common,
+	&mbus_g2d_clk.common,
+	&bus_dram_clk.common,
+	&nand0_clk.common,
+	&nand1_clk.common,
+	&bus_nand_clk.common,
+	&mmc0_clk.common,
+	&mmc1_clk.common,
+	&mmc2_clk.common,
+	&bus_mmc0_clk.common,
+	&bus_mmc1_clk.common,
+	&bus_mmc2_clk.common,
+	&bus_uart0_clk.common,
+	&bus_uart1_clk.common,
+	&bus_uart2_clk.common,
+	&bus_uart3_clk.common,
+	&bus_uart4_clk.common,
+	&bus_uart5_clk.common,
+	&bus_i2c0_clk.common,
+	&bus_i2c1_clk.common,
+	&bus_i2c2_clk.common,
+	&bus_i2c3_clk.common,
+	&bus_i2c4_clk.common,
+	&spi0_clk.common,
+	&spi1_clk.common,
+	&bus_spi0_clk.common,
+	&bus_spi1_clk.common,
+	&emac_25m_clk.common,
+	&bus_emac0_clk.common,
+	&bus_emac1_clk.common,
+	&ts_clk.common,
+	&bus_ts_clk.common,
+	&bus_ths_clk.common,
+	&spdif_clk.common,
+	&bus_spdif_clk.common,
+	&dmic_clk.common,
+	&bus_dmic_clk.common,
+	&audio_codec_1x_clk.common,
+	&audio_codec_4x_clk.common,
+	&bus_audio_codec_clk.common,
+	&audio_hub_clk.common,
+	&bus_audio_hub_clk.common,
+	&usb_ohci0_clk.common,
+	&usb_phy0_clk.common,
+	&usb_ohci1_clk.common,
+	&usb_phy1_clk.common,
+	&usb_ohci2_clk.common,
+	&usb_phy2_clk.common,
+	&usb_ohci3_clk.common,
+	&usb_phy3_clk.common,
+	&bus_ohci0_clk.common,
+	&bus_ohci1_clk.common,
+	&bus_ohci2_clk.common,
+	&bus_ohci3_clk.common,
+	&bus_ehci0_clk.common,
+	&bus_ehci1_clk.common,
+	&bus_ehci2_clk.common,
+	&bus_ehci3_clk.common,
+	&bus_otg_clk.common,
+	&bus_keyadc_clk.common,
+	&hdmi_clk.common,
+	&hdmi_slow_clk.common,
+	&hdmi_cec_clk.common,
+	&bus_hdmi_clk.common,
+	&bus_tcon_top_clk.common,
+	&tcon_tv0_clk.common,
+	&tcon_tv1_clk.common,
+	&bus_tcon_tv0_clk.common,
+	&bus_tcon_tv1_clk.common,
+	&tve0_clk.common,
+	&bus_tve_top_clk.common,
+	&bus_tve0_clk.common,
+	&hdcp_clk.common,
+	&bus_hdcp_clk.common,
+};
+
+static struct clk_hw_onecell_data sun50i_h616_hw_clks = {
+	.hws	= {
+		[CLK_OSC12M]		= &osc12M_clk.hw,
+		[CLK_PLL_CPUX]		= &pll_cpux_clk.common.hw,
+		[CLK_PLL_DDR0]		= &pll_ddr0_clk.common.hw,
+		[CLK_PLL_DDR1]		= &pll_ddr1_clk.common.hw,
+		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
+		[CLK_PLL_PERIPH0_2X]	= &pll_periph0_2x_clk.hw,
+		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
+		[CLK_PLL_PERIPH1_2X]	= &pll_periph1_2x_clk.hw,
+		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
+		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
+		[CLK_PLL_VIDEO0_4X]	= &pll_video0_4x_clk.hw,
+		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
+		[CLK_PLL_VIDEO1_4X]	= &pll_video1_4x_clk.hw,
+		[CLK_PLL_VIDEO2]	= &pll_video2_clk.common.hw,
+		[CLK_PLL_VIDEO2_4X]	= &pll_video2_4x_clk.hw,
+		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
+		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
+		[CLK_PLL_AUDIO_HS]	= &pll_audio_hs_clk.common.hw,
+		[CLK_PLL_AUDIO_1X]	= &pll_audio_1x_clk.hw,
+		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
+		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
+		[CLK_CPUX]		= &cpux_clk.common.hw,
+		[CLK_AXI]		= &axi_clk.common.hw,
+		[CLK_CPUX_APB]		= &cpux_apb_clk.common.hw,
+		[CLK_PSI_AHB1_AHB2]	= &psi_ahb1_ahb2_clk.common.hw,
+		[CLK_AHB3]		= &ahb3_clk.common.hw,
+		[CLK_APB1]		= &apb1_clk.common.hw,
+		[CLK_APB2]		= &apb2_clk.common.hw,
+		[CLK_MBUS]		= &mbus_clk.common.hw,
+		[CLK_DE]		= &de_clk.common.hw,
+		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
+		[CLK_DEINTERLACE]	= &deinterlace_clk.common.hw,
+		[CLK_BUS_DEINTERLACE]	= &bus_deinterlace_clk.common.hw,
+		[CLK_G2D]		= &g2d_clk.common.hw,
+		[CLK_BUS_G2D]		= &bus_g2d_clk.common.hw,
+		[CLK_GPU0]		= &gpu0_clk.common.hw,
+		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
+		[CLK_GPU1]		= &gpu1_clk.common.hw,
+		[CLK_CE]		= &ce_clk.common.hw,
+		[CLK_BUS_CE]		= &bus_ce_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
+		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
+		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+		[CLK_BUS_DBG]		= &bus_dbg_clk.common.hw,
+		[CLK_BUS_PSI]		= &bus_psi_clk.common.hw,
+		[CLK_BUS_PWM]		= &bus_pwm_clk.common.hw,
+		[CLK_BUS_IOMMU]		= &bus_iommu_clk.common.hw,
+		[CLK_DRAM]		= &dram_clk.common.hw,
+		[CLK_MBUS_DMA]		= &mbus_dma_clk.common.hw,
+		[CLK_MBUS_VE]		= &mbus_ve_clk.common.hw,
+		[CLK_MBUS_CE]		= &mbus_ce_clk.common.hw,
+		[CLK_MBUS_TS]		= &mbus_ts_clk.common.hw,
+		[CLK_MBUS_NAND]		= &mbus_nand_clk.common.hw,
+		[CLK_MBUS_G2D]		= &mbus_g2d_clk.common.hw,
+		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
+		[CLK_NAND0]		= &nand0_clk.common.hw,
+		[CLK_NAND1]		= &nand1_clk.common.hw,
+		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC2]		= &mmc2_clk.common.hw,
+		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
+		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
+		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
+		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
+		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
+		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
+		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
+		[CLK_BUS_UART4]		= &bus_uart4_clk.common.hw,
+		[CLK_BUS_UART5]		= &bus_uart5_clk.common.hw,
+		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
+		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
+		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
+		[CLK_BUS_I2C3]		= &bus_i2c3_clk.common.hw,
+		[CLK_BUS_I2C4]		= &bus_i2c4_clk.common.hw,
+		[CLK_SPI0]		= &spi0_clk.common.hw,
+		[CLK_SPI1]		= &spi1_clk.common.hw,
+		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
+		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
+		[CLK_EMAC_25M]		= &emac_25m_clk.common.hw,
+		[CLK_BUS_EMAC0]		= &bus_emac0_clk.common.hw,
+		[CLK_BUS_EMAC1]		= &bus_emac1_clk.common.hw,
+		[CLK_TS]		= &ts_clk.common.hw,
+		[CLK_BUS_TS]		= &bus_ts_clk.common.hw,
+		[CLK_BUS_THS]		= &bus_ths_clk.common.hw,
+		[CLK_SPDIF]		= &spdif_clk.common.hw,
+		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
+		[CLK_DMIC]		= &dmic_clk.common.hw,
+		[CLK_BUS_DMIC]		= &bus_dmic_clk.common.hw,
+		[CLK_AUDIO_CODEC_1X]	= &audio_codec_1x_clk.common.hw,
+		[CLK_AUDIO_CODEC_4X]	= &audio_codec_4x_clk.common.hw,
+		[CLK_BUS_AUDIO_CODEC]	= &bus_audio_codec_clk.common.hw,
+		[CLK_AUDIO_HUB]		= &audio_hub_clk.common.hw,
+		[CLK_BUS_AUDIO_HUB]	= &bus_audio_hub_clk.common.hw,
+		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
+		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
+		[CLK_USB_OHCI1]		= &usb_ohci1_clk.common.hw,
+		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
+		[CLK_USB_OHCI2]		= &usb_ohci2_clk.common.hw,
+		[CLK_USB_PHY2]		= &usb_phy2_clk.common.hw,
+		[CLK_USB_OHCI3]		= &usb_ohci3_clk.common.hw,
+		[CLK_USB_PHY3]		= &usb_phy3_clk.common.hw,
+		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
+		[CLK_BUS_OHCI1]		= &bus_ohci1_clk.common.hw,
+		[CLK_BUS_OHCI2]		= &bus_ohci2_clk.common.hw,
+		[CLK_BUS_OHCI3]		= &bus_ohci3_clk.common.hw,
+		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
+		[CLK_BUS_EHCI1]		= &bus_ehci1_clk.common.hw,
+		[CLK_BUS_EHCI2]		= &bus_ehci2_clk.common.hw,
+		[CLK_BUS_EHCI3]		= &bus_ehci3_clk.common.hw,
+		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
+		[CLK_BUS_KEYADC]	= &bus_keyadc_clk.common.hw,
+		[CLK_HDMI]		= &hdmi_clk.common.hw,
+		[CLK_HDMI_SLOW]		= &hdmi_slow_clk.common.hw,
+		[CLK_HDMI_CEC]		= &hdmi_cec_clk.common.hw,
+		[CLK_BUS_HDMI]		= &bus_hdmi_clk.common.hw,
+		[CLK_BUS_TCON_TOP]	= &bus_tcon_top_clk.common.hw,
+		[CLK_TCON_TV0]		= &tcon_tv0_clk.common.hw,
+		[CLK_TCON_TV1]		= &tcon_tv1_clk.common.hw,
+		[CLK_BUS_TCON_TV0]	= &bus_tcon_tv0_clk.common.hw,
+		[CLK_BUS_TCON_TV1]	= &bus_tcon_tv1_clk.common.hw,
+		[CLK_TVE0]		= &tve0_clk.common.hw,
+		[CLK_BUS_TVE_TOP]	= &bus_tve_top_clk.common.hw,
+		[CLK_BUS_TVE0]		= &bus_tve0_clk.common.hw,
+		[CLK_HDCP]		= &hdcp_clk.common.hw,
+		[CLK_BUS_HDCP]		= &bus_hdcp_clk.common.hw,
+	},
+	.num = CLK_NUMBER,
+};
+
+static struct ccu_reset_map sun50i_h616_ccu_resets[] = {
+	[RST_MBUS]		= { 0x540, BIT(30) },
+
+	[RST_BUS_DE]		= { 0x60c, BIT(16) },
+	[RST_BUS_DEINTERLACE]	= { 0x62c, BIT(16) },
+	[RST_BUS_GPU]		= { 0x67c, BIT(16) },
+	[RST_BUS_CE]		= { 0x68c, BIT(16) },
+	[RST_BUS_VE]		= { 0x69c, BIT(16) },
+	[RST_BUS_DMA]		= { 0x70c, BIT(16) },
+	[RST_BUS_HSTIMER]	= { 0x73c, BIT(16) },
+	[RST_BUS_DBG]		= { 0x78c, BIT(16) },
+	[RST_BUS_PSI]		= { 0x79c, BIT(16) },
+	[RST_BUS_PWM]		= { 0x7ac, BIT(16) },
+	[RST_BUS_IOMMU]		= { 0x7bc, BIT(16) },
+	[RST_BUS_DRAM]		= { 0x80c, BIT(16) },
+	[RST_BUS_NAND]		= { 0x82c, BIT(16) },
+	[RST_BUS_MMC0]		= { 0x84c, BIT(16) },
+	[RST_BUS_MMC1]		= { 0x84c, BIT(17) },
+	[RST_BUS_MMC2]		= { 0x84c, BIT(18) },
+	[RST_BUS_UART0]		= { 0x90c, BIT(16) },
+	[RST_BUS_UART1]		= { 0x90c, BIT(17) },
+	[RST_BUS_UART2]		= { 0x90c, BIT(18) },
+	[RST_BUS_UART3]		= { 0x90c, BIT(19) },
+	[RST_BUS_UART4]		= { 0x90c, BIT(20) },
+	[RST_BUS_UART5]		= { 0x90c, BIT(21) },
+	[RST_BUS_I2C0]		= { 0x91c, BIT(16) },
+	[RST_BUS_I2C1]		= { 0x91c, BIT(17) },
+	[RST_BUS_I2C2]		= { 0x91c, BIT(18) },
+	[RST_BUS_I2C3]		= { 0x91c, BIT(19) },
+	[RST_BUS_I2C4]		= { 0x91c, BIT(20) },
+	[RST_BUS_SPI0]		= { 0x96c, BIT(16) },
+	[RST_BUS_SPI1]		= { 0x96c, BIT(17) },
+	[RST_BUS_EMAC0]		= { 0x97c, BIT(16) },
+	[RST_BUS_EMAC1]		= { 0x97c, BIT(17) },
+	[RST_BUS_TS]		= { 0x9bc, BIT(16) },
+	[RST_BUS_THS]		= { 0x9fc, BIT(16) },
+	[RST_BUS_SPDIF]		= { 0xa2c, BIT(16) },
+	[RST_BUS_DMIC]		= { 0xa4c, BIT(16) },
+	[RST_BUS_AUDIO_CODEC]	= { 0xa5c, BIT(16) },
+	[RST_BUS_AUDIO_HUB]	= { 0xa6c, BIT(16) },
+
+	[RST_USB_PHY0]		= { 0xa70, BIT(30) },
+	[RST_USB_PHY1]		= { 0xa74, BIT(30) },
+	[RST_USB_PHY2]		= { 0xa78, BIT(30) },
+	[RST_USB_PHY3]		= { 0xa7c, BIT(30) },
+	[RST_BUS_OHCI0]		= { 0xa8c, BIT(16) },
+	[RST_BUS_OHCI1]		= { 0xa8c, BIT(17) },
+	[RST_BUS_OHCI2]		= { 0xa8c, BIT(18) },
+	[RST_BUS_OHCI3]		= { 0xa8c, BIT(19) },
+	[RST_BUS_EHCI0]		= { 0xa8c, BIT(20) },
+	[RST_BUS_EHCI1]		= { 0xa8c, BIT(21) },
+	[RST_BUS_EHCI2]		= { 0xa8c, BIT(22) },
+	[RST_BUS_EHCI3]		= { 0xa8c, BIT(23) },
+	[RST_BUS_OTG]		= { 0xa8c, BIT(24) },
+	[RST_BUS_KEYADC]	= { 0xa9c, BIT(16) },
+
+	[RST_BUS_HDMI]		= { 0xb1c, BIT(16) },
+	[RST_BUS_HDMI_SUB]	= { 0xb1c, BIT(17) },
+	[RST_BUS_TCON_TOP]	= { 0xb5c, BIT(16) },
+	[RST_BUS_TCON_TV0]	= { 0xb9c, BIT(16) },
+	[RST_BUS_TCON_TV1]	= { 0xb9c, BIT(17) },
+	[RST_BUS_TVE_TOP]	= { 0xbbc, BIT(16) },
+	[RST_BUS_TVE0]		= { 0xbbc, BIT(17) },
+	[RST_BUS_HDCP]		= { 0xc4c, BIT(16) },
+};
+
+static const struct sunxi_ccu_desc sun50i_h616_ccu_desc = {
+	.ccu_clks	= sun50i_h616_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun50i_h616_ccu_clks),
+
+	.hw_clks	= &sun50i_h616_hw_clks,
+
+	.resets		= sun50i_h616_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun50i_h616_ccu_resets),
+};
+
+static const u32 pll_regs[] = {
+	SUN50I_H616_PLL_CPUX_REG,
+	SUN50I_H616_PLL_DDR0_REG,
+	SUN50I_H616_PLL_DDR1_REG,
+	SUN50I_H616_PLL_PERIPH0_REG,
+	SUN50I_H616_PLL_PERIPH1_REG,
+	SUN50I_H616_PLL_GPU_REG,
+	SUN50I_H616_PLL_VIDEO0_REG,
+	SUN50I_H616_PLL_VIDEO1_REG,
+	SUN50I_H616_PLL_VIDEO2_REG,
+	SUN50I_H616_PLL_VE_REG,
+	SUN50I_H616_PLL_DE_REG,
+	SUN50I_H616_PLL_AUDIO_REG,
+};
+
+static const u32 pll_video_regs[] = {
+	SUN50I_H616_PLL_VIDEO0_REG,
+	SUN50I_H616_PLL_VIDEO1_REG,
+	SUN50I_H616_PLL_VIDEO2_REG,
+};
+
+static const u32 usb2_clk_regs[] = {
+	SUN50I_H616_USB0_CLK_REG,
+	SUN50I_H616_USB1_CLK_REG,
+	SUN50I_H616_USB2_CLK_REG,
+	SUN50I_H616_USB3_CLK_REG,
+};
+
+static void __init sun50i_h616_ccu_setup(struct device_node *node)
+{
+	void __iomem *reg;
+	u32 val;
+	int i;
+
+	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
+	if (IS_ERR(reg)) {
+		pr_err("%pOF: Could not map clock registers\n", node);
+		return;
+	}
+
+	/* Enable the lock bits and the output enable bits on all PLLs */
+	for (i = 0; i < ARRAY_SIZE(pll_regs); i++) {
+		val = readl(reg + pll_regs[i]);
+		val |= BIT(29) | BIT(27);
+		writel(val, reg + pll_regs[i]);
+	}
+
+	/*
+	 * Force the output divider of video PLLs to 0.
+	 *
+	 * See the comment before pll-video0 definition for the reason.
+	 */
+	for (i = 0; i < ARRAY_SIZE(pll_video_regs); i++) {
+		val = readl(reg + pll_video_regs[i]);
+		val &= ~BIT(0);
+		writel(val, reg + pll_video_regs[i]);
+	}
+
+	/*
+	 * Force OHCI 12M clock sources to 00 (12MHz divided from 48MHz)
+	 *
+	 * This clock mux is still mysterious, and the code just enforces
+	 * it to have a valid clock parent.
+	 */
+	for (i = 0; i < ARRAY_SIZE(usb2_clk_regs); i++) {
+		val = readl(reg + usb2_clk_regs[i]);
+		val &= ~GENMASK(25, 24);
+		writel(val, reg + usb2_clk_regs[i]);
+	}
+
+	/*
+	 * Force the post-divider of pll-audio to 12 and the output divider
+	 * of it to 2, so 24576000 and 22579200 rates can be set exactly.
+	 */
+	val = readl(reg + SUN50I_H616_PLL_AUDIO_REG);
+	val &= ~(GENMASK(21, 16) | BIT(0));
+	writel(val | (11 << 16) | BIT(0), reg + SUN50I_H616_PLL_AUDIO_REG);
+
+	/*
+	 * First clock parent (osc32K) is unusable for CEC. But since there
+	 * is no good way to force parent switch (both run with same frequency),
+	 * just set second clock parent here.
+	 */
+	val = readl(reg + SUN50I_H616_HDMI_CEC_CLK_REG);
+	val |= BIT(24);
+	writel(val, reg + SUN50I_H616_HDMI_CEC_CLK_REG);
+
+	of_sunxi_ccu_probe(node, reg, &sun50i_h616_ccu_desc);
+}
+
+CLK_OF_DECLARE(sun50i_h616_ccu, "allwinner,sun50i-h616-ccu",
+	       sun50i_h616_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/sun50i-h616-ccu.h b/drivers/clk/sunxi-ng/sun50i-h616-ccu.h
new file mode 100644
index 000000000000..dd671b413f22
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun50i-h616-ccu.h
@@ -0,0 +1,56 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright 2020 Arm Ltd.
+ */
+
+#ifndef _CCU_SUN50I_H616_H_
+#define _CCU_SUN50I_H616_H_
+
+#include <dt-bindings/clock/sun50i-h616-ccu.h>
+#include <dt-bindings/reset/sun50i-h616-ccu.h>
+
+#define CLK_OSC12M		0
+#define CLK_PLL_CPUX		1
+#define CLK_PLL_DDR0		2
+#define CLK_PLL_DDR1		3
+
+/* PLL_PERIPH0 exported for PRCM */
+
+#define CLK_PLL_PERIPH0_2X	5
+#define CLK_PLL_PERIPH1		6
+#define CLK_PLL_PERIPH1_2X	7
+#define CLK_PLL_GPU		8
+#define CLK_PLL_VIDEO0		9
+#define CLK_PLL_VIDEO0_4X	10
+#define CLK_PLL_VIDEO1		11
+#define CLK_PLL_VIDEO1_4X	12
+#define CLK_PLL_VIDEO2		13
+#define CLK_PLL_VIDEO2_4X	14
+#define CLK_PLL_VE		15
+#define CLK_PLL_DE		16
+#define CLK_PLL_AUDIO_HS	17
+#define CLK_PLL_AUDIO_1X	18
+#define CLK_PLL_AUDIO_2X	19
+#define CLK_PLL_AUDIO_4X	20
+
+/* CPUX clock exported for DVFS */
+
+#define CLK_AXI			22
+#define CLK_CPUX_APB		23
+#define CLK_PSI_AHB1_AHB2	24
+#define CLK_AHB3		25
+
+/* APB1 clock exported for PIO */
+
+#define CLK_APB2		27
+#define CLK_MBUS		28
+
+/* All module clocks and bus gates are exported except DRAM */
+
+#define CLK_DRAM		49
+
+#define CLK_BUS_DRAM		56
+
+#define CLK_NUMBER		(CLK_BUS_HDCP + 1)
+
+#endif /* _CCU_SUN50I_H616_H_ */
diff --git a/drivers/clk/sunxi-ng/sun5i-ccu.c b/drivers/clk/sunxi-ng/sun5i-ccu.c
new file mode 100644
index 000000000000..4763ef93319f
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun5i-ccu.c
@@ -0,0 +1,1037 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (c) 2016 Maxime Ripard. All rights reserved.
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/io.h>
+#include <linux/of_address.h>
+
+#include "ccu_common.h"
+#include "ccu_reset.h"
+
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_mp.h"
+#include "ccu_mult.h"
+#include "ccu_nk.h"
+#include "ccu_nkm.h"
+#include "ccu_nkmp.h"
+#include "ccu_nm.h"
+#include "ccu_phase.h"
+#include "ccu_sdm.h"
+
+#include "sun5i-ccu.h"
+
+static struct ccu_nkmp pll_core_clk = {
+	.enable		= BIT(31),
+	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
+	.k		= _SUNXI_CCU_MULT(4, 2),
+	.m		= _SUNXI_CCU_DIV(0, 2),
+	.p		= _SUNXI_CCU_DIV(16, 2),
+	.common		= {
+		.reg		= 0x000,
+		.hw.init	= CLK_HW_INIT("pll-core",
+					      "hosc",
+					      &ccu_nkmp_ops,
+					      0),
+	},
+};
+
+/*
+ * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
+ * the base (2x, 4x and 8x), and one variable divider (the one true
+ * pll audio).
+ *
+ * With sigma-delta modulation for fractional-N on the audio PLL,
+ * we have to use specific dividers. This means the variable divider
+ * can no longer be used, as the audio codec requests the exact clock
+ * rates we support through this mechanism. So we now hard code the
+ * variable divider to 1. This means the clock rates will no longer
+ * match the clock names.
+ */
+#define SUN5I_PLL_AUDIO_REG	0x008
+
+static struct ccu_sdm_setting pll_audio_sdm_table[] = {
+	{ .rate = 22579200, .pattern = 0xc0010d84, .m = 8, .n = 7 },
+	{ .rate = 24576000, .pattern = 0xc000ac02, .m = 14, .n = 14 },
+};
+
+static struct ccu_nm pll_audio_base_clk = {
+	.enable		= BIT(31),
+	.n		= _SUNXI_CCU_MULT_OFFSET(8, 7, 0),
+
+	/*
+	 * The datasheet is wrong here, this doesn't have any
+	 * offset
+	 */
+	.m		= _SUNXI_CCU_DIV_OFFSET(0, 5, 0),
+	.sdm		= _SUNXI_CCU_SDM(pll_audio_sdm_table, 0,
+					 0x00c, BIT(31)),
+	.common		= {
+		.reg		= 0x008,
+		.features	= CCU_FEATURE_SIGMA_DELTA_MOD,
+		.hw.init	= CLK_HW_INIT("pll-audio-base",
+					      "hosc",
+					      &ccu_nm_ops,
+					      0),
+	},
+};
+
+static struct ccu_mult pll_video0_clk = {
+	.enable		= BIT(31),
+	.mult		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(0, 7, 0, 9, 127),
+	.frac		= _SUNXI_CCU_FRAC(BIT(15), BIT(14),
+					  270000000, 297000000),
+	.common		= {
+		.reg		= 0x010,
+		.features	= (CCU_FEATURE_FRACTIONAL |
+				   CCU_FEATURE_ALL_PREDIV),
+		.prediv		= 8,
+		.hw.init	= CLK_HW_INIT("pll-video0",
+					      "hosc",
+					      &ccu_mult_ops,
+					      0),
+	},
+};
+
+static struct ccu_nkmp pll_ve_clk = {
+	.enable		= BIT(31),
+	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
+	.k		= _SUNXI_CCU_MULT(4, 2),
+	.m		= _SUNXI_CCU_DIV(0, 2),
+	.p		= _SUNXI_CCU_DIV(16, 2),
+	.common		= {
+		.reg		= 0x018,
+		.hw.init	= CLK_HW_INIT("pll-ve",
+					      "hosc",
+					      &ccu_nkmp_ops,
+					      0),
+	},
+};
+
+static struct ccu_nk pll_ddr_base_clk = {
+	.enable		= BIT(31),
+	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
+	.k		= _SUNXI_CCU_MULT(4, 2),
+	.common		= {
+		.reg		= 0x020,
+		.hw.init	= CLK_HW_INIT("pll-ddr-base",
+					      "hosc",
+					      &ccu_nk_ops,
+					      0),
+	},
+};
+
+static SUNXI_CCU_M(pll_ddr_clk, "pll-ddr", "pll-ddr-base", 0x020, 0, 2,
+		   CLK_IS_CRITICAL);
+
+static struct ccu_div pll_ddr_other_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(16, 2, CLK_DIVIDER_POWER_OF_TWO),
+
+	.common		= {
+		.reg		= 0x020,
+		.hw.init	= CLK_HW_INIT("pll-ddr-other", "pll-ddr-base",
+					      &ccu_div_ops,
+					      0),
+	},
+};
+
+static struct ccu_nk pll_periph_clk = {
+	.enable		= BIT(31),
+	.n		= _SUNXI_CCU_MULT_OFFSET(8, 5, 0),
+	.k		= _SUNXI_CCU_MULT(4, 2),
+	.fixed_post_div	= 2,
+	.common		= {
+		.reg		= 0x028,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-periph",
+					      "hosc",
+					      &ccu_nk_ops,
+					      0),
+	},
+};
+
+static struct ccu_mult pll_video1_clk = {
+	.enable		= BIT(31),
+	.mult		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(0, 7, 0, 9, 127),
+	.frac		= _SUNXI_CCU_FRAC(BIT(15), BIT(14),
+				  270000000, 297000000),
+	.common		= {
+		.reg		= 0x030,
+		.features	= (CCU_FEATURE_FRACTIONAL |
+				   CCU_FEATURE_ALL_PREDIV),
+		.prediv		= 8,
+		.hw.init	= CLK_HW_INIT("pll-video1",
+					      "hosc",
+					      &ccu_mult_ops,
+					      0),
+	},
+};
+
+static SUNXI_CCU_GATE(hosc_clk,	"hosc",	"osc24M", 0x050, BIT(0), 0);
+
+#define SUN5I_AHB_REG	0x054
+static const char * const cpu_parents[] = { "osc32k", "hosc",
+					    "pll-core" , "pll-periph" };
+static const struct ccu_mux_fixed_prediv cpu_predivs[] = {
+	{ .index = 3, .div = 3, },
+};
+static struct ccu_mux cpu_clk = {
+	.mux		= {
+		.shift		= 16,
+		.width		= 2,
+		.fixed_predivs	= cpu_predivs,
+		.n_predivs	= ARRAY_SIZE(cpu_predivs),
+	},
+	.common		= {
+		.reg		= 0x054,
+		.features	= CCU_FEATURE_FIXED_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("cpu",
+						      cpu_parents,
+						      &ccu_mux_ops,
+						      CLK_SET_RATE_PARENT | CLK_IS_CRITICAL),
+	}
+};
+
+static SUNXI_CCU_M(axi_clk, "axi", "cpu", 0x054, 0, 2, 0);
+
+static const char * const ahb_parents[] = { "axi" , "cpu", "pll-periph" };
+static const struct ccu_mux_fixed_prediv ahb_predivs[] = {
+	{ .index = 2, .div = 2, },
+};
+static struct ccu_div ahb_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= {
+		.shift		= 6,
+		.width		= 2,
+		.fixed_predivs	= ahb_predivs,
+		.n_predivs	= ARRAY_SIZE(ahb_predivs),
+	},
+
+	.common		= {
+		.reg		= 0x054,
+		.hw.init	= CLK_HW_INIT_PARENTS("ahb",
+						      ahb_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static struct clk_div_table apb0_div_table[] = {
+	{ .val = 0, .div = 2 },
+	{ .val = 1, .div = 2 },
+	{ .val = 2, .div = 4 },
+	{ .val = 3, .div = 8 },
+	{ /* Sentinel */ },
+};
+static SUNXI_CCU_DIV_TABLE(apb0_clk, "apb0", "ahb",
+			   0x054, 8, 2, apb0_div_table, 0);
+
+static const char * const apb1_parents[] = { "hosc", "pll-periph", "osc32k" };
+static SUNXI_CCU_MP_WITH_MUX(apb1_clk, "apb1", apb1_parents, 0x058,
+			     0, 5,	/* M */
+			     16, 2,	/* P */
+			     24, 2,	/* mux */
+			     0);
+
+static SUNXI_CCU_GATE(axi_dram_clk,	"axi-dram",	"axi",
+		      0x05c, BIT(0), 0);
+
+static SUNXI_CCU_GATE(ahb_otg_clk,	"ahb-otg",	"ahb",
+		      0x060, BIT(0), 0);
+static SUNXI_CCU_GATE(ahb_ehci_clk,	"ahb-ehci",	"ahb",
+		      0x060, BIT(1), 0);
+static SUNXI_CCU_GATE(ahb_ohci_clk,	"ahb-ohci",	"ahb",
+		      0x060, BIT(2), 0);
+static SUNXI_CCU_GATE(ahb_ss_clk,	"ahb-ss",	"ahb",
+		      0x060, BIT(5), 0);
+static SUNXI_CCU_GATE(ahb_dma_clk,	"ahb-dma",	"ahb",
+		      0x060, BIT(6), 0);
+static SUNXI_CCU_GATE(ahb_bist_clk,	"ahb-bist",	"ahb",
+		      0x060, BIT(7), 0);
+static SUNXI_CCU_GATE(ahb_mmc0_clk,	"ahb-mmc0",	"ahb",
+		      0x060, BIT(8), 0);
+static SUNXI_CCU_GATE(ahb_mmc1_clk,	"ahb-mmc1",	"ahb",
+		      0x060, BIT(9), 0);
+static SUNXI_CCU_GATE(ahb_mmc2_clk,	"ahb-mmc2",	"ahb",
+		      0x060, BIT(10), 0);
+static SUNXI_CCU_GATE(ahb_nand_clk,	"ahb-nand",	"ahb",
+		      0x060, BIT(13), 0);
+static SUNXI_CCU_GATE(ahb_sdram_clk,	"ahb-sdram",	"ahb",
+		      0x060, BIT(14), CLK_IS_CRITICAL);
+static SUNXI_CCU_GATE(ahb_emac_clk,	"ahb-emac",	"ahb",
+		      0x060, BIT(17), 0);
+static SUNXI_CCU_GATE(ahb_ts_clk,	"ahb-ts",	"ahb",
+		      0x060, BIT(18), 0);
+static SUNXI_CCU_GATE(ahb_spi0_clk,	"ahb-spi0",	"ahb",
+		      0x060, BIT(20), 0);
+static SUNXI_CCU_GATE(ahb_spi1_clk,	"ahb-spi1",	"ahb",
+		      0x060, BIT(21), 0);
+static SUNXI_CCU_GATE(ahb_spi2_clk,	"ahb-spi2",	"ahb",
+		      0x060, BIT(22), 0);
+static SUNXI_CCU_GATE(ahb_gps_clk,	"ahb-gps",	"ahb",
+		      0x060, BIT(26), 0);
+static SUNXI_CCU_GATE(ahb_hstimer_clk,	"ahb-hstimer",	"ahb",
+		      0x060, BIT(28), 0);
+
+static SUNXI_CCU_GATE(ahb_ve_clk,	"ahb-ve",	"ahb",
+		      0x064, BIT(0), 0);
+static SUNXI_CCU_GATE(ahb_tve_clk,	"ahb-tve",	"ahb",
+		      0x064, BIT(2), 0);
+static SUNXI_CCU_GATE(ahb_lcd_clk,	"ahb-lcd",	"ahb",
+		      0x064, BIT(4), 0);
+static SUNXI_CCU_GATE(ahb_csi_clk,	"ahb-csi",	"ahb",
+		      0x064, BIT(8), 0);
+static SUNXI_CCU_GATE(ahb_hdmi_clk,	"ahb-hdmi",	"ahb",
+		      0x064, BIT(11), 0);
+static SUNXI_CCU_GATE(ahb_de_be_clk,	"ahb-de-be",	"ahb",
+		      0x064, BIT(12), 0);
+static SUNXI_CCU_GATE(ahb_de_fe_clk,	"ahb-de-fe",	"ahb",
+		      0x064, BIT(14), 0);
+static SUNXI_CCU_GATE(ahb_iep_clk,	"ahb-iep",	"ahb",
+		      0x064, BIT(19), 0);
+static SUNXI_CCU_GATE(ahb_gpu_clk,	"ahb-gpu",	"ahb",
+		      0x064, BIT(20), 0);
+
+static SUNXI_CCU_GATE(apb0_codec_clk,	"apb0-codec",	"apb0",
+		      0x068, BIT(0), 0);
+static SUNXI_CCU_GATE(apb0_spdif_clk,	"apb0-spdif",	"apb0",
+		      0x068, BIT(1), 0);
+static SUNXI_CCU_GATE(apb0_i2s_clk,	"apb0-i2s",	"apb0",
+		      0x068, BIT(3), 0);
+static SUNXI_CCU_GATE(apb0_pio_clk,	"apb0-pio",	"apb0",
+		      0x068, BIT(5), 0);
+static SUNXI_CCU_GATE(apb0_ir_clk,	"apb0-ir",	"apb0",
+		      0x068, BIT(6), 0);
+static SUNXI_CCU_GATE(apb0_keypad_clk,	"apb0-keypad",	"apb0",
+		      0x068, BIT(10), 0);
+
+static SUNXI_CCU_GATE(apb1_i2c0_clk,	"apb1-i2c0",	"apb1",
+		      0x06c, BIT(0), 0);
+static SUNXI_CCU_GATE(apb1_i2c1_clk,	"apb1-i2c1",	"apb1",
+		      0x06c, BIT(1), 0);
+static SUNXI_CCU_GATE(apb1_i2c2_clk,	"apb1-i2c2",	"apb1",
+		      0x06c, BIT(2), 0);
+static SUNXI_CCU_GATE(apb1_uart0_clk,	"apb1-uart0",	"apb1",
+		      0x06c, BIT(16), 0);
+static SUNXI_CCU_GATE(apb1_uart1_clk,	"apb1-uart1",	"apb1",
+		      0x06c, BIT(17), 0);
+static SUNXI_CCU_GATE(apb1_uart2_clk,	"apb1-uart2",	"apb1",
+		      0x06c, BIT(18), 0);
+static SUNXI_CCU_GATE(apb1_uart3_clk,	"apb1-uart3",	"apb1",
+		      0x06c, BIT(19), 0);
+
+static const char * const mod0_default_parents[] = { "hosc", "pll-periph",
+						     "pll-ddr-other" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand_clk, "nand", mod0_default_parents, 0x080,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents, 0x088,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents, 0x08c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents, 0x090,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(ts_clk, "ts", mod0_default_parents, 0x098,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(ss_clk, "ss", mod0_default_parents, 0x09c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents, 0x0a0,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents, 0x0a4,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi2_clk, "spi2", mod0_default_parents, 0x0a8,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(ir_clk, "ir", mod0_default_parents, 0x0b0,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static const char * const i2s_parents[] = { "pll-audio-8x", "pll-audio-4x",
+					    "pll-audio-2x", "pll-audio" };
+static SUNXI_CCU_MUX_WITH_GATE(i2s_clk, "i2s", i2s_parents,
+			       0x0b8, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static const char * const spdif_parents[] = { "pll-audio-8x", "pll-audio-4x",
+					    "pll-audio-2x", "pll-audio" };
+static SUNXI_CCU_MUX_WITH_GATE(spdif_clk, "spdif", spdif_parents,
+			       0x0c0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static const char * const keypad_parents[] = { "hosc", "losc"};
+static const u8 keypad_table[] = { 0, 2 };
+static struct ccu_mp keypad_clk = {
+	.enable		= BIT(31),
+	.m		= _SUNXI_CCU_DIV(8, 5),
+	.p		= _SUNXI_CCU_DIV(20, 2),
+	.mux		= _SUNXI_CCU_MUX_TABLE(24, 2, keypad_table),
+
+	.common		= {
+		.reg		= 0x0c4,
+		.hw.init	= CLK_HW_INIT_PARENTS("keypad",
+						      keypad_parents,
+						      &ccu_mp_ops,
+						      0),
+	},
+};
+
+static SUNXI_CCU_GATE(usb_ohci_clk,	"usb-ohci",	"pll-periph",
+		      0x0cc, BIT(6), 0);
+static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"pll-periph",
+		      0x0cc, BIT(8), 0);
+static SUNXI_CCU_GATE(usb_phy1_clk,	"usb-phy1",	"pll-periph",
+		      0x0cc, BIT(9), 0);
+
+static const char * const gps_parents[] = { "hosc", "pll-periph",
+					    "pll-video1", "pll-ve" };
+static SUNXI_CCU_M_WITH_MUX_GATE(gps_clk, "gps", gps_parents,
+				 0x0d0, 0, 3, 24, 2, BIT(31), 0);
+
+static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"pll-ddr",
+		      0x100, BIT(0), 0);
+static SUNXI_CCU_GATE(dram_csi_clk,	"dram-csi",	"pll-ddr",
+		      0x100, BIT(1), 0);
+static SUNXI_CCU_GATE(dram_ts_clk,	"dram-ts",	"pll-ddr",
+		      0x100, BIT(3), 0);
+static SUNXI_CCU_GATE(dram_tve_clk,	"dram-tve",	"pll-ddr",
+		      0x100, BIT(5), 0);
+static SUNXI_CCU_GATE(dram_de_fe_clk,	"dram-de-fe",	"pll-ddr",
+		      0x100, BIT(25), 0);
+static SUNXI_CCU_GATE(dram_de_be_clk,	"dram-de-be",	"pll-ddr",
+		      0x100, BIT(26), 0);
+static SUNXI_CCU_GATE(dram_ace_clk,	"dram-ace",	"pll-ddr",
+		      0x100, BIT(29), 0);
+static SUNXI_CCU_GATE(dram_iep_clk,	"dram-iep",	"pll-ddr",
+		      0x100, BIT(31), 0);
+
+static const char * const de_parents[] = { "pll-video0", "pll-video1",
+					   "pll-ddr-other" };
+static SUNXI_CCU_M_WITH_MUX_GATE(de_be_clk, "de-be", de_parents,
+				 0x104, 0, 4, 24, 2, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(de_fe_clk, "de-fe", de_parents,
+				 0x10c, 0, 4, 24, 2, BIT(31), 0);
+
+static const char * const tcon_parents[] = { "pll-video0", "pll-video1",
+					     "pll-video0-2x", "pll-video1-2x" };
+static SUNXI_CCU_MUX_WITH_GATE(tcon_ch0_clk, "tcon-ch0-sclk", tcon_parents,
+			       0x118, 24, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(tcon_ch1_sclk2_clk, "tcon-ch1-sclk2",
+				 tcon_parents,
+				 0x12c, 0, 4, 24, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M_WITH_GATE(tcon_ch1_sclk1_clk, "tcon-ch1-sclk1", "tcon-ch1-sclk2",
+			     0x12c, 11, 1, BIT(15), CLK_SET_RATE_PARENT);
+
+static const char * const csi_parents[] = { "hosc", "pll-video0", "pll-video1",
+					    "pll-video0-2x", "pll-video1-2x" };
+static const u8 csi_table[] = { 0, 1, 2, 5, 6 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi_clk, "csi",
+				       csi_parents, csi_table,
+				       0x134, 0, 5, 24, 3, BIT(31), 0);
+
+static SUNXI_CCU_GATE(ve_clk,		"ve",		"pll-ve",
+		      0x13c, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(codec_clk,	"codec",	"pll-audio",
+		      0x140, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(avs_clk,		"avs",		"hosc",
+		      0x144, BIT(31), 0);
+
+static const char * const hdmi_parents[] = { "pll-video0", "pll-video0-2x" };
+static const u8 hdmi_table[] = { 0, 2 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(hdmi_clk, "hdmi",
+				       hdmi_parents, hdmi_table,
+				       0x150, 0, 4, 24, 2, BIT(31),
+				       CLK_SET_RATE_PARENT);
+
+static const char * const gpu_parents[] = { "pll-video0", "pll-ve",
+					    "pll-ddr-other", "pll-video1",
+					    "pll-video1-2x" };
+static SUNXI_CCU_M_WITH_MUX_GATE(gpu_clk, "gpu", gpu_parents,
+				 0x154, 0, 4, 24, 3, BIT(31), 0);
+
+static const char * const mbus_parents[] = { "hosc", "pll-periph", "pll-ddr" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents,
+				  0x15c, 0, 4, 16, 2, 24, 2, BIT(31), CLK_IS_CRITICAL);
+
+static SUNXI_CCU_GATE(iep_clk,		"iep",		"de-be",
+		      0x160, BIT(31), 0);
+
+static struct ccu_common *sun5i_a10s_ccu_clks[] = {
+	&hosc_clk.common,
+	&pll_core_clk.common,
+	&pll_audio_base_clk.common,
+	&pll_video0_clk.common,
+	&pll_ve_clk.common,
+	&pll_ddr_base_clk.common,
+	&pll_ddr_clk.common,
+	&pll_ddr_other_clk.common,
+	&pll_periph_clk.common,
+	&pll_video1_clk.common,
+	&cpu_clk.common,
+	&axi_clk.common,
+	&ahb_clk.common,
+	&apb0_clk.common,
+	&apb1_clk.common,
+	&axi_dram_clk.common,
+	&ahb_otg_clk.common,
+	&ahb_ehci_clk.common,
+	&ahb_ohci_clk.common,
+	&ahb_ss_clk.common,
+	&ahb_dma_clk.common,
+	&ahb_bist_clk.common,
+	&ahb_mmc0_clk.common,
+	&ahb_mmc1_clk.common,
+	&ahb_mmc2_clk.common,
+	&ahb_nand_clk.common,
+	&ahb_sdram_clk.common,
+	&ahb_emac_clk.common,
+	&ahb_ts_clk.common,
+	&ahb_spi0_clk.common,
+	&ahb_spi1_clk.common,
+	&ahb_spi2_clk.common,
+	&ahb_gps_clk.common,
+	&ahb_hstimer_clk.common,
+	&ahb_ve_clk.common,
+	&ahb_tve_clk.common,
+	&ahb_lcd_clk.common,
+	&ahb_csi_clk.common,
+	&ahb_hdmi_clk.common,
+	&ahb_de_be_clk.common,
+	&ahb_de_fe_clk.common,
+	&ahb_iep_clk.common,
+	&ahb_gpu_clk.common,
+	&apb0_codec_clk.common,
+	&apb0_spdif_clk.common,
+	&apb0_i2s_clk.common,
+	&apb0_pio_clk.common,
+	&apb0_ir_clk.common,
+	&apb0_keypad_clk.common,
+	&apb1_i2c0_clk.common,
+	&apb1_i2c1_clk.common,
+	&apb1_i2c2_clk.common,
+	&apb1_uart0_clk.common,
+	&apb1_uart1_clk.common,
+	&apb1_uart2_clk.common,
+	&apb1_uart3_clk.common,
+	&nand_clk.common,
+	&mmc0_clk.common,
+	&mmc1_clk.common,
+	&mmc2_clk.common,
+	&ts_clk.common,
+	&ss_clk.common,
+	&spi0_clk.common,
+	&spi1_clk.common,
+	&spi2_clk.common,
+	&ir_clk.common,
+	&i2s_clk.common,
+	&spdif_clk.common,
+	&keypad_clk.common,
+	&usb_ohci_clk.common,
+	&usb_phy0_clk.common,
+	&usb_phy1_clk.common,
+	&gps_clk.common,
+	&dram_ve_clk.common,
+	&dram_csi_clk.common,
+	&dram_ts_clk.common,
+	&dram_tve_clk.common,
+	&dram_de_fe_clk.common,
+	&dram_de_be_clk.common,
+	&dram_ace_clk.common,
+	&dram_iep_clk.common,
+	&de_be_clk.common,
+	&de_fe_clk.common,
+	&tcon_ch0_clk.common,
+	&tcon_ch1_sclk2_clk.common,
+	&tcon_ch1_sclk1_clk.common,
+	&csi_clk.common,
+	&ve_clk.common,
+	&codec_clk.common,
+	&avs_clk.common,
+	&hdmi_clk.common,
+	&gpu_clk.common,
+	&mbus_clk.common,
+	&iep_clk.common,
+};
+
+static const struct clk_hw *clk_parent_pll_audio[] = {
+	&pll_audio_base_clk.common.hw
+};
+
+/* We hardcode the divider to 1 for now */
+static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
+			    clk_parent_pll_audio,
+			    1, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
+			    clk_parent_pll_audio,
+			    2, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
+			    clk_parent_pll_audio,
+			    1, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
+			    clk_parent_pll_audio,
+			    1, 2, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HW(pll_video0_2x_clk, "pll-video0-2x",
+			   &pll_video0_clk.common.hw,
+			   1, 2, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HW(pll_video1_2x_clk, "pll-video1-2x",
+			   &pll_video1_clk.common.hw,
+			   1, 2, CLK_SET_RATE_PARENT);
+
+static struct clk_hw_onecell_data sun5i_a10s_hw_clks = {
+	.hws	= {
+		[CLK_HOSC]		= &hosc_clk.common.hw,
+		[CLK_PLL_CORE]		= &pll_core_clk.common.hw,
+		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
+		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
+		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
+		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
+		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
+		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
+		[CLK_PLL_VIDEO0_2X]	= &pll_video0_2x_clk.hw,
+		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
+		[CLK_PLL_DDR_BASE]	= &pll_ddr_base_clk.common.hw,
+		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
+		[CLK_PLL_DDR_OTHER]	= &pll_ddr_other_clk.common.hw,
+		[CLK_PLL_PERIPH]	= &pll_periph_clk.common.hw,
+		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
+		[CLK_PLL_VIDEO1_2X]	= &pll_video1_2x_clk.hw,
+		[CLK_CPU]		= &cpu_clk.common.hw,
+		[CLK_AXI]		= &axi_clk.common.hw,
+		[CLK_AHB]		= &ahb_clk.common.hw,
+		[CLK_APB0]		= &apb0_clk.common.hw,
+		[CLK_APB1]		= &apb1_clk.common.hw,
+		[CLK_DRAM_AXI]		= &axi_dram_clk.common.hw,
+		[CLK_AHB_OTG]		= &ahb_otg_clk.common.hw,
+		[CLK_AHB_EHCI]		= &ahb_ehci_clk.common.hw,
+		[CLK_AHB_OHCI]		= &ahb_ohci_clk.common.hw,
+		[CLK_AHB_SS]		= &ahb_ss_clk.common.hw,
+		[CLK_AHB_DMA]		= &ahb_dma_clk.common.hw,
+		[CLK_AHB_BIST]		= &ahb_bist_clk.common.hw,
+		[CLK_AHB_MMC0]		= &ahb_mmc0_clk.common.hw,
+		[CLK_AHB_MMC1]		= &ahb_mmc1_clk.common.hw,
+		[CLK_AHB_MMC2]		= &ahb_mmc2_clk.common.hw,
+		[CLK_AHB_NAND]		= &ahb_nand_clk.common.hw,
+		[CLK_AHB_SDRAM]		= &ahb_sdram_clk.common.hw,
+		[CLK_AHB_EMAC]		= &ahb_emac_clk.common.hw,
+		[CLK_AHB_TS]		= &ahb_ts_clk.common.hw,
+		[CLK_AHB_SPI0]		= &ahb_spi0_clk.common.hw,
+		[CLK_AHB_SPI1]		= &ahb_spi1_clk.common.hw,
+		[CLK_AHB_SPI2]		= &ahb_spi2_clk.common.hw,
+		[CLK_AHB_GPS]		= &ahb_gps_clk.common.hw,
+		[CLK_AHB_HSTIMER]	= &ahb_hstimer_clk.common.hw,
+		[CLK_AHB_VE]		= &ahb_ve_clk.common.hw,
+		[CLK_AHB_TVE]		= &ahb_tve_clk.common.hw,
+		[CLK_AHB_LCD]		= &ahb_lcd_clk.common.hw,
+		[CLK_AHB_CSI]		= &ahb_csi_clk.common.hw,
+		[CLK_AHB_HDMI]		= &ahb_hdmi_clk.common.hw,
+		[CLK_AHB_DE_BE]		= &ahb_de_be_clk.common.hw,
+		[CLK_AHB_DE_FE]		= &ahb_de_fe_clk.common.hw,
+		[CLK_AHB_IEP]		= &ahb_iep_clk.common.hw,
+		[CLK_AHB_GPU]		= &ahb_gpu_clk.common.hw,
+		[CLK_APB0_CODEC]	= &apb0_codec_clk.common.hw,
+		[CLK_APB0_I2S]		= &apb0_i2s_clk.common.hw,
+		[CLK_APB0_PIO]		= &apb0_pio_clk.common.hw,
+		[CLK_APB0_IR]		= &apb0_ir_clk.common.hw,
+		[CLK_APB0_KEYPAD]	= &apb0_keypad_clk.common.hw,
+		[CLK_APB1_I2C0]		= &apb1_i2c0_clk.common.hw,
+		[CLK_APB1_I2C1]		= &apb1_i2c1_clk.common.hw,
+		[CLK_APB1_I2C2]		= &apb1_i2c2_clk.common.hw,
+		[CLK_APB1_UART0]	= &apb1_uart0_clk.common.hw,
+		[CLK_APB1_UART1]	= &apb1_uart1_clk.common.hw,
+		[CLK_APB1_UART2]	= &apb1_uart2_clk.common.hw,
+		[CLK_APB1_UART3]	= &apb1_uart3_clk.common.hw,
+		[CLK_NAND]		= &nand_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC2]		= &mmc2_clk.common.hw,
+		[CLK_TS]		= &ts_clk.common.hw,
+		[CLK_SS]		= &ss_clk.common.hw,
+		[CLK_SPI0]		= &spi0_clk.common.hw,
+		[CLK_SPI1]		= &spi1_clk.common.hw,
+		[CLK_SPI2]		= &spi2_clk.common.hw,
+		[CLK_IR]		= &ir_clk.common.hw,
+		[CLK_I2S]		= &i2s_clk.common.hw,
+		[CLK_KEYPAD]		= &keypad_clk.common.hw,
+		[CLK_USB_OHCI]		= &usb_ohci_clk.common.hw,
+		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
+		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
+		[CLK_GPS]		= &gps_clk.common.hw,
+		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
+		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
+		[CLK_DRAM_TS]		= &dram_ts_clk.common.hw,
+		[CLK_DRAM_TVE]		= &dram_tve_clk.common.hw,
+		[CLK_DRAM_DE_FE]	= &dram_de_fe_clk.common.hw,
+		[CLK_DRAM_DE_BE]	= &dram_de_be_clk.common.hw,
+		[CLK_DRAM_ACE]		= &dram_ace_clk.common.hw,
+		[CLK_DRAM_IEP]		= &dram_iep_clk.common.hw,
+		[CLK_DE_BE]		= &de_be_clk.common.hw,
+		[CLK_DE_FE]		= &de_fe_clk.common.hw,
+		[CLK_TCON_CH0]		= &tcon_ch0_clk.common.hw,
+		[CLK_TCON_CH1_SCLK]	= &tcon_ch1_sclk2_clk.common.hw,
+		[CLK_TCON_CH1]		= &tcon_ch1_sclk1_clk.common.hw,
+		[CLK_CSI]		= &csi_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_CODEC]		= &codec_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+		[CLK_HDMI]		= &hdmi_clk.common.hw,
+		[CLK_GPU]		= &gpu_clk.common.hw,
+		[CLK_MBUS]		= &mbus_clk.common.hw,
+		[CLK_IEP]		= &iep_clk.common.hw,
+	},
+	.num	= CLK_NUMBER,
+};
+
+static struct ccu_reset_map sun5i_a10s_ccu_resets[] = {
+	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
+	[RST_USB_PHY1]		=  { 0x0cc, BIT(1) },
+
+	[RST_GPS]		=  { 0x0d0, BIT(30) },
+
+	[RST_DE_BE]		=  { 0x104, BIT(30) },
+
+	[RST_DE_FE]		=  { 0x10c, BIT(30) },
+
+	[RST_TVE]		=  { 0x118, BIT(29) },
+	[RST_LCD]		=  { 0x118, BIT(30) },
+
+	[RST_CSI]		=  { 0x134, BIT(30) },
+
+	[RST_VE]		=  { 0x13c, BIT(0) },
+
+	[RST_GPU]		=  { 0x154, BIT(30) },
+
+	[RST_IEP]		=  { 0x160, BIT(30) },
+};
+
+static const struct sunxi_ccu_desc sun5i_a10s_ccu_desc = {
+	.ccu_clks	= sun5i_a10s_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun5i_a10s_ccu_clks),
+
+	.hw_clks	= &sun5i_a10s_hw_clks,
+
+	.resets		= sun5i_a10s_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun5i_a10s_ccu_resets),
+};
+
+/*
+ * The A13 is the A10s minus the TS, GPS, HDMI, I2S and the keypad
+ */
+static struct clk_hw_onecell_data sun5i_a13_hw_clks = {
+	.hws	= {
+		[CLK_HOSC]		= &hosc_clk.common.hw,
+		[CLK_PLL_CORE]		= &pll_core_clk.common.hw,
+		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
+		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
+		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
+		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
+		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
+		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
+		[CLK_PLL_VIDEO0_2X]	= &pll_video0_2x_clk.hw,
+		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
+		[CLK_PLL_DDR_BASE]	= &pll_ddr_base_clk.common.hw,
+		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
+		[CLK_PLL_DDR_OTHER]	= &pll_ddr_other_clk.common.hw,
+		[CLK_PLL_PERIPH]	= &pll_periph_clk.common.hw,
+		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
+		[CLK_PLL_VIDEO1_2X]	= &pll_video1_2x_clk.hw,
+		[CLK_CPU]		= &cpu_clk.common.hw,
+		[CLK_AXI]		= &axi_clk.common.hw,
+		[CLK_AHB]		= &ahb_clk.common.hw,
+		[CLK_APB0]		= &apb0_clk.common.hw,
+		[CLK_APB1]		= &apb1_clk.common.hw,
+		[CLK_DRAM_AXI]		= &axi_dram_clk.common.hw,
+		[CLK_AHB_OTG]		= &ahb_otg_clk.common.hw,
+		[CLK_AHB_EHCI]		= &ahb_ehci_clk.common.hw,
+		[CLK_AHB_OHCI]		= &ahb_ohci_clk.common.hw,
+		[CLK_AHB_SS]		= &ahb_ss_clk.common.hw,
+		[CLK_AHB_DMA]		= &ahb_dma_clk.common.hw,
+		[CLK_AHB_BIST]		= &ahb_bist_clk.common.hw,
+		[CLK_AHB_MMC0]		= &ahb_mmc0_clk.common.hw,
+		[CLK_AHB_MMC1]		= &ahb_mmc1_clk.common.hw,
+		[CLK_AHB_MMC2]		= &ahb_mmc2_clk.common.hw,
+		[CLK_AHB_NAND]		= &ahb_nand_clk.common.hw,
+		[CLK_AHB_SDRAM]		= &ahb_sdram_clk.common.hw,
+		[CLK_AHB_EMAC]		= &ahb_emac_clk.common.hw,
+		[CLK_AHB_SPI0]		= &ahb_spi0_clk.common.hw,
+		[CLK_AHB_SPI1]		= &ahb_spi1_clk.common.hw,
+		[CLK_AHB_SPI2]		= &ahb_spi2_clk.common.hw,
+		[CLK_AHB_HSTIMER]	= &ahb_hstimer_clk.common.hw,
+		[CLK_AHB_VE]		= &ahb_ve_clk.common.hw,
+		[CLK_AHB_TVE]		= &ahb_tve_clk.common.hw,
+		[CLK_AHB_LCD]		= &ahb_lcd_clk.common.hw,
+		[CLK_AHB_CSI]		= &ahb_csi_clk.common.hw,
+		[CLK_AHB_DE_BE]		= &ahb_de_be_clk.common.hw,
+		[CLK_AHB_DE_FE]		= &ahb_de_fe_clk.common.hw,
+		[CLK_AHB_IEP]		= &ahb_iep_clk.common.hw,
+		[CLK_AHB_GPU]		= &ahb_gpu_clk.common.hw,
+		[CLK_APB0_CODEC]	= &apb0_codec_clk.common.hw,
+		[CLK_APB0_PIO]		= &apb0_pio_clk.common.hw,
+		[CLK_APB0_IR]		= &apb0_ir_clk.common.hw,
+		[CLK_APB1_I2C0]		= &apb1_i2c0_clk.common.hw,
+		[CLK_APB1_I2C1]		= &apb1_i2c1_clk.common.hw,
+		[CLK_APB1_I2C2]		= &apb1_i2c2_clk.common.hw,
+		[CLK_APB1_UART0]	= &apb1_uart0_clk.common.hw,
+		[CLK_APB1_UART1]	= &apb1_uart1_clk.common.hw,
+		[CLK_APB1_UART2]	= &apb1_uart2_clk.common.hw,
+		[CLK_APB1_UART3]	= &apb1_uart3_clk.common.hw,
+		[CLK_NAND]		= &nand_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC2]		= &mmc2_clk.common.hw,
+		[CLK_SS]		= &ss_clk.common.hw,
+		[CLK_SPI0]		= &spi0_clk.common.hw,
+		[CLK_SPI1]		= &spi1_clk.common.hw,
+		[CLK_SPI2]		= &spi2_clk.common.hw,
+		[CLK_IR]		= &ir_clk.common.hw,
+		[CLK_USB_OHCI]		= &usb_ohci_clk.common.hw,
+		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
+		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
+		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
+		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
+		[CLK_DRAM_TVE]		= &dram_tve_clk.common.hw,
+		[CLK_DRAM_DE_FE]	= &dram_de_fe_clk.common.hw,
+		[CLK_DRAM_DE_BE]	= &dram_de_be_clk.common.hw,
+		[CLK_DRAM_ACE]		= &dram_ace_clk.common.hw,
+		[CLK_DRAM_IEP]		= &dram_iep_clk.common.hw,
+		[CLK_DE_BE]		= &de_be_clk.common.hw,
+		[CLK_DE_FE]		= &de_fe_clk.common.hw,
+		[CLK_TCON_CH0]		= &tcon_ch0_clk.common.hw,
+		[CLK_TCON_CH1_SCLK]	= &tcon_ch1_sclk2_clk.common.hw,
+		[CLK_TCON_CH1]		= &tcon_ch1_sclk1_clk.common.hw,
+		[CLK_CSI]		= &csi_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_CODEC]		= &codec_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+		[CLK_GPU]		= &gpu_clk.common.hw,
+		[CLK_MBUS]		= &mbus_clk.common.hw,
+		[CLK_IEP]		= &iep_clk.common.hw,
+	},
+	.num	= CLK_NUMBER,
+};
+
+static const struct sunxi_ccu_desc sun5i_a13_ccu_desc = {
+	.ccu_clks	= sun5i_a10s_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun5i_a10s_ccu_clks),
+
+	.hw_clks	= &sun5i_a13_hw_clks,
+
+	.resets		= sun5i_a10s_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun5i_a10s_ccu_resets),
+};
+
+/*
+ * The GR8 is the A10s CCU minus the HDMI and keypad, plus SPDIF
+ */
+static struct clk_hw_onecell_data sun5i_gr8_hw_clks = {
+	.hws	= {
+		[CLK_HOSC]		= &hosc_clk.common.hw,
+		[CLK_PLL_CORE]		= &pll_core_clk.common.hw,
+		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
+		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
+		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
+		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
+		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
+		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
+		[CLK_PLL_VIDEO0_2X]	= &pll_video0_2x_clk.hw,
+		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
+		[CLK_PLL_DDR_BASE]	= &pll_ddr_base_clk.common.hw,
+		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
+		[CLK_PLL_DDR_OTHER]	= &pll_ddr_other_clk.common.hw,
+		[CLK_PLL_PERIPH]	= &pll_periph_clk.common.hw,
+		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
+		[CLK_PLL_VIDEO1_2X]	= &pll_video1_2x_clk.hw,
+		[CLK_CPU]		= &cpu_clk.common.hw,
+		[CLK_AXI]		= &axi_clk.common.hw,
+		[CLK_AHB]		= &ahb_clk.common.hw,
+		[CLK_APB0]		= &apb0_clk.common.hw,
+		[CLK_APB1]		= &apb1_clk.common.hw,
+		[CLK_DRAM_AXI]		= &axi_dram_clk.common.hw,
+		[CLK_AHB_OTG]		= &ahb_otg_clk.common.hw,
+		[CLK_AHB_EHCI]		= &ahb_ehci_clk.common.hw,
+		[CLK_AHB_OHCI]		= &ahb_ohci_clk.common.hw,
+		[CLK_AHB_SS]		= &ahb_ss_clk.common.hw,
+		[CLK_AHB_DMA]		= &ahb_dma_clk.common.hw,
+		[CLK_AHB_BIST]		= &ahb_bist_clk.common.hw,
+		[CLK_AHB_MMC0]		= &ahb_mmc0_clk.common.hw,
+		[CLK_AHB_MMC1]		= &ahb_mmc1_clk.common.hw,
+		[CLK_AHB_MMC2]		= &ahb_mmc2_clk.common.hw,
+		[CLK_AHB_NAND]		= &ahb_nand_clk.common.hw,
+		[CLK_AHB_SDRAM]		= &ahb_sdram_clk.common.hw,
+		[CLK_AHB_EMAC]		= &ahb_emac_clk.common.hw,
+		[CLK_AHB_TS]		= &ahb_ts_clk.common.hw,
+		[CLK_AHB_SPI0]		= &ahb_spi0_clk.common.hw,
+		[CLK_AHB_SPI1]		= &ahb_spi1_clk.common.hw,
+		[CLK_AHB_SPI2]		= &ahb_spi2_clk.common.hw,
+		[CLK_AHB_GPS]		= &ahb_gps_clk.common.hw,
+		[CLK_AHB_HSTIMER]	= &ahb_hstimer_clk.common.hw,
+		[CLK_AHB_VE]		= &ahb_ve_clk.common.hw,
+		[CLK_AHB_TVE]		= &ahb_tve_clk.common.hw,
+		[CLK_AHB_LCD]		= &ahb_lcd_clk.common.hw,
+		[CLK_AHB_CSI]		= &ahb_csi_clk.common.hw,
+		[CLK_AHB_DE_BE]		= &ahb_de_be_clk.common.hw,
+		[CLK_AHB_DE_FE]		= &ahb_de_fe_clk.common.hw,
+		[CLK_AHB_IEP]		= &ahb_iep_clk.common.hw,
+		[CLK_AHB_GPU]		= &ahb_gpu_clk.common.hw,
+		[CLK_APB0_CODEC]	= &apb0_codec_clk.common.hw,
+		[CLK_APB0_SPDIF]	= &apb0_spdif_clk.common.hw,
+		[CLK_APB0_I2S]		= &apb0_i2s_clk.common.hw,
+		[CLK_APB0_PIO]		= &apb0_pio_clk.common.hw,
+		[CLK_APB0_IR]		= &apb0_ir_clk.common.hw,
+		[CLK_APB1_I2C0]		= &apb1_i2c0_clk.common.hw,
+		[CLK_APB1_I2C1]		= &apb1_i2c1_clk.common.hw,
+		[CLK_APB1_I2C2]		= &apb1_i2c2_clk.common.hw,
+		[CLK_APB1_UART0]	= &apb1_uart0_clk.common.hw,
+		[CLK_APB1_UART1]	= &apb1_uart1_clk.common.hw,
+		[CLK_APB1_UART2]	= &apb1_uart2_clk.common.hw,
+		[CLK_APB1_UART3]	= &apb1_uart3_clk.common.hw,
+		[CLK_NAND]		= &nand_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC2]		= &mmc2_clk.common.hw,
+		[CLK_TS]		= &ts_clk.common.hw,
+		[CLK_SS]		= &ss_clk.common.hw,
+		[CLK_SPI0]		= &spi0_clk.common.hw,
+		[CLK_SPI1]		= &spi1_clk.common.hw,
+		[CLK_SPI2]		= &spi2_clk.common.hw,
+		[CLK_IR]		= &ir_clk.common.hw,
+		[CLK_I2S]		= &i2s_clk.common.hw,
+		[CLK_SPDIF]		= &spdif_clk.common.hw,
+		[CLK_USB_OHCI]		= &usb_ohci_clk.common.hw,
+		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
+		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
+		[CLK_GPS]		= &gps_clk.common.hw,
+		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
+		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
+		[CLK_DRAM_TS]		= &dram_ts_clk.common.hw,
+		[CLK_DRAM_TVE]		= &dram_tve_clk.common.hw,
+		[CLK_DRAM_DE_FE]	= &dram_de_fe_clk.common.hw,
+		[CLK_DRAM_DE_BE]	= &dram_de_be_clk.common.hw,
+		[CLK_DRAM_ACE]		= &dram_ace_clk.common.hw,
+		[CLK_DRAM_IEP]		= &dram_iep_clk.common.hw,
+		[CLK_DE_BE]		= &de_be_clk.common.hw,
+		[CLK_DE_FE]		= &de_fe_clk.common.hw,
+		[CLK_TCON_CH0]		= &tcon_ch0_clk.common.hw,
+		[CLK_TCON_CH1_SCLK]	= &tcon_ch1_sclk2_clk.common.hw,
+		[CLK_TCON_CH1]		= &tcon_ch1_sclk1_clk.common.hw,
+		[CLK_CSI]		= &csi_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_CODEC]		= &codec_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+		[CLK_GPU]		= &gpu_clk.common.hw,
+		[CLK_MBUS]		= &mbus_clk.common.hw,
+		[CLK_IEP]		= &iep_clk.common.hw,
+	},
+	.num	= CLK_NUMBER,
+};
+
+static const struct sunxi_ccu_desc sun5i_gr8_ccu_desc = {
+	.ccu_clks	= sun5i_a10s_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun5i_a10s_ccu_clks),
+
+	.hw_clks	= &sun5i_gr8_hw_clks,
+
+	.resets		= sun5i_a10s_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun5i_a10s_ccu_resets),
+};
+
+static void __init sun5i_ccu_init(struct device_node *node,
+				  const struct sunxi_ccu_desc *desc)
+{
+	void __iomem *reg;
+	u32 val;
+
+	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
+	if (IS_ERR(reg)) {
+		pr_err("%pOF: Could not map the clock registers\n", node);
+		return;
+	}
+
+	/* Force the PLL-Audio-1x divider to 1 */
+	val = readl(reg + SUN5I_PLL_AUDIO_REG);
+	val &= ~GENMASK(29, 26);
+	writel(val | (0 << 26), reg + SUN5I_PLL_AUDIO_REG);
+
+	/*
+	 * Use the peripheral PLL as the AHB parent, instead of CPU /
+	 * AXI which have rate changes due to cpufreq.
+	 *
+	 * This is especially a big deal for the HS timer whose parent
+	 * clock is AHB.
+	 */
+	val = readl(reg + SUN5I_AHB_REG);
+	val &= ~GENMASK(7, 6);
+	writel(val | (2 << 6), reg + SUN5I_AHB_REG);
+
+	of_sunxi_ccu_probe(node, reg, desc);
+}
+
+static void __init sun5i_a10s_ccu_setup(struct device_node *node)
+{
+	sun5i_ccu_init(node, &sun5i_a10s_ccu_desc);
+}
+CLK_OF_DECLARE(sun5i_a10s_ccu, "allwinner,sun5i-a10s-ccu",
+	       sun5i_a10s_ccu_setup);
+
+static void __init sun5i_a13_ccu_setup(struct device_node *node)
+{
+	sun5i_ccu_init(node, &sun5i_a13_ccu_desc);
+}
+CLK_OF_DECLARE(sun5i_a13_ccu, "allwinner,sun5i-a13-ccu",
+	       sun5i_a13_ccu_setup);
+
+static void __init sun5i_gr8_ccu_setup(struct device_node *node)
+{
+	sun5i_ccu_init(node, &sun5i_gr8_ccu_desc);
+}
+CLK_OF_DECLARE(sun5i_gr8_ccu, "nextthing,gr8-ccu",
+	       sun5i_gr8_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/sun5i-ccu.h b/drivers/clk/sunxi-ng/sun5i-ccu.h
new file mode 100644
index 000000000000..f06b7a09d69d
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun5i-ccu.h
@@ -0,0 +1,56 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright 2016 Maxime Ripard
+ *
+ * Maxime Ripard <maxime.ripard@free-electrons.com>
+ */
+
+#ifndef _CCU_SUN5I_H_
+#define _CCU_SUN5I_H_
+
+#include <dt-bindings/clock/sun5i-ccu.h>
+#include <dt-bindings/reset/sun5i-ccu.h>
+
+/* The HOSC is exported */
+#define CLK_PLL_CORE		2
+#define CLK_PLL_AUDIO_BASE	3
+#define CLK_PLL_AUDIO		4
+#define CLK_PLL_AUDIO_2X	5
+#define CLK_PLL_AUDIO_4X	6
+#define CLK_PLL_AUDIO_8X	7
+#define CLK_PLL_VIDEO0		8
+
+/* The PLL_VIDEO0_2X is exported for HDMI */
+
+#define CLK_PLL_VE		10
+#define CLK_PLL_DDR_BASE	11
+#define CLK_PLL_DDR		12
+#define CLK_PLL_DDR_OTHER	13
+#define CLK_PLL_PERIPH		14
+#define CLK_PLL_VIDEO1		15
+
+/* The PLL_VIDEO1_2X is exported for HDMI */
+/* The CPU clock is exported */
+
+#define CLK_AXI			18
+#define CLK_AHB			19
+#define CLK_APB0		20
+#define CLK_APB1		21
+#define CLK_DRAM_AXI		22
+
+/* AHB gates are exported */
+/* APB0 gates are exported */
+/* APB1 gates are exported */
+/* Modules clocks are exported */
+/* USB clocks are exported */
+/* GPS clock is exported */
+/* DRAM gates are exported */
+/* More display modules clocks are exported */
+
+#define CLK_TCON_CH1_SCLK	91
+
+/* The rest of the module clocks are exported */
+
+#define CLK_NUMBER		(CLK_IEP + 1)
+
+#endif /* _CCU_SUN5I_H_ */
diff --git a/drivers/clk/sunxi-ng/sun6i-a31-ccu.c b/drivers/clk/sunxi-ng/sun6i-a31-ccu.c
new file mode 100644
index 000000000000..b05c06a428ad
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun6i-a31-ccu.c
@@ -0,0 +1,1266 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (c) 2016 Chen-Yu Tsai
+ *
+ * Chen-Yu Tsai <wens@csie.org>
+ *
+ * Based on ccu-sun8i-h3.c by Maxime Ripard.
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/io.h>
+#include <linux/of_address.h>
+
+#include "ccu_common.h"
+#include "ccu_reset.h"
+
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_mp.h"
+#include "ccu_mult.h"
+#include "ccu_mux.h"
+#include "ccu_nk.h"
+#include "ccu_nkm.h"
+#include "ccu_nkmp.h"
+#include "ccu_nm.h"
+#include "ccu_phase.h"
+#include "ccu_sdm.h"
+
+#include "sun6i-a31-ccu.h"
+
+static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_cpu_clk, "pll-cpu",
+				     "osc24M", 0x000,
+				     8, 5,	/* N */
+				     4, 2,	/* K */
+				     0, 2,	/* M */
+				     BIT(31),	/* gate */
+				     BIT(28),	/* lock */
+				     0);
+
+/*
+ * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
+ * the base (2x, 4x and 8x), and one variable divider (the one true
+ * pll audio).
+ *
+ * With sigma-delta modulation for fractional-N on the audio PLL,
+ * we have to use specific dividers. This means the variable divider
+ * can no longer be used, as the audio codec requests the exact clock
+ * rates we support through this mechanism. So we now hard code the
+ * variable divider to 1. This means the clock rates will no longer
+ * match the clock names.
+ */
+#define SUN6I_A31_PLL_AUDIO_REG	0x008
+
+static struct ccu_sdm_setting pll_audio_sdm_table[] = {
+	{ .rate = 22579200, .pattern = 0xc0010d84, .m = 8, .n = 7 },
+	{ .rate = 24576000, .pattern = 0xc000ac02, .m = 14, .n = 14 },
+};
+
+static SUNXI_CCU_NM_WITH_SDM_GATE_LOCK(pll_audio_base_clk, "pll-audio-base",
+				       "osc24M", 0x008,
+				       8, 7,	/* N */
+				       0, 5,	/* M */
+				       pll_audio_sdm_table, BIT(24),
+				       0x284, BIT(31),
+				       BIT(31),	/* gate */
+				       BIT(28),	/* lock */
+				       CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_video0_clk, "pll-video0",
+					"osc24M", 0x010,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_ve_clk, "pll-ve",
+					"osc24M", 0x018,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_ddr_clk, "pll-ddr",
+				    "osc24M", 0x020,
+				    8, 5,	/* N */
+				    4, 2,	/* K */
+				    0, 2,	/* M */
+				    BIT(31),	/* gate */
+				    BIT(28),	/* lock */
+				    CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NK_WITH_GATE_LOCK_POSTDIV(pll_periph_clk, "pll-periph",
+					   "osc24M", 0x028,
+					   8, 5,	/* N */
+					   4, 2,	/* K */
+					   BIT(31),	/* gate */
+					   BIT(28),	/* lock */
+					   2,		/* post-div */
+					   CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_video1_clk, "pll-video1",
+					"osc24M", 0x030,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_gpu_clk, "pll-gpu",
+					"osc24M", 0x038,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+/*
+ * The MIPI PLL has 2 modes: "MIPI" and "HDMI".
+ *
+ * The MIPI mode is a standard NKM-style clock. The HDMI mode is an
+ * integer / fractional clock with switchable multipliers and dividers.
+ * This is not supported here. We hardcode the PLL to MIPI mode.
+ */
+#define SUN6I_A31_PLL_MIPI_REG	0x040
+
+static const char * const pll_mipi_parents[] = { "pll-video0", "pll-video1" };
+static SUNXI_CCU_NKM_WITH_MUX_GATE_LOCK(pll_mipi_clk, "pll-mipi",
+					pll_mipi_parents, 0x040,
+					8, 4,	/* N */
+					4, 2,	/* K */
+					0, 4,	/* M */
+					21, 0,	/* mux */
+					BIT(31) | BIT(23) | BIT(22), /* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll9_clk, "pll9",
+					"osc24M", 0x044,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll10_clk, "pll10",
+					"osc24M", 0x048,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static const char * const cpux_parents[] = { "osc32k", "osc24M",
+					     "pll-cpu", "pll-cpu" };
+static SUNXI_CCU_MUX(cpu_clk, "cpu", cpux_parents,
+		     0x050, 16, 2, CLK_SET_RATE_PARENT | CLK_IS_CRITICAL);
+
+static struct clk_div_table axi_div_table[] = {
+	{ .val = 0, .div = 1 },
+	{ .val = 1, .div = 2 },
+	{ .val = 2, .div = 3 },
+	{ .val = 3, .div = 4 },
+	{ .val = 4, .div = 4 },
+	{ .val = 5, .div = 4 },
+	{ .val = 6, .div = 4 },
+	{ .val = 7, .div = 4 },
+	{ /* Sentinel */ },
+};
+
+static SUNXI_CCU_DIV_TABLE(axi_clk, "axi", "cpu",
+			   0x050, 0, 3, axi_div_table, 0);
+
+#define SUN6I_A31_AHB1_REG  0x054
+
+static const char * const ahb1_parents[] = { "osc32k", "osc24M",
+					     "axi", "pll-periph" };
+static const struct ccu_mux_var_prediv ahb1_predivs[] = {
+	{ .index = 3, .shift = 6, .width = 2 },
+};
+
+static struct ccu_div ahb1_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
+
+	.mux		= {
+		.shift	= 12,
+		.width	= 2,
+
+		.var_predivs	= ahb1_predivs,
+		.n_var_predivs	= ARRAY_SIZE(ahb1_predivs),
+	},
+
+	.common		= {
+		.reg		= 0x054,
+		.features	= CCU_FEATURE_VARIABLE_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("ahb1",
+						      ahb1_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static struct clk_div_table apb1_div_table[] = {
+	{ .val = 0, .div = 2 },
+	{ .val = 1, .div = 2 },
+	{ .val = 2, .div = 4 },
+	{ .val = 3, .div = 8 },
+	{ /* Sentinel */ },
+};
+
+static SUNXI_CCU_DIV_TABLE(apb1_clk, "apb1", "ahb1",
+			   0x054, 8, 2, apb1_div_table, 0);
+
+static const char * const apb2_parents[] = { "osc32k", "osc24M",
+					     "pll-periph", "pll-periph" };
+static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", apb2_parents, 0x058,
+			     0, 5,	/* M */
+			     16, 2,	/* P */
+			     24, 2,	/* mux */
+			     0);
+
+static SUNXI_CCU_GATE(ahb1_mipidsi_clk,	"ahb1-mipidsi",	"ahb1",
+		      0x060, BIT(1), 0);
+static SUNXI_CCU_GATE(ahb1_ss_clk,	"ahb1-ss",	"ahb1",
+		      0x060, BIT(5), 0);
+static SUNXI_CCU_GATE(ahb1_dma_clk,	"ahb1-dma",	"ahb1",
+		      0x060, BIT(6), 0);
+static SUNXI_CCU_GATE(ahb1_mmc0_clk,	"ahb1-mmc0",	"ahb1",
+		      0x060, BIT(8), 0);
+static SUNXI_CCU_GATE(ahb1_mmc1_clk,	"ahb1-mmc1",	"ahb1",
+		      0x060, BIT(9), 0);
+static SUNXI_CCU_GATE(ahb1_mmc2_clk,	"ahb1-mmc2",	"ahb1",
+		      0x060, BIT(10), 0);
+static SUNXI_CCU_GATE(ahb1_mmc3_clk,	"ahb1-mmc3",	"ahb1",
+		      0x060, BIT(11), 0);
+static SUNXI_CCU_GATE(ahb1_nand1_clk,	"ahb1-nand1",	"ahb1",
+		      0x060, BIT(12), 0);
+static SUNXI_CCU_GATE(ahb1_nand0_clk,	"ahb1-nand0",	"ahb1",
+		      0x060, BIT(13), 0);
+static SUNXI_CCU_GATE(ahb1_sdram_clk,	"ahb1-sdram",	"ahb1",
+		      0x060, BIT(14), 0);
+static SUNXI_CCU_GATE(ahb1_emac_clk,	"ahb1-emac",	"ahb1",
+		      0x060, BIT(17), 0);
+static SUNXI_CCU_GATE(ahb1_ts_clk,	"ahb1-ts",	"ahb1",
+		      0x060, BIT(18), 0);
+static SUNXI_CCU_GATE(ahb1_hstimer_clk,	"ahb1-hstimer",	"ahb1",
+		      0x060, BIT(19), 0);
+static SUNXI_CCU_GATE(ahb1_spi0_clk,	"ahb1-spi0",	"ahb1",
+		      0x060, BIT(20), 0);
+static SUNXI_CCU_GATE(ahb1_spi1_clk,	"ahb1-spi1",	"ahb1",
+		      0x060, BIT(21), 0);
+static SUNXI_CCU_GATE(ahb1_spi2_clk,	"ahb1-spi2",	"ahb1",
+		      0x060, BIT(22), 0);
+static SUNXI_CCU_GATE(ahb1_spi3_clk,	"ahb1-spi3",	"ahb1",
+		      0x060, BIT(23), 0);
+static SUNXI_CCU_GATE(ahb1_otg_clk,	"ahb1-otg",	"ahb1",
+		      0x060, BIT(24), 0);
+static SUNXI_CCU_GATE(ahb1_ehci0_clk,	"ahb1-ehci0",	"ahb1",
+		      0x060, BIT(26), 0);
+static SUNXI_CCU_GATE(ahb1_ehci1_clk,	"ahb1-ehci1",	"ahb1",
+		      0x060, BIT(27), 0);
+static SUNXI_CCU_GATE(ahb1_ohci0_clk,	"ahb1-ohci0",	"ahb1",
+		      0x060, BIT(29), 0);
+static SUNXI_CCU_GATE(ahb1_ohci1_clk,	"ahb1-ohci1",	"ahb1",
+		      0x060, BIT(30), 0);
+static SUNXI_CCU_GATE(ahb1_ohci2_clk,	"ahb1-ohci2",	"ahb1",
+		      0x060, BIT(31), 0);
+
+static SUNXI_CCU_GATE(ahb1_ve_clk,	"ahb1-ve",	"ahb1",
+		      0x064, BIT(0), 0);
+static SUNXI_CCU_GATE(ahb1_lcd0_clk,	"ahb1-lcd0",	"ahb1",
+		      0x064, BIT(4), 0);
+static SUNXI_CCU_GATE(ahb1_lcd1_clk,	"ahb1-lcd1",	"ahb1",
+		      0x064, BIT(5), 0);
+static SUNXI_CCU_GATE(ahb1_csi_clk,	"ahb1-csi",	"ahb1",
+		      0x064, BIT(8), 0);
+static SUNXI_CCU_GATE(ahb1_hdmi_clk,	"ahb1-hdmi",	"ahb1",
+		      0x064, BIT(11), 0);
+static SUNXI_CCU_GATE(ahb1_be0_clk,	"ahb1-be0",	"ahb1",
+		      0x064, BIT(12), 0);
+static SUNXI_CCU_GATE(ahb1_be1_clk,	"ahb1-be1",	"ahb1",
+		      0x064, BIT(13), 0);
+static SUNXI_CCU_GATE(ahb1_fe0_clk,	"ahb1-fe0",	"ahb1",
+		      0x064, BIT(14), 0);
+static SUNXI_CCU_GATE(ahb1_fe1_clk,	"ahb1-fe1",	"ahb1",
+		      0x064, BIT(15), 0);
+static SUNXI_CCU_GATE(ahb1_mp_clk,	"ahb1-mp",	"ahb1",
+		      0x064, BIT(18), 0);
+static SUNXI_CCU_GATE(ahb1_gpu_clk,	"ahb1-gpu",	"ahb1",
+		      0x064, BIT(20), 0);
+static SUNXI_CCU_GATE(ahb1_deu0_clk,	"ahb1-deu0",	"ahb1",
+		      0x064, BIT(23), 0);
+static SUNXI_CCU_GATE(ahb1_deu1_clk,	"ahb1-deu1",	"ahb1",
+		      0x064, BIT(24), 0);
+static SUNXI_CCU_GATE(ahb1_drc0_clk,	"ahb1-drc0",	"ahb1",
+		      0x064, BIT(25), 0);
+static SUNXI_CCU_GATE(ahb1_drc1_clk,	"ahb1-drc1",	"ahb1",
+		      0x064, BIT(26), 0);
+
+static SUNXI_CCU_GATE(apb1_codec_clk,	"apb1-codec",	"apb1",
+		      0x068, BIT(0), 0);
+static SUNXI_CCU_GATE(apb1_spdif_clk,	"apb1-spdif",	"apb1",
+		      0x068, BIT(1), 0);
+static SUNXI_CCU_GATE(apb1_digital_mic_clk,	"apb1-digital-mic",	"apb1",
+		      0x068, BIT(4), 0);
+static SUNXI_CCU_GATE(apb1_pio_clk,	"apb1-pio",	"apb1",
+		      0x068, BIT(5), 0);
+static SUNXI_CCU_GATE(apb1_daudio0_clk,	"apb1-daudio0",	"apb1",
+		      0x068, BIT(12), 0);
+static SUNXI_CCU_GATE(apb1_daudio1_clk,	"apb1-daudio1",	"apb1",
+		      0x068, BIT(13), 0);
+
+static SUNXI_CCU_GATE(apb2_i2c0_clk,	"apb2-i2c0",	"apb2",
+		      0x06c, BIT(0), 0);
+static SUNXI_CCU_GATE(apb2_i2c1_clk,	"apb2-i2c1",	"apb2",
+		      0x06c, BIT(1), 0);
+static SUNXI_CCU_GATE(apb2_i2c2_clk,	"apb2-i2c2",	"apb2",
+		      0x06c, BIT(2), 0);
+static SUNXI_CCU_GATE(apb2_i2c3_clk,	"apb2-i2c3",	"apb2",
+		      0x06c, BIT(3), 0);
+static SUNXI_CCU_GATE(apb2_uart0_clk,	"apb2-uart0",	"apb2",
+		      0x06c, BIT(16), 0);
+static SUNXI_CCU_GATE(apb2_uart1_clk,	"apb2-uart1",	"apb2",
+		      0x06c, BIT(17), 0);
+static SUNXI_CCU_GATE(apb2_uart2_clk,	"apb2-uart2",	"apb2",
+		      0x06c, BIT(18), 0);
+static SUNXI_CCU_GATE(apb2_uart3_clk,	"apb2-uart3",	"apb2",
+		      0x06c, BIT(19), 0);
+static SUNXI_CCU_GATE(apb2_uart4_clk,	"apb2-uart4",	"apb2",
+		      0x06c, BIT(20), 0);
+static SUNXI_CCU_GATE(apb2_uart5_clk,	"apb2-uart5",	"apb2",
+		      0x06c, BIT(21), 0);
+
+static const char * const mod0_default_parents[] = { "osc24M", "pll-periph" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand0_clk, "nand0", mod0_default_parents,
+				  0x080,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand1_clk, "nand1", mod0_default_parents,
+				  0x084,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents,
+				  0x088,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc0_sample_clk, "mmc0_sample", "mmc0",
+		       0x088, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc0_output_clk, "mmc0_output", "mmc0",
+		       0x088, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents,
+				  0x08c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc1_sample_clk, "mmc1_sample", "mmc1",
+		       0x08c, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc1_output_clk, "mmc1_output", "mmc1",
+		       0x08c, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents,
+				  0x090,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc2_sample_clk, "mmc2_sample", "mmc2",
+		       0x090, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc2_output_clk, "mmc2_output", "mmc2",
+		       0x090, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc3_clk, "mmc3", mod0_default_parents,
+				  0x094,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc3_sample_clk, "mmc3_sample", "mmc3",
+		       0x094, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc3_output_clk, "mmc3_output", "mmc3",
+		       0x094, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(ts_clk, "ts", mod0_default_parents, 0x098,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(ss_clk, "ss", mod0_default_parents, 0x09c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents, 0x0a0,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents, 0x0a4,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi2_clk, "spi2", mod0_default_parents, 0x0a8,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi3_clk, "spi3", mod0_default_parents, 0x0ac,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static const char * const daudio_parents[] = { "pll-audio-8x", "pll-audio-4x",
+					       "pll-audio-2x", "pll-audio" };
+static SUNXI_CCU_MUX_WITH_GATE(daudio0_clk, "daudio0", daudio_parents,
+			       0x0b0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_MUX_WITH_GATE(daudio1_clk, "daudio1", daudio_parents,
+			       0x0b4, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_MUX_WITH_GATE(spdif_clk, "spdif", daudio_parents,
+			       0x0c0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"osc24M",
+		      0x0cc, BIT(8), 0);
+static SUNXI_CCU_GATE(usb_phy1_clk,	"usb-phy1",	"osc24M",
+		      0x0cc, BIT(9), 0);
+static SUNXI_CCU_GATE(usb_phy2_clk,	"usb-phy2",	"osc24M",
+		      0x0cc, BIT(10), 0);
+static SUNXI_CCU_GATE(usb_ohci0_clk,	"usb-ohci0",	"osc24M",
+		      0x0cc, BIT(16), 0);
+static SUNXI_CCU_GATE(usb_ohci1_clk,	"usb-ohci1",	"osc24M",
+		      0x0cc, BIT(17), 0);
+static SUNXI_CCU_GATE(usb_ohci2_clk,	"usb-ohci2",	"osc24M",
+		      0x0cc, BIT(18), 0);
+
+/* TODO emac clk not supported yet */
+
+static const char * const dram_parents[] = { "pll-ddr", "pll-periph" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(mdfs_clk, "mdfs", dram_parents, 0x0f0,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  CLK_IS_CRITICAL);
+
+static SUNXI_CCU_M_WITH_MUX(sdram0_clk, "sdram0", dram_parents,
+			    0x0f4, 0, 4, 4, 1, CLK_IS_CRITICAL);
+static SUNXI_CCU_M_WITH_MUX(sdram1_clk, "sdram1", dram_parents,
+			    0x0f4, 8, 4, 12, 1, CLK_IS_CRITICAL);
+
+static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"mdfs",
+		      0x100, BIT(0), 0);
+static SUNXI_CCU_GATE(dram_csi_isp_clk,	"dram-csi-isp",	"mdfs",
+		      0x100, BIT(1), 0);
+static SUNXI_CCU_GATE(dram_ts_clk,	"dram-ts",	"mdfs",
+		      0x100, BIT(3), 0);
+static SUNXI_CCU_GATE(dram_drc0_clk,	"dram-drc0",	"mdfs",
+		      0x100, BIT(16), 0);
+static SUNXI_CCU_GATE(dram_drc1_clk,	"dram-drc1",	"mdfs",
+		      0x100, BIT(17), 0);
+static SUNXI_CCU_GATE(dram_deu0_clk,	"dram-deu0",	"mdfs",
+		      0x100, BIT(18), 0);
+static SUNXI_CCU_GATE(dram_deu1_clk,	"dram-deu1",	"mdfs",
+		      0x100, BIT(19), 0);
+static SUNXI_CCU_GATE(dram_fe0_clk,	"dram-fe0",	"mdfs",
+		      0x100, BIT(24), 0);
+static SUNXI_CCU_GATE(dram_fe1_clk,	"dram-fe1",	"mdfs",
+		      0x100, BIT(25), 0);
+static SUNXI_CCU_GATE(dram_be0_clk,	"dram-be0",	"mdfs",
+		      0x100, BIT(26), 0);
+static SUNXI_CCU_GATE(dram_be1_clk,	"dram-be1",	"mdfs",
+		      0x100, BIT(27), 0);
+static SUNXI_CCU_GATE(dram_mp_clk,	"dram-mp",	"mdfs",
+		      0x100, BIT(28), 0);
+
+static const char * const de_parents[] = { "pll-video0", "pll-video1",
+					   "pll-periph-2x", "pll-gpu",
+					   "pll9", "pll10" };
+static SUNXI_CCU_M_WITH_MUX_GATE(be0_clk, "be0", de_parents,
+				 0x104, 0, 4, 24, 3, BIT(31), 0);
+static SUNXI_CCU_M_WITH_MUX_GATE(be1_clk, "be1", de_parents,
+				 0x108, 0, 4, 24, 3, BIT(31), 0);
+static SUNXI_CCU_M_WITH_MUX_GATE(fe0_clk, "fe0", de_parents,
+				 0x10c, 0, 4, 24, 3, BIT(31), 0);
+static SUNXI_CCU_M_WITH_MUX_GATE(fe1_clk, "fe1", de_parents,
+				 0x110, 0, 4, 24, 3, BIT(31), 0);
+
+static const char * const mp_parents[] = { "pll-video0", "pll-video1",
+					   "pll9", "pll10" };
+static SUNXI_CCU_M_WITH_MUX_GATE(mp_clk, "mp", mp_parents,
+				 0x114, 0, 4, 24, 3, BIT(31), 0);
+
+static const char * const lcd_ch0_parents[] = { "pll-video0", "pll-video1",
+						"pll-video0-2x",
+						"pll-video1-2x", "pll-mipi" };
+static SUNXI_CCU_MUX_WITH_GATE(lcd0_ch0_clk, "lcd0-ch0", lcd_ch0_parents,
+			       0x118, 24, 2, BIT(31), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_MUX_WITH_GATE(lcd1_ch0_clk, "lcd1-ch0", lcd_ch0_parents,
+			       0x11c, 24, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static const char * const lcd_ch1_parents[] = { "pll-video0", "pll-video1",
+						"pll-video0-2x",
+						"pll-video1-2x" };
+static SUNXI_CCU_M_WITH_MUX_GATE(lcd0_ch1_clk, "lcd0-ch1", lcd_ch1_parents,
+				 0x12c, 0, 4, 24, 3, BIT(31),
+				 CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M_WITH_MUX_GATE(lcd1_ch1_clk, "lcd1-ch1", lcd_ch1_parents,
+				 0x130, 0, 4, 24, 3, BIT(31),
+				 CLK_SET_RATE_PARENT);
+
+static const char * const csi_sclk_parents[] = { "pll-video0", "pll-video1",
+						 "pll9", "pll10", "pll-mipi",
+						 "pll-ve" };
+static SUNXI_CCU_M_WITH_MUX_GATE(csi0_sclk_clk, "csi0-sclk", csi_sclk_parents,
+				 0x134, 16, 4, 24, 3, BIT(31), 0);
+
+static const char * const csi_mclk_parents[] = { "pll-video0", "pll-video1",
+						 "osc24M" };
+static const u8 csi_mclk_table[] = { 0, 1, 5 };
+static struct ccu_div csi0_mclk_clk = {
+	.enable		= BIT(15),
+	.div		= _SUNXI_CCU_DIV(0, 4),
+	.mux		= _SUNXI_CCU_MUX_TABLE(8, 3, csi_mclk_table),
+	.common		= {
+		.reg		= 0x134,
+		.hw.init	= CLK_HW_INIT_PARENTS("csi0-mclk",
+						      csi_mclk_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static struct ccu_div csi1_mclk_clk = {
+	.enable		= BIT(15),
+	.div		= _SUNXI_CCU_DIV(0, 4),
+	.mux		= _SUNXI_CCU_MUX_TABLE(8, 3, csi_mclk_table),
+	.common		= {
+		.reg		= 0x138,
+		.hw.init	= CLK_HW_INIT_PARENTS("csi1-mclk",
+						      csi_mclk_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve",
+			     0x13c, 16, 3, BIT(31), 0);
+
+static SUNXI_CCU_GATE(codec_clk,	"codec",	"pll-audio",
+		      0x140, BIT(31), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_GATE(avs_clk,		"avs",		"osc24M",
+		      0x144, BIT(31), 0);
+static SUNXI_CCU_GATE(digital_mic_clk,	"digital-mic",	"pll-audio",
+		      0x148, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(hdmi_clk, "hdmi", lcd_ch1_parents,
+				 0x150, 0, 4, 24, 2, BIT(31),
+				 CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(hdmi_ddc_clk, "ddc", "osc24M", 0x150, BIT(30), 0);
+
+static SUNXI_CCU_GATE(ps_clk, "ps", "lcd1-ch1", 0x140, BIT(31), 0);
+
+static const char * const mbus_parents[] = { "osc24M", "pll-periph",
+					     "pll-ddr" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(mbus0_clk, "mbus0", mbus_parents, 0x15c,
+				  0, 3,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  CLK_IS_CRITICAL);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mbus1_clk, "mbus1", mbus_parents, 0x160,
+				  0, 3,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  CLK_IS_CRITICAL);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(mipi_dsi_clk, "mipi-dsi", lcd_ch1_parents,
+				 0x168, 16, 3, 24, 2, BIT(31),
+				 CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M_WITH_MUX_GATE(mipi_dsi_dphy_clk, "mipi-dsi-dphy",
+				 lcd_ch1_parents, 0x168, 0, 3, 8, 2,
+				 BIT(15), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M_WITH_MUX_GATE(mipi_csi_dphy_clk, "mipi-csi-dphy",
+				 lcd_ch1_parents, 0x16c, 0, 3, 8, 2,
+				 BIT(15), 0);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(iep_drc0_clk, "iep-drc0", de_parents,
+				 0x180, 0, 3, 24, 2, BIT(31), 0);
+static SUNXI_CCU_M_WITH_MUX_GATE(iep_drc1_clk, "iep-drc1", de_parents,
+				 0x184, 0, 3, 24, 2, BIT(31), 0);
+static SUNXI_CCU_M_WITH_MUX_GATE(iep_deu0_clk, "iep-deu0", de_parents,
+				 0x188, 0, 3, 24, 2, BIT(31), 0);
+static SUNXI_CCU_M_WITH_MUX_GATE(iep_deu1_clk, "iep-deu1", de_parents,
+				 0x18c, 0, 3, 24, 2, BIT(31), 0);
+
+static const char * const gpu_parents[] = { "pll-gpu", "pll-periph-2x",
+					    "pll-video0", "pll-video1",
+					    "pll9", "pll10" };
+static const struct ccu_mux_fixed_prediv gpu_predivs[] = {
+	{ .index = 1, .div = 3, },
+};
+
+static struct ccu_div gpu_core_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV(0, 3),
+	.mux		= {
+		.shift		= 24,
+		.width		= 3,
+		.fixed_predivs	= gpu_predivs,
+		.n_predivs	= ARRAY_SIZE(gpu_predivs),
+	},
+	.common		= {
+		.reg		= 0x1a0,
+		.features	= CCU_FEATURE_FIXED_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("gpu-core",
+						      gpu_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static struct ccu_div gpu_memory_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV(0, 3),
+	.mux		= {
+		.shift		= 24,
+		.width		= 3,
+		.fixed_predivs	= gpu_predivs,
+		.n_predivs	= ARRAY_SIZE(gpu_predivs),
+	},
+	.common		= {
+		.reg		= 0x1a4,
+		.features	= CCU_FEATURE_FIXED_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("gpu-memory",
+						      gpu_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static struct ccu_div gpu_hyd_clk = {
+	.enable		= BIT(31),
+	.div		= _SUNXI_CCU_DIV(0, 3),
+	.mux		= {
+		.shift		= 24,
+		.width		= 3,
+		.fixed_predivs	= gpu_predivs,
+		.n_predivs	= ARRAY_SIZE(gpu_predivs),
+	},
+	.common		= {
+		.reg		= 0x1a8,
+		.features	= CCU_FEATURE_FIXED_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("gpu-hyd",
+						      gpu_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static SUNXI_CCU_M_WITH_MUX_GATE(ats_clk, "ats", mod0_default_parents, 0x1b0,
+				 0, 3,		/* M */
+				 24, 2,		/* mux */
+				 BIT(31),	/* gate */
+				 0);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(trace_clk, "trace", mod0_default_parents,
+				 0x1b0,
+				 0, 3,		/* M */
+				 24, 2,		/* mux */
+				 BIT(31),	/* gate */
+				 0);
+
+static const char * const clk_out_parents[] = { "osc24M", "osc32k", "osc24M",
+						"axi", "ahb1" };
+static const u8 clk_out_table[] = { 0, 1, 2, 11, 13 };
+
+static const struct ccu_mux_fixed_prediv clk_out_predivs[] = {
+	{ .index = 0, .div = 750, },
+	{ .index = 3, .div = 4, },
+	{ .index = 4, .div = 4, },
+};
+
+static struct ccu_mp out_a_clk = {
+	.enable		= BIT(31),
+	.m		= _SUNXI_CCU_DIV(8, 5),
+	.p		= _SUNXI_CCU_DIV(20, 2),
+	.mux		= {
+		.shift		= 24,
+		.width		= 4,
+		.table		= clk_out_table,
+		.fixed_predivs	= clk_out_predivs,
+		.n_predivs	= ARRAY_SIZE(clk_out_predivs),
+	},
+	.common		= {
+		.reg		= 0x300,
+		.features	= CCU_FEATURE_FIXED_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("out-a",
+						      clk_out_parents,
+						      &ccu_mp_ops,
+						      0),
+	},
+};
+
+static struct ccu_mp out_b_clk = {
+	.enable		= BIT(31),
+	.m		= _SUNXI_CCU_DIV(8, 5),
+	.p		= _SUNXI_CCU_DIV(20, 2),
+	.mux		= {
+		.shift		= 24,
+		.width		= 4,
+		.table		= clk_out_table,
+		.fixed_predivs	= clk_out_predivs,
+		.n_predivs	= ARRAY_SIZE(clk_out_predivs),
+	},
+	.common		= {
+		.reg		= 0x304,
+		.features	= CCU_FEATURE_FIXED_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("out-b",
+						      clk_out_parents,
+						      &ccu_mp_ops,
+						      0),
+	},
+};
+
+static struct ccu_mp out_c_clk = {
+	.enable		= BIT(31),
+	.m		= _SUNXI_CCU_DIV(8, 5),
+	.p		= _SUNXI_CCU_DIV(20, 2),
+	.mux		= {
+		.shift		= 24,
+		.width		= 4,
+		.table		= clk_out_table,
+		.fixed_predivs	= clk_out_predivs,
+		.n_predivs	= ARRAY_SIZE(clk_out_predivs),
+	},
+	.common		= {
+		.reg		= 0x308,
+		.features	= CCU_FEATURE_FIXED_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("out-c",
+						      clk_out_parents,
+						      &ccu_mp_ops,
+						      0),
+	},
+};
+
+static struct ccu_common *sun6i_a31_ccu_clks[] = {
+	&pll_cpu_clk.common,
+	&pll_audio_base_clk.common,
+	&pll_video0_clk.common,
+	&pll_ve_clk.common,
+	&pll_ddr_clk.common,
+	&pll_periph_clk.common,
+	&pll_video1_clk.common,
+	&pll_gpu_clk.common,
+	&pll_mipi_clk.common,
+	&pll9_clk.common,
+	&pll10_clk.common,
+	&cpu_clk.common,
+	&axi_clk.common,
+	&ahb1_clk.common,
+	&apb1_clk.common,
+	&apb2_clk.common,
+	&ahb1_mipidsi_clk.common,
+	&ahb1_ss_clk.common,
+	&ahb1_dma_clk.common,
+	&ahb1_mmc0_clk.common,
+	&ahb1_mmc1_clk.common,
+	&ahb1_mmc2_clk.common,
+	&ahb1_mmc3_clk.common,
+	&ahb1_nand1_clk.common,
+	&ahb1_nand0_clk.common,
+	&ahb1_sdram_clk.common,
+	&ahb1_emac_clk.common,
+	&ahb1_ts_clk.common,
+	&ahb1_hstimer_clk.common,
+	&ahb1_spi0_clk.common,
+	&ahb1_spi1_clk.common,
+	&ahb1_spi2_clk.common,
+	&ahb1_spi3_clk.common,
+	&ahb1_otg_clk.common,
+	&ahb1_ehci0_clk.common,
+	&ahb1_ehci1_clk.common,
+	&ahb1_ohci0_clk.common,
+	&ahb1_ohci1_clk.common,
+	&ahb1_ohci2_clk.common,
+	&ahb1_ve_clk.common,
+	&ahb1_lcd0_clk.common,
+	&ahb1_lcd1_clk.common,
+	&ahb1_csi_clk.common,
+	&ahb1_hdmi_clk.common,
+	&ahb1_be0_clk.common,
+	&ahb1_be1_clk.common,
+	&ahb1_fe0_clk.common,
+	&ahb1_fe1_clk.common,
+	&ahb1_mp_clk.common,
+	&ahb1_gpu_clk.common,
+	&ahb1_deu0_clk.common,
+	&ahb1_deu1_clk.common,
+	&ahb1_drc0_clk.common,
+	&ahb1_drc1_clk.common,
+	&apb1_codec_clk.common,
+	&apb1_spdif_clk.common,
+	&apb1_digital_mic_clk.common,
+	&apb1_pio_clk.common,
+	&apb1_daudio0_clk.common,
+	&apb1_daudio1_clk.common,
+	&apb2_i2c0_clk.common,
+	&apb2_i2c1_clk.common,
+	&apb2_i2c2_clk.common,
+	&apb2_i2c3_clk.common,
+	&apb2_uart0_clk.common,
+	&apb2_uart1_clk.common,
+	&apb2_uart2_clk.common,
+	&apb2_uart3_clk.common,
+	&apb2_uart4_clk.common,
+	&apb2_uart5_clk.common,
+	&nand0_clk.common,
+	&nand1_clk.common,
+	&mmc0_clk.common,
+	&mmc0_sample_clk.common,
+	&mmc0_output_clk.common,
+	&mmc1_clk.common,
+	&mmc1_sample_clk.common,
+	&mmc1_output_clk.common,
+	&mmc2_clk.common,
+	&mmc2_sample_clk.common,
+	&mmc2_output_clk.common,
+	&mmc3_clk.common,
+	&mmc3_sample_clk.common,
+	&mmc3_output_clk.common,
+	&ts_clk.common,
+	&ss_clk.common,
+	&spi0_clk.common,
+	&spi1_clk.common,
+	&spi2_clk.common,
+	&spi3_clk.common,
+	&daudio0_clk.common,
+	&daudio1_clk.common,
+	&spdif_clk.common,
+	&usb_phy0_clk.common,
+	&usb_phy1_clk.common,
+	&usb_phy2_clk.common,
+	&usb_ohci0_clk.common,
+	&usb_ohci1_clk.common,
+	&usb_ohci2_clk.common,
+	&mdfs_clk.common,
+	&sdram0_clk.common,
+	&sdram1_clk.common,
+	&dram_ve_clk.common,
+	&dram_csi_isp_clk.common,
+	&dram_ts_clk.common,
+	&dram_drc0_clk.common,
+	&dram_drc1_clk.common,
+	&dram_deu0_clk.common,
+	&dram_deu1_clk.common,
+	&dram_fe0_clk.common,
+	&dram_fe1_clk.common,
+	&dram_be0_clk.common,
+	&dram_be1_clk.common,
+	&dram_mp_clk.common,
+	&be0_clk.common,
+	&be1_clk.common,
+	&fe0_clk.common,
+	&fe1_clk.common,
+	&mp_clk.common,
+	&lcd0_ch0_clk.common,
+	&lcd1_ch0_clk.common,
+	&lcd0_ch1_clk.common,
+	&lcd1_ch1_clk.common,
+	&csi0_sclk_clk.common,
+	&csi0_mclk_clk.common,
+	&csi1_mclk_clk.common,
+	&ve_clk.common,
+	&codec_clk.common,
+	&avs_clk.common,
+	&digital_mic_clk.common,
+	&hdmi_clk.common,
+	&hdmi_ddc_clk.common,
+	&ps_clk.common,
+	&mbus0_clk.common,
+	&mbus1_clk.common,
+	&mipi_dsi_clk.common,
+	&mipi_dsi_dphy_clk.common,
+	&mipi_csi_dphy_clk.common,
+	&iep_drc0_clk.common,
+	&iep_drc1_clk.common,
+	&iep_deu0_clk.common,
+	&iep_deu1_clk.common,
+	&gpu_core_clk.common,
+	&gpu_memory_clk.common,
+	&gpu_hyd_clk.common,
+	&ats_clk.common,
+	&trace_clk.common,
+	&out_a_clk.common,
+	&out_b_clk.common,
+	&out_c_clk.common,
+};
+
+static const struct clk_hw *clk_parent_pll_audio[] = {
+	&pll_audio_base_clk.common.hw
+};
+
+/* We hardcode the divider to 1 for now */
+static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
+			    clk_parent_pll_audio,
+			    1, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
+			    clk_parent_pll_audio,
+			    2, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
+			    clk_parent_pll_audio,
+			    1, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
+			    clk_parent_pll_audio,
+			    1, 2, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HW(pll_periph_2x_clk, "pll-periph-2x",
+			   &pll_periph_clk.common.hw,
+			   1, 2, 0);
+static CLK_FIXED_FACTOR_HW(pll_video0_2x_clk, "pll-video0-2x",
+			   &pll_video0_clk.common.hw,
+			   1, 2, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HW(pll_video1_2x_clk, "pll-video1-2x",
+			   &pll_video1_clk.common.hw,
+			   1, 2, CLK_SET_RATE_PARENT);
+
+static struct clk_hw_onecell_data sun6i_a31_hw_clks = {
+	.hws	= {
+		[CLK_PLL_CPU]		= &pll_cpu_clk.common.hw,
+		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
+		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
+		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
+		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
+		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
+		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
+		[CLK_PLL_VIDEO0_2X]	= &pll_video0_2x_clk.hw,
+		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
+		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
+		[CLK_PLL_PERIPH]	= &pll_periph_clk.common.hw,
+		[CLK_PLL_PERIPH_2X]	= &pll_periph_2x_clk.hw,
+		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
+		[CLK_PLL_VIDEO1_2X]	= &pll_video1_2x_clk.hw,
+		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
+		[CLK_PLL_MIPI]		= &pll_mipi_clk.common.hw,
+		[CLK_PLL9]		= &pll9_clk.common.hw,
+		[CLK_PLL10]		= &pll10_clk.common.hw,
+		[CLK_CPU]		= &cpu_clk.common.hw,
+		[CLK_AXI]		= &axi_clk.common.hw,
+		[CLK_AHB1]		= &ahb1_clk.common.hw,
+		[CLK_APB1]		= &apb1_clk.common.hw,
+		[CLK_APB2]		= &apb2_clk.common.hw,
+		[CLK_AHB1_MIPIDSI]	= &ahb1_mipidsi_clk.common.hw,
+		[CLK_AHB1_SS]		= &ahb1_ss_clk.common.hw,
+		[CLK_AHB1_DMA]		= &ahb1_dma_clk.common.hw,
+		[CLK_AHB1_MMC0]		= &ahb1_mmc0_clk.common.hw,
+		[CLK_AHB1_MMC1]		= &ahb1_mmc1_clk.common.hw,
+		[CLK_AHB1_MMC2]		= &ahb1_mmc2_clk.common.hw,
+		[CLK_AHB1_MMC3]		= &ahb1_mmc3_clk.common.hw,
+		[CLK_AHB1_NAND1]	= &ahb1_nand1_clk.common.hw,
+		[CLK_AHB1_NAND0]	= &ahb1_nand0_clk.common.hw,
+		[CLK_AHB1_SDRAM]	= &ahb1_sdram_clk.common.hw,
+		[CLK_AHB1_EMAC]		= &ahb1_emac_clk.common.hw,
+		[CLK_AHB1_TS]		= &ahb1_ts_clk.common.hw,
+		[CLK_AHB1_HSTIMER]	= &ahb1_hstimer_clk.common.hw,
+		[CLK_AHB1_SPI0]		= &ahb1_spi0_clk.common.hw,
+		[CLK_AHB1_SPI1]		= &ahb1_spi1_clk.common.hw,
+		[CLK_AHB1_SPI2]		= &ahb1_spi2_clk.common.hw,
+		[CLK_AHB1_SPI3]		= &ahb1_spi3_clk.common.hw,
+		[CLK_AHB1_OTG]		= &ahb1_otg_clk.common.hw,
+		[CLK_AHB1_EHCI0]	= &ahb1_ehci0_clk.common.hw,
+		[CLK_AHB1_EHCI1]	= &ahb1_ehci1_clk.common.hw,
+		[CLK_AHB1_OHCI0]	= &ahb1_ohci0_clk.common.hw,
+		[CLK_AHB1_OHCI1]	= &ahb1_ohci1_clk.common.hw,
+		[CLK_AHB1_OHCI2]	= &ahb1_ohci2_clk.common.hw,
+		[CLK_AHB1_VE]		= &ahb1_ve_clk.common.hw,
+		[CLK_AHB1_LCD0]		= &ahb1_lcd0_clk.common.hw,
+		[CLK_AHB1_LCD1]		= &ahb1_lcd1_clk.common.hw,
+		[CLK_AHB1_CSI]		= &ahb1_csi_clk.common.hw,
+		[CLK_AHB1_HDMI]		= &ahb1_hdmi_clk.common.hw,
+		[CLK_AHB1_BE0]		= &ahb1_be0_clk.common.hw,
+		[CLK_AHB1_BE1]		= &ahb1_be1_clk.common.hw,
+		[CLK_AHB1_FE0]		= &ahb1_fe0_clk.common.hw,
+		[CLK_AHB1_FE1]		= &ahb1_fe1_clk.common.hw,
+		[CLK_AHB1_MP]		= &ahb1_mp_clk.common.hw,
+		[CLK_AHB1_GPU]		= &ahb1_gpu_clk.common.hw,
+		[CLK_AHB1_DEU0]		= &ahb1_deu0_clk.common.hw,
+		[CLK_AHB1_DEU1]		= &ahb1_deu1_clk.common.hw,
+		[CLK_AHB1_DRC0]		= &ahb1_drc0_clk.common.hw,
+		[CLK_AHB1_DRC1]		= &ahb1_drc1_clk.common.hw,
+		[CLK_APB1_CODEC]	= &apb1_codec_clk.common.hw,
+		[CLK_APB1_SPDIF]	= &apb1_spdif_clk.common.hw,
+		[CLK_APB1_DIGITAL_MIC]	= &apb1_digital_mic_clk.common.hw,
+		[CLK_APB1_PIO]		= &apb1_pio_clk.common.hw,
+		[CLK_APB1_DAUDIO0]	= &apb1_daudio0_clk.common.hw,
+		[CLK_APB1_DAUDIO1]	= &apb1_daudio1_clk.common.hw,
+		[CLK_APB2_I2C0]		= &apb2_i2c0_clk.common.hw,
+		[CLK_APB2_I2C1]		= &apb2_i2c1_clk.common.hw,
+		[CLK_APB2_I2C2]		= &apb2_i2c2_clk.common.hw,
+		[CLK_APB2_I2C3]		= &apb2_i2c3_clk.common.hw,
+		[CLK_APB2_UART0]	= &apb2_uart0_clk.common.hw,
+		[CLK_APB2_UART1]	= &apb2_uart1_clk.common.hw,
+		[CLK_APB2_UART2]	= &apb2_uart2_clk.common.hw,
+		[CLK_APB2_UART3]	= &apb2_uart3_clk.common.hw,
+		[CLK_APB2_UART4]	= &apb2_uart4_clk.common.hw,
+		[CLK_APB2_UART5]	= &apb2_uart5_clk.common.hw,
+		[CLK_NAND0]		= &nand0_clk.common.hw,
+		[CLK_NAND1]		= &nand1_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
+		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
+		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
+		[CLK_MMC2]		= &mmc2_clk.common.hw,
+		[CLK_MMC2_SAMPLE]	= &mmc2_sample_clk.common.hw,
+		[CLK_MMC2_OUTPUT]	= &mmc2_output_clk.common.hw,
+		[CLK_MMC3]		= &mmc3_clk.common.hw,
+		[CLK_MMC3_SAMPLE]	= &mmc3_sample_clk.common.hw,
+		[CLK_MMC3_OUTPUT]	= &mmc3_output_clk.common.hw,
+		[CLK_TS]		= &ts_clk.common.hw,
+		[CLK_SS]		= &ss_clk.common.hw,
+		[CLK_SPI0]		= &spi0_clk.common.hw,
+		[CLK_SPI1]		= &spi1_clk.common.hw,
+		[CLK_SPI2]		= &spi2_clk.common.hw,
+		[CLK_SPI3]		= &spi3_clk.common.hw,
+		[CLK_DAUDIO0]		= &daudio0_clk.common.hw,
+		[CLK_DAUDIO1]		= &daudio1_clk.common.hw,
+		[CLK_SPDIF]		= &spdif_clk.common.hw,
+		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
+		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
+		[CLK_USB_PHY2]		= &usb_phy2_clk.common.hw,
+		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
+		[CLK_USB_OHCI1]		= &usb_ohci1_clk.common.hw,
+		[CLK_USB_OHCI2]		= &usb_ohci2_clk.common.hw,
+		[CLK_MDFS]		= &mdfs_clk.common.hw,
+		[CLK_SDRAM0]		= &sdram0_clk.common.hw,
+		[CLK_SDRAM1]		= &sdram1_clk.common.hw,
+		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
+		[CLK_DRAM_CSI_ISP]	= &dram_csi_isp_clk.common.hw,
+		[CLK_DRAM_TS]		= &dram_ts_clk.common.hw,
+		[CLK_DRAM_DRC0]		= &dram_drc0_clk.common.hw,
+		[CLK_DRAM_DRC1]		= &dram_drc1_clk.common.hw,
+		[CLK_DRAM_DEU0]		= &dram_deu0_clk.common.hw,
+		[CLK_DRAM_DEU1]		= &dram_deu1_clk.common.hw,
+		[CLK_DRAM_FE0]		= &dram_fe0_clk.common.hw,
+		[CLK_DRAM_FE1]		= &dram_fe1_clk.common.hw,
+		[CLK_DRAM_BE0]		= &dram_be0_clk.common.hw,
+		[CLK_DRAM_BE1]		= &dram_be1_clk.common.hw,
+		[CLK_DRAM_MP]		= &dram_mp_clk.common.hw,
+		[CLK_BE0]		= &be0_clk.common.hw,
+		[CLK_BE1]		= &be1_clk.common.hw,
+		[CLK_FE0]		= &fe0_clk.common.hw,
+		[CLK_FE1]		= &fe1_clk.common.hw,
+		[CLK_MP]		= &mp_clk.common.hw,
+		[CLK_LCD0_CH0]		= &lcd0_ch0_clk.common.hw,
+		[CLK_LCD1_CH0]		= &lcd1_ch0_clk.common.hw,
+		[CLK_LCD0_CH1]		= &lcd0_ch1_clk.common.hw,
+		[CLK_LCD1_CH1]		= &lcd1_ch1_clk.common.hw,
+		[CLK_CSI0_SCLK]		= &csi0_sclk_clk.common.hw,
+		[CLK_CSI0_MCLK]		= &csi0_mclk_clk.common.hw,
+		[CLK_CSI1_MCLK]		= &csi1_mclk_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_CODEC]		= &codec_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+		[CLK_DIGITAL_MIC]	= &digital_mic_clk.common.hw,
+		[CLK_HDMI]		= &hdmi_clk.common.hw,
+		[CLK_HDMI_DDC]		= &hdmi_ddc_clk.common.hw,
+		[CLK_PS]		= &ps_clk.common.hw,
+		[CLK_MBUS0]		= &mbus0_clk.common.hw,
+		[CLK_MBUS1]		= &mbus1_clk.common.hw,
+		[CLK_MIPI_DSI]		= &mipi_dsi_clk.common.hw,
+		[CLK_MIPI_DSI_DPHY]	= &mipi_dsi_dphy_clk.common.hw,
+		[CLK_MIPI_CSI_DPHY]	= &mipi_csi_dphy_clk.common.hw,
+		[CLK_IEP_DRC0]		= &iep_drc0_clk.common.hw,
+		[CLK_IEP_DRC1]		= &iep_drc1_clk.common.hw,
+		[CLK_IEP_DEU0]		= &iep_deu0_clk.common.hw,
+		[CLK_IEP_DEU1]		= &iep_deu1_clk.common.hw,
+		[CLK_GPU_CORE]		= &gpu_core_clk.common.hw,
+		[CLK_GPU_MEMORY]	= &gpu_memory_clk.common.hw,
+		[CLK_GPU_HYD]		= &gpu_hyd_clk.common.hw,
+		[CLK_ATS]		= &ats_clk.common.hw,
+		[CLK_TRACE]		= &trace_clk.common.hw,
+		[CLK_OUT_A]		= &out_a_clk.common.hw,
+		[CLK_OUT_B]		= &out_b_clk.common.hw,
+		[CLK_OUT_C]		= &out_c_clk.common.hw,
+	},
+	.num	= CLK_NUMBER,
+};
+
+static struct ccu_reset_map sun6i_a31_ccu_resets[] = {
+	[RST_USB_PHY0]		= { 0x0cc, BIT(0) },
+	[RST_USB_PHY1]		= { 0x0cc, BIT(1) },
+	[RST_USB_PHY2]		= { 0x0cc, BIT(2) },
+
+	[RST_AHB1_MIPI_DSI]	= { 0x2c0, BIT(1) },
+	[RST_AHB1_SS]		= { 0x2c0, BIT(5) },
+	[RST_AHB1_DMA]		= { 0x2c0, BIT(6) },
+	[RST_AHB1_MMC0]		= { 0x2c0, BIT(8) },
+	[RST_AHB1_MMC1]		= { 0x2c0, BIT(9) },
+	[RST_AHB1_MMC2]		= { 0x2c0, BIT(10) },
+	[RST_AHB1_MMC3]		= { 0x2c0, BIT(11) },
+	[RST_AHB1_NAND1]	= { 0x2c0, BIT(12) },
+	[RST_AHB1_NAND0]	= { 0x2c0, BIT(13) },
+	[RST_AHB1_SDRAM]	= { 0x2c0, BIT(14) },
+	[RST_AHB1_EMAC]		= { 0x2c0, BIT(17) },
+	[RST_AHB1_TS]		= { 0x2c0, BIT(18) },
+	[RST_AHB1_HSTIMER]	= { 0x2c0, BIT(19) },
+	[RST_AHB1_SPI0]		= { 0x2c0, BIT(20) },
+	[RST_AHB1_SPI1]		= { 0x2c0, BIT(21) },
+	[RST_AHB1_SPI2]		= { 0x2c0, BIT(22) },
+	[RST_AHB1_SPI3]		= { 0x2c0, BIT(23) },
+	[RST_AHB1_OTG]		= { 0x2c0, BIT(24) },
+	[RST_AHB1_EHCI0]	= { 0x2c0, BIT(26) },
+	[RST_AHB1_EHCI1]	= { 0x2c0, BIT(27) },
+	[RST_AHB1_OHCI0]	= { 0x2c0, BIT(29) },
+	[RST_AHB1_OHCI1]	= { 0x2c0, BIT(30) },
+	[RST_AHB1_OHCI2]	= { 0x2c0, BIT(31) },
+
+	[RST_AHB1_VE]		= { 0x2c4, BIT(0) },
+	[RST_AHB1_LCD0]		= { 0x2c4, BIT(4) },
+	[RST_AHB1_LCD1]		= { 0x2c4, BIT(5) },
+	[RST_AHB1_CSI]		= { 0x2c4, BIT(8) },
+	[RST_AHB1_HDMI]		= { 0x2c4, BIT(11) },
+	[RST_AHB1_BE0]		= { 0x2c4, BIT(12) },
+	[RST_AHB1_BE1]		= { 0x2c4, BIT(13) },
+	[RST_AHB1_FE0]		= { 0x2c4, BIT(14) },
+	[RST_AHB1_FE1]		= { 0x2c4, BIT(15) },
+	[RST_AHB1_MP]		= { 0x2c4, BIT(18) },
+	[RST_AHB1_GPU]		= { 0x2c4, BIT(20) },
+	[RST_AHB1_DEU0]		= { 0x2c4, BIT(23) },
+	[RST_AHB1_DEU1]		= { 0x2c4, BIT(24) },
+	[RST_AHB1_DRC0]		= { 0x2c4, BIT(25) },
+	[RST_AHB1_DRC1]		= { 0x2c4, BIT(26) },
+	[RST_AHB1_LVDS]		= { 0x2c8, BIT(0) },
+
+	[RST_APB1_CODEC]	= { 0x2d0, BIT(0) },
+	[RST_APB1_SPDIF]	= { 0x2d0, BIT(1) },
+	[RST_APB1_DIGITAL_MIC]	= { 0x2d0, BIT(4) },
+	[RST_APB1_DAUDIO0]	= { 0x2d0, BIT(12) },
+	[RST_APB1_DAUDIO1]	= { 0x2d0, BIT(13) },
+
+	[RST_APB2_I2C0]		= { 0x2d8, BIT(0) },
+	[RST_APB2_I2C1]		= { 0x2d8, BIT(1) },
+	[RST_APB2_I2C2]		= { 0x2d8, BIT(2) },
+	[RST_APB2_I2C3]		= { 0x2d8, BIT(3) },
+	[RST_APB2_UART0]	= { 0x2d8, BIT(16) },
+	[RST_APB2_UART1]	= { 0x2d8, BIT(17) },
+	[RST_APB2_UART2]	= { 0x2d8, BIT(18) },
+	[RST_APB2_UART3]	= { 0x2d8, BIT(19) },
+	[RST_APB2_UART4]	= { 0x2d8, BIT(20) },
+	[RST_APB2_UART5]	= { 0x2d8, BIT(21) },
+};
+
+static const struct sunxi_ccu_desc sun6i_a31_ccu_desc = {
+	.ccu_clks	= sun6i_a31_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun6i_a31_ccu_clks),
+
+	.hw_clks	= &sun6i_a31_hw_clks,
+
+	.resets		= sun6i_a31_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun6i_a31_ccu_resets),
+};
+
+static struct ccu_mux_nb sun6i_a31_cpu_nb = {
+	.common		= &cpu_clk.common,
+	.cm		= &cpu_clk.mux,
+	.delay_us	= 1, /* > 8 clock cycles at 24 MHz */
+	.bypass_index	= 1, /* index of 24 MHz oscillator */
+};
+
+static void __init sun6i_a31_ccu_setup(struct device_node *node)
+{
+	void __iomem *reg;
+	u32 val;
+
+	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
+	if (IS_ERR(reg)) {
+		pr_err("%pOF: Could not map the clock registers\n", node);
+		return;
+	}
+
+	/* Force the PLL-Audio-1x divider to 1 */
+	val = readl(reg + SUN6I_A31_PLL_AUDIO_REG);
+	val &= ~GENMASK(19, 16);
+	writel(val | (0 << 16), reg + SUN6I_A31_PLL_AUDIO_REG);
+
+	/* Force PLL-MIPI to MIPI mode */
+	val = readl(reg + SUN6I_A31_PLL_MIPI_REG);
+	val &= BIT(16);
+	writel(val, reg + SUN6I_A31_PLL_MIPI_REG);
+
+	/* Force AHB1 to PLL6 / 3 */
+	val = readl(reg + SUN6I_A31_AHB1_REG);
+	/* set PLL6 pre-div = 3 */
+	val &= ~GENMASK(7, 6);
+	val |= 0x2 << 6;
+	/* select PLL6 / pre-div */
+	val &= ~GENMASK(13, 12);
+	val |= 0x3 << 12;
+	writel(val, reg + SUN6I_A31_AHB1_REG);
+
+	of_sunxi_ccu_probe(node, reg, &sun6i_a31_ccu_desc);
+
+	ccu_mux_notifier_register(pll_cpu_clk.common.hw.clk,
+				  &sun6i_a31_cpu_nb);
+}
+CLK_OF_DECLARE(sun6i_a31_ccu, "allwinner,sun6i-a31-ccu",
+	       sun6i_a31_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/sun6i-a31-ccu.h b/drivers/clk/sunxi-ng/sun6i-a31-ccu.h
new file mode 100644
index 000000000000..3ed2a59b0dc6
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun6i-a31-ccu.h
@@ -0,0 +1,69 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright 2016 Chen-Yu Tsai
+ *
+ * Chen-Yu Tsai <wens@csie.org>
+ */
+
+#ifndef _CCU_SUN6I_A31_H_
+#define _CCU_SUN6I_A31_H_
+
+#include <dt-bindings/clock/sun6i-a31-ccu.h>
+#include <dt-bindings/reset/sun6i-a31-ccu.h>
+
+#define CLK_PLL_CPU		0
+#define CLK_PLL_AUDIO_BASE	1
+#define CLK_PLL_AUDIO		2
+#define CLK_PLL_AUDIO_2X	3
+#define CLK_PLL_AUDIO_4X	4
+#define CLK_PLL_AUDIO_8X	5
+#define CLK_PLL_VIDEO0		6
+
+/* The PLL_VIDEO0_2X clock is exported */
+
+#define CLK_PLL_VE		8
+#define CLK_PLL_DDR		9
+
+/* The PLL_PERIPH clock is exported */
+
+#define CLK_PLL_PERIPH_2X	11
+#define CLK_PLL_VIDEO1		12
+
+/* The PLL_VIDEO1_2X clock is exported */
+
+#define CLK_PLL_GPU		14
+
+/* The PLL_VIDEO1_2X clock is exported */
+
+#define CLK_PLL9		16
+#define CLK_PLL10		17
+
+/* The CPUX clock is exported */
+
+#define CLK_AXI			19
+#define CLK_AHB1		20
+#define CLK_APB1		21
+#define CLK_APB2		22
+
+/* All the bus gates are exported */
+
+/* The first bunch of module clocks are exported */
+
+/* EMAC clock is not implemented */
+
+#define CLK_MDFS		107
+#define CLK_SDRAM0		108
+#define CLK_SDRAM1		109
+
+/* All the DRAM gates are exported */
+
+/* Some more module clocks are exported */
+
+#define CLK_MBUS0		141
+#define CLK_MBUS1		142
+
+/* Some more module clocks and external clock outputs are exported */
+
+#define CLK_NUMBER		(CLK_OUT_C + 1)
+
+#endif /* _CCU_SUN6I_A31_H_ */
diff --git a/drivers/clk/sunxi-ng/sun8i-a23-a33-ccu.h b/drivers/clk/sunxi-ng/sun8i-a23-a33-ccu.h
new file mode 100644
index 000000000000..5bf5c4d13b4c
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun8i-a23-a33-ccu.h
@@ -0,0 +1,56 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright 2016 Maxime Ripard
+ *
+ * Maxime Ripard <maxime.ripard@free-electrons.com>
+ */
+
+#ifndef _CCU_SUN8I_A23_A33_H_
+#define _CCU_SUN8I_A23_A33_H_
+
+#include <dt-bindings/clock/sun8i-a23-a33-ccu.h>
+#include <dt-bindings/reset/sun8i-a23-a33-ccu.h>
+
+#define CLK_PLL_CPUX		0
+#define CLK_PLL_AUDIO_BASE	1
+#define CLK_PLL_AUDIO		2
+#define CLK_PLL_AUDIO_2X	3
+#define CLK_PLL_AUDIO_4X	4
+#define CLK_PLL_AUDIO_8X	5
+#define CLK_PLL_VIDEO		6
+#define CLK_PLL_VIDEO_2X	7
+#define CLK_PLL_VE		8
+#define CLK_PLL_DDR0		9
+#define CLK_PLL_PERIPH		10
+#define CLK_PLL_PERIPH_2X	11
+#define CLK_PLL_GPU		12
+
+/* The PLL MIPI clock is exported */
+
+#define CLK_PLL_HSIC		14
+#define CLK_PLL_DE		15
+#define CLK_PLL_DDR1		16
+#define CLK_PLL_DDR		17
+
+/* The CPUX clock is exported */
+
+#define CLK_AXI			19
+#define CLK_AHB1		20
+#define CLK_APB1		21
+#define CLK_APB2		22
+
+/* All the bus gates are exported */
+
+/* The first part of the mod clocks is exported */
+
+#define CLK_DRAM		79
+
+/* Some more module clocks are exported */
+
+#define CLK_MBUS		95
+
+/* And the last module clocks are exported */
+
+#define CLK_NUMBER		(CLK_ATS + 1)
+
+#endif /* _CCU_SUN8I_A23_A33_H_ */
diff --git a/drivers/clk/sunxi-ng/sun8i-a23-ccu.c b/drivers/clk/sunxi-ng/sun8i-a23-ccu.c
new file mode 100644
index 000000000000..5bbc66a762db
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun8i-a23-ccu.c
@@ -0,0 +1,751 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (c) 2016 Maxime Ripard. All rights reserved.
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/io.h>
+#include <linux/of_address.h>
+
+#include "ccu_common.h"
+#include "ccu_reset.h"
+
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_mp.h"
+#include "ccu_mult.h"
+#include "ccu_nk.h"
+#include "ccu_nkm.h"
+#include "ccu_nkmp.h"
+#include "ccu_nm.h"
+#include "ccu_phase.h"
+#include "ccu_sdm.h"
+
+#include "sun8i-a23-a33-ccu.h"
+
+
+static struct ccu_nkmp pll_cpux_clk = {
+	.enable = BIT(31),
+	.lock	= BIT(28),
+
+	.n	= _SUNXI_CCU_MULT(8, 5),
+	.k	= _SUNXI_CCU_MULT(4, 2),
+	.m	= _SUNXI_CCU_DIV(0, 2),
+	.p	= _SUNXI_CCU_DIV_MAX(16, 2, 4),
+
+	.common	= {
+		.reg		= 0x000,
+		.hw.init	= CLK_HW_INIT("pll-cpux", "osc24M",
+					      &ccu_nkmp_ops,
+					      0),
+	},
+};
+
+/*
+ * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
+ * the base (2x, 4x and 8x), and one variable divider (the one true
+ * pll audio).
+ *
+ * With sigma-delta modulation for fractional-N on the audio PLL,
+ * we have to use specific dividers. This means the variable divider
+ * can no longer be used, as the audio codec requests the exact clock
+ * rates we support through this mechanism. So we now hard code the
+ * variable divider to 1. This means the clock rates will no longer
+ * match the clock names.
+ */
+#define SUN8I_A23_PLL_AUDIO_REG	0x008
+
+static struct ccu_sdm_setting pll_audio_sdm_table[] = {
+	{ .rate = 22579200, .pattern = 0xc0010d84, .m = 8, .n = 7 },
+	{ .rate = 24576000, .pattern = 0xc000ac02, .m = 14, .n = 14 },
+};
+
+static SUNXI_CCU_NM_WITH_SDM_GATE_LOCK(pll_audio_base_clk, "pll-audio-base",
+				       "osc24M", 0x008,
+				       8, 7,	/* N */
+				       0, 5,	/* M */
+				       pll_audio_sdm_table, BIT(24),
+				       0x284, BIT(31),
+				       BIT(31),	/* gate */
+				       BIT(28),	/* lock */
+				       CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_video_clk, "pll-video",
+					"osc24M", 0x010,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_ve_clk, "pll-ve",
+					"osc24M", 0x018,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_ddr_clk, "pll-ddr",
+				    "osc24M", 0x020,
+				    8, 5,		/* N */
+				    4, 2,		/* K */
+				    0, 2,		/* M */
+				    BIT(31),		/* gate */
+				    BIT(28),		/* lock */
+				    0);
+
+static SUNXI_CCU_NK_WITH_GATE_LOCK_POSTDIV(pll_periph_clk, "pll-periph",
+					   "osc24M", 0x028,
+					   8, 5,	/* N */
+					   4, 2,	/* K */
+					   BIT(31),	/* gate */
+					   BIT(28),	/* lock */
+					   2,		/* post-div */
+					   CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_gpu_clk, "pll-gpu",
+					"osc24M", 0x038,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+/*
+ * The MIPI PLL has 2 modes: "MIPI" and "HDMI".
+ *
+ * The MIPI mode is a standard NKM-style clock. The HDMI mode is an
+ * integer / fractional clock with switchable multipliers and dividers.
+ * This is not supported here. We hardcode the PLL to MIPI mode.
+ */
+#define SUN8I_A23_PLL_MIPI_REG	0x040
+static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_mipi_clk, "pll-mipi",
+				    "pll-video", 0x040,
+				    8, 4,		/* N */
+				    4, 2,		/* K */
+				    0, 4,		/* M */
+				    BIT(31) | BIT(23) | BIT(22), /* gate */
+				    BIT(28),		/* lock */
+				    CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_hsic_clk, "pll-hsic",
+					"osc24M", 0x044,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_de_clk, "pll-de",
+					"osc24M", 0x048,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static const char * const cpux_parents[] = { "osc32k", "osc24M",
+					     "pll-cpux" , "pll-cpux" };
+static SUNXI_CCU_MUX(cpux_clk, "cpux", cpux_parents,
+		     0x050, 16, 2, CLK_IS_CRITICAL);
+
+static SUNXI_CCU_M(axi_clk, "axi", "cpux", 0x050, 0, 2, 0);
+
+static const char * const ahb1_parents[] = { "osc32k", "osc24M",
+					     "axi" , "pll-periph" };
+static const struct ccu_mux_var_prediv ahb1_predivs[] = {
+	{ .index = 3, .shift = 6, .width = 2 },
+};
+static struct ccu_div ahb1_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
+
+	.mux		= {
+		.shift	= 12,
+		.width	= 2,
+
+		.var_predivs	= ahb1_predivs,
+		.n_var_predivs	= ARRAY_SIZE(ahb1_predivs),
+	},
+
+	.common		= {
+		.reg		= 0x054,
+		.features	= CCU_FEATURE_VARIABLE_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("ahb1",
+						      ahb1_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static struct clk_div_table apb1_div_table[] = {
+	{ .val = 0, .div = 2 },
+	{ .val = 1, .div = 2 },
+	{ .val = 2, .div = 4 },
+	{ .val = 3, .div = 8 },
+	{ /* Sentinel */ },
+};
+static SUNXI_CCU_DIV_TABLE(apb1_clk, "apb1", "ahb1",
+			   0x054, 8, 2, apb1_div_table, 0);
+
+static const char * const apb2_parents[] = { "osc32k", "osc24M",
+					     "pll-periph" , "pll-periph" };
+static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", apb2_parents, 0x058,
+			     0, 5,	/* M */
+			     16, 2,	/* P */
+			     24, 2,	/* mux */
+			     0);
+
+static SUNXI_CCU_GATE(bus_mipi_dsi_clk,	"bus-mipi-dsi",	"ahb1",
+		      0x060, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_dma_clk,	"bus-dma",	"ahb1",
+		      0x060, BIT(6), 0);
+static SUNXI_CCU_GATE(bus_mmc0_clk,	"bus-mmc0",	"ahb1",
+		      0x060, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_mmc1_clk,	"bus-mmc1",	"ahb1",
+		      0x060, BIT(9), 0);
+static SUNXI_CCU_GATE(bus_mmc2_clk,	"bus-mmc2",	"ahb1",
+		      0x060, BIT(10), 0);
+static SUNXI_CCU_GATE(bus_nand_clk,	"bus-nand",	"ahb1",
+		      0x060, BIT(13), 0);
+static SUNXI_CCU_GATE(bus_dram_clk,	"bus-dram",	"ahb1",
+		      0x060, BIT(14), 0);
+static SUNXI_CCU_GATE(bus_hstimer_clk,	"bus-hstimer",	"ahb1",
+		      0x060, BIT(19), 0);
+static SUNXI_CCU_GATE(bus_spi0_clk,	"bus-spi0",	"ahb1",
+		      0x060, BIT(20), 0);
+static SUNXI_CCU_GATE(bus_spi1_clk,	"bus-spi1",	"ahb1",
+		      0x060, BIT(21), 0);
+static SUNXI_CCU_GATE(bus_otg_clk,	"bus-otg",	"ahb1",
+		      0x060, BIT(24), 0);
+static SUNXI_CCU_GATE(bus_ehci_clk,	"bus-ehci",	"ahb1",
+		      0x060, BIT(26), 0);
+static SUNXI_CCU_GATE(bus_ohci_clk,	"bus-ohci",	"ahb1",
+		      0x060, BIT(29), 0);
+
+static SUNXI_CCU_GATE(bus_ve_clk,	"bus-ve",	"ahb1",
+		      0x064, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_lcd_clk,	"bus-lcd",	"ahb1",
+		      0x064, BIT(4), 0);
+static SUNXI_CCU_GATE(bus_csi_clk,	"bus-csi",	"ahb1",
+		      0x064, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_de_be_clk,	"bus-de-be",	"ahb1",
+		      0x064, BIT(12), 0);
+static SUNXI_CCU_GATE(bus_de_fe_clk,	"bus-de-fe",	"ahb1",
+		      0x064, BIT(14), 0);
+static SUNXI_CCU_GATE(bus_gpu_clk,	"bus-gpu",	"ahb1",
+		      0x064, BIT(20), 0);
+static SUNXI_CCU_GATE(bus_msgbox_clk,	"bus-msgbox",	"ahb1",
+		      0x064, BIT(21), 0);
+static SUNXI_CCU_GATE(bus_spinlock_clk,	"bus-spinlock",	"ahb1",
+		      0x064, BIT(22), 0);
+static SUNXI_CCU_GATE(bus_drc_clk,	"bus-drc",	"ahb1",
+		      0x064, BIT(25), 0);
+
+static SUNXI_CCU_GATE(bus_codec_clk,	"bus-codec",	"apb1",
+		      0x068, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_pio_clk,	"bus-pio",	"apb1",
+		      0x068, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_i2s0_clk,	"bus-i2s0",	"apb1",
+		      0x068, BIT(12), 0);
+static SUNXI_CCU_GATE(bus_i2s1_clk,	"bus-i2s1",	"apb1",
+		      0x068, BIT(13), 0);
+
+static SUNXI_CCU_GATE(bus_i2c0_clk,	"bus-i2c0",	"apb2",
+		      0x06c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_i2c1_clk,	"bus-i2c1",	"apb2",
+		      0x06c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_i2c2_clk,	"bus-i2c2",	"apb2",
+		      0x06c, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_uart0_clk,	"bus-uart0",	"apb2",
+		      0x06c, BIT(16), 0);
+static SUNXI_CCU_GATE(bus_uart1_clk,	"bus-uart1",	"apb2",
+		      0x06c, BIT(17), 0);
+static SUNXI_CCU_GATE(bus_uart2_clk,	"bus-uart2",	"apb2",
+		      0x06c, BIT(18), 0);
+static SUNXI_CCU_GATE(bus_uart3_clk,	"bus-uart3",	"apb2",
+		      0x06c, BIT(19), 0);
+static SUNXI_CCU_GATE(bus_uart4_clk,	"bus-uart4",	"apb2",
+		      0x06c, BIT(20), 0);
+
+static const char * const mod0_default_parents[] = { "osc24M", "pll-periph" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand_clk, "nand", mod0_default_parents, 0x080,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents, 0x088,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc0_sample_clk, "mmc0_sample", "mmc0",
+		       0x088, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc0_output_clk, "mmc0_output", "mmc0",
+		       0x088, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents, 0x08c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc1_sample_clk, "mmc1_sample", "mmc1",
+		       0x08c, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc1_output_clk, "mmc1_output", "mmc1",
+		       0x08c, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents, 0x090,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc2_sample_clk, "mmc2_sample", "mmc2",
+		       0x090, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc2_output_clk, "mmc2_output", "mmc2",
+		       0x090, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents, 0x0a0,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents, 0x0a4,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static const char * const i2s_parents[] = { "pll-audio-8x", "pll-audio-4x",
+					    "pll-audio-2x", "pll-audio" };
+static SUNXI_CCU_MUX_WITH_GATE(i2s0_clk, "i2s0", i2s_parents,
+			       0x0b0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_MUX_WITH_GATE(i2s1_clk, "i2s1", i2s_parents,
+			       0x0b4, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+/* TODO: the parent for most of the USB clocks is not known */
+static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"osc24M",
+		      0x0cc, BIT(8), 0);
+static SUNXI_CCU_GATE(usb_phy1_clk,	"usb-phy1",	"osc24M",
+		      0x0cc, BIT(9), 0);
+static SUNXI_CCU_GATE(usb_hsic_clk,	"usb-hsic",	"pll-hsic",
+		      0x0cc, BIT(10), 0);
+static SUNXI_CCU_GATE(usb_hsic_12M_clk,	"usb-hsic-12M",	"osc24M",
+		      0x0cc, BIT(11), 0);
+static SUNXI_CCU_GATE(usb_ohci_clk,	"usb-ohci",	"osc24M",
+		      0x0cc, BIT(16), 0);
+
+static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"pll-ddr",
+		      0x100, BIT(0), 0);
+static SUNXI_CCU_GATE(dram_csi_clk,	"dram-csi",	"pll-ddr",
+		      0x100, BIT(1), 0);
+static SUNXI_CCU_GATE(dram_drc_clk,	"dram-drc",	"pll-ddr",
+		      0x100, BIT(16), 0);
+static SUNXI_CCU_GATE(dram_de_fe_clk,	"dram-de-fe",	"pll-ddr",
+		      0x100, BIT(24), 0);
+static SUNXI_CCU_GATE(dram_de_be_clk,	"dram-de-be",	"pll-ddr",
+		      0x100, BIT(26), 0);
+
+static const char * const de_parents[] = { "pll-video", "pll-periph-2x",
+					   "pll-gpu", "pll-de" };
+static const u8 de_table[] = { 0, 2, 3, 5 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(de_be_clk, "de-be",
+				       de_parents, de_table,
+				       0x104, 0, 4, 24, 3, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(de_fe_clk, "de-fe",
+				       de_parents, de_table,
+				       0x10c, 0, 4, 24, 3, BIT(31), 0);
+
+static const char * const lcd_ch0_parents[] = { "pll-video", "pll-video-2x",
+						"pll-mipi" };
+static const u8 lcd_ch0_table[] = { 0, 2, 4 };
+static SUNXI_CCU_MUX_TABLE_WITH_GATE(lcd_ch0_clk, "lcd-ch0",
+				     lcd_ch0_parents, lcd_ch0_table,
+				     0x118, 24, 3, BIT(31),
+				     CLK_SET_RATE_PARENT);
+
+static const char * const lcd_ch1_parents[] = { "pll-video", "pll-video-2x" };
+static const u8 lcd_ch1_table[] = { 0, 2 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(lcd_ch1_clk, "lcd-ch1",
+				       lcd_ch1_parents, lcd_ch1_table,
+				       0x12c, 0, 4, 24, 2, BIT(31), 0);
+
+static const char * const csi_sclk_parents[] = { "pll-video", "pll-de",
+						 "pll-mipi", "pll-ve" };
+static const u8 csi_sclk_table[] = { 0, 3, 4, 5 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi_sclk_clk, "csi-sclk",
+				       csi_sclk_parents, csi_sclk_table,
+				       0x134, 16, 4, 24, 3, BIT(31), 0);
+
+static const char * const csi_mclk_parents[] = { "pll-video", "pll-de",
+						 "osc24M" };
+static const u8 csi_mclk_table[] = { 0, 3, 5 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi_mclk_clk, "csi-mclk",
+				       csi_mclk_parents, csi_mclk_table,
+				       0x134, 0, 5, 8, 3, BIT(15), 0);
+
+static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve",
+			     0x13c, 16, 3, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(ac_dig_clk,	"ac-dig",	"pll-audio",
+		      0x140, BIT(31), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_GATE(avs_clk,		"avs",		"osc24M",
+		      0x144, BIT(31), 0);
+
+static const char * const mbus_parents[] = { "osc24M", "pll-periph-2x",
+					     "pll-ddr" };
+static SUNXI_CCU_M_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents,
+				 0x15c, 0, 3, 24, 2, BIT(31), CLK_IS_CRITICAL);
+
+static const char * const dsi_sclk_parents[] = { "pll-video", "pll-video-2x" };
+static const u8 dsi_sclk_table[] = { 0, 2 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(dsi_sclk_clk, "dsi-sclk",
+				       dsi_sclk_parents, dsi_sclk_table,
+				       0x168, 16, 4, 24, 2, BIT(31), 0);
+
+static const char * const dsi_dphy_parents[] = { "pll-video", "pll-periph" };
+static const u8 dsi_dphy_table[] = { 0, 2 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(dsi_dphy_clk, "dsi-dphy",
+				       dsi_dphy_parents, dsi_dphy_table,
+				       0x168, 0, 4, 8, 2, BIT(15), 0);
+
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(drc_clk, "drc",
+				       de_parents, de_table,
+				       0x180, 0, 4, 24, 3, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_GATE(gpu_clk, "gpu", "pll-gpu",
+			     0x1a0, 0, 3, BIT(31), 0);
+
+static const char * const ats_parents[] = { "osc24M", "pll-periph" };
+static SUNXI_CCU_M_WITH_MUX_GATE(ats_clk, "ats", ats_parents,
+				 0x1b0, 0, 3, 24, 2, BIT(31), 0);
+
+static struct ccu_common *sun8i_a23_ccu_clks[] = {
+	&pll_cpux_clk.common,
+	&pll_audio_base_clk.common,
+	&pll_video_clk.common,
+	&pll_ve_clk.common,
+	&pll_ddr_clk.common,
+	&pll_periph_clk.common,
+	&pll_gpu_clk.common,
+	&pll_mipi_clk.common,
+	&pll_hsic_clk.common,
+	&pll_de_clk.common,
+	&cpux_clk.common,
+	&axi_clk.common,
+	&ahb1_clk.common,
+	&apb1_clk.common,
+	&apb2_clk.common,
+	&bus_mipi_dsi_clk.common,
+	&bus_dma_clk.common,
+	&bus_mmc0_clk.common,
+	&bus_mmc1_clk.common,
+	&bus_mmc2_clk.common,
+	&bus_nand_clk.common,
+	&bus_dram_clk.common,
+	&bus_hstimer_clk.common,
+	&bus_spi0_clk.common,
+	&bus_spi1_clk.common,
+	&bus_otg_clk.common,
+	&bus_ehci_clk.common,
+	&bus_ohci_clk.common,
+	&bus_ve_clk.common,
+	&bus_lcd_clk.common,
+	&bus_csi_clk.common,
+	&bus_de_fe_clk.common,
+	&bus_de_be_clk.common,
+	&bus_gpu_clk.common,
+	&bus_msgbox_clk.common,
+	&bus_spinlock_clk.common,
+	&bus_drc_clk.common,
+	&bus_codec_clk.common,
+	&bus_pio_clk.common,
+	&bus_i2s0_clk.common,
+	&bus_i2s1_clk.common,
+	&bus_i2c0_clk.common,
+	&bus_i2c1_clk.common,
+	&bus_i2c2_clk.common,
+	&bus_uart0_clk.common,
+	&bus_uart1_clk.common,
+	&bus_uart2_clk.common,
+	&bus_uart3_clk.common,
+	&bus_uart4_clk.common,
+	&nand_clk.common,
+	&mmc0_clk.common,
+	&mmc0_sample_clk.common,
+	&mmc0_output_clk.common,
+	&mmc1_clk.common,
+	&mmc1_sample_clk.common,
+	&mmc1_output_clk.common,
+	&mmc2_clk.common,
+	&mmc2_sample_clk.common,
+	&mmc2_output_clk.common,
+	&spi0_clk.common,
+	&spi1_clk.common,
+	&i2s0_clk.common,
+	&i2s1_clk.common,
+	&usb_phy0_clk.common,
+	&usb_phy1_clk.common,
+	&usb_hsic_clk.common,
+	&usb_hsic_12M_clk.common,
+	&usb_ohci_clk.common,
+	&dram_ve_clk.common,
+	&dram_csi_clk.common,
+	&dram_drc_clk.common,
+	&dram_de_fe_clk.common,
+	&dram_de_be_clk.common,
+	&de_be_clk.common,
+	&de_fe_clk.common,
+	&lcd_ch0_clk.common,
+	&lcd_ch1_clk.common,
+	&csi_sclk_clk.common,
+	&csi_mclk_clk.common,
+	&ve_clk.common,
+	&ac_dig_clk.common,
+	&avs_clk.common,
+	&mbus_clk.common,
+	&dsi_sclk_clk.common,
+	&dsi_dphy_clk.common,
+	&drc_clk.common,
+	&gpu_clk.common,
+	&ats_clk.common,
+};
+
+static const struct clk_hw *clk_parent_pll_audio[] = {
+	&pll_audio_base_clk.common.hw
+};
+
+/* We hardcode the divider to 1 for now */
+static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
+			    clk_parent_pll_audio,
+			    1, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
+			    clk_parent_pll_audio,
+			    2, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
+			    clk_parent_pll_audio,
+			    1, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
+			    clk_parent_pll_audio,
+			    1, 2, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HW(pll_periph_2x_clk, "pll-periph-2x",
+			   &pll_periph_clk.common.hw,
+			   1, 2, 0);
+static CLK_FIXED_FACTOR_HW(pll_video_2x_clk, "pll-video-2x",
+			   &pll_video_clk.common.hw,
+			   1, 2, 0);
+
+static struct clk_hw_onecell_data sun8i_a23_hw_clks = {
+	.hws	= {
+		[CLK_PLL_CPUX]		= &pll_cpux_clk.common.hw,
+		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
+		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
+		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
+		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
+		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
+		[CLK_PLL_VIDEO]		= &pll_video_clk.common.hw,
+		[CLK_PLL_VIDEO_2X]	= &pll_video_2x_clk.hw,
+		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
+		[CLK_PLL_DDR0]		= &pll_ddr_clk.common.hw,
+		[CLK_PLL_PERIPH]	= &pll_periph_clk.common.hw,
+		[CLK_PLL_PERIPH_2X]	= &pll_periph_2x_clk.hw,
+		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
+		[CLK_PLL_MIPI]		= &pll_mipi_clk.common.hw,
+		[CLK_PLL_HSIC]		= &pll_hsic_clk.common.hw,
+		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
+		[CLK_CPUX]		= &cpux_clk.common.hw,
+		[CLK_AXI]		= &axi_clk.common.hw,
+		[CLK_AHB1]		= &ahb1_clk.common.hw,
+		[CLK_APB1]		= &apb1_clk.common.hw,
+		[CLK_APB2]		= &apb2_clk.common.hw,
+		[CLK_BUS_MIPI_DSI]	= &bus_mipi_dsi_clk.common.hw,
+		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
+		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
+		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
+		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
+		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
+		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
+		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
+		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
+		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
+		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
+		[CLK_BUS_EHCI]		= &bus_ehci_clk.common.hw,
+		[CLK_BUS_OHCI]		= &bus_ohci_clk.common.hw,
+		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
+		[CLK_BUS_LCD]		= &bus_lcd_clk.common.hw,
+		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
+		[CLK_BUS_DE_BE]		= &bus_de_be_clk.common.hw,
+		[CLK_BUS_DE_FE]		= &bus_de_fe_clk.common.hw,
+		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
+		[CLK_BUS_MSGBOX]	= &bus_msgbox_clk.common.hw,
+		[CLK_BUS_SPINLOCK]	= &bus_spinlock_clk.common.hw,
+		[CLK_BUS_DRC]		= &bus_drc_clk.common.hw,
+		[CLK_BUS_CODEC]		= &bus_codec_clk.common.hw,
+		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
+		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
+		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
+		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
+		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
+		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
+		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
+		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
+		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
+		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
+		[CLK_BUS_UART4]		= &bus_uart4_clk.common.hw,
+		[CLK_NAND]		= &nand_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
+		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
+		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
+		[CLK_MMC2]		= &mmc2_clk.common.hw,
+		[CLK_MMC2_SAMPLE]	= &mmc2_sample_clk.common.hw,
+		[CLK_MMC2_OUTPUT]	= &mmc2_output_clk.common.hw,
+		[CLK_SPI0]		= &spi0_clk.common.hw,
+		[CLK_SPI1]		= &spi1_clk.common.hw,
+		[CLK_I2S0]		= &i2s0_clk.common.hw,
+		[CLK_I2S1]		= &i2s1_clk.common.hw,
+		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
+		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
+		[CLK_USB_HSIC]		= &usb_hsic_clk.common.hw,
+		[CLK_USB_HSIC_12M]	= &usb_hsic_12M_clk.common.hw,
+		[CLK_USB_OHCI]		= &usb_ohci_clk.common.hw,
+		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
+		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
+		[CLK_DRAM_DRC]		= &dram_drc_clk.common.hw,
+		[CLK_DRAM_DE_FE]	= &dram_de_fe_clk.common.hw,
+		[CLK_DRAM_DE_BE]	= &dram_de_be_clk.common.hw,
+		[CLK_DE_BE]		= &de_be_clk.common.hw,
+		[CLK_DE_FE]		= &de_fe_clk.common.hw,
+		[CLK_LCD_CH0]		= &lcd_ch0_clk.common.hw,
+		[CLK_LCD_CH1]		= &lcd_ch1_clk.common.hw,
+		[CLK_CSI_SCLK]		= &csi_sclk_clk.common.hw,
+		[CLK_CSI_MCLK]		= &csi_mclk_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_AC_DIG]		= &ac_dig_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+		[CLK_MBUS]		= &mbus_clk.common.hw,
+		[CLK_DSI_SCLK]		= &dsi_sclk_clk.common.hw,
+		[CLK_DSI_DPHY]		= &dsi_dphy_clk.common.hw,
+		[CLK_DRC]		= &drc_clk.common.hw,
+		[CLK_GPU]		= &gpu_clk.common.hw,
+		[CLK_ATS]		= &ats_clk.common.hw,
+	},
+	.num	= CLK_NUMBER,
+};
+
+static struct ccu_reset_map sun8i_a23_ccu_resets[] = {
+	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
+	[RST_USB_PHY1]		=  { 0x0cc, BIT(1) },
+	[RST_USB_HSIC]		=  { 0x0cc, BIT(2) },
+
+	[RST_MBUS]		=  { 0x0fc, BIT(31) },
+
+	[RST_BUS_MIPI_DSI]	=  { 0x2c0, BIT(1) },
+	[RST_BUS_DMA]		=  { 0x2c0, BIT(6) },
+	[RST_BUS_MMC0]		=  { 0x2c0, BIT(8) },
+	[RST_BUS_MMC1]		=  { 0x2c0, BIT(9) },
+	[RST_BUS_MMC2]		=  { 0x2c0, BIT(10) },
+	[RST_BUS_NAND]		=  { 0x2c0, BIT(13) },
+	[RST_BUS_DRAM]		=  { 0x2c0, BIT(14) },
+	[RST_BUS_HSTIMER]	=  { 0x2c0, BIT(19) },
+	[RST_BUS_SPI0]		=  { 0x2c0, BIT(20) },
+	[RST_BUS_SPI1]		=  { 0x2c0, BIT(21) },
+	[RST_BUS_OTG]		=  { 0x2c0, BIT(24) },
+	[RST_BUS_EHCI]		=  { 0x2c0, BIT(26) },
+	[RST_BUS_OHCI]		=  { 0x2c0, BIT(29) },
+
+	[RST_BUS_VE]		=  { 0x2c4, BIT(0) },
+	[RST_BUS_LCD]		=  { 0x2c4, BIT(4) },
+	[RST_BUS_CSI]		=  { 0x2c4, BIT(8) },
+	[RST_BUS_DE_BE]		=  { 0x2c4, BIT(12) },
+	[RST_BUS_DE_FE]		=  { 0x2c4, BIT(14) },
+	[RST_BUS_GPU]		=  { 0x2c4, BIT(20) },
+	[RST_BUS_MSGBOX]	=  { 0x2c4, BIT(21) },
+	[RST_BUS_SPINLOCK]	=  { 0x2c4, BIT(22) },
+	[RST_BUS_DRC]		=  { 0x2c4, BIT(25) },
+
+	[RST_BUS_LVDS]		=  { 0x2c8, BIT(0) },
+
+	[RST_BUS_CODEC]		=  { 0x2d0, BIT(0) },
+	[RST_BUS_I2S0]		=  { 0x2d0, BIT(12) },
+	[RST_BUS_I2S1]		=  { 0x2d0, BIT(13) },
+
+	[RST_BUS_I2C0]		=  { 0x2d8, BIT(0) },
+	[RST_BUS_I2C1]		=  { 0x2d8, BIT(1) },
+	[RST_BUS_I2C2]		=  { 0x2d8, BIT(2) },
+	[RST_BUS_UART0]		=  { 0x2d8, BIT(16) },
+	[RST_BUS_UART1]		=  { 0x2d8, BIT(17) },
+	[RST_BUS_UART2]		=  { 0x2d8, BIT(18) },
+	[RST_BUS_UART3]		=  { 0x2d8, BIT(19) },
+	[RST_BUS_UART4]		=  { 0x2d8, BIT(20) },
+};
+
+static const struct sunxi_ccu_desc sun8i_a23_ccu_desc = {
+	.ccu_clks	= sun8i_a23_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun8i_a23_ccu_clks),
+
+	.hw_clks	= &sun8i_a23_hw_clks,
+
+	.resets		= sun8i_a23_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun8i_a23_ccu_resets),
+};
+
+static void __init sun8i_a23_ccu_setup(struct device_node *node)
+{
+	void __iomem *reg;
+	u32 val;
+
+	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
+	if (IS_ERR(reg)) {
+		pr_err("%pOF: Could not map the clock registers\n", node);
+		return;
+	}
+
+	/* Force the PLL-Audio-1x divider to 1 */
+	val = readl(reg + SUN8I_A23_PLL_AUDIO_REG);
+	val &= ~GENMASK(19, 16);
+	writel(val | (0 << 16), reg + SUN8I_A23_PLL_AUDIO_REG);
+
+	/* Force PLL-MIPI to MIPI mode */
+	val = readl(reg + SUN8I_A23_PLL_MIPI_REG);
+	val &= ~BIT(16);
+	writel(val, reg + SUN8I_A23_PLL_MIPI_REG);
+
+	of_sunxi_ccu_probe(node, reg, &sun8i_a23_ccu_desc);
+}
+CLK_OF_DECLARE(sun8i_a23_ccu, "allwinner,sun8i-a23-ccu",
+	       sun8i_a23_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/sun8i-a33-ccu.c b/drivers/clk/sunxi-ng/sun8i-a33-ccu.c
new file mode 100644
index 000000000000..6cd214b444d1
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun8i-a33-ccu.c
@@ -0,0 +1,818 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (c) 2016 Maxime Ripard. All rights reserved.
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/io.h>
+#include <linux/of_address.h>
+
+#include "ccu_common.h"
+#include "ccu_reset.h"
+
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_mp.h"
+#include "ccu_mult.h"
+#include "ccu_nk.h"
+#include "ccu_nkm.h"
+#include "ccu_nkmp.h"
+#include "ccu_nm.h"
+#include "ccu_phase.h"
+
+#include "sun8i-a23-a33-ccu.h"
+
+static struct ccu_nkmp pll_cpux_clk = {
+	.enable = BIT(31),
+	.lock	= BIT(28),
+
+	.n	= _SUNXI_CCU_MULT(8, 5),
+	.k	= _SUNXI_CCU_MULT(4, 2),
+	.m	= _SUNXI_CCU_DIV(0, 2),
+	.p	= _SUNXI_CCU_DIV_MAX(16, 2, 4),
+
+	.common	= {
+		.reg		= 0x000,
+		.hw.init	= CLK_HW_INIT("pll-cpux", "osc24M",
+					      &ccu_nkmp_ops,
+					      0),
+	},
+};
+
+/*
+ * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
+ * the base (2x, 4x and 8x), and one variable divider (the one true
+ * pll audio).
+ *
+ * With sigma-delta modulation for fractional-N on the audio PLL,
+ * we have to use specific dividers. This means the variable divider
+ * can no longer be used, as the audio codec requests the exact clock
+ * rates we support through this mechanism. So we now hard code the
+ * variable divider to 1. This means the clock rates will no longer
+ * match the clock names.
+ */
+#define SUN8I_A33_PLL_AUDIO_REG	0x008
+
+static struct ccu_sdm_setting pll_audio_sdm_table[] = {
+	{ .rate = 22579200, .pattern = 0xc0010d84, .m = 8, .n = 7 },
+	{ .rate = 24576000, .pattern = 0xc000ac02, .m = 14, .n = 14 },
+};
+
+static SUNXI_CCU_NM_WITH_SDM_GATE_LOCK(pll_audio_base_clk, "pll-audio-base",
+				       "osc24M", 0x008,
+				       8, 7,	/* N */
+				       0, 5,	/* M */
+				       pll_audio_sdm_table, BIT(24),
+				       0x284, BIT(31),
+				       BIT(31),	/* gate */
+				       BIT(28),	/* lock */
+				       CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_video_clk, "pll-video",
+					"osc24M", 0x010,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_ve_clk, "pll-ve",
+					"osc24M", 0x018,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_ddr0_clk, "pll-ddr0",
+				    "osc24M", 0x020,
+				    8, 5,		/* N */
+				    4, 2,		/* K */
+				    0, 2,		/* M */
+				    BIT(31),		/* gate */
+				    BIT(28),		/* lock */
+				    0);
+
+static SUNXI_CCU_NK_WITH_GATE_LOCK_POSTDIV(pll_periph_clk, "pll-periph",
+					   "osc24M", 0x028,
+					   8, 5,	/* N */
+					   4, 2,	/* K */
+					   BIT(31),	/* gate */
+					   BIT(28),	/* lock */
+					   2,		/* post-div */
+					   CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_gpu_clk, "pll-gpu",
+					"osc24M", 0x038,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+/*
+ * The MIPI PLL has 2 modes: "MIPI" and "HDMI".
+ *
+ * The MIPI mode is a standard NKM-style clock. The HDMI mode is an
+ * integer / fractional clock with switchable multipliers and dividers.
+ * This is not supported here. We hardcode the PLL to MIPI mode.
+ */
+#define SUN8I_A33_PLL_MIPI_REG	0x040
+static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_mipi_clk, "pll-mipi",
+				    "pll-video", 0x040,
+				    8, 4,		/* N */
+				    4, 2,		/* K */
+				    0, 4,		/* M */
+				    BIT(31) | BIT(23) | BIT(22), /* gate */
+				    BIT(28),		/* lock */
+				    CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_hsic_clk, "pll-hsic",
+					"osc24M", 0x044,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_de_clk, "pll-de",
+					"osc24M", 0x048,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static struct ccu_mult pll_ddr1_clk = {
+	.enable	= BIT(31),
+	.lock	= BIT(28),
+	.mult	= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 6, 0, 12, 0),
+	.common	= {
+		.reg		= 0x04c,
+		.hw.init	= CLK_HW_INIT("pll-ddr1", "osc24M",
+					      &ccu_mult_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static const char * const cpux_parents[] = { "osc32k", "osc24M",
+					     "pll-cpux" , "pll-cpux" };
+static SUNXI_CCU_MUX(cpux_clk, "cpux", cpux_parents,
+		     0x050, 16, 2, CLK_IS_CRITICAL | CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M(axi_clk, "axi", "cpux", 0x050, 0, 2, 0);
+
+static const char * const ahb1_parents[] = { "osc32k", "osc24M",
+					     "axi" , "pll-periph" };
+static const struct ccu_mux_var_prediv ahb1_predivs[] = {
+	{ .index = 3, .shift = 6, .width = 2 },
+};
+static struct ccu_div ahb1_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
+
+	.mux		= {
+		.shift	= 12,
+		.width	= 2,
+
+		.var_predivs	= ahb1_predivs,
+		.n_var_predivs	= ARRAY_SIZE(ahb1_predivs),
+	},
+
+	.common		= {
+		.reg		= 0x054,
+		.features	= CCU_FEATURE_VARIABLE_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("ahb1",
+						      ahb1_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static struct clk_div_table apb1_div_table[] = {
+	{ .val = 0, .div = 2 },
+	{ .val = 1, .div = 2 },
+	{ .val = 2, .div = 4 },
+	{ .val = 3, .div = 8 },
+	{ /* Sentinel */ },
+};
+static SUNXI_CCU_DIV_TABLE(apb1_clk, "apb1", "ahb1",
+			   0x054, 8, 2, apb1_div_table, 0);
+
+static const char * const apb2_parents[] = { "osc32k", "osc24M",
+					     "pll-periph" , "pll-periph" };
+static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", apb2_parents, 0x058,
+			     0, 5,	/* M */
+			     16, 2,	/* P */
+			     24, 2,	/* mux */
+			     0);
+
+static SUNXI_CCU_GATE(bus_mipi_dsi_clk,	"bus-mipi-dsi",	"ahb1",
+		      0x060, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_ss_clk,	"bus-ss",	"ahb1",
+		      0x060, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_dma_clk,	"bus-dma",	"ahb1",
+		      0x060, BIT(6), 0);
+static SUNXI_CCU_GATE(bus_mmc0_clk,	"bus-mmc0",	"ahb1",
+		      0x060, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_mmc1_clk,	"bus-mmc1",	"ahb1",
+		      0x060, BIT(9), 0);
+static SUNXI_CCU_GATE(bus_mmc2_clk,	"bus-mmc2",	"ahb1",
+		      0x060, BIT(10), 0);
+static SUNXI_CCU_GATE(bus_nand_clk,	"bus-nand",	"ahb1",
+		      0x060, BIT(13), 0);
+static SUNXI_CCU_GATE(bus_dram_clk,	"bus-dram",	"ahb1",
+		      0x060, BIT(14), 0);
+static SUNXI_CCU_GATE(bus_hstimer_clk,	"bus-hstimer",	"ahb1",
+		      0x060, BIT(19), 0);
+static SUNXI_CCU_GATE(bus_spi0_clk,	"bus-spi0",	"ahb1",
+		      0x060, BIT(20), 0);
+static SUNXI_CCU_GATE(bus_spi1_clk,	"bus-spi1",	"ahb1",
+		      0x060, BIT(21), 0);
+static SUNXI_CCU_GATE(bus_otg_clk,	"bus-otg",	"ahb1",
+		      0x060, BIT(24), 0);
+static SUNXI_CCU_GATE(bus_ehci_clk,	"bus-ehci",	"ahb1",
+		      0x060, BIT(26), 0);
+static SUNXI_CCU_GATE(bus_ohci_clk,	"bus-ohci",	"ahb1",
+		      0x060, BIT(29), 0);
+
+static SUNXI_CCU_GATE(bus_ve_clk,	"bus-ve",	"ahb1",
+		      0x064, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_lcd_clk,	"bus-lcd",	"ahb1",
+		      0x064, BIT(4), 0);
+static SUNXI_CCU_GATE(bus_csi_clk,	"bus-csi",	"ahb1",
+		      0x064, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_de_be_clk,	"bus-de-be",	"ahb1",
+		      0x064, BIT(12), 0);
+static SUNXI_CCU_GATE(bus_de_fe_clk,	"bus-de-fe",	"ahb1",
+		      0x064, BIT(14), 0);
+static SUNXI_CCU_GATE(bus_gpu_clk,	"bus-gpu",	"ahb1",
+		      0x064, BIT(20), 0);
+static SUNXI_CCU_GATE(bus_msgbox_clk,	"bus-msgbox",	"ahb1",
+		      0x064, BIT(21), 0);
+static SUNXI_CCU_GATE(bus_spinlock_clk,	"bus-spinlock",	"ahb1",
+		      0x064, BIT(22), 0);
+static SUNXI_CCU_GATE(bus_drc_clk,	"bus-drc",	"ahb1",
+		      0x064, BIT(25), 0);
+static SUNXI_CCU_GATE(bus_sat_clk,	"bus-sat",	"ahb1",
+		      0x064, BIT(26), 0);
+
+static SUNXI_CCU_GATE(bus_codec_clk,	"bus-codec",	"apb1",
+		      0x068, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_pio_clk,	"bus-pio",	"apb1",
+		      0x068, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_i2s0_clk,	"bus-i2s0",	"apb1",
+		      0x068, BIT(12), 0);
+static SUNXI_CCU_GATE(bus_i2s1_clk,	"bus-i2s1",	"apb1",
+		      0x068, BIT(13), 0);
+
+static SUNXI_CCU_GATE(bus_i2c0_clk,	"bus-i2c0",	"apb2",
+		      0x06c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_i2c1_clk,	"bus-i2c1",	"apb2",
+		      0x06c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_i2c2_clk,	"bus-i2c2",	"apb2",
+		      0x06c, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_uart0_clk,	"bus-uart0",	"apb2",
+		      0x06c, BIT(16), 0);
+static SUNXI_CCU_GATE(bus_uart1_clk,	"bus-uart1",	"apb2",
+		      0x06c, BIT(17), 0);
+static SUNXI_CCU_GATE(bus_uart2_clk,	"bus-uart2",	"apb2",
+		      0x06c, BIT(18), 0);
+static SUNXI_CCU_GATE(bus_uart3_clk,	"bus-uart3",	"apb2",
+		      0x06c, BIT(19), 0);
+static SUNXI_CCU_GATE(bus_uart4_clk,	"bus-uart4",	"apb2",
+		      0x06c, BIT(20), 0);
+
+static const char * const mod0_default_parents[] = { "osc24M", "pll-periph" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand_clk, "nand", mod0_default_parents, 0x080,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents, 0x088,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc0_sample_clk, "mmc0_sample", "mmc0",
+		       0x088, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc0_output_clk, "mmc0_output", "mmc0",
+		       0x088, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents, 0x08c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc1_sample_clk, "mmc1_sample", "mmc1",
+		       0x08c, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc1_output_clk, "mmc1_output", "mmc1",
+		       0x08c, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents, 0x090,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc2_sample_clk, "mmc2_sample", "mmc2",
+		       0x090, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc2_output_clk, "mmc2_output", "mmc2",
+		       0x090, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(ss_clk, "ss", mod0_default_parents, 0x09c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents, 0x0a0,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents, 0x0a4,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static const char * const i2s_parents[] = { "pll-audio-8x", "pll-audio-4x",
+					    "pll-audio-2x", "pll-audio" };
+static SUNXI_CCU_MUX_WITH_GATE(i2s0_clk, "i2s0", i2s_parents,
+			       0x0b0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_MUX_WITH_GATE(i2s1_clk, "i2s1", i2s_parents,
+			       0x0b4, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+/* TODO: the parent for most of the USB clocks is not known */
+static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"osc24M",
+		      0x0cc, BIT(8), 0);
+static SUNXI_CCU_GATE(usb_phy1_clk,	"usb-phy1",	"osc24M",
+		      0x0cc, BIT(9), 0);
+static SUNXI_CCU_GATE(usb_hsic_clk,	"usb-hsic",	"pll-hsic",
+		      0x0cc, BIT(10), 0);
+static SUNXI_CCU_GATE(usb_hsic_12M_clk,	"usb-hsic-12M",	"osc24M",
+		      0x0cc, BIT(11), 0);
+static SUNXI_CCU_GATE(usb_ohci_clk,	"usb-ohci",	"osc24M",
+		      0x0cc, BIT(16), 0);
+
+static SUNXI_CCU_M(dram_clk, "dram", "pll-ddr",
+		   0x0f4, 0, 4, CLK_IS_CRITICAL);
+
+static const char * const pll_ddr_parents[] = { "pll-ddr0", "pll-ddr1" };
+static SUNXI_CCU_MUX(pll_ddr_clk, "pll-ddr", pll_ddr_parents,
+		     0x0f8, 16, 1, 0);
+
+static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"dram",
+		      0x100, BIT(0), 0);
+static SUNXI_CCU_GATE(dram_csi_clk,	"dram-csi",	"dram",
+		      0x100, BIT(1), 0);
+static SUNXI_CCU_GATE(dram_drc_clk,	"dram-drc",	"dram",
+		      0x100, BIT(16), 0);
+static SUNXI_CCU_GATE(dram_de_fe_clk,	"dram-de-fe",	"dram",
+		      0x100, BIT(24), 0);
+static SUNXI_CCU_GATE(dram_de_be_clk,	"dram-de-be",	"dram",
+		      0x100, BIT(26), 0);
+
+static const char * const de_parents[] = { "pll-video", "pll-periph-2x",
+					   "pll-gpu", "pll-de" };
+static const u8 de_table[] = { 0, 2, 3, 5 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(de_be_clk, "de-be",
+				       de_parents, de_table,
+				       0x104, 0, 4, 24, 3, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(de_fe_clk, "de-fe",
+				       de_parents, de_table,
+				       0x10c, 0, 4, 24, 3, BIT(31), 0);
+
+static const char * const lcd_ch0_parents[] = { "pll-video", "pll-video-2x",
+						"pll-mipi" };
+static const u8 lcd_ch0_table[] = { 0, 2, 4 };
+static SUNXI_CCU_MUX_TABLE_WITH_GATE(lcd_ch0_clk, "lcd-ch0",
+				     lcd_ch0_parents, lcd_ch0_table,
+				     0x118, 24, 3, BIT(31),
+				     CLK_SET_RATE_PARENT);
+
+static const char * const lcd_ch1_parents[] = { "pll-video", "pll-video-2x" };
+static const u8 lcd_ch1_table[] = { 0, 2 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(lcd_ch1_clk, "lcd-ch1",
+				       lcd_ch1_parents, lcd_ch1_table,
+				       0x12c, 0, 4, 24, 2, BIT(31), 0);
+
+static const char * const csi_sclk_parents[] = { "pll-video", "pll-de",
+						 "pll-mipi", "pll-ve" };
+static const u8 csi_sclk_table[] = { 0, 3, 4, 5 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi_sclk_clk, "csi-sclk",
+				       csi_sclk_parents, csi_sclk_table,
+				       0x134, 16, 4, 24, 3, BIT(31), 0);
+
+static const char * const csi_mclk_parents[] = { "pll-video", "pll-de",
+						 "osc24M" };
+static const u8 csi_mclk_table[] = { 0, 3, 5 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi_mclk_clk, "csi-mclk",
+				       csi_mclk_parents, csi_mclk_table,
+				       0x134, 0, 5, 8, 3, BIT(15), 0);
+
+static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve",
+			     0x13c, 16, 3, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(ac_dig_clk,	"ac-dig",	"pll-audio",
+		      0x140, BIT(31), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_GATE(ac_dig_4x_clk,	"ac-dig-4x",	"pll-audio-4x",
+		      0x140, BIT(30), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_GATE(avs_clk,		"avs",		"osc24M",
+		      0x144, BIT(31), 0);
+
+static const char * const mbus_parents[] = { "osc24M", "pll-periph-2x",
+					     "pll-ddr0", "pll-ddr1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents,
+				 0x15c, 0, 3, 24, 2, BIT(31), CLK_IS_CRITICAL);
+
+static const char * const dsi_sclk_parents[] = { "pll-video", "pll-video-2x" };
+static const u8 dsi_sclk_table[] = { 0, 2 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(dsi_sclk_clk, "dsi-sclk",
+				       dsi_sclk_parents, dsi_sclk_table,
+				       0x168, 16, 4, 24, 2, BIT(31), 0);
+
+static const char * const dsi_dphy_parents[] = { "pll-video", "pll-periph" };
+static const u8 dsi_dphy_table[] = { 0, 2 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(dsi_dphy_clk, "dsi-dphy",
+				       dsi_dphy_parents, dsi_dphy_table,
+				       0x168, 0, 4, 8, 2, BIT(15), 0);
+
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(drc_clk, "drc",
+				       de_parents, de_table,
+				       0x180, 0, 4, 24, 3, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_GATE(gpu_clk, "gpu", "pll-gpu",
+			     0x1a0, 0, 3, BIT(31), CLK_SET_RATE_PARENT);
+
+static const char * const ats_parents[] = { "osc24M", "pll-periph" };
+static SUNXI_CCU_M_WITH_MUX_GATE(ats_clk, "ats", ats_parents,
+				 0x1b0, 0, 3, 24, 2, BIT(31), 0);
+
+static struct ccu_common *sun8i_a33_ccu_clks[] = {
+	&pll_cpux_clk.common,
+	&pll_audio_base_clk.common,
+	&pll_video_clk.common,
+	&pll_ve_clk.common,
+	&pll_ddr0_clk.common,
+	&pll_periph_clk.common,
+	&pll_gpu_clk.common,
+	&pll_mipi_clk.common,
+	&pll_hsic_clk.common,
+	&pll_de_clk.common,
+	&pll_ddr1_clk.common,
+	&pll_ddr_clk.common,
+	&cpux_clk.common,
+	&axi_clk.common,
+	&ahb1_clk.common,
+	&apb1_clk.common,
+	&apb2_clk.common,
+	&bus_mipi_dsi_clk.common,
+	&bus_ss_clk.common,
+	&bus_dma_clk.common,
+	&bus_mmc0_clk.common,
+	&bus_mmc1_clk.common,
+	&bus_mmc2_clk.common,
+	&bus_nand_clk.common,
+	&bus_dram_clk.common,
+	&bus_hstimer_clk.common,
+	&bus_spi0_clk.common,
+	&bus_spi1_clk.common,
+	&bus_otg_clk.common,
+	&bus_ehci_clk.common,
+	&bus_ohci_clk.common,
+	&bus_ve_clk.common,
+	&bus_lcd_clk.common,
+	&bus_csi_clk.common,
+	&bus_de_fe_clk.common,
+	&bus_de_be_clk.common,
+	&bus_gpu_clk.common,
+	&bus_msgbox_clk.common,
+	&bus_spinlock_clk.common,
+	&bus_drc_clk.common,
+	&bus_sat_clk.common,
+	&bus_codec_clk.common,
+	&bus_pio_clk.common,
+	&bus_i2s0_clk.common,
+	&bus_i2s1_clk.common,
+	&bus_i2c0_clk.common,
+	&bus_i2c1_clk.common,
+	&bus_i2c2_clk.common,
+	&bus_uart0_clk.common,
+	&bus_uart1_clk.common,
+	&bus_uart2_clk.common,
+	&bus_uart3_clk.common,
+	&bus_uart4_clk.common,
+	&nand_clk.common,
+	&mmc0_clk.common,
+	&mmc0_sample_clk.common,
+	&mmc0_output_clk.common,
+	&mmc1_clk.common,
+	&mmc1_sample_clk.common,
+	&mmc1_output_clk.common,
+	&mmc2_clk.common,
+	&mmc2_sample_clk.common,
+	&mmc2_output_clk.common,
+	&ss_clk.common,
+	&spi0_clk.common,
+	&spi1_clk.common,
+	&i2s0_clk.common,
+	&i2s1_clk.common,
+	&usb_phy0_clk.common,
+	&usb_phy1_clk.common,
+	&usb_hsic_clk.common,
+	&usb_hsic_12M_clk.common,
+	&usb_ohci_clk.common,
+	&dram_clk.common,
+	&dram_ve_clk.common,
+	&dram_csi_clk.common,
+	&dram_drc_clk.common,
+	&dram_de_fe_clk.common,
+	&dram_de_be_clk.common,
+	&de_be_clk.common,
+	&de_fe_clk.common,
+	&lcd_ch0_clk.common,
+	&lcd_ch1_clk.common,
+	&csi_sclk_clk.common,
+	&csi_mclk_clk.common,
+	&ve_clk.common,
+	&ac_dig_clk.common,
+	&ac_dig_4x_clk.common,
+	&avs_clk.common,
+	&mbus_clk.common,
+	&dsi_sclk_clk.common,
+	&dsi_dphy_clk.common,
+	&drc_clk.common,
+	&gpu_clk.common,
+	&ats_clk.common,
+};
+
+static const struct clk_hw *clk_parent_pll_audio[] = {
+	&pll_audio_base_clk.common.hw
+};
+
+/* We hardcode the divider to 1 for now */
+static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
+			    clk_parent_pll_audio,
+			    1, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
+			    clk_parent_pll_audio,
+			    2, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
+			    clk_parent_pll_audio,
+			    1, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
+			    clk_parent_pll_audio,
+			    1, 2, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HW(pll_periph_2x_clk, "pll-periph-2x",
+			   &pll_periph_clk.common.hw,
+			   1, 2, 0);
+static CLK_FIXED_FACTOR_HW(pll_video_2x_clk, "pll-video-2x",
+			   &pll_video_clk.common.hw,
+			   1, 2, 0);
+
+static struct clk_hw_onecell_data sun8i_a33_hw_clks = {
+	.hws	= {
+		[CLK_PLL_CPUX]		= &pll_cpux_clk.common.hw,
+		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
+		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
+		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
+		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
+		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
+		[CLK_PLL_VIDEO]		= &pll_video_clk.common.hw,
+		[CLK_PLL_VIDEO_2X]	= &pll_video_2x_clk.hw,
+		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
+		[CLK_PLL_DDR0]		= &pll_ddr0_clk.common.hw,
+		[CLK_PLL_PERIPH]	= &pll_periph_clk.common.hw,
+		[CLK_PLL_PERIPH_2X]	= &pll_periph_2x_clk.hw,
+		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
+		[CLK_PLL_MIPI]		= &pll_mipi_clk.common.hw,
+		[CLK_PLL_HSIC]		= &pll_hsic_clk.common.hw,
+		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
+		[CLK_PLL_DDR1]		= &pll_ddr1_clk.common.hw,
+		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
+		[CLK_CPUX]		= &cpux_clk.common.hw,
+		[CLK_AXI]		= &axi_clk.common.hw,
+		[CLK_AHB1]		= &ahb1_clk.common.hw,
+		[CLK_APB1]		= &apb1_clk.common.hw,
+		[CLK_APB2]		= &apb2_clk.common.hw,
+		[CLK_BUS_MIPI_DSI]	= &bus_mipi_dsi_clk.common.hw,
+		[CLK_BUS_SS]		= &bus_ss_clk.common.hw,
+		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
+		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
+		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
+		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
+		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
+		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
+		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
+		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
+		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
+		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
+		[CLK_BUS_EHCI]		= &bus_ehci_clk.common.hw,
+		[CLK_BUS_OHCI]		= &bus_ohci_clk.common.hw,
+		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
+		[CLK_BUS_LCD]		= &bus_lcd_clk.common.hw,
+		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
+		[CLK_BUS_DE_BE]		= &bus_de_be_clk.common.hw,
+		[CLK_BUS_DE_FE]		= &bus_de_fe_clk.common.hw,
+		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
+		[CLK_BUS_MSGBOX]	= &bus_msgbox_clk.common.hw,
+		[CLK_BUS_SPINLOCK]	= &bus_spinlock_clk.common.hw,
+		[CLK_BUS_DRC]		= &bus_drc_clk.common.hw,
+		[CLK_BUS_SAT]		= &bus_sat_clk.common.hw,
+		[CLK_BUS_CODEC]		= &bus_codec_clk.common.hw,
+		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
+		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
+		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
+		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
+		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
+		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
+		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
+		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
+		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
+		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
+		[CLK_BUS_UART4]		= &bus_uart4_clk.common.hw,
+		[CLK_NAND]		= &nand_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
+		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
+		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
+		[CLK_MMC2]		= &mmc2_clk.common.hw,
+		[CLK_MMC2_SAMPLE]	= &mmc2_sample_clk.common.hw,
+		[CLK_MMC2_OUTPUT]	= &mmc2_output_clk.common.hw,
+		[CLK_SS]		= &ss_clk.common.hw,
+		[CLK_SPI0]		= &spi0_clk.common.hw,
+		[CLK_SPI1]		= &spi1_clk.common.hw,
+		[CLK_I2S0]		= &i2s0_clk.common.hw,
+		[CLK_I2S1]		= &i2s1_clk.common.hw,
+		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
+		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
+		[CLK_USB_HSIC]		= &usb_hsic_clk.common.hw,
+		[CLK_USB_HSIC_12M]	= &usb_hsic_12M_clk.common.hw,
+		[CLK_USB_OHCI]		= &usb_ohci_clk.common.hw,
+		[CLK_DRAM]		= &dram_clk.common.hw,
+		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
+		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
+		[CLK_DRAM_DRC]		= &dram_drc_clk.common.hw,
+		[CLK_DRAM_DE_FE]	= &dram_de_fe_clk.common.hw,
+		[CLK_DRAM_DE_BE]	= &dram_de_be_clk.common.hw,
+		[CLK_DE_BE]		= &de_be_clk.common.hw,
+		[CLK_DE_FE]		= &de_fe_clk.common.hw,
+		[CLK_LCD_CH0]		= &lcd_ch0_clk.common.hw,
+		[CLK_LCD_CH1]		= &lcd_ch1_clk.common.hw,
+		[CLK_CSI_SCLK]		= &csi_sclk_clk.common.hw,
+		[CLK_CSI_MCLK]		= &csi_mclk_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_AC_DIG]		= &ac_dig_clk.common.hw,
+		[CLK_AC_DIG_4X]		= &ac_dig_4x_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+		[CLK_MBUS]		= &mbus_clk.common.hw,
+		[CLK_DSI_SCLK]		= &dsi_sclk_clk.common.hw,
+		[CLK_DSI_DPHY]		= &dsi_dphy_clk.common.hw,
+		[CLK_DRC]		= &drc_clk.common.hw,
+		[CLK_GPU]		= &gpu_clk.common.hw,
+		[CLK_ATS]		= &ats_clk.common.hw,
+	},
+	.num	= CLK_NUMBER,
+};
+
+static struct ccu_reset_map sun8i_a33_ccu_resets[] = {
+	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
+	[RST_USB_PHY1]		=  { 0x0cc, BIT(1) },
+	[RST_USB_HSIC]		=  { 0x0cc, BIT(2) },
+
+	[RST_MBUS]		=  { 0x0fc, BIT(31) },
+
+	[RST_BUS_MIPI_DSI]	=  { 0x2c0, BIT(1) },
+	[RST_BUS_SS]		=  { 0x2c0, BIT(5) },
+	[RST_BUS_DMA]		=  { 0x2c0, BIT(6) },
+	[RST_BUS_MMC0]		=  { 0x2c0, BIT(8) },
+	[RST_BUS_MMC1]		=  { 0x2c0, BIT(9) },
+	[RST_BUS_MMC2]		=  { 0x2c0, BIT(10) },
+	[RST_BUS_NAND]		=  { 0x2c0, BIT(13) },
+	[RST_BUS_DRAM]		=  { 0x2c0, BIT(14) },
+	[RST_BUS_HSTIMER]	=  { 0x2c0, BIT(19) },
+	[RST_BUS_SPI0]		=  { 0x2c0, BIT(20) },
+	[RST_BUS_SPI1]		=  { 0x2c0, BIT(21) },
+	[RST_BUS_OTG]		=  { 0x2c0, BIT(24) },
+	[RST_BUS_EHCI]		=  { 0x2c0, BIT(26) },
+	[RST_BUS_OHCI]		=  { 0x2c0, BIT(29) },
+
+	[RST_BUS_VE]		=  { 0x2c4, BIT(0) },
+	[RST_BUS_LCD]		=  { 0x2c4, BIT(4) },
+	[RST_BUS_CSI]		=  { 0x2c4, BIT(8) },
+	[RST_BUS_DE_BE]		=  { 0x2c4, BIT(12) },
+	[RST_BUS_DE_FE]		=  { 0x2c4, BIT(14) },
+	[RST_BUS_GPU]		=  { 0x2c4, BIT(20) },
+	[RST_BUS_MSGBOX]	=  { 0x2c4, BIT(21) },
+	[RST_BUS_SPINLOCK]	=  { 0x2c4, BIT(22) },
+	[RST_BUS_DRC]		=  { 0x2c4, BIT(25) },
+	[RST_BUS_SAT]		=  { 0x2c4, BIT(26) },
+
+	[RST_BUS_LVDS]		=  { 0x2c8, BIT(0) },
+
+	[RST_BUS_CODEC]		=  { 0x2d0, BIT(0) },
+	[RST_BUS_I2S0]		=  { 0x2d0, BIT(12) },
+	[RST_BUS_I2S1]		=  { 0x2d0, BIT(13) },
+
+	[RST_BUS_I2C0]		=  { 0x2d8, BIT(0) },
+	[RST_BUS_I2C1]		=  { 0x2d8, BIT(1) },
+	[RST_BUS_I2C2]		=  { 0x2d8, BIT(2) },
+	[RST_BUS_UART0]		=  { 0x2d8, BIT(16) },
+	[RST_BUS_UART1]		=  { 0x2d8, BIT(17) },
+	[RST_BUS_UART2]		=  { 0x2d8, BIT(18) },
+	[RST_BUS_UART3]		=  { 0x2d8, BIT(19) },
+	[RST_BUS_UART4]		=  { 0x2d8, BIT(20) },
+};
+
+static const struct sunxi_ccu_desc sun8i_a33_ccu_desc = {
+	.ccu_clks	= sun8i_a33_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun8i_a33_ccu_clks),
+
+	.hw_clks	= &sun8i_a33_hw_clks,
+
+	.resets		= sun8i_a33_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun8i_a33_ccu_resets),
+};
+
+static struct ccu_pll_nb sun8i_a33_pll_cpu_nb = {
+	.common	= &pll_cpux_clk.common,
+	/* copy from pll_cpux_clk */
+	.enable	= BIT(31),
+	.lock	= BIT(28),
+};
+
+static struct ccu_mux_nb sun8i_a33_cpu_nb = {
+	.common		= &cpux_clk.common,
+	.cm		= &cpux_clk.mux,
+	.delay_us	= 1, /* > 8 clock cycles at 24 MHz */
+	.bypass_index	= 1, /* index of 24 MHz oscillator */
+};
+
+static void __init sun8i_a33_ccu_setup(struct device_node *node)
+{
+	void __iomem *reg;
+	u32 val;
+
+	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
+	if (IS_ERR(reg)) {
+		pr_err("%pOF: Could not map the clock registers\n", node);
+		return;
+	}
+
+	/* Force the PLL-Audio-1x divider to 1 */
+	val = readl(reg + SUN8I_A33_PLL_AUDIO_REG);
+	val &= ~GENMASK(19, 16);
+	writel(val | (0 << 16), reg + SUN8I_A33_PLL_AUDIO_REG);
+
+	/* Force PLL-MIPI to MIPI mode */
+	val = readl(reg + SUN8I_A33_PLL_MIPI_REG);
+	val &= ~BIT(16);
+	writel(val, reg + SUN8I_A33_PLL_MIPI_REG);
+
+	of_sunxi_ccu_probe(node, reg, &sun8i_a33_ccu_desc);
+
+	/* Gate then ungate PLL CPU after any rate changes */
+	ccu_pll_notifier_register(&sun8i_a33_pll_cpu_nb);
+
+	/* Reparent CPU during PLL CPU rate changes */
+	ccu_mux_notifier_register(pll_cpux_clk.common.hw.clk,
+				  &sun8i_a33_cpu_nb);
+}
+CLK_OF_DECLARE(sun8i_a33_ccu, "allwinner,sun8i-a33-ccu",
+	       sun8i_a33_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/sun8i-a83t-ccu.c b/drivers/clk/sunxi-ng/sun8i-a83t-ccu.c
new file mode 100644
index 000000000000..067eb9bb4b53
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun8i-a83t-ccu.c
@@ -0,0 +1,925 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (c) 2017 Chen-Yu Tsai. All rights reserved.
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/io.h>
+#include <linux/of_address.h>
+#include <linux/platform_device.h>
+
+#include "ccu_common.h"
+#include "ccu_reset.h"
+
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_mp.h"
+#include "ccu_mux.h"
+#include "ccu_nkmp.h"
+#include "ccu_nm.h"
+#include "ccu_phase.h"
+
+#include "sun8i-a83t-ccu.h"
+
+#define CCU_SUN8I_A83T_LOCK_REG	0x20c
+
+/*
+ * The CPU PLLs are actually NP clocks, with P being /1 or /4. However
+ * P should only be used for output frequencies lower than 228 MHz.
+ * Neither mainline Linux, U-boot, nor the vendor BSPs use these.
+ *
+ * For now we can just model it as a multiplier clock, and force P to /1.
+ */
+#define SUN8I_A83T_PLL_C0CPUX_REG	0x000
+#define SUN8I_A83T_PLL_C1CPUX_REG	0x004
+
+static struct ccu_mult pll_c0cpux_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(0),
+	.mult		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.common		= {
+		.reg		= SUN8I_A83T_PLL_C0CPUX_REG,
+		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-c0cpux", "osc24M",
+					      &ccu_mult_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static struct ccu_mult pll_c1cpux_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(1),
+	.mult		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.common		= {
+		.reg		= SUN8I_A83T_PLL_C1CPUX_REG,
+		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-c1cpux", "osc24M",
+					      &ccu_mult_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+/*
+ * The Audio PLL has d1, d2 dividers in addition to the usual N, M
+ * factors. Since we only need 2 frequencies from this PLL: 22.5792 MHz
+ * and 24.576 MHz, ignore them for now. Enforce the default for them,
+ * which is d1 = 0, d2 = 1.
+ */
+#define SUN8I_A83T_PLL_AUDIO_REG	0x008
+
+/* clock rates doubled for post divider */
+static struct ccu_sdm_setting pll_audio_sdm_table[] = {
+	{ .rate = 45158400, .pattern = 0xc00121ff, .m = 29, .n = 54 },
+	{ .rate = 49152000, .pattern = 0xc000e147, .m = 30, .n = 61 },
+};
+
+static struct ccu_nm pll_audio_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(2),
+	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.m		= _SUNXI_CCU_DIV(0, 6),
+	.fixed_post_div	= 2,
+	.sdm		= _SUNXI_CCU_SDM(pll_audio_sdm_table, BIT(24),
+					 0x284, BIT(31)),
+	.common		= {
+		.reg		= SUN8I_A83T_PLL_AUDIO_REG,
+		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG |
+				  CCU_FEATURE_FIXED_POSTDIV |
+				  CCU_FEATURE_SIGMA_DELTA_MOD,
+		.hw.init	= CLK_HW_INIT("pll-audio", "osc24M",
+					      &ccu_nm_ops, CLK_SET_RATE_UNGATE),
+	},
+};
+
+/* Some PLLs are input * N / div1 / P. Model them as NKMP with no K */
+static struct ccu_nkmp pll_video0_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(3),
+	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 2), /* output divider */
+	.max_rate	= 3000000000UL,
+	.common		= {
+		.reg		= 0x010,
+		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-video0", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static struct ccu_nkmp pll_ve_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(4),
+	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
+	.common		= {
+		.reg		= 0x018,
+		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-ve", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static struct ccu_nkmp pll_ddr_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(5),
+	.n		= _SUNXI_CCU_MULT_MIN(8, 8, 12),
+	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
+	.common		= {
+		.reg		= 0x020,
+		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-ddr", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static struct ccu_nkmp pll_periph_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(6),
+	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
+	.common		= {
+		.reg		= 0x028,
+		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-periph", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static struct ccu_nkmp pll_gpu_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(7),
+	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
+	.common		= {
+		.reg		= 0x038,
+		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-gpu", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static struct ccu_nkmp pll_hsic_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(8),
+	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
+	.common		= {
+		.reg		= 0x044,
+		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-hsic", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static struct ccu_nkmp pll_de_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(9),
+	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
+	.common		= {
+		.reg		= 0x048,
+		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-de", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static struct ccu_nkmp pll_video1_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(10),
+	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 2), /* external divider p */
+	.max_rate	= 3000000000UL,
+	.common		= {
+		.reg		= 0x04c,
+		.lock_reg	= CCU_SUN8I_A83T_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-video1", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static const char * const c0cpux_parents[] = { "osc24M", "pll-c0cpux" };
+static SUNXI_CCU_MUX(c0cpux_clk, "c0cpux", c0cpux_parents,
+		     0x50, 12, 1, CLK_SET_RATE_PARENT | CLK_IS_CRITICAL);
+
+static const char * const c1cpux_parents[] = { "osc24M", "pll-c1cpux" };
+static SUNXI_CCU_MUX(c1cpux_clk, "c1cpux", c1cpux_parents,
+		     0x50, 28, 1, CLK_SET_RATE_PARENT | CLK_IS_CRITICAL);
+
+static SUNXI_CCU_M(axi0_clk, "axi0", "c0cpux", 0x050, 0, 2, 0);
+static SUNXI_CCU_M(axi1_clk, "axi1", "c1cpux", 0x050, 16, 2, 0);
+
+static const char * const ahb1_parents[] = { "osc16M-d512", "osc24M",
+					     "pll-periph",
+					     "pll-periph" };
+static const struct ccu_mux_var_prediv ahb1_predivs[] = {
+	{ .index = 2, .shift = 6, .width = 2 },
+	{ .index = 3, .shift = 6, .width = 2 },
+};
+static struct ccu_div ahb1_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= {
+		.shift	= 12,
+		.width	= 2,
+
+		.var_predivs	= ahb1_predivs,
+		.n_var_predivs	= ARRAY_SIZE(ahb1_predivs),
+	},
+	.common		= {
+		.reg		= 0x054,
+		.hw.init	= CLK_HW_INIT_PARENTS("ahb1",
+						      ahb1_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static SUNXI_CCU_M(apb1_clk, "apb1", "ahb1", 0x054, 8, 2, 0);
+
+static const char * const apb2_parents[] = { "osc16M-d512", "osc24M",
+					     "pll-periph", "pll-periph" };
+
+static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", apb2_parents, 0x058,
+			     0, 5,	/* M */
+			     16, 2,	/* P */
+			     24, 2,	/* mux */
+			     0);
+
+static const char * const ahb2_parents[] = { "ahb1", "pll-periph" };
+static const struct ccu_mux_fixed_prediv ahb2_prediv = {
+	.index = 1, .div = 2
+};
+static struct ccu_mux ahb2_clk = {
+	.mux		= {
+		.shift		= 0,
+		.width		= 2,
+		.fixed_predivs	= &ahb2_prediv,
+		.n_predivs	= 1,
+	},
+	.common		= {
+		.reg		= 0x05c,
+		.hw.init	= CLK_HW_INIT_PARENTS("ahb2",
+						      ahb2_parents,
+						      &ccu_mux_ops,
+						      0),
+	},
+};
+
+static SUNXI_CCU_GATE(bus_mipi_dsi_clk,	"bus-mipi-dsi",	"ahb1",
+		      0x060, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_ss_clk,	"bus-ss",	"ahb1",
+		      0x060, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_dma_clk,	"bus-dma",	"ahb1",
+		      0x060, BIT(6), 0);
+static SUNXI_CCU_GATE(bus_mmc0_clk,	"bus-mmc0",	"ahb1",
+		      0x060, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_mmc1_clk,	"bus-mmc1",	"ahb1",
+		      0x060, BIT(9), 0);
+static SUNXI_CCU_GATE(bus_mmc2_clk,	"bus-mmc2",	"ahb1",
+		      0x060, BIT(10), 0);
+static SUNXI_CCU_GATE(bus_nand_clk,	"bus-nand",	"ahb1",
+		      0x060, BIT(13), 0);
+static SUNXI_CCU_GATE(bus_dram_clk,	"bus-dram",	"ahb1",
+		      0x060, BIT(14), 0);
+static SUNXI_CCU_GATE(bus_emac_clk,	"bus-emac",	"ahb2",
+		      0x060, BIT(17), 0);
+static SUNXI_CCU_GATE(bus_hstimer_clk,	"bus-hstimer",	"ahb1",
+		      0x060, BIT(19), 0);
+static SUNXI_CCU_GATE(bus_spi0_clk,	"bus-spi0",	"ahb1",
+		      0x060, BIT(20), 0);
+static SUNXI_CCU_GATE(bus_spi1_clk,	"bus-spi1",	"ahb1",
+		      0x060, BIT(21), 0);
+static SUNXI_CCU_GATE(bus_otg_clk,	"bus-otg",	"ahb1",
+		      0x060, BIT(24), 0);
+static SUNXI_CCU_GATE(bus_ehci0_clk,	"bus-ehci0",	"ahb2",
+		      0x060, BIT(26), 0);
+static SUNXI_CCU_GATE(bus_ehci1_clk,	"bus-ehci1",	"ahb2",
+		      0x060, BIT(27), 0);
+static SUNXI_CCU_GATE(bus_ohci0_clk,	"bus-ohci0",	"ahb2",
+		      0x060, BIT(29), 0);
+
+static SUNXI_CCU_GATE(bus_ve_clk,	"bus-ve",	"ahb1",
+		      0x064, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_tcon0_clk,	"bus-tcon0",	"ahb1",
+		      0x064, BIT(4), 0);
+static SUNXI_CCU_GATE(bus_tcon1_clk,	"bus-tcon1",	"ahb1",
+		      0x064, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_csi_clk,	"bus-csi",	"ahb1",
+		      0x064, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_hdmi_clk,	"bus-hdmi",	"ahb1",
+		      0x064, BIT(11), 0);
+static SUNXI_CCU_GATE(bus_de_clk,	"bus-de",	"ahb1",
+		      0x064, BIT(12), 0);
+static SUNXI_CCU_GATE(bus_gpu_clk,	"bus-gpu",	"ahb1",
+		      0x064, BIT(20), 0);
+static SUNXI_CCU_GATE(bus_msgbox_clk,	"bus-msgbox",	"ahb1",
+		      0x064, BIT(21), 0);
+static SUNXI_CCU_GATE(bus_spinlock_clk,	"bus-spinlock",	"ahb1",
+		      0x064, BIT(22), 0);
+
+static SUNXI_CCU_GATE(bus_spdif_clk,	"bus-spdif",	"apb1",
+		      0x068, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_pio_clk,	"bus-pio",	"apb1",
+		      0x068, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_i2s0_clk,	"bus-i2s0",	"apb1",
+		      0x068, BIT(12), 0);
+static SUNXI_CCU_GATE(bus_i2s1_clk,	"bus-i2s1",	"apb1",
+		      0x068, BIT(13), 0);
+static SUNXI_CCU_GATE(bus_i2s2_clk,	"bus-i2s2",	"apb1",
+		      0x068, BIT(14), 0);
+static SUNXI_CCU_GATE(bus_tdm_clk,	"bus-tdm",	"apb1",
+		      0x068, BIT(15), 0);
+
+static SUNXI_CCU_GATE(bus_i2c0_clk,	"bus-i2c0",	"apb2",
+		      0x06c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_i2c1_clk,	"bus-i2c1",	"apb2",
+		      0x06c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_i2c2_clk,	"bus-i2c2",	"apb2",
+		      0x06c, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_uart0_clk,	"bus-uart0",	"apb2",
+		      0x06c, BIT(16), 0);
+static SUNXI_CCU_GATE(bus_uart1_clk,	"bus-uart1",	"apb2",
+		      0x06c, BIT(17), 0);
+static SUNXI_CCU_GATE(bus_uart2_clk,	"bus-uart2",	"apb2",
+		      0x06c, BIT(18), 0);
+static SUNXI_CCU_GATE(bus_uart3_clk,	"bus-uart3",	"apb2",
+		      0x06c, BIT(19), 0);
+static SUNXI_CCU_GATE(bus_uart4_clk,	"bus-uart4",	"apb2",
+		      0x06c, BIT(20), 0);
+
+static const char * const cci400_parents[] = { "osc24M", "pll-periph",
+					       "pll-hsic" };
+static struct ccu_div cci400_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(0, 2, 0),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0x078,
+		.hw.init	= CLK_HW_INIT_PARENTS("cci400",
+						      cci400_parents,
+						      &ccu_div_ops,
+						      CLK_IS_CRITICAL),
+	},
+};
+
+static const char * const mod0_default_parents[] = { "osc24M", "pll-periph" };
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand_clk, "nand", mod0_default_parents,
+				  0x080,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents,
+				  0x088,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc0_sample_clk, "mmc0-sample", "mmc0",
+		       0x088, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc0_output_clk, "mmc0-output", "mmc0",
+		       0x088, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents,
+				  0x08c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc1_sample_clk, "mmc1-sample", "mmc1",
+		       0x08c, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc1_output_clk, "mmc1-output", "mmc1",
+		       0x08c, 8, 3, 0);
+
+static SUNXI_CCU_MP_MMC_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents,
+				      0x090, 0);
+
+static SUNXI_CCU_PHASE(mmc2_sample_clk, "mmc2-sample", "mmc2",
+		       0x090, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc2_output_clk, "mmc2-output", "mmc2",
+		       0x090, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(ss_clk, "ss", mod0_default_parents,
+				  0x09c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents,
+				  0x0a0,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 4,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents,
+				  0x0a4,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 4,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_M_WITH_GATE(i2s0_clk, "i2s0", "pll-audio",
+			     0x0b0, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M_WITH_GATE(i2s1_clk, "i2s1", "pll-audio",
+			     0x0b4, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M_WITH_GATE(i2s2_clk, "i2s2", "pll-audio",
+			     0x0b8, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M_WITH_GATE(tdm_clk, "tdm", "pll-audio",
+			     0x0bc, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M_WITH_GATE(spdif_clk, "spdif", "pll-audio",
+			     0x0c0, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"osc24M",
+		      0x0cc, BIT(8), 0);
+static SUNXI_CCU_GATE(usb_phy1_clk,	"usb-phy1",	"osc24M",
+		      0x0cc, BIT(9), 0);
+static SUNXI_CCU_GATE(usb_hsic_clk,	"usb-hsic",	"pll-hsic",
+		      0x0cc, BIT(10), 0);
+static struct ccu_gate usb_hsic_12m_clk = {
+	.enable	= BIT(11),
+	.common	= {
+		.reg		= 0x0cc,
+		.prediv		= 2,
+		.features	= CCU_FEATURE_ALL_PREDIV,
+		.hw.init	= CLK_HW_INIT("usb-hsic-12m", "osc24M",
+					      &ccu_gate_ops, 0),
+	}
+};
+static SUNXI_CCU_GATE(usb_ohci0_clk,	"usb-ohci0",	"osc24M",
+		      0x0cc, BIT(16), 0);
+
+/* TODO divider has minimum of 2 */
+static SUNXI_CCU_M(dram_clk, "dram", "pll-ddr", 0x0f4, 0, 4, CLK_IS_CRITICAL);
+
+static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"dram",
+		      0x100, BIT(0), 0);
+static SUNXI_CCU_GATE(dram_csi_clk,	"dram-csi",	"dram",
+		      0x100, BIT(1), 0);
+
+static const char * const tcon0_parents[] = { "pll-video0" };
+static SUNXI_CCU_MUX_WITH_GATE(tcon0_clk, "tcon0", tcon0_parents,
+				 0x118, 24, 3, BIT(31), CLK_SET_RATE_PARENT);
+
+static const char * const tcon1_parents[] = { "pll-video1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(tcon1_clk, "tcon1", tcon1_parents,
+				 0x11c, 0, 4, 24, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(csi_misc_clk, "csi-misc", "osc24M", 0x130, BIT(16), 0);
+
+static SUNXI_CCU_GATE(mipi_csi_clk, "mipi-csi", "osc24M", 0x130, BIT(31), 0);
+
+static const char * const csi_mclk_parents[] = { "pll-video0", "pll-de",
+						 "osc24M" };
+static const u8 csi_mclk_table[] = { 0, 3, 5 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi_mclk_clk, "csi-mclk",
+				       csi_mclk_parents, csi_mclk_table,
+				       0x134,
+				       0, 5,	/* M */
+				       8, 3,	/* mux */
+				       BIT(15),	/* gate */
+				       0);
+
+static const char * const csi_sclk_parents[] = { "pll-periph", "pll-ve" };
+static const u8 csi_sclk_table[] = { 0, 5 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi_sclk_clk, "csi-sclk",
+				       csi_sclk_parents, csi_sclk_table,
+				       0x134,
+				       16, 4,	/* M */
+				       24, 3,	/* mux */
+				       BIT(31),	/* gate */
+				       0);
+
+static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve", 0x13c,
+			     16, 3, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(avs_clk, "avs", "osc24M", 0x144, BIT(31), 0);
+
+static const char * const hdmi_parents[] = { "pll-video1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(hdmi_clk, "hdmi", hdmi_parents,
+				 0x150,
+				 0, 4,	/* M */
+				 24, 2,	/* mux */
+				 BIT(31),	/* gate */
+				 CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(hdmi_slow_clk, "hdmi-slow", "osc24M", 0x154, BIT(31), 0);
+
+static const char * const mbus_parents[] = { "osc24M", "pll-periph",
+					     "pll-ddr" };
+static SUNXI_CCU_M_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents,
+				 0x15c,
+				 0, 3,	/* M */
+				 24, 2,	/* mux */
+				 BIT(31),	/* gate */
+				 CLK_IS_CRITICAL);
+
+static const char * const mipi_dsi0_parents[] = { "pll-video0" };
+static const u8 mipi_dsi0_table[] = { 8 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(mipi_dsi0_clk, "mipi-dsi0",
+				       mipi_dsi0_parents, mipi_dsi0_table,
+				       0x168,
+				       0, 4,	/* M */
+				       24, 4,	/* mux */
+				       BIT(31),	/* gate */
+				       CLK_SET_RATE_PARENT);
+
+static const char * const mipi_dsi1_parents[] = { "osc24M", "pll-video0" };
+static const u8 mipi_dsi1_table[] = { 0, 9 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(mipi_dsi1_clk, "mipi-dsi1",
+				       mipi_dsi1_parents, mipi_dsi1_table,
+				       0x16c,
+				       0, 4,	/* M */
+				       24, 4,	/* mux */
+				       BIT(31),	/* gate */
+				       CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M_WITH_GATE(gpu_core_clk, "gpu-core", "pll-gpu", 0x1a0,
+			     0, 3, BIT(31), CLK_SET_RATE_PARENT);
+
+static const char * const gpu_memory_parents[] = { "pll-gpu", "pll-ddr" };
+static SUNXI_CCU_M_WITH_MUX_GATE(gpu_memory_clk, "gpu-memory",
+				 gpu_memory_parents,
+				 0x1a4,
+				 0, 3,		/* M */
+				 24, 1,		/* mux */
+				 BIT(31),	/* gate */
+				 CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M_WITH_GATE(gpu_hyd_clk, "gpu-hyd", "pll-gpu", 0x1a8,
+			     0, 3, BIT(31), CLK_SET_RATE_PARENT);
+
+static struct ccu_common *sun8i_a83t_ccu_clks[] = {
+	&pll_c0cpux_clk.common,
+	&pll_c1cpux_clk.common,
+	&pll_audio_clk.common,
+	&pll_video0_clk.common,
+	&pll_ve_clk.common,
+	&pll_ddr_clk.common,
+	&pll_periph_clk.common,
+	&pll_gpu_clk.common,
+	&pll_hsic_clk.common,
+	&pll_de_clk.common,
+	&pll_video1_clk.common,
+	&c0cpux_clk.common,
+	&c1cpux_clk.common,
+	&axi0_clk.common,
+	&axi1_clk.common,
+	&ahb1_clk.common,
+	&ahb2_clk.common,
+	&apb1_clk.common,
+	&apb2_clk.common,
+	&bus_mipi_dsi_clk.common,
+	&bus_ss_clk.common,
+	&bus_dma_clk.common,
+	&bus_mmc0_clk.common,
+	&bus_mmc1_clk.common,
+	&bus_mmc2_clk.common,
+	&bus_nand_clk.common,
+	&bus_dram_clk.common,
+	&bus_emac_clk.common,
+	&bus_hstimer_clk.common,
+	&bus_spi0_clk.common,
+	&bus_spi1_clk.common,
+	&bus_otg_clk.common,
+	&bus_ehci0_clk.common,
+	&bus_ehci1_clk.common,
+	&bus_ohci0_clk.common,
+	&bus_ve_clk.common,
+	&bus_tcon0_clk.common,
+	&bus_tcon1_clk.common,
+	&bus_csi_clk.common,
+	&bus_hdmi_clk.common,
+	&bus_de_clk.common,
+	&bus_gpu_clk.common,
+	&bus_msgbox_clk.common,
+	&bus_spinlock_clk.common,
+	&bus_spdif_clk.common,
+	&bus_pio_clk.common,
+	&bus_i2s0_clk.common,
+	&bus_i2s1_clk.common,
+	&bus_i2s2_clk.common,
+	&bus_tdm_clk.common,
+	&bus_i2c0_clk.common,
+	&bus_i2c1_clk.common,
+	&bus_i2c2_clk.common,
+	&bus_uart0_clk.common,
+	&bus_uart1_clk.common,
+	&bus_uart2_clk.common,
+	&bus_uart3_clk.common,
+	&bus_uart4_clk.common,
+	&cci400_clk.common,
+	&nand_clk.common,
+	&mmc0_clk.common,
+	&mmc0_sample_clk.common,
+	&mmc0_output_clk.common,
+	&mmc1_clk.common,
+	&mmc1_sample_clk.common,
+	&mmc1_output_clk.common,
+	&mmc2_clk.common,
+	&mmc2_sample_clk.common,
+	&mmc2_output_clk.common,
+	&ss_clk.common,
+	&spi0_clk.common,
+	&spi1_clk.common,
+	&i2s0_clk.common,
+	&i2s1_clk.common,
+	&i2s2_clk.common,
+	&tdm_clk.common,
+	&spdif_clk.common,
+	&usb_phy0_clk.common,
+	&usb_phy1_clk.common,
+	&usb_hsic_clk.common,
+	&usb_hsic_12m_clk.common,
+	&usb_ohci0_clk.common,
+	&dram_clk.common,
+	&dram_ve_clk.common,
+	&dram_csi_clk.common,
+	&tcon0_clk.common,
+	&tcon1_clk.common,
+	&csi_misc_clk.common,
+	&mipi_csi_clk.common,
+	&csi_mclk_clk.common,
+	&csi_sclk_clk.common,
+	&ve_clk.common,
+	&avs_clk.common,
+	&hdmi_clk.common,
+	&hdmi_slow_clk.common,
+	&mbus_clk.common,
+	&mipi_dsi0_clk.common,
+	&mipi_dsi1_clk.common,
+	&gpu_core_clk.common,
+	&gpu_memory_clk.common,
+	&gpu_hyd_clk.common,
+};
+
+static struct clk_hw_onecell_data sun8i_a83t_hw_clks = {
+	.hws	= {
+		[CLK_PLL_C0CPUX]	= &pll_c0cpux_clk.common.hw,
+		[CLK_PLL_C1CPUX]	= &pll_c1cpux_clk.common.hw,
+		[CLK_PLL_AUDIO]		= &pll_audio_clk.common.hw,
+		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
+		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
+		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
+		[CLK_PLL_PERIPH]	= &pll_periph_clk.common.hw,
+		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
+		[CLK_PLL_HSIC]		= &pll_hsic_clk.common.hw,
+		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
+		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
+		[CLK_C0CPUX]		= &c0cpux_clk.common.hw,
+		[CLK_C1CPUX]		= &c1cpux_clk.common.hw,
+		[CLK_AXI0]		= &axi0_clk.common.hw,
+		[CLK_AXI1]		= &axi1_clk.common.hw,
+		[CLK_AHB1]		= &ahb1_clk.common.hw,
+		[CLK_AHB2]		= &ahb2_clk.common.hw,
+		[CLK_APB1]		= &apb1_clk.common.hw,
+		[CLK_APB2]		= &apb2_clk.common.hw,
+		[CLK_BUS_MIPI_DSI]	= &bus_mipi_dsi_clk.common.hw,
+		[CLK_BUS_SS]		= &bus_ss_clk.common.hw,
+		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
+		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
+		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
+		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
+		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
+		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
+		[CLK_BUS_EMAC]		= &bus_emac_clk.common.hw,
+		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
+		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
+		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
+		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
+		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
+		[CLK_BUS_EHCI1]		= &bus_ehci1_clk.common.hw,
+		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
+		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
+		[CLK_BUS_TCON0]		= &bus_tcon0_clk.common.hw,
+		[CLK_BUS_TCON1]		= &bus_tcon1_clk.common.hw,
+		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
+		[CLK_BUS_HDMI]		= &bus_hdmi_clk.common.hw,
+		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
+		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
+		[CLK_BUS_MSGBOX]	= &bus_msgbox_clk.common.hw,
+		[CLK_BUS_SPINLOCK]	= &bus_spinlock_clk.common.hw,
+		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
+		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
+		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
+		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
+		[CLK_BUS_I2S2]		= &bus_i2s2_clk.common.hw,
+		[CLK_BUS_TDM]		= &bus_tdm_clk.common.hw,
+		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
+		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
+		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
+		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
+		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
+		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
+		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
+		[CLK_BUS_UART4]		= &bus_uart4_clk.common.hw,
+		[CLK_CCI400]		= &cci400_clk.common.hw,
+		[CLK_NAND]		= &nand_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
+		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
+		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
+		[CLK_MMC2]		= &mmc2_clk.common.hw,
+		[CLK_MMC2_SAMPLE]	= &mmc2_sample_clk.common.hw,
+		[CLK_MMC2_OUTPUT]	= &mmc2_output_clk.common.hw,
+		[CLK_SS]		= &ss_clk.common.hw,
+		[CLK_SPI0]		= &spi0_clk.common.hw,
+		[CLK_SPI1]		= &spi1_clk.common.hw,
+		[CLK_I2S0]		= &i2s0_clk.common.hw,
+		[CLK_I2S1]		= &i2s1_clk.common.hw,
+		[CLK_I2S2]		= &i2s2_clk.common.hw,
+		[CLK_TDM]		= &tdm_clk.common.hw,
+		[CLK_SPDIF]		= &spdif_clk.common.hw,
+		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
+		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
+		[CLK_USB_HSIC]		= &usb_hsic_clk.common.hw,
+		[CLK_USB_HSIC_12M]	= &usb_hsic_12m_clk.common.hw,
+		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
+		[CLK_DRAM]		= &dram_clk.common.hw,
+		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
+		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
+		[CLK_TCON0]		= &tcon0_clk.common.hw,
+		[CLK_TCON1]		= &tcon1_clk.common.hw,
+		[CLK_CSI_MISC]		= &csi_misc_clk.common.hw,
+		[CLK_MIPI_CSI]		= &mipi_csi_clk.common.hw,
+		[CLK_CSI_MCLK]		= &csi_mclk_clk.common.hw,
+		[CLK_CSI_SCLK]		= &csi_sclk_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+		[CLK_HDMI]		= &hdmi_clk.common.hw,
+		[CLK_HDMI_SLOW]		= &hdmi_slow_clk.common.hw,
+		[CLK_MBUS]		= &mbus_clk.common.hw,
+		[CLK_MIPI_DSI0]		= &mipi_dsi0_clk.common.hw,
+		[CLK_MIPI_DSI1]		= &mipi_dsi1_clk.common.hw,
+		[CLK_GPU_CORE]		= &gpu_core_clk.common.hw,
+		[CLK_GPU_MEMORY]	= &gpu_memory_clk.common.hw,
+		[CLK_GPU_HYD]		= &gpu_hyd_clk.common.hw,
+	},
+	.num	= CLK_NUMBER,
+};
+
+static struct ccu_reset_map sun8i_a83t_ccu_resets[] = {
+	[RST_USB_PHY0]		= { 0x0cc, BIT(0) },
+	[RST_USB_PHY1]		= { 0x0cc, BIT(1) },
+	[RST_USB_HSIC]		= { 0x0cc, BIT(2) },
+	[RST_DRAM]		= { 0x0f4, BIT(31) },
+	[RST_MBUS]		= { 0x0fc, BIT(31) },
+	[RST_BUS_MIPI_DSI]	= { 0x2c0, BIT(1) },
+	[RST_BUS_SS]		= { 0x2c0, BIT(5) },
+	[RST_BUS_DMA]		= { 0x2c0, BIT(6) },
+	[RST_BUS_MMC0]		= { 0x2c0, BIT(8) },
+	[RST_BUS_MMC1]		= { 0x2c0, BIT(9) },
+	[RST_BUS_MMC2]		= { 0x2c0, BIT(10) },
+	[RST_BUS_NAND]		= { 0x2c0, BIT(13) },
+	[RST_BUS_DRAM]		= { 0x2c0, BIT(14) },
+	[RST_BUS_EMAC]		= { 0x2c0, BIT(17) },
+	[RST_BUS_HSTIMER]	= { 0x2c0, BIT(19) },
+	[RST_BUS_SPI0]		= { 0x2c0, BIT(20) },
+	[RST_BUS_SPI1]		= { 0x2c0, BIT(21) },
+	[RST_BUS_OTG]		= { 0x2c0, BIT(24) },
+	[RST_BUS_EHCI0]		= { 0x2c0, BIT(26) },
+	[RST_BUS_EHCI1]		= { 0x2c0, BIT(27) },
+	[RST_BUS_OHCI0]		= { 0x2c0, BIT(29) },
+	[RST_BUS_VE]		= { 0x2c4, BIT(0) },
+	[RST_BUS_TCON0]		= { 0x2c4, BIT(4) },
+	[RST_BUS_TCON1]		= { 0x2c4, BIT(5) },
+	[RST_BUS_CSI]		= { 0x2c4, BIT(8) },
+	[RST_BUS_HDMI0]		= { 0x2c4, BIT(10) },
+	[RST_BUS_HDMI1]		= { 0x2c4, BIT(11) },
+	[RST_BUS_DE]		= { 0x2c4, BIT(12) },
+	[RST_BUS_GPU]		= { 0x2c4, BIT(20) },
+	[RST_BUS_MSGBOX]	= { 0x2c4, BIT(21) },
+	[RST_BUS_SPINLOCK]	= { 0x2c4, BIT(22) },
+	[RST_BUS_LVDS]		= { 0x2c8, BIT(0) },
+	[RST_BUS_SPDIF]		= { 0x2d0, BIT(1) },
+	[RST_BUS_I2S0]		= { 0x2d0, BIT(12) },
+	[RST_BUS_I2S1]		= { 0x2d0, BIT(13) },
+	[RST_BUS_I2S2]		= { 0x2d0, BIT(14) },
+	[RST_BUS_TDM]		= { 0x2d0, BIT(15) },
+	[RST_BUS_I2C0]		= { 0x2d8, BIT(0) },
+	[RST_BUS_I2C1]		= { 0x2d8, BIT(1) },
+	[RST_BUS_I2C2]		= { 0x2d8, BIT(2) },
+	[RST_BUS_UART0]		= { 0x2d8, BIT(16) },
+	[RST_BUS_UART1]		= { 0x2d8, BIT(17) },
+	[RST_BUS_UART2]		= { 0x2d8, BIT(18) },
+	[RST_BUS_UART3]		= { 0x2d8, BIT(19) },
+	[RST_BUS_UART4]		= { 0x2d8, BIT(20) },
+};
+
+static const struct sunxi_ccu_desc sun8i_a83t_ccu_desc = {
+	.ccu_clks	= sun8i_a83t_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun8i_a83t_ccu_clks),
+
+	.hw_clks	= &sun8i_a83t_hw_clks,
+
+	.resets		= sun8i_a83t_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun8i_a83t_ccu_resets),
+};
+
+#define SUN8I_A83T_PLL_P_SHIFT	16
+#define SUN8I_A83T_PLL_N_SHIFT	8
+#define SUN8I_A83T_PLL_N_WIDTH	8
+
+static void sun8i_a83t_cpu_pll_fixup(void __iomem *reg)
+{
+	u32 val = readl(reg);
+
+	/* bail out if P divider is not used */
+	if (!(val & BIT(SUN8I_A83T_PLL_P_SHIFT)))
+		return;
+
+	/*
+	 * If P is used, output should be less than 288 MHz. When we
+	 * set P to 1, we should also decrease the multiplier so the
+	 * output doesn't go out of range, but not too much such that
+	 * the multiplier stays above 12, the minimal operation value.
+	 *
+	 * To keep it simple, set the multiplier to 17, the reset value.
+	 */
+	val &= ~GENMASK(SUN8I_A83T_PLL_N_SHIFT + SUN8I_A83T_PLL_N_WIDTH - 1,
+			SUN8I_A83T_PLL_N_SHIFT);
+	val |= 17 << SUN8I_A83T_PLL_N_SHIFT;
+
+	/* And clear P */
+	val &= ~BIT(SUN8I_A83T_PLL_P_SHIFT);
+
+	writel(val, reg);
+}
+
+static int sun8i_a83t_ccu_probe(struct platform_device *pdev)
+{
+	struct resource *res;
+	void __iomem *reg;
+	u32 val;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	reg = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(reg))
+		return PTR_ERR(reg);
+
+	/* Enforce d1 = 0, d2 = 1 for Audio PLL */
+	val = readl(reg + SUN8I_A83T_PLL_AUDIO_REG);
+	val &= ~BIT(16);
+	val |= BIT(18);
+	writel(val, reg + SUN8I_A83T_PLL_AUDIO_REG);
+
+	/* Enforce P = 1 for both CPU cluster PLLs */
+	sun8i_a83t_cpu_pll_fixup(reg + SUN8I_A83T_PLL_C0CPUX_REG);
+	sun8i_a83t_cpu_pll_fixup(reg + SUN8I_A83T_PLL_C1CPUX_REG);
+
+	return devm_sunxi_ccu_probe(&pdev->dev, reg, &sun8i_a83t_ccu_desc);
+}
+
+static const struct of_device_id sun8i_a83t_ccu_ids[] = {
+	{ .compatible = "allwinner,sun8i-a83t-ccu" },
+	{ }
+};
+
+static struct platform_driver sun8i_a83t_ccu_driver = {
+	.probe	= sun8i_a83t_ccu_probe,
+	.driver	= {
+		.name	= "sun8i-a83t-ccu",
+		.suppress_bind_attrs = true,
+		.of_match_table	= sun8i_a83t_ccu_ids,
+	},
+};
+builtin_platform_driver(sun8i_a83t_ccu_driver);
diff --git a/drivers/clk/sunxi-ng/sun8i-a83t-ccu.h b/drivers/clk/sunxi-ng/sun8i-a83t-ccu.h
new file mode 100644
index 000000000000..40e575ba51d2
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun8i-a83t-ccu.h
@@ -0,0 +1,55 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright 2016 Chen-Yu Tsai
+ *
+ * Chen-Yu Tsai <wens@csie.org>
+ */
+
+#ifndef _CCU_SUN8I_A83T_H_
+#define _CCU_SUN8I_A83T_H_
+
+#include <dt-bindings/clock/sun8i-a83t-ccu.h>
+#include <dt-bindings/reset/sun8i-a83t-ccu.h>
+
+#define CLK_PLL_C0CPUX		0
+#define CLK_PLL_C1CPUX		1
+#define CLK_PLL_AUDIO		2
+#define CLK_PLL_VIDEO0		3
+#define CLK_PLL_VE		4
+#define CLK_PLL_DDR		5
+
+/* pll-periph is exported to the PRCM block */
+
+#define CLK_PLL_GPU		7
+#define CLK_PLL_HSIC		8
+
+/* pll-de is exported for the display engine */
+
+#define CLK_PLL_VIDEO1		10
+
+/* The CPUX clocks are exported */
+
+#define CLK_AXI0		13
+#define CLK_AXI1		14
+#define CLK_AHB1		15
+#define CLK_AHB2		16
+#define CLK_APB1		17
+#define CLK_APB2		18
+
+/* bus gates exported */
+
+#define CLK_CCI400		58
+
+/* module and usb clocks exported */
+
+#define CLK_DRAM		82
+
+/* dram gates and more module clocks exported */
+
+#define CLK_MBUS		95
+
+/* more module clocks exported */
+
+#define CLK_NUMBER		(CLK_GPU_HYD + 1)
+
+#endif /* _CCU_SUN8I_A83T_H_ */
diff --git a/drivers/clk/sunxi-ng/sun8i-de2-ccu.c b/drivers/clk/sunxi-ng/sun8i-de2-ccu.c
new file mode 100644
index 000000000000..15d15448ac21
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun8i-de2-ccu.c
@@ -0,0 +1,399 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (c) 2017 Icenowy Zheng <icenowy@aosc.io>
+ */
+
+#include <linux/clk.h>
+#include <linux/clk-provider.h>
+#include <linux/of_address.h>
+#include <linux/of_platform.h>
+#include <linux/platform_device.h>
+#include <linux/reset.h>
+
+#include "ccu_common.h"
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_reset.h"
+
+#include "sun8i-de2-ccu.h"
+
+static SUNXI_CCU_GATE(bus_mixer0_clk,	"bus-mixer0",	"bus-de",
+		      0x04, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_mixer1_clk,	"bus-mixer1",	"bus-de",
+		      0x04, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_wb_clk,	"bus-wb",	"bus-de",
+		      0x04, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_rot_clk,	"bus-rot",	"bus-de",
+		      0x04, BIT(3), 0);
+
+static SUNXI_CCU_GATE(mixer0_clk,	"mixer0",	"mixer0-div",
+		      0x00, BIT(0), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_GATE(mixer1_clk,	"mixer1",	"mixer1-div",
+		      0x00, BIT(1), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_GATE(wb_clk,		"wb",		"wb-div",
+		      0x00, BIT(2), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_GATE(rot_clk,		"rot",		"rot-div",
+		      0x00, BIT(3), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M(mixer0_div_clk, "mixer0-div", "de", 0x0c, 0, 4,
+		   CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M(mixer1_div_clk, "mixer1-div", "de", 0x0c, 4, 4,
+		   CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M(wb_div_clk, "wb-div", "de", 0x0c, 8, 4,
+		   CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M(rot_div_clk, "rot-div", "de", 0x0c, 0x0c, 4,
+		   CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M(mixer0_div_a83_clk, "mixer0-div", "pll-de", 0x0c, 0, 4,
+		   CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M(mixer1_div_a83_clk, "mixer1-div", "pll-de", 0x0c, 4, 4,
+		   CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M(wb_div_a83_clk, "wb-div", "pll-de", 0x0c, 8, 4,
+		   CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M(rot_div_a83_clk, "rot-div", "pll-de", 0x0c, 0x0c, 4,
+		   CLK_SET_RATE_PARENT);
+
+static struct ccu_common *sun8i_a83t_de2_clks[] = {
+	&mixer0_clk.common,
+	&mixer1_clk.common,
+	&wb_clk.common,
+
+	&bus_mixer0_clk.common,
+	&bus_mixer1_clk.common,
+	&bus_wb_clk.common,
+
+	&mixer0_div_a83_clk.common,
+	&mixer1_div_a83_clk.common,
+	&wb_div_a83_clk.common,
+
+	&bus_rot_clk.common,
+	&rot_clk.common,
+	&rot_div_a83_clk.common,
+};
+
+static struct ccu_common *sun8i_h3_de2_clks[] = {
+	&mixer0_clk.common,
+	&mixer1_clk.common,
+	&wb_clk.common,
+
+	&bus_mixer0_clk.common,
+	&bus_mixer1_clk.common,
+	&bus_wb_clk.common,
+
+	&mixer0_div_clk.common,
+	&mixer1_div_clk.common,
+	&wb_div_clk.common,
+};
+
+static struct ccu_common *sun8i_v3s_de2_clks[] = {
+	&mixer0_clk.common,
+	&wb_clk.common,
+
+	&bus_mixer0_clk.common,
+	&bus_wb_clk.common,
+
+	&mixer0_div_clk.common,
+	&wb_div_clk.common,
+};
+
+static struct ccu_common *sun50i_a64_de2_clks[] = {
+	&mixer0_clk.common,
+	&mixer1_clk.common,
+	&wb_clk.common,
+
+	&bus_mixer0_clk.common,
+	&bus_mixer1_clk.common,
+	&bus_wb_clk.common,
+
+	&mixer0_div_clk.common,
+	&mixer1_div_clk.common,
+	&wb_div_clk.common,
+
+	&bus_rot_clk.common,
+	&rot_clk.common,
+	&rot_div_clk.common,
+};
+
+static struct clk_hw_onecell_data sun8i_a83t_de2_hw_clks = {
+	.hws	= {
+		[CLK_MIXER0]		= &mixer0_clk.common.hw,
+		[CLK_MIXER1]		= &mixer1_clk.common.hw,
+		[CLK_WB]		= &wb_clk.common.hw,
+		[CLK_ROT]		= &rot_clk.common.hw,
+
+		[CLK_BUS_MIXER0]	= &bus_mixer0_clk.common.hw,
+		[CLK_BUS_MIXER1]	= &bus_mixer1_clk.common.hw,
+		[CLK_BUS_WB]		= &bus_wb_clk.common.hw,
+		[CLK_BUS_ROT]		= &bus_rot_clk.common.hw,
+
+		[CLK_MIXER0_DIV]	= &mixer0_div_a83_clk.common.hw,
+		[CLK_MIXER1_DIV]	= &mixer1_div_a83_clk.common.hw,
+		[CLK_WB_DIV]		= &wb_div_a83_clk.common.hw,
+		[CLK_ROT_DIV]		= &rot_div_a83_clk.common.hw,
+	},
+	.num	= CLK_NUMBER_WITH_ROT,
+};
+
+static struct clk_hw_onecell_data sun8i_h3_de2_hw_clks = {
+	.hws	= {
+		[CLK_MIXER0]		= &mixer0_clk.common.hw,
+		[CLK_MIXER1]		= &mixer1_clk.common.hw,
+		[CLK_WB]		= &wb_clk.common.hw,
+
+		[CLK_BUS_MIXER0]	= &bus_mixer0_clk.common.hw,
+		[CLK_BUS_MIXER1]	= &bus_mixer1_clk.common.hw,
+		[CLK_BUS_WB]		= &bus_wb_clk.common.hw,
+
+		[CLK_MIXER0_DIV]	= &mixer0_div_clk.common.hw,
+		[CLK_MIXER1_DIV]	= &mixer1_div_clk.common.hw,
+		[CLK_WB_DIV]		= &wb_div_clk.common.hw,
+	},
+	.num	= CLK_NUMBER_WITHOUT_ROT,
+};
+
+static struct clk_hw_onecell_data sun8i_v3s_de2_hw_clks = {
+	.hws	= {
+		[CLK_MIXER0]		= &mixer0_clk.common.hw,
+		[CLK_WB]		= &wb_clk.common.hw,
+
+		[CLK_BUS_MIXER0]	= &bus_mixer0_clk.common.hw,
+		[CLK_BUS_WB]		= &bus_wb_clk.common.hw,
+
+		[CLK_MIXER0_DIV]	= &mixer0_div_clk.common.hw,
+		[CLK_WB_DIV]		= &wb_div_clk.common.hw,
+	},
+	.num	= CLK_NUMBER_WITHOUT_ROT,
+};
+
+static struct clk_hw_onecell_data sun50i_a64_de2_hw_clks = {
+	.hws	= {
+		[CLK_MIXER0]		= &mixer0_clk.common.hw,
+		[CLK_MIXER1]		= &mixer1_clk.common.hw,
+		[CLK_WB]		= &wb_clk.common.hw,
+		[CLK_ROT]		= &rot_clk.common.hw,
+
+		[CLK_BUS_MIXER0]	= &bus_mixer0_clk.common.hw,
+		[CLK_BUS_MIXER1]	= &bus_mixer1_clk.common.hw,
+		[CLK_BUS_WB]		= &bus_wb_clk.common.hw,
+		[CLK_BUS_ROT]		= &bus_rot_clk.common.hw,
+
+		[CLK_MIXER0_DIV]	= &mixer0_div_clk.common.hw,
+		[CLK_MIXER1_DIV]	= &mixer1_div_clk.common.hw,
+		[CLK_WB_DIV]		= &wb_div_clk.common.hw,
+		[CLK_ROT_DIV]		= &rot_div_clk.common.hw,
+	},
+	.num	= CLK_NUMBER_WITH_ROT,
+};
+
+static struct ccu_reset_map sun8i_a83t_de2_resets[] = {
+	[RST_MIXER0]	= { 0x08, BIT(0) },
+	/*
+	 * Mixer1 reset line is shared with wb, so only RST_WB is
+	 * exported here.
+	 */
+	[RST_WB]	= { 0x08, BIT(2) },
+	[RST_ROT]	= { 0x08, BIT(3) },
+};
+
+static struct ccu_reset_map sun8i_h3_de2_resets[] = {
+	[RST_MIXER0]	= { 0x08, BIT(0) },
+	/*
+	 * Mixer1 reset line is shared with wb, so only RST_WB is
+	 * exported here.
+	 * V3s doesn't have mixer1, so it also shares this struct.
+	 */
+	[RST_WB]	= { 0x08, BIT(2) },
+};
+
+static struct ccu_reset_map sun50i_a64_de2_resets[] = {
+	[RST_MIXER0]	= { 0x08, BIT(0) },
+	[RST_MIXER1]	= { 0x08, BIT(1) },
+	[RST_WB]	= { 0x08, BIT(2) },
+	[RST_ROT]	= { 0x08, BIT(3) },
+};
+
+static struct ccu_reset_map sun50i_h5_de2_resets[] = {
+	[RST_MIXER0]	= { 0x08, BIT(0) },
+	[RST_MIXER1]	= { 0x08, BIT(1) },
+	[RST_WB]	= { 0x08, BIT(2) },
+};
+
+static const struct sunxi_ccu_desc sun8i_a83t_de2_clk_desc = {
+	.ccu_clks	= sun8i_a83t_de2_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun8i_a83t_de2_clks),
+
+	.hw_clks	= &sun8i_a83t_de2_hw_clks,
+
+	.resets		= sun8i_a83t_de2_resets,
+	.num_resets	= ARRAY_SIZE(sun8i_a83t_de2_resets),
+};
+
+static const struct sunxi_ccu_desc sun8i_h3_de2_clk_desc = {
+	.ccu_clks	= sun8i_h3_de2_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun8i_h3_de2_clks),
+
+	.hw_clks	= &sun8i_h3_de2_hw_clks,
+
+	.resets		= sun8i_h3_de2_resets,
+	.num_resets	= ARRAY_SIZE(sun8i_h3_de2_resets),
+};
+
+static const struct sunxi_ccu_desc sun8i_r40_de2_clk_desc = {
+	.ccu_clks	= sun50i_a64_de2_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun50i_a64_de2_clks),
+
+	.hw_clks	= &sun50i_a64_de2_hw_clks,
+
+	.resets		= sun8i_a83t_de2_resets,
+	.num_resets	= ARRAY_SIZE(sun8i_a83t_de2_resets),
+};
+
+static const struct sunxi_ccu_desc sun8i_v3s_de2_clk_desc = {
+	.ccu_clks	= sun8i_v3s_de2_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun8i_v3s_de2_clks),
+
+	.hw_clks	= &sun8i_v3s_de2_hw_clks,
+
+	.resets		= sun8i_a83t_de2_resets,
+	.num_resets	= ARRAY_SIZE(sun8i_a83t_de2_resets),
+};
+
+static const struct sunxi_ccu_desc sun50i_a64_de2_clk_desc = {
+	.ccu_clks	= sun50i_a64_de2_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun50i_a64_de2_clks),
+
+	.hw_clks	= &sun50i_a64_de2_hw_clks,
+
+	.resets		= sun50i_a64_de2_resets,
+	.num_resets	= ARRAY_SIZE(sun50i_a64_de2_resets),
+};
+
+static const struct sunxi_ccu_desc sun50i_h5_de2_clk_desc = {
+	.ccu_clks	= sun8i_h3_de2_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun8i_h3_de2_clks),
+
+	.hw_clks	= &sun8i_h3_de2_hw_clks,
+
+	.resets		= sun50i_h5_de2_resets,
+	.num_resets	= ARRAY_SIZE(sun50i_h5_de2_resets),
+};
+
+static int sunxi_de2_clk_probe(struct platform_device *pdev)
+{
+	struct resource *res;
+	struct clk *bus_clk, *mod_clk;
+	struct reset_control *rstc;
+	void __iomem *reg;
+	const struct sunxi_ccu_desc *ccu_desc;
+	int ret;
+
+	ccu_desc = of_device_get_match_data(&pdev->dev);
+	if (!ccu_desc)
+		return -EINVAL;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	reg = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(reg))
+		return PTR_ERR(reg);
+
+	bus_clk = devm_clk_get(&pdev->dev, "bus");
+	if (IS_ERR(bus_clk)) {
+		ret = PTR_ERR(bus_clk);
+		if (ret != -EPROBE_DEFER)
+			dev_err(&pdev->dev, "Couldn't get bus clk: %d\n", ret);
+		return ret;
+	}
+
+	mod_clk = devm_clk_get(&pdev->dev, "mod");
+	if (IS_ERR(mod_clk)) {
+		ret = PTR_ERR(mod_clk);
+		if (ret != -EPROBE_DEFER)
+			dev_err(&pdev->dev, "Couldn't get mod clk: %d\n", ret);
+		return ret;
+	}
+
+	rstc = devm_reset_control_get_exclusive(&pdev->dev, NULL);
+	if (IS_ERR(rstc)) {
+		ret = PTR_ERR(rstc);
+		if (ret != -EPROBE_DEFER)
+			dev_err(&pdev->dev,
+				"Couldn't get reset control: %d\n", ret);
+		return ret;
+	}
+
+	/* The clocks need to be enabled for us to access the registers */
+	ret = clk_prepare_enable(bus_clk);
+	if (ret) {
+		dev_err(&pdev->dev, "Couldn't enable bus clk: %d\n", ret);
+		return ret;
+	}
+
+	ret = clk_prepare_enable(mod_clk);
+	if (ret) {
+		dev_err(&pdev->dev, "Couldn't enable mod clk: %d\n", ret);
+		goto err_disable_bus_clk;
+	}
+
+	/* The reset control needs to be asserted for the controls to work */
+	ret = reset_control_deassert(rstc);
+	if (ret) {
+		dev_err(&pdev->dev,
+			"Couldn't deassert reset control: %d\n", ret);
+		goto err_disable_mod_clk;
+	}
+
+	ret = devm_sunxi_ccu_probe(&pdev->dev, reg, ccu_desc);
+	if (ret)
+		goto err_assert_reset;
+
+	return 0;
+
+err_assert_reset:
+	reset_control_assert(rstc);
+err_disable_mod_clk:
+	clk_disable_unprepare(mod_clk);
+err_disable_bus_clk:
+	clk_disable_unprepare(bus_clk);
+	return ret;
+}
+
+static const struct of_device_id sunxi_de2_clk_ids[] = {
+	{
+		.compatible = "allwinner,sun8i-a83t-de2-clk",
+		.data = &sun8i_a83t_de2_clk_desc,
+	},
+	{
+		.compatible = "allwinner,sun8i-h3-de2-clk",
+		.data = &sun8i_h3_de2_clk_desc,
+	},
+	{
+		.compatible = "allwinner,sun8i-r40-de2-clk",
+		.data = &sun8i_r40_de2_clk_desc,
+	},
+	{
+		.compatible = "allwinner,sun8i-v3s-de2-clk",
+		.data = &sun8i_v3s_de2_clk_desc,
+	},
+	{
+		.compatible = "allwinner,sun50i-a64-de2-clk",
+		.data = &sun50i_a64_de2_clk_desc,
+	},
+	{
+		.compatible = "allwinner,sun50i-h5-de2-clk",
+		.data = &sun50i_h5_de2_clk_desc,
+	},
+	{
+		.compatible = "allwinner,sun50i-h6-de3-clk",
+		.data = &sun50i_h5_de2_clk_desc,
+	},
+	{ }
+};
+
+static struct platform_driver sunxi_de2_clk_driver = {
+	.probe	= sunxi_de2_clk_probe,
+	.driver	= {
+		.name	= "sunxi-de2-clks",
+		.of_match_table	= sunxi_de2_clk_ids,
+	},
+};
+builtin_platform_driver(sunxi_de2_clk_driver);
diff --git a/drivers/clk/sunxi-ng/sun8i-de2-ccu.h b/drivers/clk/sunxi-ng/sun8i-de2-ccu.h
new file mode 100644
index 000000000000..499442002f2a
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun8i-de2-ccu.h
@@ -0,0 +1,21 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright 2016 Icenowy Zheng <icenowy@aosc.io>
+ */
+
+#ifndef _CCU_SUN8I_DE2_H_
+#define _CCU_SUN8I_DE2_H_
+
+#include <dt-bindings/clock/sun8i-de2.h>
+#include <dt-bindings/reset/sun8i-de2.h>
+
+/* Intermediary clock dividers are not exported */
+#define CLK_MIXER0_DIV	3
+#define CLK_MIXER1_DIV	4
+#define CLK_WB_DIV	5
+#define CLK_ROT_DIV	11
+
+#define CLK_NUMBER_WITH_ROT	(CLK_ROT_DIV + 1)
+#define CLK_NUMBER_WITHOUT_ROT	(CLK_WB + 1)
+
+#endif /* _CCU_SUN8I_DE2_H_ */
diff --git a/drivers/clk/sunxi-ng/sun8i-h3-ccu.c b/drivers/clk/sunxi-ng/sun8i-h3-ccu.c
new file mode 100644
index 000000000000..c566cc1aa168
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun8i-h3-ccu.c
@@ -0,0 +1,1179 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (c) 2016 Maxime Ripard. All rights reserved.
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/io.h>
+#include <linux/of_address.h>
+
+#include "ccu_common.h"
+#include "ccu_reset.h"
+
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_mp.h"
+#include "ccu_mult.h"
+#include "ccu_nk.h"
+#include "ccu_nkm.h"
+#include "ccu_nkmp.h"
+#include "ccu_nm.h"
+#include "ccu_phase.h"
+#include "ccu_sdm.h"
+
+#include "sun8i-h3-ccu.h"
+
+static SUNXI_CCU_NKMP_WITH_GATE_LOCK(pll_cpux_clk, "pll-cpux",
+				     "osc24M", 0x000,
+				     8, 5,	/* N */
+				     4, 2,	/* K */
+				     0, 2,	/* M */
+				     16, 2,	/* P */
+				     BIT(31),	/* gate */
+				     BIT(28),	/* lock */
+				     CLK_SET_RATE_UNGATE);
+
+/*
+ * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
+ * the base (2x, 4x and 8x), and one variable divider (the one true
+ * pll audio).
+ *
+ * With sigma-delta modulation for fractional-N on the audio PLL,
+ * we have to use specific dividers. This means the variable divider
+ * can no longer be used, as the audio codec requests the exact clock
+ * rates we support through this mechanism. So we now hard code the
+ * variable divider to 1. This means the clock rates will no longer
+ * match the clock names.
+ */
+#define SUN8I_H3_PLL_AUDIO_REG	0x008
+
+static struct ccu_sdm_setting pll_audio_sdm_table[] = {
+	{ .rate = 22579200, .pattern = 0xc0010d84, .m = 8, .n = 7 },
+	{ .rate = 24576000, .pattern = 0xc000ac02, .m = 14, .n = 14 },
+};
+
+static SUNXI_CCU_NM_WITH_SDM_GATE_LOCK(pll_audio_base_clk, "pll-audio-base",
+				       "osc24M", 0x008,
+				       8, 7,	/* N */
+				       0, 5,	/* M */
+				       pll_audio_sdm_table, BIT(24),
+				       0x284, BIT(31),
+				       BIT(31),	/* gate */
+				       BIT(28),	/* lock */
+				       CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK_MIN_MAX(pll_video_clk, "pll-video",
+						"osc24M", 0x0010,
+						192000000, /* Minimum rate */
+						912000000, /* Maximum rate */
+						8, 7,      /* N */
+						0, 4,	   /* M */
+						BIT(24),   /* frac enable */
+						BIT(25),   /* frac select */
+						270000000, /* frac rate 0 */
+						297000000, /* frac rate 1 */
+						BIT(31),   /* gate */
+						BIT(28),   /* lock */
+						CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_ve_clk, "pll-ve",
+					"osc24M", 0x0018,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_ddr_clk, "pll-ddr",
+				    "osc24M", 0x020,
+				    8, 5,	/* N */
+				    4, 2,	/* K */
+				    0, 2,	/* M */
+				    BIT(31),	/* gate */
+				    BIT(28),	/* lock */
+				    CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NK_WITH_GATE_LOCK_POSTDIV(pll_periph0_clk, "pll-periph0",
+					   "osc24M", 0x028,
+					   8, 5,	/* N */
+					   4, 2,	/* K */
+					   BIT(31),	/* gate */
+					   BIT(28),	/* lock */
+					   2,		/* post-div */
+					   CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_gpu_clk, "pll-gpu",
+					"osc24M", 0x0038,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NK_WITH_GATE_LOCK_POSTDIV(pll_periph1_clk, "pll-periph1",
+					   "osc24M", 0x044,
+					   8, 5,	/* N */
+					   4, 2,	/* K */
+					   BIT(31),	/* gate */
+					   BIT(28),	/* lock */
+					   2,		/* post-div */
+					   CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_de_clk, "pll-de",
+					"osc24M", 0x0048,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static const char * const cpux_parents[] = { "osc32k", "osc24M",
+					     "pll-cpux" , "pll-cpux" };
+static SUNXI_CCU_MUX(cpux_clk, "cpux", cpux_parents,
+		     0x050, 16, 2, CLK_IS_CRITICAL | CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M(axi_clk, "axi", "cpux", 0x050, 0, 2, 0);
+
+static const char * const ahb1_parents[] = { "osc32k", "osc24M",
+					     "axi" , "pll-periph0" };
+static const struct ccu_mux_var_prediv ahb1_predivs[] = {
+	{ .index = 3, .shift = 6, .width = 2 },
+};
+static struct ccu_div ahb1_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
+
+	.mux		= {
+		.shift	= 12,
+		.width	= 2,
+
+		.var_predivs	= ahb1_predivs,
+		.n_var_predivs	= ARRAY_SIZE(ahb1_predivs),
+	},
+
+	.common		= {
+		.reg		= 0x054,
+		.features	= CCU_FEATURE_VARIABLE_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("ahb1",
+						      ahb1_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static struct clk_div_table apb1_div_table[] = {
+	{ .val = 0, .div = 2 },
+	{ .val = 1, .div = 2 },
+	{ .val = 2, .div = 4 },
+	{ .val = 3, .div = 8 },
+	{ /* Sentinel */ },
+};
+static SUNXI_CCU_DIV_TABLE(apb1_clk, "apb1", "ahb1",
+			   0x054, 8, 2, apb1_div_table, 0);
+
+static const char * const apb2_parents[] = { "osc32k", "osc24M",
+					     "pll-periph0" , "pll-periph0" };
+static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", apb2_parents, 0x058,
+			     0, 5,	/* M */
+			     16, 2,	/* P */
+			     24, 2,	/* mux */
+			     0);
+
+static const char * const ahb2_parents[] = { "ahb1" , "pll-periph0" };
+static const struct ccu_mux_fixed_prediv ahb2_fixed_predivs[] = {
+	{ .index = 1, .div = 2 },
+};
+static struct ccu_mux ahb2_clk = {
+	.mux		= {
+		.shift	= 0,
+		.width	= 1,
+		.fixed_predivs	= ahb2_fixed_predivs,
+		.n_predivs	= ARRAY_SIZE(ahb2_fixed_predivs),
+	},
+
+	.common		= {
+		.reg		= 0x05c,
+		.features	= CCU_FEATURE_FIXED_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("ahb2",
+						      ahb2_parents,
+						      &ccu_mux_ops,
+						      0),
+	},
+};
+
+static SUNXI_CCU_GATE(bus_ce_clk,	"bus-ce",	"ahb1",
+		      0x060, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_dma_clk,	"bus-dma",	"ahb1",
+		      0x060, BIT(6), 0);
+static SUNXI_CCU_GATE(bus_mmc0_clk,	"bus-mmc0",	"ahb1",
+		      0x060, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_mmc1_clk,	"bus-mmc1",	"ahb1",
+		      0x060, BIT(9), 0);
+static SUNXI_CCU_GATE(bus_mmc2_clk,	"bus-mmc2",	"ahb1",
+		      0x060, BIT(10), 0);
+static SUNXI_CCU_GATE(bus_nand_clk,	"bus-nand",	"ahb1",
+		      0x060, BIT(13), 0);
+static SUNXI_CCU_GATE(bus_dram_clk,	"bus-dram",	"ahb1",
+		      0x060, BIT(14), 0);
+static SUNXI_CCU_GATE(bus_emac_clk,	"bus-emac",	"ahb2",
+		      0x060, BIT(17), 0);
+static SUNXI_CCU_GATE(bus_ts_clk,	"bus-ts",	"ahb1",
+		      0x060, BIT(18), 0);
+static SUNXI_CCU_GATE(bus_hstimer_clk,	"bus-hstimer",	"ahb1",
+		      0x060, BIT(19), 0);
+static SUNXI_CCU_GATE(bus_spi0_clk,	"bus-spi0",	"ahb1",
+		      0x060, BIT(20), 0);
+static SUNXI_CCU_GATE(bus_spi1_clk,	"bus-spi1",	"ahb1",
+		      0x060, BIT(21), 0);
+static SUNXI_CCU_GATE(bus_otg_clk,	"bus-otg",	"ahb1",
+		      0x060, BIT(23), 0);
+static SUNXI_CCU_GATE(bus_ehci0_clk,	"bus-ehci0",	"ahb1",
+		      0x060, BIT(24), 0);
+static SUNXI_CCU_GATE(bus_ehci1_clk,	"bus-ehci1",	"ahb2",
+		      0x060, BIT(25), 0);
+static SUNXI_CCU_GATE(bus_ehci2_clk,	"bus-ehci2",	"ahb2",
+		      0x060, BIT(26), 0);
+static SUNXI_CCU_GATE(bus_ehci3_clk,	"bus-ehci3",	"ahb2",
+		      0x060, BIT(27), 0);
+static SUNXI_CCU_GATE(bus_ohci0_clk,	"bus-ohci0",	"ahb1",
+		      0x060, BIT(28), 0);
+static SUNXI_CCU_GATE(bus_ohci1_clk,	"bus-ohci1",	"ahb2",
+		      0x060, BIT(29), 0);
+static SUNXI_CCU_GATE(bus_ohci2_clk,	"bus-ohci2",	"ahb2",
+		      0x060, BIT(30), 0);
+static SUNXI_CCU_GATE(bus_ohci3_clk,	"bus-ohci3",	"ahb2",
+		      0x060, BIT(31), 0);
+
+static SUNXI_CCU_GATE(bus_ve_clk,	"bus-ve",	"ahb1",
+		      0x064, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_tcon0_clk,	"bus-tcon0",	"ahb1",
+		      0x064, BIT(3), 0);
+static SUNXI_CCU_GATE(bus_tcon1_clk,	"bus-tcon1",	"ahb1",
+		      0x064, BIT(4), 0);
+static SUNXI_CCU_GATE(bus_deinterlace_clk,	"bus-deinterlace",	"ahb1",
+		      0x064, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_csi_clk,	"bus-csi",	"ahb1",
+		      0x064, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_tve_clk,	"bus-tve",	"ahb1",
+		      0x064, BIT(9), 0);
+static SUNXI_CCU_GATE(bus_hdmi_clk,	"bus-hdmi",	"ahb1",
+		      0x064, BIT(11), 0);
+static SUNXI_CCU_GATE(bus_de_clk,	"bus-de",	"ahb1",
+		      0x064, BIT(12), 0);
+static SUNXI_CCU_GATE(bus_gpu_clk,	"bus-gpu",	"ahb1",
+		      0x064, BIT(20), 0);
+static SUNXI_CCU_GATE(bus_msgbox_clk,	"bus-msgbox",	"ahb1",
+		      0x064, BIT(21), 0);
+static SUNXI_CCU_GATE(bus_spinlock_clk,	"bus-spinlock",	"ahb1",
+		      0x064, BIT(22), 0);
+
+static SUNXI_CCU_GATE(bus_codec_clk,	"bus-codec",	"apb1",
+		      0x068, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_spdif_clk,	"bus-spdif",	"apb1",
+		      0x068, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_pio_clk,	"bus-pio",	"apb1",
+		      0x068, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_ths_clk,	"bus-ths",	"apb1",
+		      0x068, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_i2s0_clk,	"bus-i2s0",	"apb1",
+		      0x068, BIT(12), 0);
+static SUNXI_CCU_GATE(bus_i2s1_clk,	"bus-i2s1",	"apb1",
+		      0x068, BIT(13), 0);
+static SUNXI_CCU_GATE(bus_i2s2_clk,	"bus-i2s2",	"apb1",
+		      0x068, BIT(14), 0);
+
+static SUNXI_CCU_GATE(bus_i2c0_clk,	"bus-i2c0",	"apb2",
+		      0x06c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_i2c1_clk,	"bus-i2c1",	"apb2",
+		      0x06c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_i2c2_clk,	"bus-i2c2",	"apb2",
+		      0x06c, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_uart0_clk,	"bus-uart0",	"apb2",
+		      0x06c, BIT(16), 0);
+static SUNXI_CCU_GATE(bus_uart1_clk,	"bus-uart1",	"apb2",
+		      0x06c, BIT(17), 0);
+static SUNXI_CCU_GATE(bus_uart2_clk,	"bus-uart2",	"apb2",
+		      0x06c, BIT(18), 0);
+static SUNXI_CCU_GATE(bus_uart3_clk,	"bus-uart3",	"apb2",
+		      0x06c, BIT(19), 0);
+static SUNXI_CCU_GATE(bus_scr0_clk,	"bus-scr0",	"apb2",
+		      0x06c, BIT(20), 0);
+static SUNXI_CCU_GATE(bus_scr1_clk,	"bus-scr1",	"apb2",
+		      0x06c, BIT(21), 0);
+
+static SUNXI_CCU_GATE(bus_ephy_clk,	"bus-ephy",	"ahb1",
+		      0x070, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_dbg_clk,	"bus-dbg",	"ahb1",
+		      0x070, BIT(7), 0);
+
+static struct clk_div_table ths_div_table[] = {
+	{ .val = 0, .div = 1 },
+	{ .val = 1, .div = 2 },
+	{ .val = 2, .div = 4 },
+	{ .val = 3, .div = 6 },
+	{ /* Sentinel */ },
+};
+static SUNXI_CCU_DIV_TABLE_WITH_GATE(ths_clk, "ths", "osc24M",
+				     0x074, 0, 2, ths_div_table, BIT(31), 0);
+
+static const char * const mod0_default_parents[] = { "osc24M", "pll-periph0",
+						     "pll-periph1" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand_clk, "nand", mod0_default_parents, 0x080,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents, 0x088,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc0_sample_clk, "mmc0_sample", "mmc0",
+		       0x088, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc0_output_clk, "mmc0_output", "mmc0",
+		       0x088, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents, 0x08c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc1_sample_clk, "mmc1_sample", "mmc1",
+		       0x08c, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc1_output_clk, "mmc1_output", "mmc1",
+		       0x08c, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents, 0x090,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc2_sample_clk, "mmc2_sample", "mmc2",
+		       0x090, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc2_output_clk, "mmc2_output", "mmc2",
+		       0x090, 8, 3, 0);
+
+static const char * const ts_parents[] = { "osc24M", "pll-periph0", };
+static SUNXI_CCU_MP_WITH_MUX_GATE(ts_clk, "ts", ts_parents, 0x098,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(ce_clk, "ce", mod0_default_parents, 0x09c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents, 0x0a0,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents, 0x0a4,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static const char * const i2s_parents[] = { "pll-audio-8x", "pll-audio-4x",
+					    "pll-audio-2x", "pll-audio" };
+static SUNXI_CCU_MUX_WITH_GATE(i2s0_clk, "i2s0", i2s_parents,
+			       0x0b0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_MUX_WITH_GATE(i2s1_clk, "i2s1", i2s_parents,
+			       0x0b4, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_MUX_WITH_GATE(i2s2_clk, "i2s2", i2s_parents,
+			       0x0b8, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M_WITH_GATE(spdif_clk, "spdif", "pll-audio",
+			     0x0c0, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"osc24M",
+		      0x0cc, BIT(8), 0);
+static SUNXI_CCU_GATE(usb_phy1_clk,	"usb-phy1",	"osc24M",
+		      0x0cc, BIT(9), 0);
+static SUNXI_CCU_GATE(usb_phy2_clk,	"usb-phy2",	"osc24M",
+		      0x0cc, BIT(10), 0);
+static SUNXI_CCU_GATE(usb_phy3_clk,	"usb-phy3",	"osc24M",
+		      0x0cc, BIT(11), 0);
+static SUNXI_CCU_GATE(usb_ohci0_clk,	"usb-ohci0",	"osc24M",
+		      0x0cc, BIT(16), 0);
+static SUNXI_CCU_GATE(usb_ohci1_clk,	"usb-ohci1",	"osc24M",
+		      0x0cc, BIT(17), 0);
+static SUNXI_CCU_GATE(usb_ohci2_clk,	"usb-ohci2",	"osc24M",
+		      0x0cc, BIT(18), 0);
+static SUNXI_CCU_GATE(usb_ohci3_clk,	"usb-ohci3",	"osc24M",
+		      0x0cc, BIT(19), 0);
+
+static const char * const dram_parents[] = { "pll-ddr", "pll-periph0-2x" };
+static SUNXI_CCU_M_WITH_MUX(dram_clk, "dram", dram_parents,
+			    0x0f4, 0, 4, 20, 2, CLK_IS_CRITICAL);
+
+static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"dram",
+		      0x100, BIT(0), 0);
+static SUNXI_CCU_GATE(dram_csi_clk,	"dram-csi",	"dram",
+		      0x100, BIT(1), 0);
+static SUNXI_CCU_GATE(dram_deinterlace_clk,	"dram-deinterlace",	"dram",
+		      0x100, BIT(2), 0);
+static SUNXI_CCU_GATE(dram_ts_clk,	"dram-ts",	"dram",
+		      0x100, BIT(3), 0);
+
+static const char * const de_parents[] = { "pll-periph0-2x", "pll-de" };
+static SUNXI_CCU_M_WITH_MUX_GATE(de_clk, "de", de_parents,
+				 0x104, 0, 4, 24, 3, BIT(31),
+				 CLK_SET_RATE_PARENT);
+
+static const char * const tcon_parents[] = { "pll-video" };
+static SUNXI_CCU_M_WITH_MUX_GATE(tcon_clk, "tcon", tcon_parents,
+				 0x118, 0, 4, 24, 3, BIT(31),
+				 CLK_SET_RATE_PARENT);
+
+static const char * const tve_parents[] = { "pll-de", "pll-periph1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(tve_clk, "tve", tve_parents,
+				 0x120, 0, 4, 24, 3, BIT(31), 0);
+
+static const char * const deinterlace_parents[] = { "pll-periph0", "pll-periph1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(deinterlace_clk, "deinterlace", deinterlace_parents,
+				 0x124, 0, 4, 24, 3, BIT(31), 0);
+
+static SUNXI_CCU_GATE(csi_misc_clk,	"csi-misc",	"osc24M",
+		      0x130, BIT(31), 0);
+
+static const char * const csi_sclk_parents[] = { "pll-periph0", "pll-periph1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(csi_sclk_clk, "csi-sclk", csi_sclk_parents,
+				 0x134, 16, 4, 24, 3, BIT(31), 0);
+
+static const char * const csi_mclk_parents[] = { "osc24M", "pll-video", "pll-periph1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(csi_mclk_clk, "csi-mclk", csi_mclk_parents,
+				 0x134, 0, 5, 8, 3, BIT(15), 0);
+
+static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve",
+			     0x13c, 16, 3, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(ac_dig_clk,	"ac-dig",	"pll-audio",
+		      0x140, BIT(31), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_GATE(avs_clk,		"avs",		"osc24M",
+		      0x144, BIT(31), 0);
+
+static const char * const hdmi_parents[] = { "pll-video" };
+static SUNXI_CCU_M_WITH_MUX_GATE(hdmi_clk, "hdmi", hdmi_parents,
+				 0x150, 0, 4, 24, 2, BIT(31),
+				 CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(hdmi_ddc_clk,	"hdmi-ddc",	"osc24M",
+		      0x154, BIT(31), 0);
+
+static const char * const mbus_parents[] = { "osc24M", "pll-periph0-2x", "pll-ddr" };
+static SUNXI_CCU_M_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents,
+				 0x15c, 0, 3, 24, 2, BIT(31), CLK_IS_CRITICAL);
+
+static SUNXI_CCU_M_WITH_GATE(gpu_clk, "gpu", "pll-gpu",
+			     0x1a0, 0, 3, BIT(31), CLK_SET_RATE_PARENT);
+
+static struct ccu_common *sun8i_h3_ccu_clks[] = {
+	&pll_cpux_clk.common,
+	&pll_audio_base_clk.common,
+	&pll_video_clk.common,
+	&pll_ve_clk.common,
+	&pll_ddr_clk.common,
+	&pll_periph0_clk.common,
+	&pll_gpu_clk.common,
+	&pll_periph1_clk.common,
+	&pll_de_clk.common,
+	&cpux_clk.common,
+	&axi_clk.common,
+	&ahb1_clk.common,
+	&apb1_clk.common,
+	&apb2_clk.common,
+	&ahb2_clk.common,
+	&bus_ce_clk.common,
+	&bus_dma_clk.common,
+	&bus_mmc0_clk.common,
+	&bus_mmc1_clk.common,
+	&bus_mmc2_clk.common,
+	&bus_nand_clk.common,
+	&bus_dram_clk.common,
+	&bus_emac_clk.common,
+	&bus_ts_clk.common,
+	&bus_hstimer_clk.common,
+	&bus_spi0_clk.common,
+	&bus_spi1_clk.common,
+	&bus_otg_clk.common,
+	&bus_ehci0_clk.common,
+	&bus_ehci1_clk.common,
+	&bus_ehci2_clk.common,
+	&bus_ehci3_clk.common,
+	&bus_ohci0_clk.common,
+	&bus_ohci1_clk.common,
+	&bus_ohci2_clk.common,
+	&bus_ohci3_clk.common,
+	&bus_ve_clk.common,
+	&bus_tcon0_clk.common,
+	&bus_tcon1_clk.common,
+	&bus_deinterlace_clk.common,
+	&bus_csi_clk.common,
+	&bus_tve_clk.common,
+	&bus_hdmi_clk.common,
+	&bus_de_clk.common,
+	&bus_gpu_clk.common,
+	&bus_msgbox_clk.common,
+	&bus_spinlock_clk.common,
+	&bus_codec_clk.common,
+	&bus_spdif_clk.common,
+	&bus_pio_clk.common,
+	&bus_ths_clk.common,
+	&bus_i2s0_clk.common,
+	&bus_i2s1_clk.common,
+	&bus_i2s2_clk.common,
+	&bus_i2c0_clk.common,
+	&bus_i2c1_clk.common,
+	&bus_i2c2_clk.common,
+	&bus_uart0_clk.common,
+	&bus_uart1_clk.common,
+	&bus_uart2_clk.common,
+	&bus_uart3_clk.common,
+	&bus_scr0_clk.common,
+	&bus_ephy_clk.common,
+	&bus_dbg_clk.common,
+	&ths_clk.common,
+	&nand_clk.common,
+	&mmc0_clk.common,
+	&mmc0_sample_clk.common,
+	&mmc0_output_clk.common,
+	&mmc1_clk.common,
+	&mmc1_sample_clk.common,
+	&mmc1_output_clk.common,
+	&mmc2_clk.common,
+	&mmc2_sample_clk.common,
+	&mmc2_output_clk.common,
+	&ts_clk.common,
+	&ce_clk.common,
+	&spi0_clk.common,
+	&spi1_clk.common,
+	&i2s0_clk.common,
+	&i2s1_clk.common,
+	&i2s2_clk.common,
+	&spdif_clk.common,
+	&usb_phy0_clk.common,
+	&usb_phy1_clk.common,
+	&usb_phy2_clk.common,
+	&usb_phy3_clk.common,
+	&usb_ohci0_clk.common,
+	&usb_ohci1_clk.common,
+	&usb_ohci2_clk.common,
+	&usb_ohci3_clk.common,
+	&dram_clk.common,
+	&dram_ve_clk.common,
+	&dram_csi_clk.common,
+	&dram_deinterlace_clk.common,
+	&dram_ts_clk.common,
+	&de_clk.common,
+	&tcon_clk.common,
+	&tve_clk.common,
+	&deinterlace_clk.common,
+	&csi_misc_clk.common,
+	&csi_sclk_clk.common,
+	&csi_mclk_clk.common,
+	&ve_clk.common,
+	&ac_dig_clk.common,
+	&avs_clk.common,
+	&hdmi_clk.common,
+	&hdmi_ddc_clk.common,
+	&mbus_clk.common,
+	&gpu_clk.common,
+};
+
+static struct ccu_common *sun50i_h5_ccu_clks[] = {
+	&pll_cpux_clk.common,
+	&pll_audio_base_clk.common,
+	&pll_video_clk.common,
+	&pll_ve_clk.common,
+	&pll_ddr_clk.common,
+	&pll_periph0_clk.common,
+	&pll_gpu_clk.common,
+	&pll_periph1_clk.common,
+	&pll_de_clk.common,
+	&cpux_clk.common,
+	&axi_clk.common,
+	&ahb1_clk.common,
+	&apb1_clk.common,
+	&apb2_clk.common,
+	&ahb2_clk.common,
+	&bus_ce_clk.common,
+	&bus_dma_clk.common,
+	&bus_mmc0_clk.common,
+	&bus_mmc1_clk.common,
+	&bus_mmc2_clk.common,
+	&bus_nand_clk.common,
+	&bus_dram_clk.common,
+	&bus_emac_clk.common,
+	&bus_ts_clk.common,
+	&bus_hstimer_clk.common,
+	&bus_spi0_clk.common,
+	&bus_spi1_clk.common,
+	&bus_otg_clk.common,
+	&bus_ehci0_clk.common,
+	&bus_ehci1_clk.common,
+	&bus_ehci2_clk.common,
+	&bus_ehci3_clk.common,
+	&bus_ohci0_clk.common,
+	&bus_ohci1_clk.common,
+	&bus_ohci2_clk.common,
+	&bus_ohci3_clk.common,
+	&bus_ve_clk.common,
+	&bus_tcon0_clk.common,
+	&bus_tcon1_clk.common,
+	&bus_deinterlace_clk.common,
+	&bus_csi_clk.common,
+	&bus_tve_clk.common,
+	&bus_hdmi_clk.common,
+	&bus_de_clk.common,
+	&bus_gpu_clk.common,
+	&bus_msgbox_clk.common,
+	&bus_spinlock_clk.common,
+	&bus_codec_clk.common,
+	&bus_spdif_clk.common,
+	&bus_pio_clk.common,
+	&bus_ths_clk.common,
+	&bus_i2s0_clk.common,
+	&bus_i2s1_clk.common,
+	&bus_i2s2_clk.common,
+	&bus_i2c0_clk.common,
+	&bus_i2c1_clk.common,
+	&bus_i2c2_clk.common,
+	&bus_uart0_clk.common,
+	&bus_uart1_clk.common,
+	&bus_uart2_clk.common,
+	&bus_uart3_clk.common,
+	&bus_scr0_clk.common,
+	&bus_scr1_clk.common,
+	&bus_ephy_clk.common,
+	&bus_dbg_clk.common,
+	&ths_clk.common,
+	&nand_clk.common,
+	&mmc0_clk.common,
+	&mmc1_clk.common,
+	&mmc2_clk.common,
+	&ts_clk.common,
+	&ce_clk.common,
+	&spi0_clk.common,
+	&spi1_clk.common,
+	&i2s0_clk.common,
+	&i2s1_clk.common,
+	&i2s2_clk.common,
+	&spdif_clk.common,
+	&usb_phy0_clk.common,
+	&usb_phy1_clk.common,
+	&usb_phy2_clk.common,
+	&usb_phy3_clk.common,
+	&usb_ohci0_clk.common,
+	&usb_ohci1_clk.common,
+	&usb_ohci2_clk.common,
+	&usb_ohci3_clk.common,
+	&dram_clk.common,
+	&dram_ve_clk.common,
+	&dram_csi_clk.common,
+	&dram_deinterlace_clk.common,
+	&dram_ts_clk.common,
+	&de_clk.common,
+	&tcon_clk.common,
+	&tve_clk.common,
+	&deinterlace_clk.common,
+	&csi_misc_clk.common,
+	&csi_sclk_clk.common,
+	&csi_mclk_clk.common,
+	&ve_clk.common,
+	&ac_dig_clk.common,
+	&avs_clk.common,
+	&hdmi_clk.common,
+	&hdmi_ddc_clk.common,
+	&mbus_clk.common,
+	&gpu_clk.common,
+};
+
+static const struct clk_hw *clk_parent_pll_audio[] = {
+	&pll_audio_base_clk.common.hw
+};
+
+/* We hardcode the divider to 1 for now */
+static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
+			    clk_parent_pll_audio,
+			    1, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
+			    clk_parent_pll_audio,
+			    2, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
+			    clk_parent_pll_audio,
+			    1, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
+			    clk_parent_pll_audio,
+			    1, 2, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HW(pll_periph0_2x_clk, "pll-periph0-2x",
+			   &pll_periph0_clk.common.hw,
+			   1, 2, 0);
+
+static struct clk_hw_onecell_data sun8i_h3_hw_clks = {
+	.hws	= {
+		[CLK_PLL_CPUX]		= &pll_cpux_clk.common.hw,
+		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
+		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
+		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
+		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
+		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
+		[CLK_PLL_VIDEO]		= &pll_video_clk.common.hw,
+		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
+		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
+		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
+		[CLK_PLL_PERIPH0_2X]	= &pll_periph0_2x_clk.hw,
+		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
+		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
+		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
+		[CLK_CPUX]		= &cpux_clk.common.hw,
+		[CLK_AXI]		= &axi_clk.common.hw,
+		[CLK_AHB1]		= &ahb1_clk.common.hw,
+		[CLK_APB1]		= &apb1_clk.common.hw,
+		[CLK_APB2]		= &apb2_clk.common.hw,
+		[CLK_AHB2]		= &ahb2_clk.common.hw,
+		[CLK_BUS_CE]		= &bus_ce_clk.common.hw,
+		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
+		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
+		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
+		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
+		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
+		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
+		[CLK_BUS_EMAC]		= &bus_emac_clk.common.hw,
+		[CLK_BUS_TS]		= &bus_ts_clk.common.hw,
+		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
+		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
+		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
+		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
+		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
+		[CLK_BUS_EHCI1]		= &bus_ehci1_clk.common.hw,
+		[CLK_BUS_EHCI2]		= &bus_ehci2_clk.common.hw,
+		[CLK_BUS_EHCI3]		= &bus_ehci3_clk.common.hw,
+		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
+		[CLK_BUS_OHCI1]		= &bus_ohci1_clk.common.hw,
+		[CLK_BUS_OHCI2]		= &bus_ohci2_clk.common.hw,
+		[CLK_BUS_OHCI3]		= &bus_ohci3_clk.common.hw,
+		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
+		[CLK_BUS_TCON0]		= &bus_tcon0_clk.common.hw,
+		[CLK_BUS_TCON1]		= &bus_tcon1_clk.common.hw,
+		[CLK_BUS_DEINTERLACE]	= &bus_deinterlace_clk.common.hw,
+		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
+		[CLK_BUS_TVE]		= &bus_tve_clk.common.hw,
+		[CLK_BUS_HDMI]		= &bus_hdmi_clk.common.hw,
+		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
+		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
+		[CLK_BUS_MSGBOX]	= &bus_msgbox_clk.common.hw,
+		[CLK_BUS_SPINLOCK]	= &bus_spinlock_clk.common.hw,
+		[CLK_BUS_CODEC]		= &bus_codec_clk.common.hw,
+		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
+		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
+		[CLK_BUS_THS]		= &bus_ths_clk.common.hw,
+		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
+		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
+		[CLK_BUS_I2S2]		= &bus_i2s2_clk.common.hw,
+		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
+		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
+		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
+		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
+		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
+		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
+		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
+		[CLK_BUS_SCR0]		= &bus_scr0_clk.common.hw,
+		[CLK_BUS_EPHY]		= &bus_ephy_clk.common.hw,
+		[CLK_BUS_DBG]		= &bus_dbg_clk.common.hw,
+		[CLK_THS]		= &ths_clk.common.hw,
+		[CLK_NAND]		= &nand_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
+		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
+		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
+		[CLK_MMC2]		= &mmc2_clk.common.hw,
+		[CLK_MMC2_SAMPLE]	= &mmc2_sample_clk.common.hw,
+		[CLK_MMC2_OUTPUT]	= &mmc2_output_clk.common.hw,
+		[CLK_TS]		= &ts_clk.common.hw,
+		[CLK_CE]		= &ce_clk.common.hw,
+		[CLK_SPI0]		= &spi0_clk.common.hw,
+		[CLK_SPI1]		= &spi1_clk.common.hw,
+		[CLK_I2S0]		= &i2s0_clk.common.hw,
+		[CLK_I2S1]		= &i2s1_clk.common.hw,
+		[CLK_I2S2]		= &i2s2_clk.common.hw,
+		[CLK_SPDIF]		= &spdif_clk.common.hw,
+		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
+		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
+		[CLK_USB_PHY2]		= &usb_phy2_clk.common.hw,
+		[CLK_USB_PHY3]		= &usb_phy3_clk.common.hw,
+		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
+		[CLK_USB_OHCI1]		= &usb_ohci1_clk.common.hw,
+		[CLK_USB_OHCI2]		= &usb_ohci2_clk.common.hw,
+		[CLK_USB_OHCI3]		= &usb_ohci3_clk.common.hw,
+		[CLK_DRAM]		= &dram_clk.common.hw,
+		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
+		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
+		[CLK_DRAM_DEINTERLACE]	= &dram_deinterlace_clk.common.hw,
+		[CLK_DRAM_TS]		= &dram_ts_clk.common.hw,
+		[CLK_DE]		= &de_clk.common.hw,
+		[CLK_TCON0]		= &tcon_clk.common.hw,
+		[CLK_TVE]		= &tve_clk.common.hw,
+		[CLK_DEINTERLACE]	= &deinterlace_clk.common.hw,
+		[CLK_CSI_MISC]		= &csi_misc_clk.common.hw,
+		[CLK_CSI_SCLK]		= &csi_sclk_clk.common.hw,
+		[CLK_CSI_MCLK]		= &csi_mclk_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_AC_DIG]		= &ac_dig_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+		[CLK_HDMI]		= &hdmi_clk.common.hw,
+		[CLK_HDMI_DDC]		= &hdmi_ddc_clk.common.hw,
+		[CLK_MBUS]		= &mbus_clk.common.hw,
+		[CLK_GPU]		= &gpu_clk.common.hw,
+	},
+	.num	= CLK_NUMBER_H3,
+};
+
+static struct clk_hw_onecell_data sun50i_h5_hw_clks = {
+	.hws	= {
+		[CLK_PLL_CPUX]		= &pll_cpux_clk.common.hw,
+		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
+		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
+		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
+		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
+		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
+		[CLK_PLL_VIDEO]		= &pll_video_clk.common.hw,
+		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
+		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
+		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
+		[CLK_PLL_PERIPH0_2X]	= &pll_periph0_2x_clk.hw,
+		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
+		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
+		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
+		[CLK_CPUX]		= &cpux_clk.common.hw,
+		[CLK_AXI]		= &axi_clk.common.hw,
+		[CLK_AHB1]		= &ahb1_clk.common.hw,
+		[CLK_APB1]		= &apb1_clk.common.hw,
+		[CLK_APB2]		= &apb2_clk.common.hw,
+		[CLK_AHB2]		= &ahb2_clk.common.hw,
+		[CLK_BUS_CE]		= &bus_ce_clk.common.hw,
+		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
+		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
+		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
+		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
+		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
+		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
+		[CLK_BUS_EMAC]		= &bus_emac_clk.common.hw,
+		[CLK_BUS_TS]		= &bus_ts_clk.common.hw,
+		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
+		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
+		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
+		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
+		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
+		[CLK_BUS_EHCI1]		= &bus_ehci1_clk.common.hw,
+		[CLK_BUS_EHCI2]		= &bus_ehci2_clk.common.hw,
+		[CLK_BUS_EHCI3]		= &bus_ehci3_clk.common.hw,
+		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
+		[CLK_BUS_OHCI1]		= &bus_ohci1_clk.common.hw,
+		[CLK_BUS_OHCI2]		= &bus_ohci2_clk.common.hw,
+		[CLK_BUS_OHCI3]		= &bus_ohci3_clk.common.hw,
+		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
+		[CLK_BUS_TCON0]		= &bus_tcon0_clk.common.hw,
+		[CLK_BUS_TCON1]		= &bus_tcon1_clk.common.hw,
+		[CLK_BUS_DEINTERLACE]	= &bus_deinterlace_clk.common.hw,
+		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
+		[CLK_BUS_TVE]		= &bus_tve_clk.common.hw,
+		[CLK_BUS_HDMI]		= &bus_hdmi_clk.common.hw,
+		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
+		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
+		[CLK_BUS_MSGBOX]	= &bus_msgbox_clk.common.hw,
+		[CLK_BUS_SPINLOCK]	= &bus_spinlock_clk.common.hw,
+		[CLK_BUS_CODEC]		= &bus_codec_clk.common.hw,
+		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
+		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
+		[CLK_BUS_THS]		= &bus_ths_clk.common.hw,
+		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
+		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
+		[CLK_BUS_I2S2]		= &bus_i2s2_clk.common.hw,
+		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
+		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
+		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
+		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
+		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
+		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
+		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
+		[CLK_BUS_SCR0]		= &bus_scr0_clk.common.hw,
+		[CLK_BUS_SCR1]		= &bus_scr1_clk.common.hw,
+		[CLK_BUS_EPHY]		= &bus_ephy_clk.common.hw,
+		[CLK_BUS_DBG]		= &bus_dbg_clk.common.hw,
+		[CLK_THS]		= &ths_clk.common.hw,
+		[CLK_NAND]		= &nand_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC2]		= &mmc2_clk.common.hw,
+		[CLK_TS]		= &ts_clk.common.hw,
+		[CLK_CE]		= &ce_clk.common.hw,
+		[CLK_SPI0]		= &spi0_clk.common.hw,
+		[CLK_SPI1]		= &spi1_clk.common.hw,
+		[CLK_I2S0]		= &i2s0_clk.common.hw,
+		[CLK_I2S1]		= &i2s1_clk.common.hw,
+		[CLK_I2S2]		= &i2s2_clk.common.hw,
+		[CLK_SPDIF]		= &spdif_clk.common.hw,
+		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
+		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
+		[CLK_USB_PHY2]		= &usb_phy2_clk.common.hw,
+		[CLK_USB_PHY3]		= &usb_phy3_clk.common.hw,
+		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
+		[CLK_USB_OHCI1]		= &usb_ohci1_clk.common.hw,
+		[CLK_USB_OHCI2]		= &usb_ohci2_clk.common.hw,
+		[CLK_USB_OHCI3]		= &usb_ohci3_clk.common.hw,
+		[CLK_DRAM]		= &dram_clk.common.hw,
+		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
+		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
+		[CLK_DRAM_DEINTERLACE]	= &dram_deinterlace_clk.common.hw,
+		[CLK_DRAM_TS]		= &dram_ts_clk.common.hw,
+		[CLK_DE]		= &de_clk.common.hw,
+		[CLK_TCON0]		= &tcon_clk.common.hw,
+		[CLK_TVE]		= &tve_clk.common.hw,
+		[CLK_DEINTERLACE]	= &deinterlace_clk.common.hw,
+		[CLK_CSI_MISC]		= &csi_misc_clk.common.hw,
+		[CLK_CSI_SCLK]		= &csi_sclk_clk.common.hw,
+		[CLK_CSI_MCLK]		= &csi_mclk_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_AC_DIG]		= &ac_dig_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+		[CLK_HDMI]		= &hdmi_clk.common.hw,
+		[CLK_HDMI_DDC]		= &hdmi_ddc_clk.common.hw,
+		[CLK_MBUS]		= &mbus_clk.common.hw,
+		[CLK_GPU]		= &gpu_clk.common.hw,
+	},
+	.num	= CLK_NUMBER_H5,
+};
+
+static struct ccu_reset_map sun8i_h3_ccu_resets[] = {
+	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
+	[RST_USB_PHY1]		=  { 0x0cc, BIT(1) },
+	[RST_USB_PHY2]		=  { 0x0cc, BIT(2) },
+	[RST_USB_PHY3]		=  { 0x0cc, BIT(3) },
+
+	[RST_MBUS]		=  { 0x0fc, BIT(31) },
+
+	[RST_BUS_CE]		=  { 0x2c0, BIT(5) },
+	[RST_BUS_DMA]		=  { 0x2c0, BIT(6) },
+	[RST_BUS_MMC0]		=  { 0x2c0, BIT(8) },
+	[RST_BUS_MMC1]		=  { 0x2c0, BIT(9) },
+	[RST_BUS_MMC2]		=  { 0x2c0, BIT(10) },
+	[RST_BUS_NAND]		=  { 0x2c0, BIT(13) },
+	[RST_BUS_DRAM]		=  { 0x2c0, BIT(14) },
+	[RST_BUS_EMAC]		=  { 0x2c0, BIT(17) },
+	[RST_BUS_TS]		=  { 0x2c0, BIT(18) },
+	[RST_BUS_HSTIMER]	=  { 0x2c0, BIT(19) },
+	[RST_BUS_SPI0]		=  { 0x2c0, BIT(20) },
+	[RST_BUS_SPI1]		=  { 0x2c0, BIT(21) },
+	[RST_BUS_OTG]		=  { 0x2c0, BIT(23) },
+	[RST_BUS_EHCI0]		=  { 0x2c0, BIT(24) },
+	[RST_BUS_EHCI1]		=  { 0x2c0, BIT(25) },
+	[RST_BUS_EHCI2]		=  { 0x2c0, BIT(26) },
+	[RST_BUS_EHCI3]		=  { 0x2c0, BIT(27) },
+	[RST_BUS_OHCI0]		=  { 0x2c0, BIT(28) },
+	[RST_BUS_OHCI1]		=  { 0x2c0, BIT(29) },
+	[RST_BUS_OHCI2]		=  { 0x2c0, BIT(30) },
+	[RST_BUS_OHCI3]		=  { 0x2c0, BIT(31) },
+
+	[RST_BUS_VE]		=  { 0x2c4, BIT(0) },
+	[RST_BUS_TCON0]		=  { 0x2c4, BIT(3) },
+	[RST_BUS_TCON1]		=  { 0x2c4, BIT(4) },
+	[RST_BUS_DEINTERLACE]	=  { 0x2c4, BIT(5) },
+	[RST_BUS_CSI]		=  { 0x2c4, BIT(8) },
+	[RST_BUS_TVE]		=  { 0x2c4, BIT(9) },
+	[RST_BUS_HDMI0]		=  { 0x2c4, BIT(10) },
+	[RST_BUS_HDMI1]		=  { 0x2c4, BIT(11) },
+	[RST_BUS_DE]		=  { 0x2c4, BIT(12) },
+	[RST_BUS_GPU]		=  { 0x2c4, BIT(20) },
+	[RST_BUS_MSGBOX]	=  { 0x2c4, BIT(21) },
+	[RST_BUS_SPINLOCK]	=  { 0x2c4, BIT(22) },
+	[RST_BUS_DBG]		=  { 0x2c4, BIT(31) },
+
+	[RST_BUS_EPHY]		=  { 0x2c8, BIT(2) },
+
+	[RST_BUS_CODEC]		=  { 0x2d0, BIT(0) },
+	[RST_BUS_SPDIF]		=  { 0x2d0, BIT(1) },
+	[RST_BUS_THS]		=  { 0x2d0, BIT(8) },
+	[RST_BUS_I2S0]		=  { 0x2d0, BIT(12) },
+	[RST_BUS_I2S1]		=  { 0x2d0, BIT(13) },
+	[RST_BUS_I2S2]		=  { 0x2d0, BIT(14) },
+
+	[RST_BUS_I2C0]		=  { 0x2d8, BIT(0) },
+	[RST_BUS_I2C1]		=  { 0x2d8, BIT(1) },
+	[RST_BUS_I2C2]		=  { 0x2d8, BIT(2) },
+	[RST_BUS_UART0]		=  { 0x2d8, BIT(16) },
+	[RST_BUS_UART1]		=  { 0x2d8, BIT(17) },
+	[RST_BUS_UART2]		=  { 0x2d8, BIT(18) },
+	[RST_BUS_UART3]		=  { 0x2d8, BIT(19) },
+	[RST_BUS_SCR0]		=  { 0x2d8, BIT(20) },
+};
+
+static struct ccu_reset_map sun50i_h5_ccu_resets[] = {
+	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
+	[RST_USB_PHY1]		=  { 0x0cc, BIT(1) },
+	[RST_USB_PHY2]		=  { 0x0cc, BIT(2) },
+	[RST_USB_PHY3]		=  { 0x0cc, BIT(3) },
+
+	[RST_MBUS]		=  { 0x0fc, BIT(31) },
+
+	[RST_BUS_CE]		=  { 0x2c0, BIT(5) },
+	[RST_BUS_DMA]		=  { 0x2c0, BIT(6) },
+	[RST_BUS_MMC0]		=  { 0x2c0, BIT(8) },
+	[RST_BUS_MMC1]		=  { 0x2c0, BIT(9) },
+	[RST_BUS_MMC2]		=  { 0x2c0, BIT(10) },
+	[RST_BUS_NAND]		=  { 0x2c0, BIT(13) },
+	[RST_BUS_DRAM]		=  { 0x2c0, BIT(14) },
+	[RST_BUS_EMAC]		=  { 0x2c0, BIT(17) },
+	[RST_BUS_TS]		=  { 0x2c0, BIT(18) },
+	[RST_BUS_HSTIMER]	=  { 0x2c0, BIT(19) },
+	[RST_BUS_SPI0]		=  { 0x2c0, BIT(20) },
+	[RST_BUS_SPI1]		=  { 0x2c0, BIT(21) },
+	[RST_BUS_OTG]		=  { 0x2c0, BIT(23) },
+	[RST_BUS_EHCI0]		=  { 0x2c0, BIT(24) },
+	[RST_BUS_EHCI1]		=  { 0x2c0, BIT(25) },
+	[RST_BUS_EHCI2]		=  { 0x2c0, BIT(26) },
+	[RST_BUS_EHCI3]		=  { 0x2c0, BIT(27) },
+	[RST_BUS_OHCI0]		=  { 0x2c0, BIT(28) },
+	[RST_BUS_OHCI1]		=  { 0x2c0, BIT(29) },
+	[RST_BUS_OHCI2]		=  { 0x2c0, BIT(30) },
+	[RST_BUS_OHCI3]		=  { 0x2c0, BIT(31) },
+
+	[RST_BUS_VE]		=  { 0x2c4, BIT(0) },
+	[RST_BUS_TCON0]		=  { 0x2c4, BIT(3) },
+	[RST_BUS_TCON1]		=  { 0x2c4, BIT(4) },
+	[RST_BUS_DEINTERLACE]	=  { 0x2c4, BIT(5) },
+	[RST_BUS_CSI]		=  { 0x2c4, BIT(8) },
+	[RST_BUS_TVE]		=  { 0x2c4, BIT(9) },
+	[RST_BUS_HDMI0]		=  { 0x2c4, BIT(10) },
+	[RST_BUS_HDMI1]		=  { 0x2c4, BIT(11) },
+	[RST_BUS_DE]		=  { 0x2c4, BIT(12) },
+	[RST_BUS_GPU]		=  { 0x2c4, BIT(20) },
+	[RST_BUS_MSGBOX]	=  { 0x2c4, BIT(21) },
+	[RST_BUS_SPINLOCK]	=  { 0x2c4, BIT(22) },
+	[RST_BUS_DBG]		=  { 0x2c4, BIT(31) },
+
+	[RST_BUS_EPHY]		=  { 0x2c8, BIT(2) },
+
+	[RST_BUS_CODEC]		=  { 0x2d0, BIT(0) },
+	[RST_BUS_SPDIF]		=  { 0x2d0, BIT(1) },
+	[RST_BUS_THS]		=  { 0x2d0, BIT(8) },
+	[RST_BUS_I2S0]		=  { 0x2d0, BIT(12) },
+	[RST_BUS_I2S1]		=  { 0x2d0, BIT(13) },
+	[RST_BUS_I2S2]		=  { 0x2d0, BIT(14) },
+
+	[RST_BUS_I2C0]		=  { 0x2d8, BIT(0) },
+	[RST_BUS_I2C1]		=  { 0x2d8, BIT(1) },
+	[RST_BUS_I2C2]		=  { 0x2d8, BIT(2) },
+	[RST_BUS_UART0]		=  { 0x2d8, BIT(16) },
+	[RST_BUS_UART1]		=  { 0x2d8, BIT(17) },
+	[RST_BUS_UART2]		=  { 0x2d8, BIT(18) },
+	[RST_BUS_UART3]		=  { 0x2d8, BIT(19) },
+	[RST_BUS_SCR0]		=  { 0x2d8, BIT(20) },
+	[RST_BUS_SCR1]		=  { 0x2d8, BIT(20) },
+};
+
+static const struct sunxi_ccu_desc sun8i_h3_ccu_desc = {
+	.ccu_clks	= sun8i_h3_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun8i_h3_ccu_clks),
+
+	.hw_clks	= &sun8i_h3_hw_clks,
+
+	.resets		= sun8i_h3_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun8i_h3_ccu_resets),
+};
+
+static const struct sunxi_ccu_desc sun50i_h5_ccu_desc = {
+	.ccu_clks	= sun50i_h5_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun50i_h5_ccu_clks),
+
+	.hw_clks	= &sun50i_h5_hw_clks,
+
+	.resets		= sun50i_h5_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun50i_h5_ccu_resets),
+};
+
+static struct ccu_pll_nb sun8i_h3_pll_cpu_nb = {
+	.common	= &pll_cpux_clk.common,
+	/* copy from pll_cpux_clk */
+	.enable	= BIT(31),
+	.lock	= BIT(28),
+};
+
+static struct ccu_mux_nb sun8i_h3_cpu_nb = {
+	.common		= &cpux_clk.common,
+	.cm		= &cpux_clk.mux,
+	.delay_us	= 1, /* > 8 clock cycles at 24 MHz */
+	.bypass_index	= 1, /* index of 24 MHz oscillator */
+};
+
+static void __init sunxi_h3_h5_ccu_init(struct device_node *node,
+					const struct sunxi_ccu_desc *desc)
+{
+	void __iomem *reg;
+	u32 val;
+
+	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
+	if (IS_ERR(reg)) {
+		pr_err("%pOF: Could not map the clock registers\n", node);
+		return;
+	}
+
+	/* Force the PLL-Audio-1x divider to 1 */
+	val = readl(reg + SUN8I_H3_PLL_AUDIO_REG);
+	val &= ~GENMASK(19, 16);
+	writel(val | (0 << 16), reg + SUN8I_H3_PLL_AUDIO_REG);
+
+	of_sunxi_ccu_probe(node, reg, desc);
+
+	/* Gate then ungate PLL CPU after any rate changes */
+	ccu_pll_notifier_register(&sun8i_h3_pll_cpu_nb);
+
+	/* Reparent CPU during PLL CPU rate changes */
+	ccu_mux_notifier_register(pll_cpux_clk.common.hw.clk,
+				  &sun8i_h3_cpu_nb);
+}
+
+static void __init sun8i_h3_ccu_setup(struct device_node *node)
+{
+	sunxi_h3_h5_ccu_init(node, &sun8i_h3_ccu_desc);
+}
+CLK_OF_DECLARE(sun8i_h3_ccu, "allwinner,sun8i-h3-ccu",
+	       sun8i_h3_ccu_setup);
+
+static void __init sun50i_h5_ccu_setup(struct device_node *node)
+{
+	sunxi_h3_h5_ccu_init(node, &sun50i_h5_ccu_desc);
+}
+CLK_OF_DECLARE(sun50i_h5_ccu, "allwinner,sun50i-h5-ccu",
+	       sun50i_h5_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/sun8i-h3-ccu.h b/drivers/clk/sunxi-ng/sun8i-h3-ccu.h
new file mode 100644
index 000000000000..d8c38447e11b
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun8i-h3-ccu.h
@@ -0,0 +1,54 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright 2016 Maxime Ripard
+ *
+ * Maxime Ripard <maxime.ripard@free-electrons.com>
+ */
+
+#ifndef _CCU_SUN8I_H3_H_
+#define _CCU_SUN8I_H3_H_
+
+#include <dt-bindings/clock/sun8i-h3-ccu.h>
+#include <dt-bindings/reset/sun8i-h3-ccu.h>
+
+#define CLK_PLL_CPUX		0
+#define CLK_PLL_AUDIO_BASE	1
+#define CLK_PLL_AUDIO		2
+#define CLK_PLL_AUDIO_2X	3
+#define CLK_PLL_AUDIO_4X	4
+#define CLK_PLL_AUDIO_8X	5
+
+/* PLL_VIDEO is exported */
+
+#define CLK_PLL_VE		7
+#define CLK_PLL_DDR		8
+
+/* PLL_PERIPH0 exported for PRCM */
+
+#define CLK_PLL_PERIPH0_2X	10
+#define CLK_PLL_GPU		11
+#define CLK_PLL_PERIPH1		12
+#define CLK_PLL_DE		13
+
+/* The CPUX clock is exported */
+
+#define CLK_AXI			15
+#define CLK_AHB1		16
+#define CLK_APB1		17
+#define CLK_APB2		18
+#define CLK_AHB2		19
+
+/* All the bus gates are exported */
+
+/* The first bunch of module clocks are exported */
+
+#define CLK_DRAM		96
+
+/* All the DRAM gates are exported */
+
+/* Some more module clocks are exported */
+
+#define CLK_NUMBER_H3		(CLK_GPU + 1)
+#define CLK_NUMBER_H5		(CLK_BUS_SCR1 + 1)
+
+#endif /* _CCU_SUN8I_H3_H_ */
diff --git a/drivers/clk/sunxi-ng/sun8i-r-ccu.c b/drivers/clk/sunxi-ng/sun8i-r-ccu.c
new file mode 100644
index 000000000000..eb623b01df58
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun8i-r-ccu.c
@@ -0,0 +1,290 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (c) 2016 Icenowy Zheng <icenowy@aosc.xyz>
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/of_address.h>
+#include <linux/platform_device.h>
+
+#include "ccu_common.h"
+#include "ccu_reset.h"
+
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_mp.h"
+#include "ccu_nm.h"
+
+#include "sun8i-r-ccu.h"
+
+static const struct clk_parent_data ar100_parents[] = {
+	{ .fw_name = "losc" },
+	{ .fw_name = "hosc" },
+	{ .fw_name = "pll-periph" },
+	{ .fw_name = "iosc" },
+};
+
+static const struct ccu_mux_var_prediv ar100_predivs[] = {
+	{ .index = 2, .shift = 8, .width = 5 },
+};
+
+static struct ccu_div ar100_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
+
+	.mux		= {
+		.shift	= 16,
+		.width	= 2,
+
+		.var_predivs	= ar100_predivs,
+		.n_var_predivs	= ARRAY_SIZE(ar100_predivs),
+	},
+
+	.common		= {
+		.reg		= 0x00,
+		.features	= CCU_FEATURE_VARIABLE_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS_DATA("ar100",
+							   ar100_parents,
+							   &ccu_div_ops,
+							   0),
+	},
+};
+
+static CLK_FIXED_FACTOR_HW(ahb0_clk, "ahb0", &ar100_clk.common.hw, 1, 1, 0);
+
+static SUNXI_CCU_M(apb0_clk, "apb0", "ahb0", 0x0c, 0, 2, 0);
+
+/*
+ * Define the parent as an array that can be reused to save space
+ * instead of having compound literals for each gate. Also have it
+ * non-const so we can change it on the A83T.
+ */
+static const struct clk_hw *apb0_gate_parent[] = { &apb0_clk.common.hw };
+static SUNXI_CCU_GATE_HWS(apb0_pio_clk,		"apb0-pio",
+			  apb0_gate_parent, 0x28, BIT(0), 0);
+static SUNXI_CCU_GATE_HWS(apb0_ir_clk,		"apb0-ir",
+			  apb0_gate_parent, 0x28, BIT(1), 0);
+static SUNXI_CCU_GATE_HWS(apb0_timer_clk,	"apb0-timer",
+			  apb0_gate_parent, 0x28, BIT(2), 0);
+static SUNXI_CCU_GATE_HWS(apb0_rsb_clk,		"apb0-rsb",
+			  apb0_gate_parent, 0x28, BIT(3), 0);
+static SUNXI_CCU_GATE_HWS(apb0_uart_clk,	"apb0-uart",
+			  apb0_gate_parent, 0x28, BIT(4), 0);
+static SUNXI_CCU_GATE_HWS(apb0_i2c_clk,		"apb0-i2c",
+			  apb0_gate_parent, 0x28, BIT(6), 0);
+static SUNXI_CCU_GATE_HWS(apb0_twd_clk,		"apb0-twd",
+			  apb0_gate_parent, 0x28, BIT(7), 0);
+
+static const char * const r_mod0_default_parents[] = { "osc32k", "osc24M" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(ir_clk, "ir",
+				  r_mod0_default_parents, 0x54,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static const struct clk_parent_data a83t_r_mod0_parents[] = {
+	{ .fw_name = "iosc" },
+	{ .fw_name = "hosc" },
+};
+static const struct ccu_mux_fixed_prediv a83t_ir_predivs[] = {
+	{ .index = 0, .div = 16 },
+};
+static struct ccu_mp a83t_ir_clk = {
+	.enable	= BIT(31),
+
+	.m	= _SUNXI_CCU_DIV(0, 4),
+	.p	= _SUNXI_CCU_DIV(16, 2),
+
+	.mux	= {
+		.shift	= 24,
+		.width	= 2,
+		.fixed_predivs	= a83t_ir_predivs,
+		.n_predivs	= ARRAY_SIZE(a83t_ir_predivs),
+	},
+
+	.common		= {
+		.reg		= 0x54,
+		.features	= CCU_FEATURE_VARIABLE_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS_DATA("ir",
+							   a83t_r_mod0_parents,
+							   &ccu_mp_ops,
+							   0),
+	},
+};
+
+static struct ccu_common *sun8i_a83t_r_ccu_clks[] = {
+	&ar100_clk.common,
+	&apb0_clk.common,
+	&apb0_pio_clk.common,
+	&apb0_ir_clk.common,
+	&apb0_timer_clk.common,
+	&apb0_rsb_clk.common,
+	&apb0_uart_clk.common,
+	&apb0_i2c_clk.common,
+	&apb0_twd_clk.common,
+	&a83t_ir_clk.common,
+};
+
+static struct ccu_common *sun8i_h3_r_ccu_clks[] = {
+	&ar100_clk.common,
+	&apb0_clk.common,
+	&apb0_pio_clk.common,
+	&apb0_ir_clk.common,
+	&apb0_timer_clk.common,
+	&apb0_uart_clk.common,
+	&apb0_i2c_clk.common,
+	&apb0_twd_clk.common,
+	&ir_clk.common,
+};
+
+static struct ccu_common *sun50i_a64_r_ccu_clks[] = {
+	&ar100_clk.common,
+	&apb0_clk.common,
+	&apb0_pio_clk.common,
+	&apb0_ir_clk.common,
+	&apb0_timer_clk.common,
+	&apb0_rsb_clk.common,
+	&apb0_uart_clk.common,
+	&apb0_i2c_clk.common,
+	&apb0_twd_clk.common,
+	&ir_clk.common,
+};
+
+static struct clk_hw_onecell_data sun8i_a83t_r_hw_clks = {
+	.hws	= {
+		[CLK_AR100]		= &ar100_clk.common.hw,
+		[CLK_AHB0]		= &ahb0_clk.hw,
+		[CLK_APB0]		= &apb0_clk.common.hw,
+		[CLK_APB0_PIO]		= &apb0_pio_clk.common.hw,
+		[CLK_APB0_IR]		= &apb0_ir_clk.common.hw,
+		[CLK_APB0_TIMER]	= &apb0_timer_clk.common.hw,
+		[CLK_APB0_RSB]		= &apb0_rsb_clk.common.hw,
+		[CLK_APB0_UART]		= &apb0_uart_clk.common.hw,
+		[CLK_APB0_I2C]		= &apb0_i2c_clk.common.hw,
+		[CLK_APB0_TWD]		= &apb0_twd_clk.common.hw,
+		[CLK_IR]		= &a83t_ir_clk.common.hw,
+	},
+	.num	= CLK_NUMBER,
+};
+
+static struct clk_hw_onecell_data sun8i_h3_r_hw_clks = {
+	.hws	= {
+		[CLK_AR100]		= &ar100_clk.common.hw,
+		[CLK_AHB0]		= &ahb0_clk.hw,
+		[CLK_APB0]		= &apb0_clk.common.hw,
+		[CLK_APB0_PIO]		= &apb0_pio_clk.common.hw,
+		[CLK_APB0_IR]		= &apb0_ir_clk.common.hw,
+		[CLK_APB0_TIMER]	= &apb0_timer_clk.common.hw,
+		[CLK_APB0_UART]		= &apb0_uart_clk.common.hw,
+		[CLK_APB0_I2C]		= &apb0_i2c_clk.common.hw,
+		[CLK_APB0_TWD]		= &apb0_twd_clk.common.hw,
+		[CLK_IR]		= &ir_clk.common.hw,
+	},
+	.num	= CLK_NUMBER,
+};
+
+static struct clk_hw_onecell_data sun50i_a64_r_hw_clks = {
+	.hws	= {
+		[CLK_AR100]		= &ar100_clk.common.hw,
+		[CLK_AHB0]		= &ahb0_clk.hw,
+		[CLK_APB0]		= &apb0_clk.common.hw,
+		[CLK_APB0_PIO]		= &apb0_pio_clk.common.hw,
+		[CLK_APB0_IR]		= &apb0_ir_clk.common.hw,
+		[CLK_APB0_TIMER]	= &apb0_timer_clk.common.hw,
+		[CLK_APB0_RSB]		= &apb0_rsb_clk.common.hw,
+		[CLK_APB0_UART]		= &apb0_uart_clk.common.hw,
+		[CLK_APB0_I2C]		= &apb0_i2c_clk.common.hw,
+		[CLK_APB0_TWD]		= &apb0_twd_clk.common.hw,
+		[CLK_IR]		= &ir_clk.common.hw,
+	},
+	.num	= CLK_NUMBER,
+};
+
+static struct ccu_reset_map sun8i_a83t_r_ccu_resets[] = {
+	[RST_APB0_IR]		=  { 0xb0, BIT(1) },
+	[RST_APB0_TIMER]	=  { 0xb0, BIT(2) },
+	[RST_APB0_RSB]		=  { 0xb0, BIT(3) },
+	[RST_APB0_UART]		=  { 0xb0, BIT(4) },
+	[RST_APB0_I2C]		=  { 0xb0, BIT(6) },
+};
+
+static struct ccu_reset_map sun8i_h3_r_ccu_resets[] = {
+	[RST_APB0_IR]		=  { 0xb0, BIT(1) },
+	[RST_APB0_TIMER]	=  { 0xb0, BIT(2) },
+	[RST_APB0_UART]		=  { 0xb0, BIT(4) },
+	[RST_APB0_I2C]		=  { 0xb0, BIT(6) },
+};
+
+static struct ccu_reset_map sun50i_a64_r_ccu_resets[] = {
+	[RST_APB0_IR]		=  { 0xb0, BIT(1) },
+	[RST_APB0_TIMER]	=  { 0xb0, BIT(2) },
+	[RST_APB0_RSB]		=  { 0xb0, BIT(3) },
+	[RST_APB0_UART]		=  { 0xb0, BIT(4) },
+	[RST_APB0_I2C]		=  { 0xb0, BIT(6) },
+};
+
+static const struct sunxi_ccu_desc sun8i_a83t_r_ccu_desc = {
+	.ccu_clks	= sun8i_a83t_r_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun8i_a83t_r_ccu_clks),
+
+	.hw_clks	= &sun8i_a83t_r_hw_clks,
+
+	.resets		= sun8i_a83t_r_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun8i_a83t_r_ccu_resets),
+};
+
+static const struct sunxi_ccu_desc sun8i_h3_r_ccu_desc = {
+	.ccu_clks	= sun8i_h3_r_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun8i_h3_r_ccu_clks),
+
+	.hw_clks	= &sun8i_h3_r_hw_clks,
+
+	.resets		= sun8i_h3_r_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun8i_h3_r_ccu_resets),
+};
+
+static const struct sunxi_ccu_desc sun50i_a64_r_ccu_desc = {
+	.ccu_clks	= sun50i_a64_r_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun50i_a64_r_ccu_clks),
+
+	.hw_clks	= &sun50i_a64_r_hw_clks,
+
+	.resets		= sun50i_a64_r_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun50i_a64_r_ccu_resets),
+};
+
+static void __init sunxi_r_ccu_init(struct device_node *node,
+				    const struct sunxi_ccu_desc *desc)
+{
+	void __iomem *reg;
+
+	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
+	if (IS_ERR(reg)) {
+		pr_err("%pOF: Could not map the clock registers\n", node);
+		return;
+	}
+
+	of_sunxi_ccu_probe(node, reg, desc);
+}
+
+static void __init sun8i_a83t_r_ccu_setup(struct device_node *node)
+{
+	sunxi_r_ccu_init(node, &sun8i_a83t_r_ccu_desc);
+}
+CLK_OF_DECLARE(sun8i_a83t_r_ccu, "allwinner,sun8i-a83t-r-ccu",
+	       sun8i_a83t_r_ccu_setup);
+
+static void __init sun8i_h3_r_ccu_setup(struct device_node *node)
+{
+	sunxi_r_ccu_init(node, &sun8i_h3_r_ccu_desc);
+}
+CLK_OF_DECLARE(sun8i_h3_r_ccu, "allwinner,sun8i-h3-r-ccu",
+	       sun8i_h3_r_ccu_setup);
+
+static void __init sun50i_a64_r_ccu_setup(struct device_node *node)
+{
+	sunxi_r_ccu_init(node, &sun50i_a64_r_ccu_desc);
+}
+CLK_OF_DECLARE(sun50i_a64_r_ccu, "allwinner,sun50i-a64-r-ccu",
+	       sun50i_a64_r_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/sun8i-r-ccu.h b/drivers/clk/sunxi-ng/sun8i-r-ccu.h
new file mode 100644
index 000000000000..39c72d9276cb
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun8i-r-ccu.h
@@ -0,0 +1,18 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright 2016 Icenowy <icenowy@aosc.xyz>
+ */
+
+#ifndef _CCU_SUN8I_R_H
+#define _CCU_SUN8I_R_H
+
+#include <dt-bindings/clock/sun8i-r-ccu.h>
+#include <dt-bindings/reset/sun8i-r-ccu.h>
+
+/* AHB/APB bus clocks are not exported */
+#define CLK_AHB0	1
+#define CLK_APB0	2
+
+#define CLK_NUMBER	(CLK_IR + 1)
+
+#endif /* _CCU_SUN8I_R_H */
diff --git a/drivers/clk/sunxi-ng/sun8i-r40-ccu.c b/drivers/clk/sunxi-ng/sun8i-r40-ccu.c
new file mode 100644
index 000000000000..7347b65a5051
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun8i-r40-ccu.c
@@ -0,0 +1,1376 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (c) 2017 Icenowy Zheng <icenowy@aosc.io>
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/io.h>
+#include <linux/platform_device.h>
+#include <linux/regmap.h>
+
+#include "ccu_common.h"
+#include "ccu_reset.h"
+
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_mp.h"
+#include "ccu_mult.h"
+#include "ccu_nk.h"
+#include "ccu_nkm.h"
+#include "ccu_nkmp.h"
+#include "ccu_nm.h"
+#include "ccu_phase.h"
+
+#include "sun8i-r40-ccu.h"
+
+/* TODO: The result of N*K is required to be in [10, 88] range. */
+static struct ccu_nkmp pll_cpu_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT(8, 5),
+	.k		= _SUNXI_CCU_MULT(4, 2),
+	.m		= _SUNXI_CCU_DIV(0, 2),
+	.p		= _SUNXI_CCU_DIV_MAX(16, 2, 4),
+	.common		= {
+		.reg		= 0x000,
+		.hw.init	= CLK_HW_INIT("pll-cpu",
+					      "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+/*
+ * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
+ * the base (2x, 4x and 8x), and one variable divider (the one true
+ * pll audio).
+ *
+ * With sigma-delta modulation for fractional-N on the audio PLL,
+ * we have to use specific dividers. This means the variable divider
+ * can no longer be used, as the audio codec requests the exact clock
+ * rates we support through this mechanism. So we now hard code the
+ * variable divider to 1. This means the clock rates will no longer
+ * match the clock names.
+ */
+#define SUN8I_R40_PLL_AUDIO_REG	0x008
+
+static struct ccu_sdm_setting pll_audio_sdm_table[] = {
+	{ .rate = 22579200, .pattern = 0xc0010d84, .m = 8, .n = 7 },
+	{ .rate = 24576000, .pattern = 0xc000ac02, .m = 14, .n = 14 },
+};
+
+static SUNXI_CCU_NM_WITH_SDM_GATE_LOCK(pll_audio_base_clk, "pll-audio-base",
+				       "osc24M", 0x008,
+				       8, 7,	/* N */
+				       0, 5,	/* M */
+				       pll_audio_sdm_table, BIT(24),
+				       0x284, BIT(31),
+				       BIT(31),	/* gate */
+				       BIT(28),	/* lock */
+				       CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK_MIN_MAX(pll_video0_clk, "pll-video0",
+						"osc24M", 0x0010,
+						192000000,  /* Minimum rate */
+						1008000000, /* Maximum rate */
+						8, 7,       /* N */
+						0, 4,       /* M */
+						BIT(24),    /* frac enable */
+						BIT(25),    /* frac select */
+						270000000,  /* frac rate 0 */
+						297000000,  /* frac rate 1 */
+						BIT(31),    /* gate */
+						BIT(28),    /* lock */
+						CLK_SET_RATE_UNGATE);
+
+/* TODO: The result of N/M is required to be in [8, 25] range. */
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_ve_clk, "pll-ve",
+					"osc24M", 0x0018,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+/* TODO: The result of N*K is required to be in [10, 77] range. */
+static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_ddr0_clk, "pll-ddr0",
+				    "osc24M", 0x020,
+				    8, 5,	/* N */
+				    4, 2,	/* K */
+				    0, 2,	/* M */
+				    BIT(31),	/* gate */
+				    BIT(28),	/* lock */
+				    CLK_SET_RATE_UNGATE);
+
+/* TODO: The result of N*K is required to be in [21, 58] range. */
+static struct ccu_nk pll_periph0_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT(8, 5),
+	.k		= _SUNXI_CCU_MULT(4, 2),
+	.fixed_post_div	= 2,
+	.common		= {
+		.reg		= 0x028,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-periph0", "osc24M",
+					      &ccu_nk_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static struct ccu_div pll_periph0_sata_clk = {
+	.enable		= BIT(24),
+	.div		= _SUNXI_CCU_DIV(0, 2),
+	/*
+	 * The formula of pll-periph0 (1x) is 24MHz*N*K/2, and the formula
+	 * of pll-periph0-sata is 24MHz*N*K/M/6, so the postdiv here is
+	 * 6/2 = 3.
+	 */
+	.fixed_post_div	= 3,
+	.common		= {
+		.reg		= 0x028,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-periph0-sata",
+					      "pll-periph0",
+					      &ccu_div_ops, 0),
+	},
+};
+
+/* TODO: The result of N*K is required to be in [21, 58] range. */
+static struct ccu_nk pll_periph1_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT(8, 5),
+	.k		= _SUNXI_CCU_MULT(4, 2),
+	.fixed_post_div	= 2,
+	.common		= {
+		.reg		= 0x02c,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-periph1", "osc24M",
+					      &ccu_nk_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK_MIN_MAX(pll_video1_clk, "pll-video1",
+						"osc24M", 0x030,
+						192000000,  /* Minimum rate */
+						1008000000, /* Maximum rate */
+						8, 7,       /* N */
+						0, 4,       /* M */
+						BIT(24),    /* frac enable */
+						BIT(25),    /* frac select */
+						270000000,  /* frac rate 0 */
+						297000000,  /* frac rate 1 */
+						BIT(31),    /* gate */
+						BIT(28),    /* lock */
+						CLK_SET_RATE_UNGATE);
+
+static struct ccu_nkm pll_sata_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.n		= _SUNXI_CCU_MULT(8, 5),
+	.k		= _SUNXI_CCU_MULT(4, 2),
+	.m		= _SUNXI_CCU_DIV(0, 2),
+	.fixed_post_div	= 6,
+	.common		= {
+		.reg		= 0x034,
+		.features	= CCU_FEATURE_FIXED_POSTDIV,
+		.hw.init	= CLK_HW_INIT("pll-sata", "osc24M",
+					      &ccu_nkm_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static const char * const pll_sata_out_parents[] = { "pll-sata",
+						     "pll-periph0-sata" };
+static SUNXI_CCU_MUX_WITH_GATE(pll_sata_out_clk, "pll-sata-out",
+			       pll_sata_out_parents, 0x034,
+			       30, 1,	/* mux */
+			       BIT(14),	/* gate */
+			       CLK_SET_RATE_PARENT);
+
+/* TODO: The result of N/M is required to be in [8, 25] range. */
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_gpu_clk, "pll-gpu",
+					"osc24M", 0x038,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+/*
+ * The MIPI PLL has 2 modes: "MIPI" and "HDMI".
+ *
+ * The MIPI mode is a standard NKM-style clock. The HDMI mode is an
+ * integer / fractional clock with switchable multipliers and dividers.
+ * This is not supported here. We hardcode the PLL to MIPI mode.
+ *
+ * TODO: In the MIPI mode, M/N is required to be equal or lesser than 3,
+ * which cannot be implemented now.
+ */
+#define SUN8I_R40_PLL_MIPI_REG	0x040
+
+static const char * const pll_mipi_parents[] = { "pll-video0" };
+static struct ccu_nkm pll_mipi_clk = {
+	.enable	= BIT(31) | BIT(23) | BIT(22),
+	.lock	= BIT(28),
+	.n	= _SUNXI_CCU_MULT(8, 4),
+	.k	= _SUNXI_CCU_MULT_MIN(4, 2, 2),
+	.m	= _SUNXI_CCU_DIV(0, 4),
+	.mux	= _SUNXI_CCU_MUX(21, 1),
+	.common	= {
+		.reg		= 0x040,
+		.hw.init	= CLK_HW_INIT_PARENTS("pll-mipi",
+						      pll_mipi_parents,
+						      &ccu_nkm_ops,
+						      CLK_SET_RATE_UNGATE)
+	},
+};
+
+/* TODO: The result of N/M is required to be in [8, 25] range. */
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_de_clk, "pll-de",
+					"osc24M", 0x048,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+/* TODO: The N factor is required to be in [16, 75] range. */
+static SUNXI_CCU_NM_WITH_GATE_LOCK(pll_ddr1_clk, "pll-ddr1",
+				   "osc24M", 0x04c,
+				   8, 7,	/* N */
+				   0, 2,	/* M */
+				   BIT(31),	/* gate */
+				   BIT(28),	/* lock */
+				   CLK_SET_RATE_UNGATE);
+
+static const char * const cpu_parents[] = { "osc32k", "osc24M",
+					     "pll-cpu", "pll-cpu" };
+static SUNXI_CCU_MUX(cpu_clk, "cpu", cpu_parents,
+		     0x050, 16, 2, CLK_IS_CRITICAL | CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M(axi_clk, "axi", "cpu", 0x050, 0, 2, 0);
+
+static const char * const ahb1_parents[] = { "osc32k", "osc24M",
+					     "axi", "pll-periph0" };
+static const struct ccu_mux_var_prediv ahb1_predivs[] = {
+	{ .index = 3, .shift = 6, .width = 2 },
+};
+static struct ccu_div ahb1_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
+
+	.mux		= {
+		.shift	= 12,
+		.width	= 2,
+
+		.var_predivs	= ahb1_predivs,
+		.n_var_predivs	= ARRAY_SIZE(ahb1_predivs),
+	},
+
+	.common		= {
+		.reg		= 0x054,
+		.features	= CCU_FEATURE_VARIABLE_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("ahb1",
+						      ahb1_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static struct clk_div_table apb1_div_table[] = {
+	{ .val = 0, .div = 2 },
+	{ .val = 1, .div = 2 },
+	{ .val = 2, .div = 4 },
+	{ .val = 3, .div = 8 },
+	{ /* Sentinel */ },
+};
+static SUNXI_CCU_DIV_TABLE(apb1_clk, "apb1", "ahb1",
+			   0x054, 8, 2, apb1_div_table, 0);
+
+static const char * const apb2_parents[] = { "osc32k", "osc24M",
+					     "pll-periph0-2x",
+					     "pll-periph0-2x" };
+static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", apb2_parents, 0x058,
+			     0, 5,	/* M */
+			     16, 2,	/* P */
+			     24, 2,	/* mux */
+			     0);
+
+static SUNXI_CCU_GATE(bus_mipi_dsi_clk,	"bus-mipi-dsi",	"ahb1",
+		      0x060, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_ce_clk,	"bus-ce",	"ahb1",
+		      0x060, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_dma_clk,	"bus-dma",	"ahb1",
+		      0x060, BIT(6), 0);
+static SUNXI_CCU_GATE(bus_mmc0_clk,	"bus-mmc0",	"ahb1",
+		      0x060, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_mmc1_clk,	"bus-mmc1",	"ahb1",
+		      0x060, BIT(9), 0);
+static SUNXI_CCU_GATE(bus_mmc2_clk,	"bus-mmc2",	"ahb1",
+		      0x060, BIT(10), 0);
+static SUNXI_CCU_GATE(bus_mmc3_clk,	"bus-mmc3",	"ahb1",
+		      0x060, BIT(11), 0);
+static SUNXI_CCU_GATE(bus_nand_clk,	"bus-nand",	"ahb1",
+		      0x060, BIT(13), 0);
+static SUNXI_CCU_GATE(bus_dram_clk,	"bus-dram",	"ahb1",
+		      0x060, BIT(14), 0);
+static SUNXI_CCU_GATE(bus_emac_clk,	"bus-emac",	"ahb1",
+		      0x060, BIT(17), 0);
+static SUNXI_CCU_GATE(bus_ts_clk,	"bus-ts",	"ahb1",
+		      0x060, BIT(18), 0);
+static SUNXI_CCU_GATE(bus_hstimer_clk,	"bus-hstimer",	"ahb1",
+		      0x060, BIT(19), 0);
+static SUNXI_CCU_GATE(bus_spi0_clk,	"bus-spi0",	"ahb1",
+		      0x060, BIT(20), 0);
+static SUNXI_CCU_GATE(bus_spi1_clk,	"bus-spi1",	"ahb1",
+		      0x060, BIT(21), 0);
+static SUNXI_CCU_GATE(bus_spi2_clk,	"bus-spi2",	"ahb1",
+		      0x060, BIT(22), 0);
+static SUNXI_CCU_GATE(bus_spi3_clk,	"bus-spi3",	"ahb1",
+		      0x060, BIT(23), 0);
+static SUNXI_CCU_GATE(bus_sata_clk,	"bus-sata",	"ahb1",
+		      0x060, BIT(24), 0);
+static SUNXI_CCU_GATE(bus_otg_clk,	"bus-otg",	"ahb1",
+		      0x060, BIT(25), 0);
+static SUNXI_CCU_GATE(bus_ehci0_clk,	"bus-ehci0",	"ahb1",
+		      0x060, BIT(26), 0);
+static SUNXI_CCU_GATE(bus_ehci1_clk,	"bus-ehci1",	"ahb1",
+		      0x060, BIT(27), 0);
+static SUNXI_CCU_GATE(bus_ehci2_clk,	"bus-ehci2",	"ahb1",
+		      0x060, BIT(28), 0);
+static SUNXI_CCU_GATE(bus_ohci0_clk,	"bus-ohci0",	"ahb1",
+		      0x060, BIT(29), 0);
+static SUNXI_CCU_GATE(bus_ohci1_clk,	"bus-ohci1",	"ahb1",
+		      0x060, BIT(30), 0);
+static SUNXI_CCU_GATE(bus_ohci2_clk,	"bus-ohci2",	"ahb1",
+		      0x060, BIT(31), 0);
+
+static SUNXI_CCU_GATE(bus_ve_clk,	"bus-ve",	"ahb1",
+		      0x064, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_mp_clk,	"bus-mp",	"ahb1",
+		      0x064, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_deinterlace_clk,	"bus-deinterlace",	"ahb1",
+		      0x064, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_csi0_clk,	"bus-csi0",	"ahb1",
+		      0x064, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_csi1_clk,	"bus-csi1",	"ahb1",
+		      0x064, BIT(9), 0);
+static SUNXI_CCU_GATE(bus_hdmi0_clk,	"bus-hdmi0",	"ahb1",
+		      0x064, BIT(10), 0);
+static SUNXI_CCU_GATE(bus_hdmi1_clk,	"bus-hdmi1",	"ahb1",
+		      0x064, BIT(11), 0);
+static SUNXI_CCU_GATE(bus_de_clk,	"bus-de",	"ahb1",
+		      0x064, BIT(12), 0);
+static SUNXI_CCU_GATE(bus_tve0_clk,	"bus-tve0",	"ahb1",
+		      0x064, BIT(13), 0);
+static SUNXI_CCU_GATE(bus_tve1_clk,	"bus-tve1",	"ahb1",
+		      0x064, BIT(14), 0);
+static SUNXI_CCU_GATE(bus_tve_top_clk,	"bus-tve-top",	"ahb1",
+		      0x064, BIT(15), 0);
+static SUNXI_CCU_GATE(bus_gmac_clk,	"bus-gmac",	"ahb1",
+		      0x064, BIT(17), 0);
+static SUNXI_CCU_GATE(bus_gpu_clk,	"bus-gpu",	"ahb1",
+		      0x064, BIT(20), 0);
+static SUNXI_CCU_GATE(bus_tvd0_clk,	"bus-tvd0",	"ahb1",
+		      0x064, BIT(21), 0);
+static SUNXI_CCU_GATE(bus_tvd1_clk,	"bus-tvd1",	"ahb1",
+		      0x064, BIT(22), 0);
+static SUNXI_CCU_GATE(bus_tvd2_clk,	"bus-tvd2",	"ahb1",
+		      0x064, BIT(23), 0);
+static SUNXI_CCU_GATE(bus_tvd3_clk,	"bus-tvd3",	"ahb1",
+		      0x064, BIT(24), 0);
+static SUNXI_CCU_GATE(bus_tvd_top_clk,	"bus-tvd-top",	"ahb1",
+		      0x064, BIT(25), 0);
+static SUNXI_CCU_GATE(bus_tcon_lcd0_clk,	"bus-tcon-lcd0",	"ahb1",
+		      0x064, BIT(26), 0);
+static SUNXI_CCU_GATE(bus_tcon_lcd1_clk,	"bus-tcon-lcd1",	"ahb1",
+		      0x064, BIT(27), 0);
+static SUNXI_CCU_GATE(bus_tcon_tv0_clk,	"bus-tcon-tv0",	"ahb1",
+		      0x064, BIT(28), 0);
+static SUNXI_CCU_GATE(bus_tcon_tv1_clk,	"bus-tcon-tv1",	"ahb1",
+		      0x064, BIT(29), 0);
+static SUNXI_CCU_GATE(bus_tcon_top_clk,	"bus-tcon-top",	"ahb1",
+		      0x064, BIT(30), 0);
+
+static SUNXI_CCU_GATE(bus_codec_clk,	"bus-codec",	"apb1",
+		      0x068, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_spdif_clk,	"bus-spdif",	"apb1",
+		      0x068, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_ac97_clk,	"bus-ac97",	"apb1",
+		      0x068, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_pio_clk,	"bus-pio",	"apb1",
+		      0x068, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_ir0_clk,	"bus-ir0",	"apb1",
+		      0x068, BIT(6), 0);
+static SUNXI_CCU_GATE(bus_ir1_clk,	"bus-ir1",	"apb1",
+		      0x068, BIT(7), 0);
+static SUNXI_CCU_GATE(bus_ths_clk,	"bus-ths",	"apb1",
+		      0x068, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_keypad_clk,	"bus-keypad",	"apb1",
+		      0x068, BIT(10), 0);
+static SUNXI_CCU_GATE(bus_i2s0_clk,	"bus-i2s0",	"apb1",
+		      0x068, BIT(12), 0);
+static SUNXI_CCU_GATE(bus_i2s1_clk,	"bus-i2s1",	"apb1",
+		      0x068, BIT(13), 0);
+static SUNXI_CCU_GATE(bus_i2s2_clk,	"bus-i2s2",	"apb1",
+		      0x068, BIT(14), 0);
+
+static SUNXI_CCU_GATE(bus_i2c0_clk,	"bus-i2c0",	"apb2",
+		      0x06c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_i2c1_clk,	"bus-i2c1",	"apb2",
+		      0x06c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_i2c2_clk,	"bus-i2c2",	"apb2",
+		      0x06c, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_i2c3_clk,	"bus-i2c3",	"apb2",
+		      0x06c, BIT(3), 0);
+/*
+ * In datasheet here's "Reserved", however the gate exists in BSP soucre
+ * code.
+ */
+static SUNXI_CCU_GATE(bus_can_clk,	"bus-can",	"apb2",
+		      0x06c, BIT(4), 0);
+static SUNXI_CCU_GATE(bus_scr_clk,	"bus-scr",	"apb2",
+		      0x06c, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_ps20_clk,	"bus-ps20",	"apb2",
+		      0x06c, BIT(6), 0);
+static SUNXI_CCU_GATE(bus_ps21_clk,	"bus-ps21",	"apb2",
+		      0x06c, BIT(7), 0);
+static SUNXI_CCU_GATE(bus_i2c4_clk,	"bus-i2c4",	"apb2",
+		      0x06c, BIT(15), 0);
+static SUNXI_CCU_GATE(bus_uart0_clk,	"bus-uart0",	"apb2",
+		      0x06c, BIT(16), 0);
+static SUNXI_CCU_GATE(bus_uart1_clk,	"bus-uart1",	"apb2",
+		      0x06c, BIT(17), 0);
+static SUNXI_CCU_GATE(bus_uart2_clk,	"bus-uart2",	"apb2",
+		      0x06c, BIT(18), 0);
+static SUNXI_CCU_GATE(bus_uart3_clk,	"bus-uart3",	"apb2",
+		      0x06c, BIT(19), 0);
+static SUNXI_CCU_GATE(bus_uart4_clk,	"bus-uart4",	"apb2",
+		      0x06c, BIT(20), 0);
+static SUNXI_CCU_GATE(bus_uart5_clk,	"bus-uart5",	"apb2",
+		      0x06c, BIT(21), 0);
+static SUNXI_CCU_GATE(bus_uart6_clk,	"bus-uart6",	"apb2",
+		      0x06c, BIT(22), 0);
+static SUNXI_CCU_GATE(bus_uart7_clk,	"bus-uart7",	"apb2",
+		      0x06c, BIT(23), 0);
+
+static SUNXI_CCU_GATE(bus_dbg_clk,	"bus-dbg",	"ahb1",
+		      0x070, BIT(7), 0);
+
+static const char * const ths_parents[] = { "osc24M" };
+static struct ccu_div ths_clk = {
+	.enable	= BIT(31),
+	.div	= _SUNXI_CCU_DIV_FLAGS(0, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux	= _SUNXI_CCU_MUX(24, 2),
+	.common	= {
+		.reg		= 0x074,
+		.hw.init	= CLK_HW_INIT_PARENTS("ths",
+						      ths_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static const char * const mod0_default_parents[] = { "osc24M", "pll-periph0",
+						     "pll-periph1" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand_clk, "nand", mod0_default_parents, 0x080,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents, 0x088,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents, 0x08c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents, 0x090,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc3_clk, "mmc3", mod0_default_parents, 0x094,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static const char * const ts_parents[] = { "osc24M", "pll-periph0", };
+static SUNXI_CCU_MP_WITH_MUX_GATE(ts_clk, "ts", ts_parents, 0x098,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 4,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static const char * const ce_parents[] = { "osc24M", "pll-periph0-2x",
+					   "pll-periph1-2x" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(ce_clk, "ce", ce_parents, 0x09c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents, 0x0a0,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents, 0x0a4,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi2_clk, "spi2", mod0_default_parents, 0x0a8,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi3_clk, "spi3", mod0_default_parents, 0x0ac,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static const char * const i2s_parents[] = { "pll-audio-8x", "pll-audio-4x",
+					    "pll-audio-2x", "pll-audio" };
+static SUNXI_CCU_MUX_WITH_GATE(i2s0_clk, "i2s0", i2s_parents,
+			       0x0b0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_MUX_WITH_GATE(i2s1_clk, "i2s1", i2s_parents,
+			       0x0b4, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_MUX_WITH_GATE(i2s2_clk, "i2s2", i2s_parents,
+			       0x0b8, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_MUX_WITH_GATE(ac97_clk, "ac97", i2s_parents,
+			       0x0bc, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_MUX_WITH_GATE(spdif_clk, "spdif", i2s_parents,
+			       0x0c0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static const char * const keypad_parents[] = { "osc24M", "osc32k" };
+static const u8 keypad_table[] = { 0, 2 };
+static struct ccu_mp keypad_clk = {
+	.enable	= BIT(31),
+	.m	= _SUNXI_CCU_DIV(0, 5),
+	.p	= _SUNXI_CCU_DIV(16, 2),
+	.mux	= _SUNXI_CCU_MUX_TABLE(24, 2, keypad_table),
+	.common	= {
+		.reg		= 0x0c4,
+		.hw.init	= CLK_HW_INIT_PARENTS("keypad",
+						      keypad_parents,
+						      &ccu_mp_ops,
+						      0),
+	}
+};
+
+static const char * const sata_parents[] = { "pll-sata-out", "sata-ext" };
+static SUNXI_CCU_MUX_WITH_GATE(sata_clk, "sata", sata_parents,
+			       0x0c8, 24, 1, BIT(31), CLK_SET_RATE_PARENT);
+
+/*
+ * There are 3 OHCI 12M clock source selection bits in this register.
+ * We will force them to 0 (12M divided from 48M).
+ */
+#define SUN8I_R40_USB_CLK_REG	0x0cc
+
+static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"osc24M",
+		      0x0cc, BIT(8), 0);
+static SUNXI_CCU_GATE(usb_phy1_clk,	"usb-phy1",	"osc24M",
+		      0x0cc, BIT(9), 0);
+static SUNXI_CCU_GATE(usb_phy2_clk,	"usb-phy2",	"osc24M",
+		      0x0cc, BIT(10), 0);
+static SUNXI_CCU_GATE(usb_ohci0_clk,	"usb-ohci0",	"osc12M",
+		      0x0cc, BIT(16), 0);
+static SUNXI_CCU_GATE(usb_ohci1_clk,	"usb-ohci1",	"osc12M",
+		      0x0cc, BIT(17), 0);
+static SUNXI_CCU_GATE(usb_ohci2_clk,	"usb-ohci2",	"osc12M",
+		      0x0cc, BIT(18), 0);
+
+static const char * const ir_parents[] = { "osc24M", "pll-periph0",
+					   "pll-periph1", "osc32k" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(ir0_clk, "ir0", ir_parents, 0x0d0,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(ir1_clk, "ir1", ir_parents, 0x0d4,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static const char * const dram_parents[] = { "pll-ddr0", "pll-ddr1" };
+static SUNXI_CCU_M_WITH_MUX(dram_clk, "dram", dram_parents,
+			    0x0f4, 0, 2, 20, 2, CLK_IS_CRITICAL);
+
+static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"dram",
+		      0x100, BIT(0), 0);
+static SUNXI_CCU_GATE(dram_csi0_clk,	"dram-csi0",	"dram",
+		      0x100, BIT(1), 0);
+static SUNXI_CCU_GATE(dram_csi1_clk,	"dram-csi1",	"dram",
+		      0x100, BIT(2), 0);
+static SUNXI_CCU_GATE(dram_ts_clk,	"dram-ts",	"dram",
+		      0x100, BIT(3), 0);
+static SUNXI_CCU_GATE(dram_tvd_clk,	"dram-tvd",	"dram",
+		      0x100, BIT(4), 0);
+static SUNXI_CCU_GATE(dram_mp_clk,	"dram-mp",	"dram",
+		      0x100, BIT(5), 0);
+static SUNXI_CCU_GATE(dram_deinterlace_clk,	"dram-deinterlace",	"dram",
+		      0x100, BIT(6), 0);
+
+static const char * const de_parents[] = { "pll-periph0-2x", "pll-de" };
+static SUNXI_CCU_M_WITH_MUX_GATE(de_clk, "de", de_parents,
+				 0x104, 0, 4, 24, 3, BIT(31),
+				 CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M_WITH_MUX_GATE(mp_clk, "mp", de_parents,
+				 0x108, 0, 4, 24, 3, BIT(31), 0);
+
+static const char * const tcon_parents[] = { "pll-video0", "pll-video1",
+					     "pll-video0-2x", "pll-video1-2x",
+					     "pll-mipi" };
+static SUNXI_CCU_MUX_WITH_GATE(tcon_lcd0_clk, "tcon-lcd0", tcon_parents,
+			       0x110, 24, 3, BIT(31), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_MUX_WITH_GATE(tcon_lcd1_clk, "tcon-lcd1", tcon_parents,
+			       0x114, 24, 3, BIT(31), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M_WITH_MUX_GATE(tcon_tv0_clk, "tcon-tv0", tcon_parents,
+				 0x118, 0, 4, 24, 3, BIT(31),
+				 CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M_WITH_MUX_GATE(tcon_tv1_clk, "tcon-tv1", tcon_parents,
+				 0x11c, 0, 4, 24, 3, BIT(31),
+				 CLK_SET_RATE_PARENT);
+
+static const char * const deinterlace_parents[] = { "pll-periph0",
+						    "pll-periph1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(deinterlace_clk, "deinterlace",
+				 deinterlace_parents, 0x124, 0, 4, 24, 3,
+				 BIT(31), 0);
+
+static const char * const csi_mclk_parents[] = { "osc24M", "pll-video1",
+						 "pll-periph1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(csi1_mclk_clk, "csi1-mclk", csi_mclk_parents,
+				 0x130, 0, 5, 8, 3, BIT(15), 0);
+
+static const char * const csi_sclk_parents[] = { "pll-periph0", "pll-periph1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(csi_sclk_clk, "csi-sclk", csi_sclk_parents,
+				 0x134, 16, 4, 24, 3, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(csi0_mclk_clk, "csi0-mclk", csi_mclk_parents,
+				 0x134, 0, 5, 8, 3, BIT(15), 0);
+
+static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve",
+			     0x13c, 16, 3, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(codec_clk,	"codec",	"pll-audio",
+		      0x140, BIT(31), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_GATE(avs_clk,		"avs",		"osc24M",
+		      0x144, BIT(31), 0);
+
+static const char * const hdmi_parents[] = { "pll-video0", "pll-video1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(hdmi_clk, "hdmi", hdmi_parents,
+				 0x150, 0, 4, 24, 2, BIT(31),
+				 CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(hdmi_slow_clk,	"hdmi-slow",	"osc24M",
+		      0x154, BIT(31), 0);
+
+/*
+ * In the SoC's user manual, the P factor is mentioned, but not used in
+ * the frequency formula.
+ *
+ * Here the factor is included, according to the BSP kernel source,
+ * which contains the P factor of this clock.
+ */
+static const char * const mbus_parents[] = { "osc24M", "pll-periph0-2x",
+					     "pll-ddr0" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents, 0x15c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  CLK_IS_CRITICAL);
+
+static const char * const dsi_dphy_parents[] = { "pll-video0", "pll-video1",
+						 "pll-periph0" };
+static SUNXI_CCU_M_WITH_MUX_GATE(dsi_dphy_clk, "dsi-dphy", dsi_dphy_parents,
+				 0x168, 0, 4, 8, 2, BIT(15), 0);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(tve0_clk, "tve0", tcon_parents,
+				 0x180, 0, 4, 24, 3, BIT(31), 0);
+static SUNXI_CCU_M_WITH_MUX_GATE(tve1_clk, "tve1", tcon_parents,
+				 0x184, 0, 4, 24, 3, BIT(31), 0);
+
+static const char * const tvd_parents[] = { "pll-video0", "pll-video1",
+					    "pll-video0-2x", "pll-video1-2x" };
+static SUNXI_CCU_M_WITH_MUX_GATE(tvd0_clk, "tvd0", tvd_parents,
+				 0x188, 0, 4, 24, 3, BIT(31), 0);
+static SUNXI_CCU_M_WITH_MUX_GATE(tvd1_clk, "tvd1", tvd_parents,
+				 0x18c, 0, 4, 24, 3, BIT(31), 0);
+static SUNXI_CCU_M_WITH_MUX_GATE(tvd2_clk, "tvd2", tvd_parents,
+				 0x190, 0, 4, 24, 3, BIT(31), 0);
+static SUNXI_CCU_M_WITH_MUX_GATE(tvd3_clk, "tvd3", tvd_parents,
+				 0x194, 0, 4, 24, 3, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_GATE(gpu_clk, "gpu", "pll-gpu",
+			     0x1a0, 0, 3, BIT(31), CLK_SET_RATE_PARENT);
+
+static const char * const out_parents[] = { "osc24M", "osc32k", "osc24M" };
+static const struct ccu_mux_fixed_prediv out_predivs[] = {
+	{ .index = 0, .div = 750, },
+};
+
+static struct ccu_mp outa_clk = {
+	.enable	= BIT(31),
+	.m	= _SUNXI_CCU_DIV(8, 5),
+	.p	= _SUNXI_CCU_DIV(20, 2),
+	.mux	= {
+		.shift		= 24,
+		.width		= 2,
+		.fixed_predivs	= out_predivs,
+		.n_predivs	= ARRAY_SIZE(out_predivs),
+	},
+	.common	= {
+		.reg		= 0x1f0,
+		.features	= CCU_FEATURE_FIXED_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("outa", out_parents,
+						      &ccu_mp_ops,
+						      CLK_SET_RATE_PARENT),
+	}
+};
+
+static struct ccu_mp outb_clk = {
+	.enable	= BIT(31),
+	.m	= _SUNXI_CCU_DIV(8, 5),
+	.p	= _SUNXI_CCU_DIV(20, 2),
+	.mux	= {
+		.shift		= 24,
+		.width		= 2,
+		.fixed_predivs	= out_predivs,
+		.n_predivs	= ARRAY_SIZE(out_predivs),
+	},
+	.common	= {
+		.reg		= 0x1f4,
+		.features	= CCU_FEATURE_FIXED_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("outb", out_parents,
+						      &ccu_mp_ops,
+						      CLK_SET_RATE_PARENT),
+	}
+};
+
+static struct ccu_common *sun8i_r40_ccu_clks[] = {
+	&pll_cpu_clk.common,
+	&pll_audio_base_clk.common,
+	&pll_video0_clk.common,
+	&pll_ve_clk.common,
+	&pll_ddr0_clk.common,
+	&pll_periph0_clk.common,
+	&pll_periph0_sata_clk.common,
+	&pll_periph1_clk.common,
+	&pll_video1_clk.common,
+	&pll_sata_clk.common,
+	&pll_sata_out_clk.common,
+	&pll_gpu_clk.common,
+	&pll_mipi_clk.common,
+	&pll_de_clk.common,
+	&pll_ddr1_clk.common,
+	&cpu_clk.common,
+	&axi_clk.common,
+	&ahb1_clk.common,
+	&apb1_clk.common,
+	&apb2_clk.common,
+	&bus_mipi_dsi_clk.common,
+	&bus_ce_clk.common,
+	&bus_dma_clk.common,
+	&bus_mmc0_clk.common,
+	&bus_mmc1_clk.common,
+	&bus_mmc2_clk.common,
+	&bus_mmc3_clk.common,
+	&bus_nand_clk.common,
+	&bus_dram_clk.common,
+	&bus_emac_clk.common,
+	&bus_ts_clk.common,
+	&bus_hstimer_clk.common,
+	&bus_spi0_clk.common,
+	&bus_spi1_clk.common,
+	&bus_spi2_clk.common,
+	&bus_spi3_clk.common,
+	&bus_sata_clk.common,
+	&bus_otg_clk.common,
+	&bus_ehci0_clk.common,
+	&bus_ehci1_clk.common,
+	&bus_ehci2_clk.common,
+	&bus_ohci0_clk.common,
+	&bus_ohci1_clk.common,
+	&bus_ohci2_clk.common,
+	&bus_ve_clk.common,
+	&bus_mp_clk.common,
+	&bus_deinterlace_clk.common,
+	&bus_csi0_clk.common,
+	&bus_csi1_clk.common,
+	&bus_hdmi0_clk.common,
+	&bus_hdmi1_clk.common,
+	&bus_de_clk.common,
+	&bus_tve0_clk.common,
+	&bus_tve1_clk.common,
+	&bus_tve_top_clk.common,
+	&bus_gmac_clk.common,
+	&bus_gpu_clk.common,
+	&bus_tvd0_clk.common,
+	&bus_tvd1_clk.common,
+	&bus_tvd2_clk.common,
+	&bus_tvd3_clk.common,
+	&bus_tvd_top_clk.common,
+	&bus_tcon_lcd0_clk.common,
+	&bus_tcon_lcd1_clk.common,
+	&bus_tcon_tv0_clk.common,
+	&bus_tcon_tv1_clk.common,
+	&bus_tcon_top_clk.common,
+	&bus_codec_clk.common,
+	&bus_spdif_clk.common,
+	&bus_ac97_clk.common,
+	&bus_pio_clk.common,
+	&bus_ir0_clk.common,
+	&bus_ir1_clk.common,
+	&bus_ths_clk.common,
+	&bus_keypad_clk.common,
+	&bus_i2s0_clk.common,
+	&bus_i2s1_clk.common,
+	&bus_i2s2_clk.common,
+	&bus_i2c0_clk.common,
+	&bus_i2c1_clk.common,
+	&bus_i2c2_clk.common,
+	&bus_i2c3_clk.common,
+	&bus_can_clk.common,
+	&bus_scr_clk.common,
+	&bus_ps20_clk.common,
+	&bus_ps21_clk.common,
+	&bus_i2c4_clk.common,
+	&bus_uart0_clk.common,
+	&bus_uart1_clk.common,
+	&bus_uart2_clk.common,
+	&bus_uart3_clk.common,
+	&bus_uart4_clk.common,
+	&bus_uart5_clk.common,
+	&bus_uart6_clk.common,
+	&bus_uart7_clk.common,
+	&bus_dbg_clk.common,
+	&ths_clk.common,
+	&nand_clk.common,
+	&mmc0_clk.common,
+	&mmc1_clk.common,
+	&mmc2_clk.common,
+	&mmc3_clk.common,
+	&ts_clk.common,
+	&ce_clk.common,
+	&spi0_clk.common,
+	&spi1_clk.common,
+	&spi2_clk.common,
+	&spi3_clk.common,
+	&i2s0_clk.common,
+	&i2s1_clk.common,
+	&i2s2_clk.common,
+	&ac97_clk.common,
+	&spdif_clk.common,
+	&keypad_clk.common,
+	&sata_clk.common,
+	&usb_phy0_clk.common,
+	&usb_phy1_clk.common,
+	&usb_phy2_clk.common,
+	&usb_ohci0_clk.common,
+	&usb_ohci1_clk.common,
+	&usb_ohci2_clk.common,
+	&ir0_clk.common,
+	&ir1_clk.common,
+	&dram_clk.common,
+	&dram_ve_clk.common,
+	&dram_csi0_clk.common,
+	&dram_csi1_clk.common,
+	&dram_ts_clk.common,
+	&dram_tvd_clk.common,
+	&dram_mp_clk.common,
+	&dram_deinterlace_clk.common,
+	&de_clk.common,
+	&mp_clk.common,
+	&tcon_lcd0_clk.common,
+	&tcon_lcd1_clk.common,
+	&tcon_tv0_clk.common,
+	&tcon_tv1_clk.common,
+	&deinterlace_clk.common,
+	&csi1_mclk_clk.common,
+	&csi_sclk_clk.common,
+	&csi0_mclk_clk.common,
+	&ve_clk.common,
+	&codec_clk.common,
+	&avs_clk.common,
+	&hdmi_clk.common,
+	&hdmi_slow_clk.common,
+	&mbus_clk.common,
+	&dsi_dphy_clk.common,
+	&tve0_clk.common,
+	&tve1_clk.common,
+	&tvd0_clk.common,
+	&tvd1_clk.common,
+	&tvd2_clk.common,
+	&tvd3_clk.common,
+	&gpu_clk.common,
+	&outa_clk.common,
+	&outb_clk.common,
+};
+
+/* Fixed Factor clocks */
+static CLK_FIXED_FACTOR_FW_NAME(osc12M_clk, "osc12M", "hosc", 2, 1, 0);
+
+static const struct clk_hw *clk_parent_pll_audio[] = {
+	&pll_audio_base_clk.common.hw
+};
+
+/* We hardcode the divider to 1 for now */
+static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
+			    clk_parent_pll_audio,
+			    1, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
+			    clk_parent_pll_audio,
+			    2, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
+			    clk_parent_pll_audio,
+			    1, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
+			    clk_parent_pll_audio,
+			    1, 2, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HW(pll_periph0_2x_clk, "pll-periph0-2x",
+			   &pll_periph0_clk.common.hw,
+			   1, 2, 0);
+static CLK_FIXED_FACTOR_HW(pll_periph1_2x_clk, "pll-periph1-2x",
+			   &pll_periph1_clk.common.hw,
+			   1, 2, 0);
+static CLK_FIXED_FACTOR_HW(pll_video0_2x_clk, "pll-video0-2x",
+			   &pll_video0_clk.common.hw,
+			   1, 2, 0);
+static CLK_FIXED_FACTOR_HW(pll_video1_2x_clk, "pll-video1-2x",
+			   &pll_video1_clk.common.hw,
+			   1, 2, 0);
+
+static struct clk_hw_onecell_data sun8i_r40_hw_clks = {
+	.hws	= {
+		[CLK_OSC_12M]		= &osc12M_clk.hw,
+		[CLK_PLL_CPU]		= &pll_cpu_clk.common.hw,
+		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
+		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
+		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
+		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
+		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
+		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
+		[CLK_PLL_VIDEO0_2X]	= &pll_video0_2x_clk.hw,
+		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
+		[CLK_PLL_DDR0]		= &pll_ddr0_clk.common.hw,
+		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
+		[CLK_PLL_PERIPH0_SATA]	= &pll_periph0_sata_clk.common.hw,
+		[CLK_PLL_PERIPH0_2X]	= &pll_periph0_2x_clk.hw,
+		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
+		[CLK_PLL_PERIPH1_2X]	= &pll_periph1_2x_clk.hw,
+		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
+		[CLK_PLL_VIDEO1_2X]	= &pll_video1_2x_clk.hw,
+		[CLK_PLL_SATA]		= &pll_sata_clk.common.hw,
+		[CLK_PLL_SATA_OUT]	= &pll_sata_out_clk.common.hw,
+		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
+		[CLK_PLL_MIPI]		= &pll_mipi_clk.common.hw,
+		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
+		[CLK_PLL_DDR1]		= &pll_ddr1_clk.common.hw,
+		[CLK_CPU]		= &cpu_clk.common.hw,
+		[CLK_AXI]		= &axi_clk.common.hw,
+		[CLK_AHB1]		= &ahb1_clk.common.hw,
+		[CLK_APB1]		= &apb1_clk.common.hw,
+		[CLK_APB2]		= &apb2_clk.common.hw,
+		[CLK_BUS_MIPI_DSI]	= &bus_mipi_dsi_clk.common.hw,
+		[CLK_BUS_CE]		= &bus_ce_clk.common.hw,
+		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
+		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
+		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
+		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
+		[CLK_BUS_MMC3]		= &bus_mmc3_clk.common.hw,
+		[CLK_BUS_NAND]		= &bus_nand_clk.common.hw,
+		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
+		[CLK_BUS_EMAC]		= &bus_emac_clk.common.hw,
+		[CLK_BUS_TS]		= &bus_ts_clk.common.hw,
+		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
+		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
+		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
+		[CLK_BUS_SPI2]		= &bus_spi2_clk.common.hw,
+		[CLK_BUS_SPI3]		= &bus_spi3_clk.common.hw,
+		[CLK_BUS_SATA]		= &bus_sata_clk.common.hw,
+		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
+		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
+		[CLK_BUS_EHCI1]		= &bus_ehci1_clk.common.hw,
+		[CLK_BUS_EHCI2]		= &bus_ehci2_clk.common.hw,
+		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
+		[CLK_BUS_OHCI1]		= &bus_ohci1_clk.common.hw,
+		[CLK_BUS_OHCI2]		= &bus_ohci2_clk.common.hw,
+		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
+		[CLK_BUS_MP]		= &bus_mp_clk.common.hw,
+		[CLK_BUS_DEINTERLACE]	= &bus_deinterlace_clk.common.hw,
+		[CLK_BUS_CSI0]		= &bus_csi0_clk.common.hw,
+		[CLK_BUS_CSI1]		= &bus_csi1_clk.common.hw,
+		[CLK_BUS_HDMI0]		= &bus_hdmi0_clk.common.hw,
+		[CLK_BUS_HDMI1]		= &bus_hdmi1_clk.common.hw,
+		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
+		[CLK_BUS_TVE0]		= &bus_tve0_clk.common.hw,
+		[CLK_BUS_TVE1]		= &bus_tve1_clk.common.hw,
+		[CLK_BUS_TVE_TOP]	= &bus_tve_top_clk.common.hw,
+		[CLK_BUS_GMAC]		= &bus_gmac_clk.common.hw,
+		[CLK_BUS_GPU]		= &bus_gpu_clk.common.hw,
+		[CLK_BUS_TVD0]		= &bus_tvd0_clk.common.hw,
+		[CLK_BUS_TVD1]		= &bus_tvd1_clk.common.hw,
+		[CLK_BUS_TVD2]		= &bus_tvd2_clk.common.hw,
+		[CLK_BUS_TVD3]		= &bus_tvd3_clk.common.hw,
+		[CLK_BUS_TVD_TOP]	= &bus_tvd_top_clk.common.hw,
+		[CLK_BUS_TCON_LCD0]	= &bus_tcon_lcd0_clk.common.hw,
+		[CLK_BUS_TCON_LCD1]	= &bus_tcon_lcd1_clk.common.hw,
+		[CLK_BUS_TCON_TV0]	= &bus_tcon_tv0_clk.common.hw,
+		[CLK_BUS_TCON_TV1]	= &bus_tcon_tv1_clk.common.hw,
+		[CLK_BUS_TCON_TOP]	= &bus_tcon_top_clk.common.hw,
+		[CLK_BUS_CODEC]		= &bus_codec_clk.common.hw,
+		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
+		[CLK_BUS_AC97]		= &bus_ac97_clk.common.hw,
+		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
+		[CLK_BUS_IR0]		= &bus_ir0_clk.common.hw,
+		[CLK_BUS_IR1]		= &bus_ir1_clk.common.hw,
+		[CLK_BUS_THS]		= &bus_ths_clk.common.hw,
+		[CLK_BUS_KEYPAD]	= &bus_keypad_clk.common.hw,
+		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
+		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
+		[CLK_BUS_I2S2]		= &bus_i2s2_clk.common.hw,
+		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
+		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
+		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
+		[CLK_BUS_I2C3]		= &bus_i2c3_clk.common.hw,
+		[CLK_BUS_CAN]		= &bus_can_clk.common.hw,
+		[CLK_BUS_SCR]		= &bus_scr_clk.common.hw,
+		[CLK_BUS_PS20]		= &bus_ps20_clk.common.hw,
+		[CLK_BUS_PS21]		= &bus_ps21_clk.common.hw,
+		[CLK_BUS_I2C4]		= &bus_i2c4_clk.common.hw,
+		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
+		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
+		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
+		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
+		[CLK_BUS_UART4]		= &bus_uart4_clk.common.hw,
+		[CLK_BUS_UART5]		= &bus_uart5_clk.common.hw,
+		[CLK_BUS_UART6]		= &bus_uart6_clk.common.hw,
+		[CLK_BUS_UART7]		= &bus_uart7_clk.common.hw,
+		[CLK_BUS_DBG]		= &bus_dbg_clk.common.hw,
+		[CLK_THS]		= &ths_clk.common.hw,
+		[CLK_NAND]		= &nand_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC2]		= &mmc2_clk.common.hw,
+		[CLK_MMC3]		= &mmc3_clk.common.hw,
+		[CLK_TS]		= &ts_clk.common.hw,
+		[CLK_CE]		= &ce_clk.common.hw,
+		[CLK_SPI0]		= &spi0_clk.common.hw,
+		[CLK_SPI1]		= &spi1_clk.common.hw,
+		[CLK_SPI2]		= &spi2_clk.common.hw,
+		[CLK_SPI3]		= &spi3_clk.common.hw,
+		[CLK_I2S0]		= &i2s0_clk.common.hw,
+		[CLK_I2S1]		= &i2s1_clk.common.hw,
+		[CLK_I2S2]		= &i2s2_clk.common.hw,
+		[CLK_AC97]		= &ac97_clk.common.hw,
+		[CLK_SPDIF]		= &spdif_clk.common.hw,
+		[CLK_KEYPAD]		= &keypad_clk.common.hw,
+		[CLK_SATA]		= &sata_clk.common.hw,
+		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
+		[CLK_USB_PHY1]		= &usb_phy1_clk.common.hw,
+		[CLK_USB_PHY2]		= &usb_phy2_clk.common.hw,
+		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
+		[CLK_USB_OHCI1]		= &usb_ohci1_clk.common.hw,
+		[CLK_USB_OHCI2]		= &usb_ohci2_clk.common.hw,
+		[CLK_IR0]		= &ir0_clk.common.hw,
+		[CLK_IR1]		= &ir1_clk.common.hw,
+		[CLK_DRAM]		= &dram_clk.common.hw,
+		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
+		[CLK_DRAM_CSI0]		= &dram_csi0_clk.common.hw,
+		[CLK_DRAM_CSI1]		= &dram_csi1_clk.common.hw,
+		[CLK_DRAM_TS]		= &dram_ts_clk.common.hw,
+		[CLK_DRAM_TVD]		= &dram_tvd_clk.common.hw,
+		[CLK_DRAM_MP]		= &dram_mp_clk.common.hw,
+		[CLK_DRAM_DEINTERLACE]	= &dram_deinterlace_clk.common.hw,
+		[CLK_DE]		= &de_clk.common.hw,
+		[CLK_MP]		= &mp_clk.common.hw,
+		[CLK_TCON_LCD0]		= &tcon_lcd0_clk.common.hw,
+		[CLK_TCON_LCD1]		= &tcon_lcd1_clk.common.hw,
+		[CLK_TCON_TV0]		= &tcon_tv0_clk.common.hw,
+		[CLK_TCON_TV1]		= &tcon_tv1_clk.common.hw,
+		[CLK_DEINTERLACE]	= &deinterlace_clk.common.hw,
+		[CLK_CSI1_MCLK]		= &csi1_mclk_clk.common.hw,
+		[CLK_CSI_SCLK]		= &csi_sclk_clk.common.hw,
+		[CLK_CSI0_MCLK]		= &csi0_mclk_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_CODEC]		= &codec_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+		[CLK_HDMI]		= &hdmi_clk.common.hw,
+		[CLK_HDMI_SLOW]		= &hdmi_slow_clk.common.hw,
+		[CLK_MBUS]		= &mbus_clk.common.hw,
+		[CLK_DSI_DPHY]		= &dsi_dphy_clk.common.hw,
+		[CLK_TVE0]		= &tve0_clk.common.hw,
+		[CLK_TVE1]		= &tve1_clk.common.hw,
+		[CLK_TVD0]		= &tvd0_clk.common.hw,
+		[CLK_TVD1]		= &tvd1_clk.common.hw,
+		[CLK_TVD2]		= &tvd2_clk.common.hw,
+		[CLK_TVD3]		= &tvd3_clk.common.hw,
+		[CLK_GPU]		= &gpu_clk.common.hw,
+		[CLK_OUTA]		= &outa_clk.common.hw,
+		[CLK_OUTB]		= &outb_clk.common.hw,
+	},
+	.num	= CLK_NUMBER,
+};
+
+static struct ccu_reset_map sun8i_r40_ccu_resets[] = {
+	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
+	[RST_USB_PHY1]		=  { 0x0cc, BIT(1) },
+	[RST_USB_PHY2]		=  { 0x0cc, BIT(2) },
+
+	[RST_DRAM]		=  { 0x0f4, BIT(31) },
+	[RST_MBUS]		=  { 0x0fc, BIT(31) },
+
+	[RST_BUS_MIPI_DSI]	=  { 0x2c0, BIT(1) },
+	[RST_BUS_CE]		=  { 0x2c0, BIT(5) },
+	[RST_BUS_DMA]		=  { 0x2c0, BIT(6) },
+	[RST_BUS_MMC0]		=  { 0x2c0, BIT(8) },
+	[RST_BUS_MMC1]		=  { 0x2c0, BIT(9) },
+	[RST_BUS_MMC2]		=  { 0x2c0, BIT(10) },
+	[RST_BUS_MMC3]		=  { 0x2c0, BIT(11) },
+	[RST_BUS_NAND]		=  { 0x2c0, BIT(13) },
+	[RST_BUS_DRAM]		=  { 0x2c0, BIT(14) },
+	[RST_BUS_EMAC]		=  { 0x2c0, BIT(17) },
+	[RST_BUS_TS]		=  { 0x2c0, BIT(18) },
+	[RST_BUS_HSTIMER]	=  { 0x2c0, BIT(19) },
+	[RST_BUS_SPI0]		=  { 0x2c0, BIT(20) },
+	[RST_BUS_SPI1]		=  { 0x2c0, BIT(21) },
+	[RST_BUS_SPI2]		=  { 0x2c0, BIT(22) },
+	[RST_BUS_SPI3]		=  { 0x2c0, BIT(23) },
+	[RST_BUS_SATA]		=  { 0x2c0, BIT(24) },
+	[RST_BUS_OTG]		=  { 0x2c0, BIT(25) },
+	[RST_BUS_EHCI0]		=  { 0x2c0, BIT(26) },
+	[RST_BUS_EHCI1]		=  { 0x2c0, BIT(27) },
+	[RST_BUS_EHCI2]		=  { 0x2c0, BIT(28) },
+	[RST_BUS_OHCI0]		=  { 0x2c0, BIT(29) },
+	[RST_BUS_OHCI1]		=  { 0x2c0, BIT(30) },
+	[RST_BUS_OHCI2]		=  { 0x2c0, BIT(31) },
+
+	[RST_BUS_VE]		=  { 0x2c4, BIT(0) },
+	[RST_BUS_MP]		=  { 0x2c4, BIT(2) },
+	[RST_BUS_DEINTERLACE]	=  { 0x2c4, BIT(5) },
+	[RST_BUS_CSI0]		=  { 0x2c4, BIT(8) },
+	[RST_BUS_CSI1]		=  { 0x2c4, BIT(9) },
+	[RST_BUS_HDMI0]		=  { 0x2c4, BIT(10) },
+	[RST_BUS_HDMI1]		=  { 0x2c4, BIT(11) },
+	[RST_BUS_DE]		=  { 0x2c4, BIT(12) },
+	[RST_BUS_TVE0]		=  { 0x2c4, BIT(13) },
+	[RST_BUS_TVE1]		=  { 0x2c4, BIT(14) },
+	[RST_BUS_TVE_TOP]	=  { 0x2c4, BIT(15) },
+	[RST_BUS_GMAC]		=  { 0x2c4, BIT(17) },
+	[RST_BUS_GPU]		=  { 0x2c4, BIT(20) },
+	[RST_BUS_TVD0]		=  { 0x2c4, BIT(21) },
+	[RST_BUS_TVD1]		=  { 0x2c4, BIT(22) },
+	[RST_BUS_TVD2]		=  { 0x2c4, BIT(23) },
+	[RST_BUS_TVD3]		=  { 0x2c4, BIT(24) },
+	[RST_BUS_TVD_TOP]	=  { 0x2c4, BIT(25) },
+	[RST_BUS_TCON_LCD0]	=  { 0x2c4, BIT(26) },
+	[RST_BUS_TCON_LCD1]	=  { 0x2c4, BIT(27) },
+	[RST_BUS_TCON_TV0]	=  { 0x2c4, BIT(28) },
+	[RST_BUS_TCON_TV1]	=  { 0x2c4, BIT(29) },
+	[RST_BUS_TCON_TOP]	=  { 0x2c4, BIT(30) },
+	[RST_BUS_DBG]		=  { 0x2c4, BIT(31) },
+
+	[RST_BUS_LVDS]		=  { 0x2c8, BIT(0) },
+
+	[RST_BUS_CODEC]		=  { 0x2d0, BIT(0) },
+	[RST_BUS_SPDIF]		=  { 0x2d0, BIT(1) },
+	[RST_BUS_AC97]		=  { 0x2d0, BIT(2) },
+	[RST_BUS_IR0]		=  { 0x2d0, BIT(6) },
+	[RST_BUS_IR1]		=  { 0x2d0, BIT(7) },
+	[RST_BUS_THS]		=  { 0x2d0, BIT(8) },
+	[RST_BUS_KEYPAD]	=  { 0x2d0, BIT(10) },
+	[RST_BUS_I2S0]		=  { 0x2d0, BIT(12) },
+	[RST_BUS_I2S1]		=  { 0x2d0, BIT(13) },
+	[RST_BUS_I2S2]		=  { 0x2d0, BIT(14) },
+
+	[RST_BUS_I2C0]		=  { 0x2d8, BIT(0) },
+	[RST_BUS_I2C1]		=  { 0x2d8, BIT(1) },
+	[RST_BUS_I2C2]		=  { 0x2d8, BIT(2) },
+	[RST_BUS_I2C3]		=  { 0x2d8, BIT(3) },
+	[RST_BUS_CAN]		=  { 0x2d8, BIT(4) },
+	[RST_BUS_SCR]		=  { 0x2d8, BIT(5) },
+	[RST_BUS_PS20]		=  { 0x2d8, BIT(6) },
+	[RST_BUS_PS21]		=  { 0x2d8, BIT(7) },
+	[RST_BUS_I2C4]		=  { 0x2d8, BIT(15) },
+	[RST_BUS_UART0]		=  { 0x2d8, BIT(16) },
+	[RST_BUS_UART1]		=  { 0x2d8, BIT(17) },
+	[RST_BUS_UART2]		=  { 0x2d8, BIT(18) },
+	[RST_BUS_UART3]		=  { 0x2d8, BIT(19) },
+	[RST_BUS_UART4]		=  { 0x2d8, BIT(20) },
+	[RST_BUS_UART5]		=  { 0x2d8, BIT(21) },
+	[RST_BUS_UART6]		=  { 0x2d8, BIT(22) },
+	[RST_BUS_UART7]		=  { 0x2d8, BIT(23) },
+};
+
+static const struct sunxi_ccu_desc sun8i_r40_ccu_desc = {
+	.ccu_clks	= sun8i_r40_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun8i_r40_ccu_clks),
+
+	.hw_clks	= &sun8i_r40_hw_clks,
+
+	.resets		= sun8i_r40_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun8i_r40_ccu_resets),
+};
+
+static struct ccu_pll_nb sun8i_r40_pll_cpu_nb = {
+	.common	= &pll_cpu_clk.common,
+	/* copy from pll_cpu_clk */
+	.enable	= BIT(31),
+	.lock	= BIT(28),
+};
+
+static struct ccu_mux_nb sun8i_r40_cpu_nb = {
+	.common		= &cpu_clk.common,
+	.cm		= &cpu_clk.mux,
+	.delay_us	= 1, /* > 8 clock cycles at 24 MHz */
+	.bypass_index	= 1, /* index of 24 MHz oscillator */
+};
+
+/*
+ * Add a regmap for the GMAC driver (dwmac-sun8i) to access the
+ * GMAC configuration register.
+ * Only this register is allowed to be written, in order to
+ * prevent overriding critical clock configuration.
+ */
+
+#define SUN8I_R40_GMAC_CFG_REG 0x164
+static bool sun8i_r40_ccu_regmap_accessible_reg(struct device *dev,
+						unsigned int reg)
+{
+	if (reg == SUN8I_R40_GMAC_CFG_REG)
+		return true;
+	return false;
+}
+
+static struct regmap_config sun8i_r40_ccu_regmap_config = {
+	.reg_bits	= 32,
+	.val_bits	= 32,
+	.reg_stride	= 4,
+	.max_register	= 0x320, /* PLL_LOCK_CTRL_REG */
+
+	/* other devices have no business accessing other registers */
+	.readable_reg	= sun8i_r40_ccu_regmap_accessible_reg,
+	.writeable_reg	= sun8i_r40_ccu_regmap_accessible_reg,
+};
+
+#define SUN8I_R40_SYS_32K_CLK_REG 0x310
+#define SUN8I_R40_SYS_32K_CLK_KEY (0x16AA << 16)
+
+static int sun8i_r40_ccu_probe(struct platform_device *pdev)
+{
+	struct resource *res;
+	struct regmap *regmap;
+	void __iomem *reg;
+	u32 val;
+	int ret;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	reg = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(reg))
+		return PTR_ERR(reg);
+
+	/* Force the PLL-Audio-1x divider to 1 */
+	val = readl(reg + SUN8I_R40_PLL_AUDIO_REG);
+	val &= ~GENMASK(19, 16);
+	writel(val | (0 << 16), reg + SUN8I_R40_PLL_AUDIO_REG);
+
+	/* Force PLL-MIPI to MIPI mode */
+	val = readl(reg + SUN8I_R40_PLL_MIPI_REG);
+	val &= ~BIT(16);
+	writel(val, reg + SUN8I_R40_PLL_MIPI_REG);
+
+	/* Force OHCI 12M parent to 12M divided from 48M */
+	val = readl(reg + SUN8I_R40_USB_CLK_REG);
+	val &= ~GENMASK(25, 20);
+	writel(val, reg + SUN8I_R40_USB_CLK_REG);
+
+	/*
+	 * Force SYS 32k (otherwise known as LOSC throughout the CCU)
+	 * clock parent to LOSC output from RTC module instead of the
+	 * CCU's internal RC oscillator divided output.
+	 */
+	writel(SUN8I_R40_SYS_32K_CLK_KEY | BIT(8),
+	       reg + SUN8I_R40_SYS_32K_CLK_REG);
+
+	regmap = devm_regmap_init_mmio(&pdev->dev, reg,
+				       &sun8i_r40_ccu_regmap_config);
+	if (IS_ERR(regmap))
+		return PTR_ERR(regmap);
+
+	ret = devm_sunxi_ccu_probe(&pdev->dev, reg, &sun8i_r40_ccu_desc);
+	if (ret)
+		return ret;
+
+	/* Gate then ungate PLL CPU after any rate changes */
+	ccu_pll_notifier_register(&sun8i_r40_pll_cpu_nb);
+
+	/* Reparent CPU during PLL CPU rate changes */
+	ccu_mux_notifier_register(pll_cpu_clk.common.hw.clk,
+				  &sun8i_r40_cpu_nb);
+
+	return 0;
+}
+
+static const struct of_device_id sun8i_r40_ccu_ids[] = {
+	{ .compatible = "allwinner,sun8i-r40-ccu" },
+	{ }
+};
+
+static struct platform_driver sun8i_r40_ccu_driver = {
+	.probe	= sun8i_r40_ccu_probe,
+	.driver	= {
+		.name	= "sun8i-r40-ccu",
+		.suppress_bind_attrs = true,
+		.of_match_table	= sun8i_r40_ccu_ids,
+	},
+};
+builtin_platform_driver(sun8i_r40_ccu_driver);
diff --git a/drivers/clk/sunxi-ng/sun8i-r40-ccu.h b/drivers/clk/sunxi-ng/sun8i-r40-ccu.h
new file mode 100644
index 000000000000..6f7071df8e1c
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun8i-r40-ccu.h
@@ -0,0 +1,60 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright 2017 Icenowy Zheng <icenowy@aosc.io>
+ */
+
+#ifndef _CCU_SUN8I_R40_H_
+#define _CCU_SUN8I_R40_H_
+
+#include <dt-bindings/clock/sun8i-r40-ccu.h>
+#include <dt-bindings/reset/sun8i-r40-ccu.h>
+
+#define CLK_OSC_12M		0
+#define CLK_PLL_CPU		1
+#define CLK_PLL_AUDIO_BASE	2
+#define CLK_PLL_AUDIO		3
+#define CLK_PLL_AUDIO_2X	4
+#define CLK_PLL_AUDIO_4X	5
+#define CLK_PLL_AUDIO_8X	6
+
+/* PLL_VIDEO0 is exported */
+
+#define CLK_PLL_VIDEO0_2X	8
+#define CLK_PLL_VE		9
+#define CLK_PLL_DDR0		10
+#define CLK_PLL_PERIPH0		11
+#define CLK_PLL_PERIPH0_SATA	12
+#define CLK_PLL_PERIPH0_2X	13
+#define CLK_PLL_PERIPH1		14
+#define CLK_PLL_PERIPH1_2X	15
+
+/* PLL_VIDEO1 is exported */
+
+#define CLK_PLL_VIDEO1_2X	17
+#define CLK_PLL_SATA		18
+#define CLK_PLL_SATA_OUT	19
+#define CLK_PLL_GPU		20
+#define CLK_PLL_MIPI		21
+#define CLK_PLL_DE		22
+#define CLK_PLL_DDR1		23
+
+/* The CPU clock is exported */
+
+#define CLK_AXI			25
+#define CLK_AHB1		26
+#define CLK_APB1		27
+#define CLK_APB2		28
+
+/* All the bus gates are exported */
+
+/* The first bunch of module clocks are exported */
+
+#define CLK_DRAM		132
+
+/* All the DRAM gates are exported */
+
+/* Some more module clocks are exported */
+
+#define CLK_NUMBER		(CLK_OUTB + 1)
+
+#endif /* _CCU_SUN8I_R40_H_ */
diff --git a/drivers/clk/sunxi-ng/sun8i-v3s-ccu.c b/drivers/clk/sunxi-ng/sun8i-v3s-ccu.c
new file mode 100644
index 000000000000..58b123ad1212
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun8i-v3s-ccu.c
@@ -0,0 +1,842 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (c) 2016 Icenowy Zheng <icenowy@aosc.xyz>
+ *
+ * Based on ccu-sun8i-h3.c, which is:
+ * Copyright (c) 2016 Maxime Ripard. All rights reserved.
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/io.h>
+#include <linux/of_address.h>
+
+#include "ccu_common.h"
+#include "ccu_reset.h"
+
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_mp.h"
+#include "ccu_mult.h"
+#include "ccu_nk.h"
+#include "ccu_nkm.h"
+#include "ccu_nkmp.h"
+#include "ccu_nm.h"
+#include "ccu_phase.h"
+
+#include "sun8i-v3s-ccu.h"
+
+static SUNXI_CCU_NKMP_WITH_GATE_LOCK(pll_cpu_clk, "pll-cpu",
+				     "osc24M", 0x000,
+				     8, 5,	/* N */
+				     4, 2,	/* K */
+				     0, 2,	/* M */
+				     16, 2,	/* P */
+				     BIT(31),	/* gate */
+				     BIT(28),	/* lock */
+				     0);
+
+/*
+ * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
+ * the base (2x, 4x and 8x), and one variable divider (the one true
+ * pll audio).
+ *
+ * With sigma-delta modulation for fractional-N on the audio PLL,
+ * we have to use specific dividers. This means the variable divider
+ * can no longer be used, as the audio codec requests the exact clock
+ * rates we support through this mechanism. So we now hard code the
+ * variable divider to 1. This means the clock rates will no longer
+ * match the clock names.
+ */
+#define SUN8I_V3S_PLL_AUDIO_REG	0x008
+
+static struct ccu_sdm_setting pll_audio_sdm_table[] = {
+	{ .rate = 22579200, .pattern = 0xc0010d84, .m = 8, .n = 7 },
+	{ .rate = 24576000, .pattern = 0xc000ac02, .m = 14, .n = 14 },
+};
+
+static SUNXI_CCU_NM_WITH_SDM_GATE_LOCK(pll_audio_base_clk, "pll-audio-base",
+				       "osc24M", 0x008,
+				       8, 7,	/* N */
+				       0, 5,	/* M */
+				       pll_audio_sdm_table, BIT(24),
+				       0x284, BIT(31),
+				       BIT(31),	/* gate */
+				       BIT(28),	/* lock */
+				       CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_video_clk, "pll-video",
+					"osc24M", 0x0010,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					0);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_ve_clk, "pll-ve",
+					"osc24M", 0x0018,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					0);
+
+static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_ddr0_clk, "pll-ddr0",
+				    "osc24M", 0x020,
+				    8, 5,	/* N */
+				    4, 2,	/* K */
+				    0, 2,	/* M */
+				    BIT(31),	/* gate */
+				    BIT(28),	/* lock */
+				    0);
+
+static SUNXI_CCU_NK_WITH_GATE_LOCK_POSTDIV(pll_periph0_clk, "pll-periph0",
+					   "osc24M", 0x028,
+					   8, 5,	/* N */
+					   4, 2,	/* K */
+					   BIT(31),	/* gate */
+					   BIT(28),	/* lock */
+					   2,		/* post-div */
+					   0);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_isp_clk, "pll-isp",
+					"osc24M", 0x002c,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					0);
+
+static SUNXI_CCU_NK_WITH_GATE_LOCK_POSTDIV(pll_periph1_clk, "pll-periph1",
+					   "osc24M", 0x044,
+					   8, 5,	/* N */
+					   4, 2,	/* K */
+					   BIT(31),	/* gate */
+					   BIT(28),	/* lock */
+					   2,		/* post-div */
+					   0);
+
+static SUNXI_CCU_NM_WITH_GATE_LOCK(pll_ddr1_clk, "pll-ddr1",
+				   "osc24M", 0x04c,
+				   8, 7,	/* N */
+				   0, 2,	/* M */
+				   BIT(31),	/* gate */
+				   BIT(28),	/* lock */
+				   0);
+
+static const char * const cpu_parents[] = { "osc32k", "osc24M",
+					     "pll-cpu", "pll-cpu" };
+static SUNXI_CCU_MUX(cpu_clk, "cpu", cpu_parents,
+		     0x050, 16, 2, CLK_IS_CRITICAL);
+
+static SUNXI_CCU_M(axi_clk, "axi", "cpu", 0x050, 0, 2, 0);
+
+static const char * const ahb1_parents[] = { "osc32k", "osc24M",
+					     "axi", "pll-periph0" };
+static const struct ccu_mux_var_prediv ahb1_predivs[] = {
+	{ .index = 3, .shift = 6, .width = 2 },
+};
+static struct ccu_div ahb1_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
+
+	.mux		= {
+		.shift	= 12,
+		.width	= 2,
+
+		.var_predivs	= ahb1_predivs,
+		.n_var_predivs	= ARRAY_SIZE(ahb1_predivs),
+	},
+
+	.common		= {
+		.reg		= 0x054,
+		.features	= CCU_FEATURE_VARIABLE_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("ahb1",
+						      ahb1_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static struct clk_div_table apb1_div_table[] = {
+	{ .val = 0, .div = 2 },
+	{ .val = 1, .div = 2 },
+	{ .val = 2, .div = 4 },
+	{ .val = 3, .div = 8 },
+	{ /* Sentinel */ },
+};
+static SUNXI_CCU_DIV_TABLE(apb1_clk, "apb1", "ahb1",
+			   0x054, 8, 2, apb1_div_table, 0);
+
+static const char * const apb2_parents[] = { "osc32k", "osc24M",
+					     "pll-periph0", "pll-periph0" };
+static SUNXI_CCU_MP_WITH_MUX(apb2_clk, "apb2", apb2_parents, 0x058,
+			     0, 5,	/* M */
+			     16, 2,	/* P */
+			     24, 2,	/* mux */
+			     0);
+
+static const char * const ahb2_parents[] = { "ahb1", "pll-periph0" };
+static const struct ccu_mux_fixed_prediv ahb2_fixed_predivs[] = {
+	{ .index = 1, .div = 2 },
+};
+static struct ccu_mux ahb2_clk = {
+	.mux		= {
+		.shift	= 0,
+		.width	= 1,
+		.fixed_predivs	= ahb2_fixed_predivs,
+		.n_predivs	= ARRAY_SIZE(ahb2_fixed_predivs),
+	},
+
+	.common		= {
+		.reg		= 0x05c,
+		.features	= CCU_FEATURE_FIXED_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("ahb2",
+						      ahb2_parents,
+						      &ccu_mux_ops,
+						      0),
+	},
+};
+
+static SUNXI_CCU_GATE(bus_ce_clk,	"bus-ce",	"ahb1",
+		      0x060, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_dma_clk,	"bus-dma",	"ahb1",
+		      0x060, BIT(6), 0);
+static SUNXI_CCU_GATE(bus_mmc0_clk,	"bus-mmc0",	"ahb1",
+		      0x060, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_mmc1_clk,	"bus-mmc1",	"ahb1",
+		      0x060, BIT(9), 0);
+static SUNXI_CCU_GATE(bus_mmc2_clk,	"bus-mmc2",	"ahb1",
+		      0x060, BIT(10), 0);
+static SUNXI_CCU_GATE(bus_dram_clk,	"bus-dram",	"ahb1",
+		      0x060, BIT(14), 0);
+static SUNXI_CCU_GATE(bus_emac_clk,	"bus-emac",	"ahb2",
+		      0x060, BIT(17), 0);
+static SUNXI_CCU_GATE(bus_hstimer_clk,	"bus-hstimer",	"ahb1",
+		      0x060, BIT(19), 0);
+static SUNXI_CCU_GATE(bus_spi0_clk,	"bus-spi0",	"ahb1",
+		      0x060, BIT(20), 0);
+static SUNXI_CCU_GATE(bus_otg_clk,	"bus-otg",	"ahb1",
+		      0x060, BIT(24), 0);
+static SUNXI_CCU_GATE(bus_ehci0_clk,	"bus-ehci0",	"ahb1",
+		      0x060, BIT(26), 0);
+static SUNXI_CCU_GATE(bus_ohci0_clk,	"bus-ohci0",	"ahb1",
+		      0x060, BIT(29), 0);
+
+static SUNXI_CCU_GATE(bus_ve_clk,	"bus-ve",	"ahb1",
+		      0x064, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_tcon0_clk,	"bus-tcon0",	"ahb1",
+		      0x064, BIT(4), 0);
+static SUNXI_CCU_GATE(bus_csi_clk,	"bus-csi",	"ahb1",
+		      0x064, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_de_clk,	"bus-de",	"ahb1",
+		      0x064, BIT(12), 0);
+
+static SUNXI_CCU_GATE(bus_codec_clk,	"bus-codec",	"apb1",
+		      0x068, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_pio_clk,	"bus-pio",	"apb1",
+		      0x068, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_i2s0_clk,	"bus-i2s0",	"apb1",
+		      0x068, BIT(12), 0);
+
+static SUNXI_CCU_GATE(bus_i2c0_clk,	"bus-i2c0",	"apb2",
+		      0x06c, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_i2c1_clk,	"bus-i2c1",	"apb2",
+		      0x06c, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_uart0_clk,	"bus-uart0",	"apb2",
+		      0x06c, BIT(16), 0);
+static SUNXI_CCU_GATE(bus_uart1_clk,	"bus-uart1",	"apb2",
+		      0x06c, BIT(17), 0);
+static SUNXI_CCU_GATE(bus_uart2_clk,	"bus-uart2",	"apb2",
+		      0x06c, BIT(18), 0);
+
+static SUNXI_CCU_GATE(bus_ephy_clk,	"bus-ephy",	"ahb1",
+		      0x070, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_dbg_clk,	"bus-dbg",	"ahb1",
+		      0x070, BIT(7), 0);
+
+static const char * const mod0_default_parents[] = { "osc24M", "pll-periph0",
+						     "pll-periph1" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents, 0x088,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc0_sample_clk, "mmc0_sample", "mmc0",
+		       0x088, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc0_output_clk, "mmc0_output", "mmc0",
+		       0x088, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents, 0x08c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc1_sample_clk, "mmc1_sample", "mmc1",
+		       0x08c, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc1_output_clk, "mmc1_output", "mmc1",
+		       0x08c, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents, 0x090,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc2_sample_clk, "mmc2_sample", "mmc2",
+		       0x090, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc2_output_clk, "mmc2_output", "mmc2",
+		       0x090, 8, 3, 0);
+
+static const char * const ce_parents[] = { "osc24M", "pll-periph0", };
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(ce_clk, "ce", ce_parents, 0x09c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents, 0x0a0,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static const char * const i2s_parents[] = { "pll-audio-8x", "pll-audio-4x",
+					    "pll-audio-2x", "pll-audio" };
+static SUNXI_CCU_MUX_WITH_GATE(i2s0_clk, "i2s0", i2s_parents,
+			       0x0b0, 16, 2, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"osc24M",
+		      0x0cc, BIT(8), 0);
+static SUNXI_CCU_GATE(usb_ohci0_clk,	"usb-ohci0",	"osc24M",
+		      0x0cc, BIT(16), 0);
+
+static const char * const dram_parents[] = { "pll-ddr0", "pll-ddr1",
+					     "pll-periph0-2x" };
+static SUNXI_CCU_M_WITH_MUX(dram_clk, "dram", dram_parents,
+			    0x0f4, 0, 4, 20, 2, CLK_IS_CRITICAL);
+
+static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"dram",
+		      0x100, BIT(0), 0);
+static SUNXI_CCU_GATE(dram_csi_clk,	"dram-csi",	"dram",
+		      0x100, BIT(1), 0);
+static SUNXI_CCU_GATE(dram_ehci_clk,	"dram-ehci",	"dram",
+		      0x100, BIT(17), 0);
+static SUNXI_CCU_GATE(dram_ohci_clk,	"dram-ohci",	"dram",
+		      0x100, BIT(18), 0);
+
+static const char * const de_parents[] = { "pll-video", "pll-periph0" };
+static SUNXI_CCU_M_WITH_MUX_GATE(de_clk, "de", de_parents,
+				 0x104, 0, 4, 24, 2, BIT(31),
+				 CLK_SET_RATE_PARENT);
+
+static const char * const tcon_parents[] = { "pll-video" };
+static SUNXI_CCU_M_WITH_MUX_GATE(tcon_clk, "tcon", tcon_parents,
+				 0x118, 0, 4, 24, 3, BIT(31), 0);
+
+static SUNXI_CCU_GATE(csi_misc_clk,	"csi-misc",	"osc24M",
+		      0x130, BIT(31), 0);
+
+static const char * const csi_mclk_parents[] = { "osc24M", "pll-video",
+						 "pll-periph0", "pll-periph1" };
+static SUNXI_CCU_M_WITH_MUX_GATE(csi0_mclk_clk, "csi0-mclk", csi_mclk_parents,
+				 0x130, 0, 5, 8, 3, BIT(15), 0);
+
+static const char * const csi1_sclk_parents[] = { "pll-video", "pll-isp" };
+static SUNXI_CCU_M_WITH_MUX_GATE(csi1_sclk_clk, "csi-sclk", csi1_sclk_parents,
+				 0x134, 16, 4, 24, 3, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(csi1_mclk_clk, "csi-mclk", csi_mclk_parents,
+				 0x134, 0, 5, 8, 3, BIT(15), 0);
+
+static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve",
+			     0x13c, 16, 3, BIT(31), 0);
+
+static SUNXI_CCU_GATE(ac_dig_clk,	"ac-dig",	"pll-audio",
+		      0x140, BIT(31), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_GATE(avs_clk,		"avs",		"osc24M",
+		      0x144, BIT(31), 0);
+
+static const char * const mbus_parents[] = { "osc24M", "pll-periph0-2x",
+					     "pll-ddr" };
+static SUNXI_CCU_M_WITH_MUX_GATE(mbus_clk, "mbus", mbus_parents,
+				 0x15c, 0, 3, 24, 2, BIT(31), CLK_IS_CRITICAL);
+
+static const char * const mipi_csi_parents[] = { "pll-video", "pll-periph0",
+						 "pll-isp" };
+static SUNXI_CCU_M_WITH_MUX_GATE(mipi_csi_clk, "mipi-csi", mipi_csi_parents,
+			     0x16c, 0, 3, 24, 2, BIT(31), 0);
+
+static struct ccu_common *sun8i_v3s_ccu_clks[] = {
+	&pll_cpu_clk.common,
+	&pll_audio_base_clk.common,
+	&pll_video_clk.common,
+	&pll_ve_clk.common,
+	&pll_ddr0_clk.common,
+	&pll_periph0_clk.common,
+	&pll_isp_clk.common,
+	&pll_periph1_clk.common,
+	&pll_ddr1_clk.common,
+	&cpu_clk.common,
+	&axi_clk.common,
+	&ahb1_clk.common,
+	&apb1_clk.common,
+	&apb2_clk.common,
+	&ahb2_clk.common,
+	&bus_ce_clk.common,
+	&bus_dma_clk.common,
+	&bus_mmc0_clk.common,
+	&bus_mmc1_clk.common,
+	&bus_mmc2_clk.common,
+	&bus_dram_clk.common,
+	&bus_emac_clk.common,
+	&bus_hstimer_clk.common,
+	&bus_spi0_clk.common,
+	&bus_otg_clk.common,
+	&bus_ehci0_clk.common,
+	&bus_ohci0_clk.common,
+	&bus_ve_clk.common,
+	&bus_tcon0_clk.common,
+	&bus_csi_clk.common,
+	&bus_de_clk.common,
+	&bus_codec_clk.common,
+	&bus_pio_clk.common,
+	&bus_i2c0_clk.common,
+	&bus_i2c1_clk.common,
+	&bus_uart0_clk.common,
+	&bus_uart1_clk.common,
+	&bus_uart2_clk.common,
+	&bus_ephy_clk.common,
+	&bus_dbg_clk.common,
+	&mmc0_clk.common,
+	&mmc0_sample_clk.common,
+	&mmc0_output_clk.common,
+	&mmc1_clk.common,
+	&mmc1_sample_clk.common,
+	&mmc1_output_clk.common,
+	&mmc2_clk.common,
+	&mmc2_sample_clk.common,
+	&mmc2_output_clk.common,
+	&ce_clk.common,
+	&spi0_clk.common,
+	&usb_phy0_clk.common,
+	&usb_ohci0_clk.common,
+	&dram_clk.common,
+	&dram_ve_clk.common,
+	&dram_csi_clk.common,
+	&dram_ohci_clk.common,
+	&dram_ehci_clk.common,
+	&de_clk.common,
+	&tcon_clk.common,
+	&csi_misc_clk.common,
+	&csi0_mclk_clk.common,
+	&csi1_sclk_clk.common,
+	&csi1_mclk_clk.common,
+	&ve_clk.common,
+	&ac_dig_clk.common,
+	&avs_clk.common,
+	&mbus_clk.common,
+	&mipi_csi_clk.common,
+};
+
+static const struct clk_hw *clk_parent_pll_audio[] = {
+	&pll_audio_base_clk.common.hw
+};
+
+static struct ccu_common *sun8i_v3_ccu_clks[] = {
+	&pll_cpu_clk.common,
+	&pll_audio_base_clk.common,
+	&pll_video_clk.common,
+	&pll_ve_clk.common,
+	&pll_ddr0_clk.common,
+	&pll_periph0_clk.common,
+	&pll_isp_clk.common,
+	&pll_periph1_clk.common,
+	&pll_ddr1_clk.common,
+	&cpu_clk.common,
+	&axi_clk.common,
+	&ahb1_clk.common,
+	&apb1_clk.common,
+	&apb2_clk.common,
+	&ahb2_clk.common,
+	&bus_ce_clk.common,
+	&bus_dma_clk.common,
+	&bus_mmc0_clk.common,
+	&bus_mmc1_clk.common,
+	&bus_mmc2_clk.common,
+	&bus_dram_clk.common,
+	&bus_emac_clk.common,
+	&bus_hstimer_clk.common,
+	&bus_spi0_clk.common,
+	&bus_otg_clk.common,
+	&bus_ehci0_clk.common,
+	&bus_ohci0_clk.common,
+	&bus_ve_clk.common,
+	&bus_tcon0_clk.common,
+	&bus_csi_clk.common,
+	&bus_de_clk.common,
+	&bus_codec_clk.common,
+	&bus_pio_clk.common,
+	&bus_i2s0_clk.common,
+	&bus_i2c0_clk.common,
+	&bus_i2c1_clk.common,
+	&bus_uart0_clk.common,
+	&bus_uart1_clk.common,
+	&bus_uart2_clk.common,
+	&bus_ephy_clk.common,
+	&bus_dbg_clk.common,
+	&mmc0_clk.common,
+	&mmc0_sample_clk.common,
+	&mmc0_output_clk.common,
+	&mmc1_clk.common,
+	&mmc1_sample_clk.common,
+	&mmc1_output_clk.common,
+	&mmc2_clk.common,
+	&mmc2_sample_clk.common,
+	&mmc2_output_clk.common,
+	&ce_clk.common,
+	&spi0_clk.common,
+	&i2s0_clk.common,
+	&usb_phy0_clk.common,
+	&usb_ohci0_clk.common,
+	&dram_clk.common,
+	&dram_ve_clk.common,
+	&dram_csi_clk.common,
+	&dram_ohci_clk.common,
+	&dram_ehci_clk.common,
+	&de_clk.common,
+	&tcon_clk.common,
+	&csi_misc_clk.common,
+	&csi0_mclk_clk.common,
+	&csi1_sclk_clk.common,
+	&csi1_mclk_clk.common,
+	&ve_clk.common,
+	&ac_dig_clk.common,
+	&avs_clk.common,
+	&mbus_clk.common,
+	&mipi_csi_clk.common,
+};
+
+/* We hardcode the divider to 1 for SDM support */
+static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
+			    clk_parent_pll_audio,
+			    1, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
+			    clk_parent_pll_audio,
+			    2, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
+			    clk_parent_pll_audio,
+			    1, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
+			    clk_parent_pll_audio,
+			    1, 2, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HW(pll_periph0_2x_clk, "pll-periph0-2x",
+			   &pll_periph0_clk.common.hw,
+			   1, 2, 0);
+
+static struct clk_hw_onecell_data sun8i_v3s_hw_clks = {
+	.hws	= {
+		[CLK_PLL_CPU]		= &pll_cpu_clk.common.hw,
+		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
+		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
+		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
+		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
+		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
+		[CLK_PLL_VIDEO]		= &pll_video_clk.common.hw,
+		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
+		[CLK_PLL_DDR0]		= &pll_ddr0_clk.common.hw,
+		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
+		[CLK_PLL_PERIPH0_2X]	= &pll_periph0_2x_clk.hw,
+		[CLK_PLL_ISP]		= &pll_isp_clk.common.hw,
+		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
+		[CLK_PLL_DDR1]		= &pll_ddr1_clk.common.hw,
+		[CLK_CPU]		= &cpu_clk.common.hw,
+		[CLK_AXI]		= &axi_clk.common.hw,
+		[CLK_AHB1]		= &ahb1_clk.common.hw,
+		[CLK_APB1]		= &apb1_clk.common.hw,
+		[CLK_APB2]		= &apb2_clk.common.hw,
+		[CLK_AHB2]		= &ahb2_clk.common.hw,
+		[CLK_BUS_CE]		= &bus_ce_clk.common.hw,
+		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
+		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
+		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
+		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
+		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
+		[CLK_BUS_EMAC]		= &bus_emac_clk.common.hw,
+		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
+		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
+		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
+		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
+		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
+		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
+		[CLK_BUS_TCON0]		= &bus_tcon0_clk.common.hw,
+		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
+		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
+		[CLK_BUS_CODEC]		= &bus_codec_clk.common.hw,
+		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
+		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
+		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
+		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
+		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
+		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
+		[CLK_BUS_EPHY]		= &bus_ephy_clk.common.hw,
+		[CLK_BUS_DBG]		= &bus_dbg_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
+		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
+		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
+		[CLK_MMC2]		= &mmc2_clk.common.hw,
+		[CLK_MMC2_SAMPLE]	= &mmc2_sample_clk.common.hw,
+		[CLK_MMC2_OUTPUT]	= &mmc2_output_clk.common.hw,
+		[CLK_CE]		= &ce_clk.common.hw,
+		[CLK_SPI0]		= &spi0_clk.common.hw,
+		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
+		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
+		[CLK_DRAM]		= &dram_clk.common.hw,
+		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
+		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
+		[CLK_DRAM_EHCI]		= &dram_ehci_clk.common.hw,
+		[CLK_DRAM_OHCI]		= &dram_ohci_clk.common.hw,
+		[CLK_DE]		= &de_clk.common.hw,
+		[CLK_TCON0]		= &tcon_clk.common.hw,
+		[CLK_CSI_MISC]		= &csi_misc_clk.common.hw,
+		[CLK_CSI0_MCLK]		= &csi0_mclk_clk.common.hw,
+		[CLK_CSI1_SCLK]		= &csi1_sclk_clk.common.hw,
+		[CLK_CSI1_MCLK]		= &csi1_mclk_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_AC_DIG]		= &ac_dig_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+		[CLK_MBUS]		= &mbus_clk.common.hw,
+		[CLK_MIPI_CSI]		= &mipi_csi_clk.common.hw,
+	},
+	.num	= CLK_PLL_DDR1 + 1,
+};
+
+static struct clk_hw_onecell_data sun8i_v3_hw_clks = {
+	.hws	= {
+		[CLK_PLL_CPU]		= &pll_cpu_clk.common.hw,
+		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
+		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
+		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
+		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
+		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
+		[CLK_PLL_VIDEO]		= &pll_video_clk.common.hw,
+		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
+		[CLK_PLL_DDR0]		= &pll_ddr0_clk.common.hw,
+		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
+		[CLK_PLL_PERIPH0_2X]	= &pll_periph0_2x_clk.hw,
+		[CLK_PLL_ISP]		= &pll_isp_clk.common.hw,
+		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
+		[CLK_PLL_DDR1]		= &pll_ddr1_clk.common.hw,
+		[CLK_CPU]		= &cpu_clk.common.hw,
+		[CLK_AXI]		= &axi_clk.common.hw,
+		[CLK_AHB1]		= &ahb1_clk.common.hw,
+		[CLK_APB1]		= &apb1_clk.common.hw,
+		[CLK_APB2]		= &apb2_clk.common.hw,
+		[CLK_AHB2]		= &ahb2_clk.common.hw,
+		[CLK_BUS_CE]		= &bus_ce_clk.common.hw,
+		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
+		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
+		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
+		[CLK_BUS_MMC2]		= &bus_mmc2_clk.common.hw,
+		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
+		[CLK_BUS_EMAC]		= &bus_emac_clk.common.hw,
+		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
+		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
+		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
+		[CLK_BUS_EHCI0]		= &bus_ehci0_clk.common.hw,
+		[CLK_BUS_OHCI0]		= &bus_ohci0_clk.common.hw,
+		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
+		[CLK_BUS_TCON0]		= &bus_tcon0_clk.common.hw,
+		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
+		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
+		[CLK_BUS_CODEC]		= &bus_codec_clk.common.hw,
+		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
+		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
+		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
+		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
+		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
+		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
+		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
+		[CLK_BUS_EPHY]		= &bus_ephy_clk.common.hw,
+		[CLK_BUS_DBG]		= &bus_dbg_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
+		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
+		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
+		[CLK_MMC2]		= &mmc2_clk.common.hw,
+		[CLK_MMC2_SAMPLE]	= &mmc2_sample_clk.common.hw,
+		[CLK_MMC2_OUTPUT]	= &mmc2_output_clk.common.hw,
+		[CLK_CE]		= &ce_clk.common.hw,
+		[CLK_SPI0]		= &spi0_clk.common.hw,
+		[CLK_I2S0]		= &i2s0_clk.common.hw,
+		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
+		[CLK_USB_OHCI0]		= &usb_ohci0_clk.common.hw,
+		[CLK_DRAM]		= &dram_clk.common.hw,
+		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
+		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
+		[CLK_DRAM_EHCI]		= &dram_ehci_clk.common.hw,
+		[CLK_DRAM_OHCI]		= &dram_ohci_clk.common.hw,
+		[CLK_DE]		= &de_clk.common.hw,
+		[CLK_TCON0]		= &tcon_clk.common.hw,
+		[CLK_CSI_MISC]		= &csi_misc_clk.common.hw,
+		[CLK_CSI0_MCLK]		= &csi0_mclk_clk.common.hw,
+		[CLK_CSI1_SCLK]		= &csi1_sclk_clk.common.hw,
+		[CLK_CSI1_MCLK]		= &csi1_mclk_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_AC_DIG]		= &ac_dig_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+		[CLK_MBUS]		= &mbus_clk.common.hw,
+		[CLK_MIPI_CSI]		= &mipi_csi_clk.common.hw,
+	},
+	.num	= CLK_I2S0 + 1,
+};
+
+static struct ccu_reset_map sun8i_v3s_ccu_resets[] = {
+	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
+
+	[RST_MBUS]		=  { 0x0fc, BIT(31) },
+
+	[RST_BUS_CE]		=  { 0x2c0, BIT(5) },
+	[RST_BUS_DMA]		=  { 0x2c0, BIT(6) },
+	[RST_BUS_MMC0]		=  { 0x2c0, BIT(8) },
+	[RST_BUS_MMC1]		=  { 0x2c0, BIT(9) },
+	[RST_BUS_MMC2]		=  { 0x2c0, BIT(10) },
+	[RST_BUS_DRAM]		=  { 0x2c0, BIT(14) },
+	[RST_BUS_EMAC]		=  { 0x2c0, BIT(17) },
+	[RST_BUS_HSTIMER]	=  { 0x2c0, BIT(19) },
+	[RST_BUS_SPI0]		=  { 0x2c0, BIT(20) },
+	[RST_BUS_OTG]		=  { 0x2c0, BIT(24) },
+	[RST_BUS_EHCI0]		=  { 0x2c0, BIT(26) },
+	[RST_BUS_OHCI0]		=  { 0x2c0, BIT(29) },
+
+	[RST_BUS_VE]		=  { 0x2c4, BIT(0) },
+	[RST_BUS_TCON0]		=  { 0x2c4, BIT(4) },
+	[RST_BUS_CSI]		=  { 0x2c4, BIT(8) },
+	[RST_BUS_DE]		=  { 0x2c4, BIT(12) },
+	[RST_BUS_DBG]		=  { 0x2c4, BIT(31) },
+
+	[RST_BUS_EPHY]		=  { 0x2c8, BIT(2) },
+
+	[RST_BUS_CODEC]		=  { 0x2d0, BIT(0) },
+
+	[RST_BUS_I2C0]		=  { 0x2d8, BIT(0) },
+	[RST_BUS_I2C1]		=  { 0x2d8, BIT(1) },
+	[RST_BUS_UART0]		=  { 0x2d8, BIT(16) },
+	[RST_BUS_UART1]		=  { 0x2d8, BIT(17) },
+	[RST_BUS_UART2]		=  { 0x2d8, BIT(18) },
+};
+
+static struct ccu_reset_map sun8i_v3_ccu_resets[] = {
+	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
+
+	[RST_MBUS]		=  { 0x0fc, BIT(31) },
+
+	[RST_BUS_CE]		=  { 0x2c0, BIT(5) },
+	[RST_BUS_DMA]		=  { 0x2c0, BIT(6) },
+	[RST_BUS_MMC0]		=  { 0x2c0, BIT(8) },
+	[RST_BUS_MMC1]		=  { 0x2c0, BIT(9) },
+	[RST_BUS_MMC2]		=  { 0x2c0, BIT(10) },
+	[RST_BUS_DRAM]		=  { 0x2c0, BIT(14) },
+	[RST_BUS_EMAC]		=  { 0x2c0, BIT(17) },
+	[RST_BUS_HSTIMER]	=  { 0x2c0, BIT(19) },
+	[RST_BUS_SPI0]		=  { 0x2c0, BIT(20) },
+	[RST_BUS_OTG]		=  { 0x2c0, BIT(24) },
+	[RST_BUS_EHCI0]		=  { 0x2c0, BIT(26) },
+	[RST_BUS_OHCI0]		=  { 0x2c0, BIT(29) },
+
+	[RST_BUS_VE]		=  { 0x2c4, BIT(0) },
+	[RST_BUS_TCON0]		=  { 0x2c4, BIT(4) },
+	[RST_BUS_CSI]		=  { 0x2c4, BIT(8) },
+	[RST_BUS_DE]		=  { 0x2c4, BIT(12) },
+	[RST_BUS_DBG]		=  { 0x2c4, BIT(31) },
+
+	[RST_BUS_EPHY]		=  { 0x2c8, BIT(2) },
+
+	[RST_BUS_CODEC]		=  { 0x2d0, BIT(0) },
+	[RST_BUS_I2S0]		=  { 0x2d0, BIT(12) },
+
+	[RST_BUS_I2C0]		=  { 0x2d8, BIT(0) },
+	[RST_BUS_I2C1]		=  { 0x2d8, BIT(1) },
+	[RST_BUS_UART0]		=  { 0x2d8, BIT(16) },
+	[RST_BUS_UART1]		=  { 0x2d8, BIT(17) },
+	[RST_BUS_UART2]		=  { 0x2d8, BIT(18) },
+};
+
+static const struct sunxi_ccu_desc sun8i_v3s_ccu_desc = {
+	.ccu_clks	= sun8i_v3s_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun8i_v3s_ccu_clks),
+
+	.hw_clks	= &sun8i_v3s_hw_clks,
+
+	.resets		= sun8i_v3s_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun8i_v3s_ccu_resets),
+};
+
+static const struct sunxi_ccu_desc sun8i_v3_ccu_desc = {
+	.ccu_clks	= sun8i_v3_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun8i_v3_ccu_clks),
+
+	.hw_clks	= &sun8i_v3_hw_clks,
+
+	.resets		= sun8i_v3_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun8i_v3_ccu_resets),
+};
+
+static void __init sun8i_v3_v3s_ccu_init(struct device_node *node,
+					 const struct sunxi_ccu_desc *ccu_desc)
+{
+	void __iomem *reg;
+	u32 val;
+
+	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
+	if (IS_ERR(reg)) {
+		pr_err("%pOF: Could not map the clock registers\n", node);
+		return;
+	}
+
+	/* Force the PLL-Audio-1x divider to 1 */
+	val = readl(reg + SUN8I_V3S_PLL_AUDIO_REG);
+	val &= ~GENMASK(19, 16);
+	writel(val, reg + SUN8I_V3S_PLL_AUDIO_REG);
+
+	of_sunxi_ccu_probe(node, reg, ccu_desc);
+}
+
+static void __init sun8i_v3s_ccu_setup(struct device_node *node)
+{
+	sun8i_v3_v3s_ccu_init(node, &sun8i_v3s_ccu_desc);
+}
+
+static void __init sun8i_v3_ccu_setup(struct device_node *node)
+{
+	sun8i_v3_v3s_ccu_init(node, &sun8i_v3_ccu_desc);
+}
+
+CLK_OF_DECLARE(sun8i_v3s_ccu, "allwinner,sun8i-v3s-ccu",
+	       sun8i_v3s_ccu_setup);
+
+CLK_OF_DECLARE(sun8i_v3_ccu, "allwinner,sun8i-v3-ccu",
+	       sun8i_v3_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/sun8i-v3s-ccu.h b/drivers/clk/sunxi-ng/sun8i-v3s-ccu.h
new file mode 100644
index 000000000000..108eeeedcbf7
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun8i-v3s-ccu.h
@@ -0,0 +1,54 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright (c) 2016 Icenowy Zheng <icenowy@aosc.xyz>
+ *
+ * Based on ccu-sun8i-h3.h, which is:
+ * Copyright (c) 2016 Maxime Ripard <maxime.ripard@free-electrons.com>
+ */
+
+#ifndef _CCU_SUN8I_H3_H_
+#define _CCU_SUN8I_H3_H_
+
+#include <dt-bindings/clock/sun8i-v3s-ccu.h>
+#include <dt-bindings/reset/sun8i-v3s-ccu.h>
+
+#define CLK_PLL_CPU		0
+#define CLK_PLL_AUDIO_BASE	1
+#define CLK_PLL_AUDIO		2
+#define CLK_PLL_AUDIO_2X	3
+#define CLK_PLL_AUDIO_4X	4
+#define CLK_PLL_AUDIO_8X	5
+#define CLK_PLL_VIDEO		6
+#define CLK_PLL_VE		7
+#define CLK_PLL_DDR0		8
+#define CLK_PLL_PERIPH0		9
+#define CLK_PLL_PERIPH0_2X	10
+#define CLK_PLL_ISP		11
+#define CLK_PLL_PERIPH1		12
+/* Reserve one number for not implemented and not used PLL_DDR1 */
+
+/* The CPU clock is exported */
+
+#define CLK_AXI			15
+#define CLK_AHB1		16
+#define CLK_APB1		17
+#define CLK_APB2		18
+#define CLK_AHB2		19
+
+/* All the bus gates are exported */
+
+/* The first bunch of module clocks are exported */
+
+#define CLK_DRAM		58
+
+/* All the DRAM gates are exported */
+
+/* Some more module clocks are exported */
+
+#define CLK_MBUS		72
+
+/* And the GPU module clock is exported */
+
+#define CLK_PLL_DDR1		74
+
+#endif /* _CCU_SUN8I_H3_H_ */
diff --git a/drivers/clk/sunxi-ng/sun9i-a80-ccu.c b/drivers/clk/sunxi-ng/sun9i-a80-ccu.c
new file mode 100644
index 000000000000..bc0b89e18652
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun9i-a80-ccu.c
@@ -0,0 +1,1250 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (c) 2016 Chen-Yu Tsai. All rights reserved.
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/io.h>
+#include <linux/of_address.h>
+#include <linux/platform_device.h>
+
+#include "ccu_common.h"
+#include "ccu_reset.h"
+
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_mp.h"
+#include "ccu_nkmp.h"
+#include "ccu_nm.h"
+#include "ccu_phase.h"
+
+#include "sun9i-a80-ccu.h"
+
+#define CCU_SUN9I_LOCK_REG	0x09c
+
+/*
+ * The CPU PLLs are actually NP clocks, with P being /1 or /4. However
+ * P should only be used for output frequencies lower than 228 MHz.
+ * Neither mainline Linux, U-boot, nor the vendor BSPs use these.
+ *
+ * For now we can just model it as a multiplier clock, and force P to /1.
+ */
+#define SUN9I_A80_PLL_C0CPUX_REG	0x000
+#define SUN9I_A80_PLL_C1CPUX_REG	0x004
+
+static struct ccu_mult pll_c0cpux_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(0),
+	.mult		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.common		= {
+		.reg		= SUN9I_A80_PLL_C0CPUX_REG,
+		.lock_reg	= CCU_SUN9I_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-c0cpux", "osc24M",
+					      &ccu_mult_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static struct ccu_mult pll_c1cpux_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(1),
+	.mult		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.common		= {
+		.reg		= SUN9I_A80_PLL_C1CPUX_REG,
+		.lock_reg	= CCU_SUN9I_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-c1cpux", "osc24M",
+					      &ccu_mult_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+/*
+ * The Audio PLL has d1, d2 dividers in addition to the usual N, M
+ * factors. Since we only need 2 frequencies from this PLL: 22.5792 MHz
+ * and 24.576 MHz, ignore them for now. Enforce d1 = 0 and d2 = 0.
+ */
+#define SUN9I_A80_PLL_AUDIO_REG	0x008
+
+static struct ccu_nm pll_audio_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(2),
+	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.m		= _SUNXI_CCU_DIV_OFFSET(0, 6, 0),
+	.common		= {
+		.reg		= 0x008,
+		.lock_reg	= CCU_SUN9I_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-audio", "osc24M",
+					      &ccu_nm_ops, CLK_SET_RATE_UNGATE),
+	},
+};
+
+/* Some PLLs are input * N / div1 / div2. Model them as NKMP with no K */
+static struct ccu_nkmp pll_periph0_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(3),
+	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
+	.common		= {
+		.reg		= 0x00c,
+		.lock_reg	= CCU_SUN9I_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-periph0", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static struct ccu_nkmp pll_ve_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(4),
+	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
+	.common		= {
+		.reg		= 0x010,
+		.lock_reg	= CCU_SUN9I_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-ve", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static struct ccu_nkmp pll_ddr_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(5),
+	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
+	.common		= {
+		.reg		= 0x014,
+		.lock_reg	= CCU_SUN9I_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-ddr", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static struct ccu_nm pll_video0_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(6),
+	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
+	.common		= {
+		.reg		= 0x018,
+		.lock_reg	= CCU_SUN9I_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-video0", "osc24M",
+					      &ccu_nm_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static struct ccu_nkmp pll_video1_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(7),
+	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(0, 2), /* external divider p */
+	.common		= {
+		.reg		= 0x01c,
+		.lock_reg	= CCU_SUN9I_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-video1", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static struct ccu_nkmp pll_gpu_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(8),
+	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
+	.common		= {
+		.reg		= 0x020,
+		.lock_reg	= CCU_SUN9I_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-gpu", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static struct ccu_nkmp pll_de_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(9),
+	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
+	.common		= {
+		.reg		= 0x024,
+		.lock_reg	= CCU_SUN9I_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-de", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static struct ccu_nkmp pll_isp_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(10),
+	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
+	.common		= {
+		.reg		= 0x028,
+		.lock_reg	= CCU_SUN9I_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-isp", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static struct ccu_nkmp pll_periph1_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(11),
+	.n		= _SUNXI_CCU_MULT_OFFSET_MIN_MAX(8, 8, 0, 12, 0),
+	.m		= _SUNXI_CCU_DIV(16, 1), /* input divider */
+	.p		= _SUNXI_CCU_DIV(18, 1), /* output divider */
+	.common		= {
+		.reg		= 0x028,
+		.lock_reg	= CCU_SUN9I_LOCK_REG,
+		.features	= CCU_FEATURE_LOCK_REG,
+		.hw.init	= CLK_HW_INIT("pll-periph1", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+static const char * const c0cpux_parents[] = { "osc24M", "pll-c0cpux" };
+static SUNXI_CCU_MUX(c0cpux_clk, "c0cpux", c0cpux_parents,
+		     0x50, 0, 1, CLK_SET_RATE_PARENT | CLK_IS_CRITICAL);
+
+static const char * const c1cpux_parents[] = { "osc24M", "pll-c1cpux" };
+static SUNXI_CCU_MUX(c1cpux_clk, "c1cpux", c1cpux_parents,
+		     0x50, 8, 1, CLK_SET_RATE_PARENT | CLK_IS_CRITICAL);
+
+static struct clk_div_table axi_div_table[] = {
+	{ .val = 0, .div = 1 },
+	{ .val = 1, .div = 2 },
+	{ .val = 2, .div = 3 },
+	{ .val = 3, .div = 4 },
+	{ .val = 4, .div = 4 },
+	{ .val = 5, .div = 4 },
+	{ .val = 6, .div = 4 },
+	{ .val = 7, .div = 4 },
+	{ /* Sentinel */ },
+};
+
+static SUNXI_CCU_M(atb0_clk, "atb0", "c0cpux", 0x054, 8, 2, 0);
+
+static SUNXI_CCU_DIV_TABLE(axi0_clk, "axi0", "c0cpux",
+			   0x054, 0, 3, axi_div_table, 0);
+
+static SUNXI_CCU_M(atb1_clk, "atb1", "c1cpux", 0x058, 8, 2, 0);
+
+static SUNXI_CCU_DIV_TABLE(axi1_clk, "axi1", "c1cpux",
+			   0x058, 0, 3, axi_div_table, 0);
+
+static const char * const gtbus_parents[] = { "osc24M", "pll-periph0",
+					      "pll-periph1", "pll-periph1" };
+static SUNXI_CCU_M_WITH_MUX(gtbus_clk, "gtbus", gtbus_parents,
+			    0x05c, 0, 2, 24, 2, CLK_IS_CRITICAL);
+
+static const char * const ahb_parents[] = { "gtbus", "pll-periph0",
+					    "pll-periph1", "pll-periph1" };
+static struct ccu_div ahb0_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(0, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0x060,
+		.hw.init	= CLK_HW_INIT_PARENTS("ahb0",
+						      ahb_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static struct ccu_div ahb1_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(0, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0x064,
+		.hw.init	= CLK_HW_INIT_PARENTS("ahb1",
+						      ahb_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static struct ccu_div ahb2_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(0, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0x068,
+		.hw.init	= CLK_HW_INIT_PARENTS("ahb2",
+						      ahb_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static const char * const apb_parents[] = { "osc24M", "pll-periph0" };
+
+static struct ccu_div apb0_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(0, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 1),
+	.common		= {
+		.reg		= 0x070,
+		.hw.init	= CLK_HW_INIT_PARENTS("apb0",
+						      apb_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static struct ccu_div apb1_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(0, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 1),
+	.common		= {
+		.reg		= 0x074,
+		.hw.init	= CLK_HW_INIT_PARENTS("apb1",
+						      apb_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static struct ccu_div cci400_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(0, 2, CLK_DIVIDER_POWER_OF_TWO),
+	.mux		= _SUNXI_CCU_MUX(24, 2),
+	.common		= {
+		.reg		= 0x078,
+		.hw.init	= CLK_HW_INIT_PARENTS("cci400",
+						      ahb_parents,
+						      &ccu_div_ops,
+						      CLK_IS_CRITICAL),
+	},
+};
+
+static SUNXI_CCU_M_WITH_MUX_GATE(ats_clk, "ats", apb_parents,
+				 0x080, 0, 3, 24, 2, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(trace_clk, "trace", apb_parents,
+				 0x084, 0, 3, 24, 2, BIT(31), 0);
+
+static const char * const out_parents[] = { "osc24M", "osc32k", "osc24M" };
+static const struct ccu_mux_fixed_prediv out_prediv = {
+	.index = 0, .div = 750
+};
+
+static struct ccu_mp out_a_clk = {
+	.enable		= BIT(31),
+	.m		= _SUNXI_CCU_DIV(8, 5),
+	.p		= _SUNXI_CCU_DIV(20, 2),
+	.mux		= {
+		.shift		= 24,
+		.width		= 4,
+		.fixed_predivs	= &out_prediv,
+		.n_predivs	= 1,
+	},
+	.common		= {
+		.reg		= 0x180,
+		.features	= CCU_FEATURE_FIXED_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("out-a",
+						      out_parents,
+						      &ccu_mp_ops,
+						      0),
+	},
+};
+
+static struct ccu_mp out_b_clk = {
+	.enable		= BIT(31),
+	.m		= _SUNXI_CCU_DIV(8, 5),
+	.p		= _SUNXI_CCU_DIV(20, 2),
+	.mux		= {
+		.shift		= 24,
+		.width		= 4,
+		.fixed_predivs	= &out_prediv,
+		.n_predivs	= 1,
+	},
+	.common		= {
+		.reg		= 0x184,
+		.features	= CCU_FEATURE_FIXED_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("out-b",
+						      out_parents,
+						      &ccu_mp_ops,
+						      0),
+	},
+};
+
+static const char * const mod0_default_parents[] = { "osc24M", "pll-periph0" };
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand0_0_clk, "nand0-0", mod0_default_parents,
+				  0x400,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 4,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand0_1_clk, "nand0-1", mod0_default_parents,
+				  0x404,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 4,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand1_0_clk, "nand1-0", mod0_default_parents,
+				  0x408,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 4,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(nand1_1_clk, "nand1-1", mod0_default_parents,
+				  0x40c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 4,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents,
+				  0x410,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 4,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc0_sample_clk, "mmc0-sample", "mmc0",
+		       0x410, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc0_output_clk, "mmc0-output", "mmc0",
+		       0x410, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents,
+				  0x414,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 4,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc1_sample_clk, "mmc1-sample", "mmc1",
+		       0x414, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc1_output_clk, "mmc1-output", "mmc1",
+		       0x414, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc2_clk, "mmc2", mod0_default_parents,
+				  0x418,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 4,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc2_sample_clk, "mmc2-sample", "mmc2",
+		       0x418, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc2_output_clk, "mmc2-output", "mmc2",
+		       0x418, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc3_clk, "mmc3", mod0_default_parents,
+				  0x41c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 4,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc3_sample_clk, "mmc3-sample", "mmc3",
+		       0x41c, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc3_output_clk, "mmc3-output", "mmc3",
+		       0x41c, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(ts_clk, "ts", mod0_default_parents,
+				  0x428,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 4,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static const char * const ss_parents[] = { "osc24M", "pll-periph",
+					   "pll-periph1" };
+static const u8 ss_table[] = { 0, 1, 13 };
+static struct ccu_mp ss_clk = {
+	.enable		= BIT(31),
+	.m		= _SUNXI_CCU_DIV(0, 4),
+	.p		= _SUNXI_CCU_DIV(16, 2),
+	.mux		= _SUNXI_CCU_MUX_TABLE(24, 4, ss_table),
+	.common		= {
+		.reg		= 0x42c,
+		.hw.init	= CLK_HW_INIT_PARENTS("ss",
+						      ss_parents,
+						      &ccu_mp_ops,
+						      0),
+	},
+};
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi0_clk, "spi0", mod0_default_parents,
+				  0x430,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 4,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi1_clk, "spi1", mod0_default_parents,
+				  0x434,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 4,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi2_clk, "spi2", mod0_default_parents,
+				  0x438,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 4,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(spi3_clk, "spi3", mod0_default_parents,
+				  0x43c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 4,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_M_WITH_GATE(i2s0_clk, "i2s0", "pll-audio",
+			     0x440, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M_WITH_GATE(i2s1_clk, "i2s1", "pll-audio",
+			     0x444, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M_WITH_GATE(spdif_clk, "spdif", "pll-audio",
+			     0x44c, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
+
+static const char * const sdram_parents[] = { "pll-periph0", "pll-ddr" };
+static const u8 sdram_table[] = { 0, 3 };
+
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(sdram_clk, "sdram",
+				       sdram_parents, sdram_table,
+				       0x484,
+				       8, 4,	/* M */
+				       12, 4,	/* mux */
+				       0,	/* no gate */
+				       CLK_IS_CRITICAL);
+
+static SUNXI_CCU_M_WITH_GATE(de_clk, "de", "pll-de", 0x490,
+			     0, 4, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(edp_clk, "edp", "osc24M", 0x494, BIT(31), 0);
+
+static const char * const mp_parents[] = { "pll-video1", "pll-gpu", "pll-de" };
+static const u8 mp_table[] = { 9, 10, 11 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(mp_clk, "mp", mp_parents, mp_table,
+				       0x498,
+				       0, 4,	/* M */
+				       24, 4,	/* mux */
+				       BIT(31),	/* gate */
+				       0);
+
+static const char * const display_parents[] = { "pll-video0", "pll-video1" };
+static const u8 display_table[] = { 8, 9 };
+
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(lcd0_clk, "lcd0",
+				       display_parents, display_table,
+				       0x49c,
+				       0, 4,	/* M */
+				       24, 4,	/* mux */
+				       BIT(31),	/* gate */
+				       CLK_SET_RATE_NO_REPARENT |
+				       CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(lcd1_clk, "lcd1",
+				       display_parents, display_table,
+				       0x4a0,
+				       0, 4,	/* M */
+				       24, 4,	/* mux */
+				       BIT(31),	/* gate */
+				       CLK_SET_RATE_NO_REPARENT |
+				       CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(mipi_dsi0_clk, "mipi-dsi0",
+				       display_parents, display_table,
+				       0x4a8,
+				       0, 4,	/* M */
+				       24, 4,	/* mux */
+				       BIT(31),	/* gate */
+				       CLK_SET_RATE_PARENT);
+
+static const char * const mipi_dsi1_parents[] = { "osc24M", "pll-video1" };
+static const u8 mipi_dsi1_table[] = { 0, 9 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(mipi_dsi1_clk, "mipi-dsi1",
+				       mipi_dsi1_parents, mipi_dsi1_table,
+				       0x4ac,
+				       0, 4,	/* M */
+				       24, 4,	/* mux */
+				       BIT(31),	/* gate */
+				       CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(hdmi_clk, "hdmi",
+				       display_parents, display_table,
+				       0x4b0,
+				       0, 4,	/* M */
+				       24, 4,	/* mux */
+				       BIT(31),	/* gate */
+				       CLK_SET_RATE_NO_REPARENT |
+				       CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(hdmi_slow_clk, "hdmi-slow", "osc24M", 0x4b4, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_GATE(mipi_csi_clk, "mipi-csi", "osc24M", 0x4bc,
+			     0, 4, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_GATE(csi_isp_clk, "csi-isp", "pll-isp", 0x4c0,
+			     0, 4, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(csi_misc_clk, "csi-misc", "osc24M", 0x4c0, BIT(16), 0);
+
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi0_mclk_clk, "csi0-mclk",
+				       mipi_dsi1_parents, mipi_dsi1_table,
+				       0x4c4,
+				       0, 4,	/* M */
+				       24, 4,	/* mux */
+				       BIT(31),	/* gate */
+				       CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi1_mclk_clk, "csi1-mclk",
+				       mipi_dsi1_parents, mipi_dsi1_table,
+				       0x4c8,
+				       0, 4,	/* M */
+				       24, 4,	/* mux */
+				       BIT(31),	/* gate */
+				       CLK_SET_RATE_PARENT);
+
+static const char * const fd_parents[] = { "pll-periph0", "pll-isp" };
+static const u8 fd_table[] = { 1, 12 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(fd_clk, "fd", fd_parents, fd_table,
+				       0x4cc,
+				       0, 4,	/* M */
+				       24, 4,	/* mux */
+				       BIT(31),	/* gate */
+				       0);
+static SUNXI_CCU_M_WITH_GATE(ve_clk, "ve", "pll-ve", 0x4d0,
+			     16, 3, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_GATE(avs_clk, "avs", "osc24M", 0x4d4, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_GATE(gpu_core_clk, "gpu-core", "pll-gpu", 0x4f0,
+			     0, 3, BIT(31), CLK_SET_RATE_PARENT);
+static SUNXI_CCU_M_WITH_GATE(gpu_memory_clk, "gpu-memory", "pll-gpu", 0x4f4,
+			     0, 3, BIT(31), CLK_SET_RATE_PARENT);
+
+static const char * const gpu_axi_parents[] = { "pll-periph0", "pll-gpu" };
+static const u8 gpu_axi_table[] = { 1, 10 };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(gpu_axi_clk, "gpu-axi",
+				       gpu_axi_parents, gpu_axi_table,
+				       0x4f8,
+				       0, 4,	/* M */
+				       24, 4,	/* mux */
+				       BIT(31),	/* gate */
+				       CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M_WITH_GATE(sata_clk, "sata", "pll-periph0", 0x500,
+			     0, 4, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_GATE(ac97_clk, "ac97", "pll-audio",
+			     0x504, 0, 4, BIT(31), CLK_SET_RATE_PARENT);
+
+static SUNXI_CCU_M_WITH_MUX_GATE(mipi_hsi_clk, "mipi-hsi",
+				 mod0_default_parents, 0x508,
+				 0, 4,		/* M */
+				 24, 4,		/* mux */
+				 BIT(31),	/* gate */
+				 0);
+
+static const char * const gpadc_parents[] = { "osc24M", "pll-audio", "osc32k" };
+static const u8 gpadc_table[] = { 0, 4, 7 };
+static struct ccu_mp gpadc_clk = {
+	.enable		= BIT(31),
+	.m		= _SUNXI_CCU_DIV(0, 4),
+	.p		= _SUNXI_CCU_DIV(16, 2),
+	.mux		= _SUNXI_CCU_MUX_TABLE(24, 4, gpadc_table),
+	.common		= {
+		.reg		= 0x50c,
+		.hw.init	= CLK_HW_INIT_PARENTS("gpadc",
+						      gpadc_parents,
+						      &ccu_mp_ops,
+						      0),
+	},
+};
+
+static const char * const cir_tx_parents[] = { "osc24M", "osc32k" };
+static const u8 cir_tx_table[] = { 0, 7 };
+static struct ccu_mp cir_tx_clk = {
+	.enable		= BIT(31),
+	.m		= _SUNXI_CCU_DIV(0, 4),
+	.p		= _SUNXI_CCU_DIV(16, 2),
+	.mux		= _SUNXI_CCU_MUX_TABLE(24, 4, cir_tx_table),
+	.common		= {
+		.reg		= 0x510,
+		.hw.init	= CLK_HW_INIT_PARENTS("cir-tx",
+						      cir_tx_parents,
+						      &ccu_mp_ops,
+						      0),
+	},
+};
+
+/* AHB0 bus gates */
+static SUNXI_CCU_GATE(bus_fd_clk,	"bus-fd",	"ahb0",
+		      0x580, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_ve_clk,	"bus-ve",	"ahb0",
+		      0x580, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_gpu_ctrl_clk,	"bus-gpu-ctrl",	"ahb0",
+		      0x580, BIT(3), 0);
+static SUNXI_CCU_GATE(bus_ss_clk,	"bus-ss",	"ahb0",
+		      0x580, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_mmc_clk,	"bus-mmc",	"ahb0",
+		      0x580, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_nand0_clk,	"bus-nand0",	"ahb0",
+		      0x580, BIT(12), 0);
+static SUNXI_CCU_GATE(bus_nand1_clk,	"bus-nand1",	"ahb0",
+		      0x580, BIT(13), 0);
+static SUNXI_CCU_GATE(bus_sdram_clk,	"bus-sdram",	"ahb0",
+		      0x580, BIT(14), 0);
+static SUNXI_CCU_GATE(bus_mipi_hsi_clk,	"bus-mipi-hsi",	"ahb0",
+		      0x580, BIT(15), 0);
+static SUNXI_CCU_GATE(bus_sata_clk,	"bus-sata",	"ahb0",
+		      0x580, BIT(16), 0);
+static SUNXI_CCU_GATE(bus_ts_clk,	"bus-ts",	"ahb0",
+		      0x580, BIT(18), 0);
+static SUNXI_CCU_GATE(bus_spi0_clk,	"bus-spi0",	"ahb0",
+		      0x580, BIT(20), 0);
+static SUNXI_CCU_GATE(bus_spi1_clk,	"bus-spi1",	"ahb0",
+		      0x580, BIT(21), 0);
+static SUNXI_CCU_GATE(bus_spi2_clk,	"bus-spi2",	"ahb0",
+		      0x580, BIT(22), 0);
+static SUNXI_CCU_GATE(bus_spi3_clk,	"bus-spi3",	"ahb0",
+		      0x580, BIT(23), 0);
+
+/* AHB1 bus gates */
+static SUNXI_CCU_GATE(bus_otg_clk,	"bus-otg",	"ahb1",
+		      0x584, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_usb_clk,	"bus-usb",	"ahb1",
+		      0x584, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_gmac_clk,	"bus-gmac",	"ahb1",
+		      0x584, BIT(17), 0);
+static SUNXI_CCU_GATE(bus_msgbox_clk,	"bus-msgbox",	"ahb1",
+		      0x584, BIT(21), 0);
+static SUNXI_CCU_GATE(bus_spinlock_clk,	"bus-spinlock",	"ahb1",
+		      0x584, BIT(22), 0);
+static SUNXI_CCU_GATE(bus_hstimer_clk,	"bus-hstimer",	"ahb1",
+		      0x584, BIT(23), 0);
+static SUNXI_CCU_GATE(bus_dma_clk,	"bus-dma",	"ahb1",
+		      0x584, BIT(24), 0);
+
+/* AHB2 bus gates */
+static SUNXI_CCU_GATE(bus_lcd0_clk,	"bus-lcd0",	"ahb2",
+		      0x588, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_lcd1_clk,	"bus-lcd1",	"ahb2",
+		      0x588, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_edp_clk,	"bus-edp",	"ahb2",
+		      0x588, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_csi_clk,	"bus-csi",	"ahb2",
+		      0x588, BIT(4), 0);
+static SUNXI_CCU_GATE(bus_hdmi_clk,	"bus-hdmi",	"ahb2",
+		      0x588, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_de_clk,	"bus-de",	"ahb2",
+		      0x588, BIT(7), 0);
+static SUNXI_CCU_GATE(bus_mp_clk,	"bus-mp",	"ahb2",
+		      0x588, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_mipi_dsi_clk,	"bus-mipi-dsi",	"ahb2",
+		      0x588, BIT(11), 0);
+
+/* APB0 bus gates */
+static SUNXI_CCU_GATE(bus_spdif_clk,	"bus-spdif",	"apb0",
+		      0x590, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_pio_clk,	"bus-pio",	"apb0",
+		      0x590, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_ac97_clk,	"bus-ac97",	"apb0",
+		      0x590, BIT(11), 0);
+static SUNXI_CCU_GATE(bus_i2s0_clk,	"bus-i2s0",	"apb0",
+		      0x590, BIT(12), 0);
+static SUNXI_CCU_GATE(bus_i2s1_clk,	"bus-i2s1",	"apb0",
+		      0x590, BIT(13), 0);
+static SUNXI_CCU_GATE(bus_lradc_clk,	"bus-lradc",	"apb0",
+		      0x590, BIT(15), 0);
+static SUNXI_CCU_GATE(bus_gpadc_clk,	"bus-gpadc",	"apb0",
+		      0x590, BIT(17), 0);
+static SUNXI_CCU_GATE(bus_twd_clk,	"bus-twd",	"apb0",
+		      0x590, BIT(18), 0);
+static SUNXI_CCU_GATE(bus_cir_tx_clk,	"bus-cir-tx",	"apb0",
+		      0x590, BIT(19), 0);
+
+/* APB1 bus gates */
+static SUNXI_CCU_GATE(bus_i2c0_clk,	"bus-i2c0",	"apb1",
+		      0x594, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_i2c1_clk,	"bus-i2c1",	"apb1",
+		      0x594, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_i2c2_clk,	"bus-i2c2",	"apb1",
+		      0x594, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_i2c3_clk,	"bus-i2c3",	"apb1",
+		      0x594, BIT(3), 0);
+static SUNXI_CCU_GATE(bus_i2c4_clk,	"bus-i2c4",	"apb1",
+		      0x594, BIT(4), 0);
+static SUNXI_CCU_GATE(bus_uart0_clk,	"bus-uart0",	"apb1",
+		      0x594, BIT(16), 0);
+static SUNXI_CCU_GATE(bus_uart1_clk,	"bus-uart1",	"apb1",
+		      0x594, BIT(17), 0);
+static SUNXI_CCU_GATE(bus_uart2_clk,	"bus-uart2",	"apb1",
+		      0x594, BIT(18), 0);
+static SUNXI_CCU_GATE(bus_uart3_clk,	"bus-uart3",	"apb1",
+		      0x594, BIT(19), 0);
+static SUNXI_CCU_GATE(bus_uart4_clk,	"bus-uart4",	"apb1",
+		      0x594, BIT(20), 0);
+static SUNXI_CCU_GATE(bus_uart5_clk,	"bus-uart5",	"apb1",
+		      0x594, BIT(21), 0);
+
+static struct ccu_common *sun9i_a80_ccu_clks[] = {
+	&pll_c0cpux_clk.common,
+	&pll_c1cpux_clk.common,
+	&pll_audio_clk.common,
+	&pll_periph0_clk.common,
+	&pll_ve_clk.common,
+	&pll_ddr_clk.common,
+	&pll_video0_clk.common,
+	&pll_video1_clk.common,
+	&pll_gpu_clk.common,
+	&pll_de_clk.common,
+	&pll_isp_clk.common,
+	&pll_periph1_clk.common,
+	&c0cpux_clk.common,
+	&c1cpux_clk.common,
+	&atb0_clk.common,
+	&axi0_clk.common,
+	&atb1_clk.common,
+	&axi1_clk.common,
+	&gtbus_clk.common,
+	&ahb0_clk.common,
+	&ahb1_clk.common,
+	&ahb2_clk.common,
+	&apb0_clk.common,
+	&apb1_clk.common,
+	&cci400_clk.common,
+	&ats_clk.common,
+	&trace_clk.common,
+
+	&out_a_clk.common,
+	&out_b_clk.common,
+
+	/* module clocks */
+	&nand0_0_clk.common,
+	&nand0_1_clk.common,
+	&nand1_0_clk.common,
+	&nand1_1_clk.common,
+	&mmc0_clk.common,
+	&mmc0_sample_clk.common,
+	&mmc0_output_clk.common,
+	&mmc1_clk.common,
+	&mmc1_sample_clk.common,
+	&mmc1_output_clk.common,
+	&mmc2_clk.common,
+	&mmc2_sample_clk.common,
+	&mmc2_output_clk.common,
+	&mmc3_clk.common,
+	&mmc3_sample_clk.common,
+	&mmc3_output_clk.common,
+	&ts_clk.common,
+	&ss_clk.common,
+	&spi0_clk.common,
+	&spi1_clk.common,
+	&spi2_clk.common,
+	&spi3_clk.common,
+	&i2s0_clk.common,
+	&i2s1_clk.common,
+	&spdif_clk.common,
+	&sdram_clk.common,
+	&de_clk.common,
+	&edp_clk.common,
+	&mp_clk.common,
+	&lcd0_clk.common,
+	&lcd1_clk.common,
+	&mipi_dsi0_clk.common,
+	&mipi_dsi1_clk.common,
+	&hdmi_clk.common,
+	&hdmi_slow_clk.common,
+	&mipi_csi_clk.common,
+	&csi_isp_clk.common,
+	&csi_misc_clk.common,
+	&csi0_mclk_clk.common,
+	&csi1_mclk_clk.common,
+	&fd_clk.common,
+	&ve_clk.common,
+	&avs_clk.common,
+	&gpu_core_clk.common,
+	&gpu_memory_clk.common,
+	&gpu_axi_clk.common,
+	&sata_clk.common,
+	&ac97_clk.common,
+	&mipi_hsi_clk.common,
+	&gpadc_clk.common,
+	&cir_tx_clk.common,
+
+	/* AHB0 bus gates */
+	&bus_fd_clk.common,
+	&bus_ve_clk.common,
+	&bus_gpu_ctrl_clk.common,
+	&bus_ss_clk.common,
+	&bus_mmc_clk.common,
+	&bus_nand0_clk.common,
+	&bus_nand1_clk.common,
+	&bus_sdram_clk.common,
+	&bus_mipi_hsi_clk.common,
+	&bus_sata_clk.common,
+	&bus_ts_clk.common,
+	&bus_spi0_clk.common,
+	&bus_spi1_clk.common,
+	&bus_spi2_clk.common,
+	&bus_spi3_clk.common,
+
+	/* AHB1 bus gates */
+	&bus_otg_clk.common,
+	&bus_usb_clk.common,
+	&bus_gmac_clk.common,
+	&bus_msgbox_clk.common,
+	&bus_spinlock_clk.common,
+	&bus_hstimer_clk.common,
+	&bus_dma_clk.common,
+
+	/* AHB2 bus gates */
+	&bus_lcd0_clk.common,
+	&bus_lcd1_clk.common,
+	&bus_edp_clk.common,
+	&bus_csi_clk.common,
+	&bus_hdmi_clk.common,
+	&bus_de_clk.common,
+	&bus_mp_clk.common,
+	&bus_mipi_dsi_clk.common,
+
+	/* APB0 bus gates */
+	&bus_spdif_clk.common,
+	&bus_pio_clk.common,
+	&bus_ac97_clk.common,
+	&bus_i2s0_clk.common,
+	&bus_i2s1_clk.common,
+	&bus_lradc_clk.common,
+	&bus_gpadc_clk.common,
+	&bus_twd_clk.common,
+	&bus_cir_tx_clk.common,
+
+	/* APB1 bus gates */
+	&bus_i2c0_clk.common,
+	&bus_i2c1_clk.common,
+	&bus_i2c2_clk.common,
+	&bus_i2c3_clk.common,
+	&bus_i2c4_clk.common,
+	&bus_uart0_clk.common,
+	&bus_uart1_clk.common,
+	&bus_uart2_clk.common,
+	&bus_uart3_clk.common,
+	&bus_uart4_clk.common,
+	&bus_uart5_clk.common,
+};
+
+static struct clk_hw_onecell_data sun9i_a80_hw_clks = {
+	.hws	= {
+		[CLK_PLL_C0CPUX]	= &pll_c0cpux_clk.common.hw,
+		[CLK_PLL_C1CPUX]	= &pll_c1cpux_clk.common.hw,
+		[CLK_PLL_AUDIO]		= &pll_audio_clk.common.hw,
+		[CLK_PLL_PERIPH0]	= &pll_periph0_clk.common.hw,
+		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
+		[CLK_PLL_DDR]		= &pll_ddr_clk.common.hw,
+		[CLK_PLL_VIDEO0]	= &pll_video0_clk.common.hw,
+		[CLK_PLL_VIDEO1]	= &pll_video1_clk.common.hw,
+		[CLK_PLL_GPU]		= &pll_gpu_clk.common.hw,
+		[CLK_PLL_DE]		= &pll_de_clk.common.hw,
+		[CLK_PLL_ISP]		= &pll_isp_clk.common.hw,
+		[CLK_PLL_PERIPH1]	= &pll_periph1_clk.common.hw,
+		[CLK_C0CPUX]		= &c0cpux_clk.common.hw,
+		[CLK_C1CPUX]		= &c1cpux_clk.common.hw,
+		[CLK_ATB0]		= &atb0_clk.common.hw,
+		[CLK_AXI0]		= &axi0_clk.common.hw,
+		[CLK_ATB1]		= &atb1_clk.common.hw,
+		[CLK_AXI1]		= &axi1_clk.common.hw,
+		[CLK_GTBUS]		= &gtbus_clk.common.hw,
+		[CLK_AHB0]		= &ahb0_clk.common.hw,
+		[CLK_AHB1]		= &ahb1_clk.common.hw,
+		[CLK_AHB2]		= &ahb2_clk.common.hw,
+		[CLK_APB0]		= &apb0_clk.common.hw,
+		[CLK_APB1]		= &apb1_clk.common.hw,
+		[CLK_CCI400]		= &cci400_clk.common.hw,
+		[CLK_ATS]		= &ats_clk.common.hw,
+		[CLK_TRACE]		= &trace_clk.common.hw,
+
+		[CLK_OUT_A]		= &out_a_clk.common.hw,
+		[CLK_OUT_B]		= &out_b_clk.common.hw,
+
+		[CLK_NAND0_0]		= &nand0_0_clk.common.hw,
+		[CLK_NAND0_1]		= &nand0_1_clk.common.hw,
+		[CLK_NAND1_0]		= &nand1_0_clk.common.hw,
+		[CLK_NAND1_1]		= &nand1_1_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
+		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
+		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
+		[CLK_MMC2]		= &mmc2_clk.common.hw,
+		[CLK_MMC2_SAMPLE]	= &mmc2_sample_clk.common.hw,
+		[CLK_MMC2_OUTPUT]	= &mmc2_output_clk.common.hw,
+		[CLK_MMC3]		= &mmc3_clk.common.hw,
+		[CLK_MMC3_SAMPLE]	= &mmc3_sample_clk.common.hw,
+		[CLK_MMC3_OUTPUT]	= &mmc3_output_clk.common.hw,
+		[CLK_TS]		= &ts_clk.common.hw,
+		[CLK_SS]		= &ss_clk.common.hw,
+		[CLK_SPI0]		= &spi0_clk.common.hw,
+		[CLK_SPI1]		= &spi1_clk.common.hw,
+		[CLK_SPI2]		= &spi2_clk.common.hw,
+		[CLK_SPI3]		= &spi3_clk.common.hw,
+		[CLK_I2S0]		= &i2s0_clk.common.hw,
+		[CLK_I2S1]		= &i2s1_clk.common.hw,
+		[CLK_SPDIF]		= &spdif_clk.common.hw,
+		[CLK_SDRAM]		= &sdram_clk.common.hw,
+		[CLK_DE]		= &de_clk.common.hw,
+		[CLK_EDP]		= &edp_clk.common.hw,
+		[CLK_MP]		= &mp_clk.common.hw,
+		[CLK_LCD0]		= &lcd0_clk.common.hw,
+		[CLK_LCD1]		= &lcd1_clk.common.hw,
+		[CLK_MIPI_DSI0]		= &mipi_dsi0_clk.common.hw,
+		[CLK_MIPI_DSI1]		= &mipi_dsi1_clk.common.hw,
+		[CLK_HDMI]		= &hdmi_clk.common.hw,
+		[CLK_HDMI_SLOW]		= &hdmi_slow_clk.common.hw,
+		[CLK_MIPI_CSI]		= &mipi_csi_clk.common.hw,
+		[CLK_CSI_ISP]		= &csi_isp_clk.common.hw,
+		[CLK_CSI_MISC]		= &csi_misc_clk.common.hw,
+		[CLK_CSI0_MCLK]		= &csi0_mclk_clk.common.hw,
+		[CLK_CSI1_MCLK]		= &csi1_mclk_clk.common.hw,
+		[CLK_FD]		= &fd_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+		[CLK_GPU_CORE]		= &gpu_core_clk.common.hw,
+		[CLK_GPU_MEMORY]	= &gpu_memory_clk.common.hw,
+		[CLK_GPU_AXI]		= &gpu_axi_clk.common.hw,
+		[CLK_SATA]		= &sata_clk.common.hw,
+		[CLK_AC97]		= &ac97_clk.common.hw,
+		[CLK_MIPI_HSI]		= &mipi_hsi_clk.common.hw,
+		[CLK_GPADC]		= &gpadc_clk.common.hw,
+		[CLK_CIR_TX]		= &cir_tx_clk.common.hw,
+
+		[CLK_BUS_FD]		= &bus_fd_clk.common.hw,
+		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
+		[CLK_BUS_GPU_CTRL]	= &bus_gpu_ctrl_clk.common.hw,
+		[CLK_BUS_SS]		= &bus_ss_clk.common.hw,
+		[CLK_BUS_MMC]		= &bus_mmc_clk.common.hw,
+		[CLK_BUS_NAND0]		= &bus_nand0_clk.common.hw,
+		[CLK_BUS_NAND1]		= &bus_nand1_clk.common.hw,
+		[CLK_BUS_SDRAM]		= &bus_sdram_clk.common.hw,
+		[CLK_BUS_MIPI_HSI]	= &bus_mipi_hsi_clk.common.hw,
+		[CLK_BUS_SATA]		= &bus_sata_clk.common.hw,
+		[CLK_BUS_TS]		= &bus_ts_clk.common.hw,
+		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
+		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
+		[CLK_BUS_SPI2]		= &bus_spi2_clk.common.hw,
+		[CLK_BUS_SPI3]		= &bus_spi3_clk.common.hw,
+
+		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
+		[CLK_BUS_USB]		= &bus_usb_clk.common.hw,
+		[CLK_BUS_GMAC]		= &bus_gmac_clk.common.hw,
+		[CLK_BUS_MSGBOX]	= &bus_msgbox_clk.common.hw,
+		[CLK_BUS_SPINLOCK]	= &bus_spinlock_clk.common.hw,
+		[CLK_BUS_HSTIMER]	= &bus_hstimer_clk.common.hw,
+		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
+
+		[CLK_BUS_LCD0]		= &bus_lcd0_clk.common.hw,
+		[CLK_BUS_LCD1]		= &bus_lcd1_clk.common.hw,
+		[CLK_BUS_EDP]		= &bus_edp_clk.common.hw,
+		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
+		[CLK_BUS_HDMI]		= &bus_hdmi_clk.common.hw,
+		[CLK_BUS_DE]		= &bus_de_clk.common.hw,
+		[CLK_BUS_MP]		= &bus_mp_clk.common.hw,
+		[CLK_BUS_MIPI_DSI]	= &bus_mipi_dsi_clk.common.hw,
+
+		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
+		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
+		[CLK_BUS_AC97]		= &bus_ac97_clk.common.hw,
+		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
+		[CLK_BUS_I2S1]		= &bus_i2s1_clk.common.hw,
+		[CLK_BUS_LRADC]		= &bus_lradc_clk.common.hw,
+		[CLK_BUS_GPADC]		= &bus_gpadc_clk.common.hw,
+		[CLK_BUS_TWD]		= &bus_twd_clk.common.hw,
+		[CLK_BUS_CIR_TX]	= &bus_cir_tx_clk.common.hw,
+
+		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
+		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
+		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
+		[CLK_BUS_I2C3]		= &bus_i2c3_clk.common.hw,
+		[CLK_BUS_I2C4]		= &bus_i2c4_clk.common.hw,
+		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
+		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
+		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
+		[CLK_BUS_UART3]		= &bus_uart3_clk.common.hw,
+		[CLK_BUS_UART4]		= &bus_uart4_clk.common.hw,
+		[CLK_BUS_UART5]		= &bus_uart5_clk.common.hw,
+	},
+	.num	= CLK_NUMBER,
+};
+
+static struct ccu_reset_map sun9i_a80_ccu_resets[] = {
+	/* AHB0 reset controls */
+	[RST_BUS_FD]		= { 0x5a0, BIT(0) },
+	[RST_BUS_VE]		= { 0x5a0, BIT(1) },
+	[RST_BUS_GPU_CTRL]	= { 0x5a0, BIT(3) },
+	[RST_BUS_SS]		= { 0x5a0, BIT(5) },
+	[RST_BUS_MMC]		= { 0x5a0, BIT(8) },
+	[RST_BUS_NAND0]		= { 0x5a0, BIT(12) },
+	[RST_BUS_NAND1]		= { 0x5a0, BIT(13) },
+	[RST_BUS_SDRAM]		= { 0x5a0, BIT(14) },
+	[RST_BUS_SATA]		= { 0x5a0, BIT(16) },
+	[RST_BUS_TS]		= { 0x5a0, BIT(18) },
+	[RST_BUS_SPI0]		= { 0x5a0, BIT(20) },
+	[RST_BUS_SPI1]		= { 0x5a0, BIT(21) },
+	[RST_BUS_SPI2]		= { 0x5a0, BIT(22) },
+	[RST_BUS_SPI3]		= { 0x5a0, BIT(23) },
+
+	/* AHB1 reset controls */
+	[RST_BUS_OTG]		= { 0x5a4, BIT(0) },
+	[RST_BUS_OTG_PHY]	= { 0x5a4, BIT(1) },
+	[RST_BUS_MIPI_HSI]	= { 0x5a4, BIT(9) },
+	[RST_BUS_GMAC]		= { 0x5a4, BIT(17) },
+	[RST_BUS_MSGBOX]	= { 0x5a4, BIT(21) },
+	[RST_BUS_SPINLOCK]	= { 0x5a4, BIT(22) },
+	[RST_BUS_HSTIMER]	= { 0x5a4, BIT(23) },
+	[RST_BUS_DMA]		= { 0x5a4, BIT(24) },
+
+	/* AHB2 reset controls */
+	[RST_BUS_LCD0]		= { 0x5a8, BIT(0) },
+	[RST_BUS_LCD1]		= { 0x5a8, BIT(1) },
+	[RST_BUS_EDP]		= { 0x5a8, BIT(2) },
+	[RST_BUS_LVDS]		= { 0x5a8, BIT(3) },
+	[RST_BUS_CSI]		= { 0x5a8, BIT(4) },
+	[RST_BUS_HDMI0]		= { 0x5a8, BIT(5) },
+	[RST_BUS_HDMI1]		= { 0x5a8, BIT(6) },
+	[RST_BUS_DE]		= { 0x5a8, BIT(7) },
+	[RST_BUS_MP]		= { 0x5a8, BIT(8) },
+	[RST_BUS_GPU]		= { 0x5a8, BIT(9) },
+	[RST_BUS_MIPI_DSI]	= { 0x5a8, BIT(11) },
+
+	/* APB0 reset controls */
+	[RST_BUS_SPDIF]		= { 0x5b0, BIT(1) },
+	[RST_BUS_AC97]		= { 0x5b0, BIT(11) },
+	[RST_BUS_I2S0]		= { 0x5b0, BIT(12) },
+	[RST_BUS_I2S1]		= { 0x5b0, BIT(13) },
+	[RST_BUS_LRADC]		= { 0x5b0, BIT(15) },
+	[RST_BUS_GPADC]		= { 0x5b0, BIT(17) },
+	[RST_BUS_CIR_TX]	= { 0x5b0, BIT(19) },
+
+	/* APB1 reset controls */
+	[RST_BUS_I2C0]		= { 0x5b4, BIT(0) },
+	[RST_BUS_I2C1]		= { 0x5b4, BIT(1) },
+	[RST_BUS_I2C2]		= { 0x5b4, BIT(2) },
+	[RST_BUS_I2C3]		= { 0x5b4, BIT(3) },
+	[RST_BUS_I2C4]		= { 0x5b4, BIT(4) },
+	[RST_BUS_UART0]		= { 0x5b4, BIT(16) },
+	[RST_BUS_UART1]		= { 0x5b4, BIT(17) },
+	[RST_BUS_UART2]		= { 0x5b4, BIT(18) },
+	[RST_BUS_UART3]		= { 0x5b4, BIT(19) },
+	[RST_BUS_UART4]		= { 0x5b4, BIT(20) },
+	[RST_BUS_UART5]		= { 0x5b4, BIT(21) },
+};
+
+static const struct sunxi_ccu_desc sun9i_a80_ccu_desc = {
+	.ccu_clks	= sun9i_a80_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun9i_a80_ccu_clks),
+
+	.hw_clks	= &sun9i_a80_hw_clks,
+
+	.resets		= sun9i_a80_ccu_resets,
+	.num_resets	= ARRAY_SIZE(sun9i_a80_ccu_resets),
+};
+
+#define SUN9I_A80_PLL_P_SHIFT	16
+#define SUN9I_A80_PLL_N_SHIFT	8
+#define SUN9I_A80_PLL_N_WIDTH	8
+
+static void sun9i_a80_cpu_pll_fixup(void __iomem *reg)
+{
+	u32 val = readl(reg);
+
+	/* bail out if P divider is not used */
+	if (!(val & BIT(SUN9I_A80_PLL_P_SHIFT)))
+		return;
+
+	/*
+	 * If P is used, output should be less than 288 MHz. When we
+	 * set P to 1, we should also decrease the multiplier so the
+	 * output doesn't go out of range, but not too much such that
+	 * the multiplier stays above 12, the minimal operation value.
+	 *
+	 * To keep it simple, set the multiplier to 17, the reset value.
+	 */
+	val &= ~GENMASK(SUN9I_A80_PLL_N_SHIFT + SUN9I_A80_PLL_N_WIDTH - 1,
+			SUN9I_A80_PLL_N_SHIFT);
+	val |= 17 << SUN9I_A80_PLL_N_SHIFT;
+
+	/* And clear P */
+	val &= ~BIT(SUN9I_A80_PLL_P_SHIFT);
+
+	writel(val, reg);
+}
+
+static int sun9i_a80_ccu_probe(struct platform_device *pdev)
+{
+	struct resource *res;
+	void __iomem *reg;
+	u32 val;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	reg = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(reg))
+		return PTR_ERR(reg);
+
+	/* Enforce d1 = 0, d2 = 0 for Audio PLL */
+	val = readl(reg + SUN9I_A80_PLL_AUDIO_REG);
+	val &= ~(BIT(16) | BIT(18));
+	writel(val, reg + SUN9I_A80_PLL_AUDIO_REG);
+
+	/* Enforce P = 1 for both CPU cluster PLLs */
+	sun9i_a80_cpu_pll_fixup(reg + SUN9I_A80_PLL_C0CPUX_REG);
+	sun9i_a80_cpu_pll_fixup(reg + SUN9I_A80_PLL_C1CPUX_REG);
+
+	return devm_sunxi_ccu_probe(&pdev->dev, reg, &sun9i_a80_ccu_desc);
+}
+
+static const struct of_device_id sun9i_a80_ccu_ids[] = {
+	{ .compatible = "allwinner,sun9i-a80-ccu" },
+	{ }
+};
+
+static struct platform_driver sun9i_a80_ccu_driver = {
+	.probe	= sun9i_a80_ccu_probe,
+	.driver	= {
+		.name	= "sun9i-a80-ccu",
+		.suppress_bind_attrs = true,
+		.of_match_table	= sun9i_a80_ccu_ids,
+	},
+};
+builtin_platform_driver(sun9i_a80_ccu_driver);
diff --git a/drivers/clk/sunxi-ng/sun9i-a80-ccu.h b/drivers/clk/sunxi-ng/sun9i-a80-ccu.h
new file mode 100644
index 000000000000..8377b6da0b3c
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun9i-a80-ccu.h
@@ -0,0 +1,48 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright 2016 Chen-Yu Tsai
+ *
+ * Chen-Yu Tsai <wens@csie.org>
+ */
+
+#ifndef _CCU_SUN9I_A80_H_
+#define _CCU_SUN9I_A80_H_
+
+#include <dt-bindings/clock/sun9i-a80-ccu.h>
+#include <dt-bindings/reset/sun9i-a80-ccu.h>
+
+#define CLK_PLL_C0CPUX		0
+#define CLK_PLL_C1CPUX		1
+
+/* pll-audio and pll-periph0 are exported to the PRCM block */
+
+#define CLK_PLL_VE		4
+#define CLK_PLL_DDR		5
+#define CLK_PLL_VIDEO0		6
+#define CLK_PLL_VIDEO1		7
+#define CLK_PLL_GPU		8
+#define CLK_PLL_DE		9
+#define CLK_PLL_ISP		10
+#define CLK_PLL_PERIPH1		11
+
+/* The CPUX clocks are exported */
+
+#define CLK_ATB0		14
+#define CLK_AXI0		15
+#define CLK_ATB1		16
+#define CLK_AXI1		17
+#define CLK_GTBUS		18
+#define CLK_AHB0		19
+#define CLK_AHB1		20
+#define CLK_AHB2		21
+#define CLK_APB0		22
+#define CLK_APB1		23
+#define CLK_CCI400		24
+#define CLK_ATS			25
+#define CLK_TRACE		26
+
+/* module clocks and bus gates exported */
+
+#define CLK_NUMBER		(CLK_BUS_UART5 + 1)
+
+#endif /* _CCU_SUN9I_A80_H_ */
diff --git a/drivers/clk/sunxi-ng/sun9i-a80-de-ccu.c b/drivers/clk/sunxi-ng/sun9i-a80-de-ccu.c
new file mode 100644
index 000000000000..5be451411cb4
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun9i-a80-de-ccu.c
@@ -0,0 +1,275 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (c) 2016 Chen-Yu Tsai. All rights reserved.
+ */
+
+#include <linux/clk.h>
+#include <linux/clk-provider.h>
+#include <linux/of_address.h>
+#include <linux/platform_device.h>
+#include <linux/reset.h>
+
+#include "ccu_common.h"
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_reset.h"
+
+#include "sun9i-a80-de-ccu.h"
+
+static SUNXI_CCU_GATE(fe0_clk,		"fe0",		"fe0-div",
+		      0x00, BIT(0), 0);
+static SUNXI_CCU_GATE(fe1_clk,		"fe1",		"fe1-div",
+		      0x00, BIT(1), 0);
+static SUNXI_CCU_GATE(fe2_clk,		"fe2",		"fe2-div",
+		      0x00, BIT(2), 0);
+static SUNXI_CCU_GATE(iep_deu0_clk,	"iep-deu0",	"de",
+		      0x00, BIT(4), 0);
+static SUNXI_CCU_GATE(iep_deu1_clk,	"iep-deu1",	"de",
+		      0x00, BIT(5), 0);
+static SUNXI_CCU_GATE(be0_clk,		"be0",		"be0-div",
+		      0x00, BIT(8), 0);
+static SUNXI_CCU_GATE(be1_clk,		"be1",		"be1-div",
+		      0x00, BIT(9), 0);
+static SUNXI_CCU_GATE(be2_clk,		"be2",		"be2-div",
+		      0x00, BIT(10), 0);
+static SUNXI_CCU_GATE(iep_drc0_clk,	"iep-drc0",	"de",
+		      0x00, BIT(12), 0);
+static SUNXI_CCU_GATE(iep_drc1_clk,	"iep-drc1",	"de",
+		      0x00, BIT(13), 0);
+static SUNXI_CCU_GATE(merge_clk,	"merge",	"de",
+		      0x00, BIT(20), 0);
+
+static SUNXI_CCU_GATE(dram_fe0_clk,	"dram-fe0",	"sdram",
+		      0x04, BIT(0), 0);
+static SUNXI_CCU_GATE(dram_fe1_clk,	"dram-fe1",	"sdram",
+		      0x04, BIT(1), 0);
+static SUNXI_CCU_GATE(dram_fe2_clk,	"dram-fe2",	"sdram",
+		      0x04, BIT(2), 0);
+static SUNXI_CCU_GATE(dram_deu0_clk,	"dram-deu0",	"sdram",
+		      0x04, BIT(4), 0);
+static SUNXI_CCU_GATE(dram_deu1_clk,	"dram-deu1",	"sdram",
+		      0x04, BIT(5), 0);
+static SUNXI_CCU_GATE(dram_be0_clk,	"dram-be0",	"sdram",
+		      0x04, BIT(8), 0);
+static SUNXI_CCU_GATE(dram_be1_clk,	"dram-be1",	"sdram",
+		      0x04, BIT(9), 0);
+static SUNXI_CCU_GATE(dram_be2_clk,	"dram-be2",	"sdram",
+		      0x04, BIT(10), 0);
+static SUNXI_CCU_GATE(dram_drc0_clk,	"dram-drc0",	"sdram",
+		      0x04, BIT(12), 0);
+static SUNXI_CCU_GATE(dram_drc1_clk,	"dram-drc1",	"sdram",
+		      0x04, BIT(13), 0);
+
+static SUNXI_CCU_GATE(bus_fe0_clk,	"bus-fe0",	"bus-de",
+		      0x08, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_fe1_clk,	"bus-fe1",	"bus-de",
+		      0x08, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_fe2_clk,	"bus-fe2",	"bus-de",
+		      0x08, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_deu0_clk,	"bus-deu0",	"bus-de",
+		      0x08, BIT(4), 0);
+static SUNXI_CCU_GATE(bus_deu1_clk,	"bus-deu1",	"bus-de",
+		      0x08, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_be0_clk,	"bus-be0",	"bus-de",
+		      0x08, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_be1_clk,	"bus-be1",	"bus-de",
+		      0x08, BIT(9), 0);
+static SUNXI_CCU_GATE(bus_be2_clk,	"bus-be2",	"bus-de",
+		      0x08, BIT(10), 0);
+static SUNXI_CCU_GATE(bus_drc0_clk,	"bus-drc0",	"bus-de",
+		      0x08, BIT(12), 0);
+static SUNXI_CCU_GATE(bus_drc1_clk,	"bus-drc1",	"bus-de",
+		      0x08, BIT(13), 0);
+
+static SUNXI_CCU_M(fe0_div_clk, "fe0-div", "de", 0x20, 0, 4, 0);
+static SUNXI_CCU_M(fe1_div_clk, "fe1-div", "de", 0x20, 4, 4, 0);
+static SUNXI_CCU_M(fe2_div_clk, "fe2-div", "de", 0x20, 8, 4, 0);
+static SUNXI_CCU_M(be0_div_clk, "be0-div", "de", 0x20, 16, 4, 0);
+static SUNXI_CCU_M(be1_div_clk, "be1-div", "de", 0x20, 20, 4, 0);
+static SUNXI_CCU_M(be2_div_clk, "be2-div", "de", 0x20, 24, 4, 0);
+
+static struct ccu_common *sun9i_a80_de_clks[] = {
+	&fe0_clk.common,
+	&fe1_clk.common,
+	&fe2_clk.common,
+	&iep_deu0_clk.common,
+	&iep_deu1_clk.common,
+	&be0_clk.common,
+	&be1_clk.common,
+	&be2_clk.common,
+	&iep_drc0_clk.common,
+	&iep_drc1_clk.common,
+	&merge_clk.common,
+
+	&dram_fe0_clk.common,
+	&dram_fe1_clk.common,
+	&dram_fe2_clk.common,
+	&dram_deu0_clk.common,
+	&dram_deu1_clk.common,
+	&dram_be0_clk.common,
+	&dram_be1_clk.common,
+	&dram_be2_clk.common,
+	&dram_drc0_clk.common,
+	&dram_drc1_clk.common,
+
+	&bus_fe0_clk.common,
+	&bus_fe1_clk.common,
+	&bus_fe2_clk.common,
+	&bus_deu0_clk.common,
+	&bus_deu1_clk.common,
+	&bus_be0_clk.common,
+	&bus_be1_clk.common,
+	&bus_be2_clk.common,
+	&bus_drc0_clk.common,
+	&bus_drc1_clk.common,
+
+	&fe0_div_clk.common,
+	&fe1_div_clk.common,
+	&fe2_div_clk.common,
+	&be0_div_clk.common,
+	&be1_div_clk.common,
+	&be2_div_clk.common,
+};
+
+static struct clk_hw_onecell_data sun9i_a80_de_hw_clks = {
+	.hws	= {
+		[CLK_FE0]	= &fe0_clk.common.hw,
+		[CLK_FE1]	= &fe1_clk.common.hw,
+		[CLK_FE2]	= &fe2_clk.common.hw,
+		[CLK_IEP_DEU0]	= &iep_deu0_clk.common.hw,
+		[CLK_IEP_DEU1]	= &iep_deu1_clk.common.hw,
+		[CLK_BE0]	= &be0_clk.common.hw,
+		[CLK_BE1]	= &be1_clk.common.hw,
+		[CLK_BE2]	= &be2_clk.common.hw,
+		[CLK_IEP_DRC0]	= &iep_drc0_clk.common.hw,
+		[CLK_IEP_DRC1]	= &iep_drc1_clk.common.hw,
+		[CLK_MERGE]	= &merge_clk.common.hw,
+
+		[CLK_DRAM_FE0]	= &dram_fe0_clk.common.hw,
+		[CLK_DRAM_FE1]	= &dram_fe1_clk.common.hw,
+		[CLK_DRAM_FE2]	= &dram_fe2_clk.common.hw,
+		[CLK_DRAM_DEU0]	= &dram_deu0_clk.common.hw,
+		[CLK_DRAM_DEU1]	= &dram_deu1_clk.common.hw,
+		[CLK_DRAM_BE0]	= &dram_be0_clk.common.hw,
+		[CLK_DRAM_BE1]	= &dram_be1_clk.common.hw,
+		[CLK_DRAM_BE2]	= &dram_be2_clk.common.hw,
+		[CLK_DRAM_DRC0]	= &dram_drc0_clk.common.hw,
+		[CLK_DRAM_DRC1]	= &dram_drc1_clk.common.hw,
+
+		[CLK_BUS_FE0]	= &bus_fe0_clk.common.hw,
+		[CLK_BUS_FE1]	= &bus_fe1_clk.common.hw,
+		[CLK_BUS_FE2]	= &bus_fe2_clk.common.hw,
+		[CLK_BUS_DEU0]	= &bus_deu0_clk.common.hw,
+		[CLK_BUS_DEU1]	= &bus_deu1_clk.common.hw,
+		[CLK_BUS_BE0]	= &bus_be0_clk.common.hw,
+		[CLK_BUS_BE1]	= &bus_be1_clk.common.hw,
+		[CLK_BUS_BE2]	= &bus_be2_clk.common.hw,
+		[CLK_BUS_DRC0]	= &bus_drc0_clk.common.hw,
+		[CLK_BUS_DRC1]	= &bus_drc1_clk.common.hw,
+
+		[CLK_FE0_DIV]	= &fe0_div_clk.common.hw,
+		[CLK_FE1_DIV]	= &fe1_div_clk.common.hw,
+		[CLK_FE2_DIV]	= &fe2_div_clk.common.hw,
+		[CLK_BE0_DIV]	= &be0_div_clk.common.hw,
+		[CLK_BE1_DIV]	= &be1_div_clk.common.hw,
+		[CLK_BE2_DIV]	= &be2_div_clk.common.hw,
+	},
+	.num	= CLK_NUMBER,
+};
+
+static struct ccu_reset_map sun9i_a80_de_resets[] = {
+	[RST_FE0]	= { 0x0c, BIT(0) },
+	[RST_FE1]	= { 0x0c, BIT(1) },
+	[RST_FE2]	= { 0x0c, BIT(2) },
+	[RST_DEU0]	= { 0x0c, BIT(4) },
+	[RST_DEU1]	= { 0x0c, BIT(5) },
+	[RST_BE0]	= { 0x0c, BIT(8) },
+	[RST_BE1]	= { 0x0c, BIT(9) },
+	[RST_BE2]	= { 0x0c, BIT(10) },
+	[RST_DRC0]	= { 0x0c, BIT(12) },
+	[RST_DRC1]	= { 0x0c, BIT(13) },
+	[RST_MERGE]	= { 0x0c, BIT(20) },
+};
+
+static const struct sunxi_ccu_desc sun9i_a80_de_clk_desc = {
+	.ccu_clks	= sun9i_a80_de_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun9i_a80_de_clks),
+
+	.hw_clks	= &sun9i_a80_de_hw_clks,
+
+	.resets		= sun9i_a80_de_resets,
+	.num_resets	= ARRAY_SIZE(sun9i_a80_de_resets),
+};
+
+static int sun9i_a80_de_clk_probe(struct platform_device *pdev)
+{
+	struct resource *res;
+	struct clk *bus_clk;
+	struct reset_control *rstc;
+	void __iomem *reg;
+	int ret;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	reg = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(reg))
+		return PTR_ERR(reg);
+
+	bus_clk = devm_clk_get(&pdev->dev, "bus");
+	if (IS_ERR(bus_clk)) {
+		ret = PTR_ERR(bus_clk);
+		if (ret != -EPROBE_DEFER)
+			dev_err(&pdev->dev, "Couldn't get bus clk: %d\n", ret);
+		return ret;
+	}
+
+	rstc = devm_reset_control_get_exclusive(&pdev->dev, NULL);
+	if (IS_ERR(rstc)) {
+		ret = PTR_ERR(rstc);
+		if (ret != -EPROBE_DEFER)
+			dev_err(&pdev->dev,
+				"Couldn't get reset control: %d\n", ret);
+		return ret;
+	}
+
+	/* The bus clock needs to be enabled for us to access the registers */
+	ret = clk_prepare_enable(bus_clk);
+	if (ret) {
+		dev_err(&pdev->dev, "Couldn't enable bus clk: %d\n", ret);
+		return ret;
+	}
+
+	/* The reset control needs to be asserted for the controls to work */
+	ret = reset_control_deassert(rstc);
+	if (ret) {
+		dev_err(&pdev->dev,
+			"Couldn't deassert reset control: %d\n", ret);
+		goto err_disable_clk;
+	}
+
+	ret = devm_sunxi_ccu_probe(&pdev->dev, reg, &sun9i_a80_de_clk_desc);
+	if (ret)
+		goto err_assert_reset;
+
+	return 0;
+
+err_assert_reset:
+	reset_control_assert(rstc);
+err_disable_clk:
+	clk_disable_unprepare(bus_clk);
+	return ret;
+}
+
+static const struct of_device_id sun9i_a80_de_clk_ids[] = {
+	{ .compatible = "allwinner,sun9i-a80-de-clks" },
+	{ }
+};
+
+static struct platform_driver sun9i_a80_de_clk_driver = {
+	.probe	= sun9i_a80_de_clk_probe,
+	.driver	= {
+		.name	= "sun9i-a80-de-clks",
+		.suppress_bind_attrs = true,
+		.of_match_table	= sun9i_a80_de_clk_ids,
+	},
+};
+builtin_platform_driver(sun9i_a80_de_clk_driver);
diff --git a/drivers/clk/sunxi-ng/sun9i-a80-de-ccu.h b/drivers/clk/sunxi-ng/sun9i-a80-de-ccu.h
new file mode 100644
index 000000000000..e7a408c30429
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun9i-a80-de-ccu.h
@@ -0,0 +1,24 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright 2016 Chen-Yu Tsai
+ *
+ * Chen-Yu Tsai <wens@csie.org>
+ */
+
+#ifndef _CCU_SUN9I_A80_DE_H_
+#define _CCU_SUN9I_A80_DE_H_
+
+#include <dt-bindings/clock/sun9i-a80-de.h>
+#include <dt-bindings/reset/sun9i-a80-de.h>
+
+/* Intermediary clock dividers are not exported */
+#define CLK_FE0_DIV	31
+#define CLK_FE1_DIV	32
+#define CLK_FE2_DIV	33
+#define CLK_BE0_DIV	34
+#define CLK_BE1_DIV	35
+#define CLK_BE2_DIV	36
+
+#define CLK_NUMBER	(CLK_BE2_DIV + 1)
+
+#endif /* _CCU_SUN9I_A80_DE_H_ */
diff --git a/drivers/clk/sunxi-ng/sun9i-a80-usb-ccu.c b/drivers/clk/sunxi-ng/sun9i-a80-usb-ccu.c
new file mode 100644
index 000000000000..62417b6e4f74
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun9i-a80-usb-ccu.c
@@ -0,0 +1,143 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (c) 2016 Chen-Yu Tsai. All rights reserved.
+ */
+
+#include <linux/clk.h>
+#include <linux/clk-provider.h>
+#include <linux/of_address.h>
+#include <linux/platform_device.h>
+
+#include "ccu_common.h"
+#include "ccu_gate.h"
+#include "ccu_reset.h"
+
+#include "sun9i-a80-usb-ccu.h"
+
+static const struct clk_parent_data clk_parent_hosc[] = {
+	{ .fw_name = "hosc" },
+};
+
+static const struct clk_parent_data clk_parent_bus[] = {
+	{ .fw_name = "bus" },
+};
+
+static SUNXI_CCU_GATE_DATA(bus_hci0_clk, "bus-hci0", clk_parent_bus, 0x0, BIT(1), 0);
+static SUNXI_CCU_GATE_DATA(usb_ohci0_clk, "usb-ohci0", clk_parent_hosc, 0x0, BIT(2), 0);
+static SUNXI_CCU_GATE_DATA(bus_hci1_clk, "bus-hci1", clk_parent_bus, 0x0, BIT(3), 0);
+static SUNXI_CCU_GATE_DATA(bus_hci2_clk, "bus-hci2", clk_parent_bus, 0x0, BIT(5), 0);
+static SUNXI_CCU_GATE_DATA(usb_ohci2_clk, "usb-ohci2", clk_parent_hosc, 0x0, BIT(6), 0);
+
+static SUNXI_CCU_GATE_DATA(usb0_phy_clk, "usb0-phy", clk_parent_hosc, 0x4, BIT(1), 0);
+static SUNXI_CCU_GATE_DATA(usb1_hsic_clk, "usb1-hsic", clk_parent_hosc, 0x4, BIT(2), 0);
+static SUNXI_CCU_GATE_DATA(usb1_phy_clk, "usb1-phy", clk_parent_hosc, 0x4, BIT(3), 0);
+static SUNXI_CCU_GATE_DATA(usb2_hsic_clk, "usb2-hsic", clk_parent_hosc, 0x4, BIT(4), 0);
+static SUNXI_CCU_GATE_DATA(usb2_phy_clk, "usb2-phy", clk_parent_hosc, 0x4, BIT(5), 0);
+static SUNXI_CCU_GATE_DATA(usb_hsic_clk, "usb-hsic", clk_parent_hosc, 0x4, BIT(10), 0);
+
+static struct ccu_common *sun9i_a80_usb_clks[] = {
+	&bus_hci0_clk.common,
+	&usb_ohci0_clk.common,
+	&bus_hci1_clk.common,
+	&bus_hci2_clk.common,
+	&usb_ohci2_clk.common,
+
+	&usb0_phy_clk.common,
+	&usb1_hsic_clk.common,
+	&usb1_phy_clk.common,
+	&usb2_hsic_clk.common,
+	&usb2_phy_clk.common,
+	&usb_hsic_clk.common,
+};
+
+static struct clk_hw_onecell_data sun9i_a80_usb_hw_clks = {
+	.hws	= {
+		[CLK_BUS_HCI0]	= &bus_hci0_clk.common.hw,
+		[CLK_USB_OHCI0]	= &usb_ohci0_clk.common.hw,
+		[CLK_BUS_HCI1]	= &bus_hci1_clk.common.hw,
+		[CLK_BUS_HCI2]	= &bus_hci2_clk.common.hw,
+		[CLK_USB_OHCI2]	= &usb_ohci2_clk.common.hw,
+
+		[CLK_USB0_PHY]	= &usb0_phy_clk.common.hw,
+		[CLK_USB1_HSIC]	= &usb1_hsic_clk.common.hw,
+		[CLK_USB1_PHY]	= &usb1_phy_clk.common.hw,
+		[CLK_USB2_HSIC]	= &usb2_hsic_clk.common.hw,
+		[CLK_USB2_PHY]	= &usb2_phy_clk.common.hw,
+		[CLK_USB_HSIC]	= &usb_hsic_clk.common.hw,
+	},
+	.num	= CLK_NUMBER,
+};
+
+static struct ccu_reset_map sun9i_a80_usb_resets[] = {
+	[RST_USB0_HCI]		= { 0x0, BIT(17) },
+	[RST_USB1_HCI]		= { 0x0, BIT(18) },
+	[RST_USB2_HCI]		= { 0x0, BIT(19) },
+
+	[RST_USB0_PHY]		= { 0x4, BIT(17) },
+	[RST_USB1_HSIC]		= { 0x4, BIT(18) },
+	[RST_USB1_PHY]		= { 0x4, BIT(19) },
+	[RST_USB2_HSIC]		= { 0x4, BIT(20) },
+	[RST_USB2_PHY]		= { 0x4, BIT(21) },
+};
+
+static const struct sunxi_ccu_desc sun9i_a80_usb_clk_desc = {
+	.ccu_clks	= sun9i_a80_usb_clks,
+	.num_ccu_clks	= ARRAY_SIZE(sun9i_a80_usb_clks),
+
+	.hw_clks	= &sun9i_a80_usb_hw_clks,
+
+	.resets		= sun9i_a80_usb_resets,
+	.num_resets	= ARRAY_SIZE(sun9i_a80_usb_resets),
+};
+
+static int sun9i_a80_usb_clk_probe(struct platform_device *pdev)
+{
+	struct resource *res;
+	struct clk *bus_clk;
+	void __iomem *reg;
+	int ret;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	reg = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(reg))
+		return PTR_ERR(reg);
+
+	bus_clk = devm_clk_get(&pdev->dev, "bus");
+	if (IS_ERR(bus_clk)) {
+		ret = PTR_ERR(bus_clk);
+		if (ret != -EPROBE_DEFER)
+			dev_err(&pdev->dev, "Couldn't get bus clk: %d\n", ret);
+		return ret;
+	}
+
+	/* The bus clock needs to be enabled for us to access the registers */
+	ret = clk_prepare_enable(bus_clk);
+	if (ret) {
+		dev_err(&pdev->dev, "Couldn't enable bus clk: %d\n", ret);
+		return ret;
+	}
+
+	ret = devm_sunxi_ccu_probe(&pdev->dev, reg, &sun9i_a80_usb_clk_desc);
+	if (ret)
+		goto err_disable_clk;
+
+	return 0;
+
+err_disable_clk:
+	clk_disable_unprepare(bus_clk);
+	return ret;
+}
+
+static const struct of_device_id sun9i_a80_usb_clk_ids[] = {
+	{ .compatible = "allwinner,sun9i-a80-usb-clks" },
+	{ }
+};
+
+static struct platform_driver sun9i_a80_usb_clk_driver = {
+	.probe	= sun9i_a80_usb_clk_probe,
+	.driver	= {
+		.name	= "sun9i-a80-usb-clks",
+		.of_match_table	= sun9i_a80_usb_clk_ids,
+	},
+};
+builtin_platform_driver(sun9i_a80_usb_clk_driver);
diff --git a/drivers/clk/sunxi-ng/sun9i-a80-usb-ccu.h b/drivers/clk/sunxi-ng/sun9i-a80-usb-ccu.h
new file mode 100644
index 000000000000..a0372eb5a4c6
--- /dev/null
+++ b/drivers/clk/sunxi-ng/sun9i-a80-usb-ccu.h
@@ -0,0 +1,16 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+/*
+ * Copyright 2016 Chen-Yu Tsai
+ *
+ * Chen-Yu Tsai <wens@csie.org>
+ */
+
+#ifndef _CCU_SUN9I_A80_USB_H_
+#define _CCU_SUN9I_A80_USB_H_
+
+#include <dt-bindings/clock/sun9i-a80-usb.h>
+#include <dt-bindings/reset/sun9i-a80-usb.h>
+
+#define CLK_NUMBER	(CLK_USB_HSIC + 1)
+
+#endif /* _CCU_SUN9I_A80_USB_H_ */
diff --git a/drivers/clk/sunxi-ng/suniv-f1c100s-ccu.c b/drivers/clk/sunxi-ng/suniv-f1c100s-ccu.c
new file mode 100644
index 000000000000..850ab8af2471
--- /dev/null
+++ b/drivers/clk/sunxi-ng/suniv-f1c100s-ccu.c
@@ -0,0 +1,551 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (c) 2016 Icenowy Zheng <icenowy@aosc.io>
+ *
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/io.h>
+#include <linux/of_address.h>
+
+#include "ccu_common.h"
+#include "ccu_reset.h"
+
+#include "ccu_div.h"
+#include "ccu_gate.h"
+#include "ccu_mp.h"
+#include "ccu_mult.h"
+#include "ccu_nk.h"
+#include "ccu_nkm.h"
+#include "ccu_nkmp.h"
+#include "ccu_nm.h"
+#include "ccu_phase.h"
+
+#include "suniv-f1c100s-ccu.h"
+
+static struct ccu_nkmp pll_cpu_clk = {
+	.enable = BIT(31),
+	.lock	= BIT(28),
+
+	.n	= _SUNXI_CCU_MULT(8, 5),
+	.k	= _SUNXI_CCU_MULT(4, 2),
+	.m	= _SUNXI_CCU_DIV(0, 2),
+	/* MAX is guessed by the BSP table */
+	.p	= _SUNXI_CCU_DIV_MAX(16, 2, 4),
+
+	.common	= {
+		.reg		= 0x000,
+		.hw.init	= CLK_HW_INIT("pll-cpu", "osc24M",
+					      &ccu_nkmp_ops,
+					      CLK_SET_RATE_UNGATE),
+	},
+};
+
+/*
+ * The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
+ * the base (2x, 4x and 8x), and one variable divider (the one true
+ * pll audio).
+ *
+ * We don't have any need for the variable divider for now, so we just
+ * hardcode it to match with the clock names
+ */
+#define SUNIV_PLL_AUDIO_REG	0x008
+
+static SUNXI_CCU_NM_WITH_GATE_LOCK(pll_audio_base_clk, "pll-audio-base",
+				   "osc24M", 0x008,
+				   8, 7,		/* N */
+				   0, 5,		/* M */
+				   BIT(31),		/* gate */
+				   BIT(28),		/* lock */
+				   CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_video_clk, "pll-video",
+					"osc24M", 0x010,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NM_WITH_FRAC_GATE_LOCK(pll_ve_clk, "pll-ve",
+					"osc24M", 0x018,
+					8, 7,		/* N */
+					0, 4,		/* M */
+					BIT(24),	/* frac enable */
+					BIT(25),	/* frac select */
+					270000000,	/* frac rate 0 */
+					297000000,	/* frac rate 1 */
+					BIT(31),	/* gate */
+					BIT(28),	/* lock */
+					CLK_SET_RATE_UNGATE);
+
+static SUNXI_CCU_NKM_WITH_GATE_LOCK(pll_ddr0_clk, "pll-ddr",
+				    "osc24M", 0x020,
+				    8, 5,		/* N */
+				    4, 2,		/* K */
+				    0, 2,		/* M */
+				    BIT(31),		/* gate */
+				    BIT(28),		/* lock */
+				    CLK_IS_CRITICAL);
+
+static struct ccu_nk pll_periph_clk = {
+	.enable		= BIT(31),
+	.lock		= BIT(28),
+	.k		= _SUNXI_CCU_MULT(4, 2),
+	.n		= _SUNXI_CCU_MULT(8, 5),
+	.common		= {
+		.reg		= 0x028,
+		.hw.init	= CLK_HW_INIT("pll-periph", "osc24M",
+					      &ccu_nk_ops, 0),
+	},
+};
+
+static const char * const cpu_parents[] = { "osc32k", "osc24M",
+					     "pll-cpu", "pll-cpu" };
+static SUNXI_CCU_MUX(cpu_clk, "cpu", cpu_parents,
+		     0x050, 16, 2, CLK_IS_CRITICAL | CLK_SET_RATE_PARENT);
+
+static const char * const ahb_parents[] = { "osc32k", "osc24M",
+					    "cpu", "pll-periph" };
+static const struct ccu_mux_var_prediv ahb_predivs[] = {
+	{ .index = 3, .shift = 6, .width = 2 },
+};
+static struct ccu_div ahb_clk = {
+	.div		= _SUNXI_CCU_DIV_FLAGS(4, 2, CLK_DIVIDER_POWER_OF_TWO),
+
+	.mux		= {
+		.shift	= 12,
+		.width	= 2,
+
+		.var_predivs	= ahb_predivs,
+		.n_var_predivs	= ARRAY_SIZE(ahb_predivs),
+	},
+
+	.common		= {
+		.reg		= 0x054,
+		.features	= CCU_FEATURE_VARIABLE_PREDIV,
+		.hw.init	= CLK_HW_INIT_PARENTS("ahb",
+						      ahb_parents,
+						      &ccu_div_ops,
+						      0),
+	},
+};
+
+static struct clk_div_table apb_div_table[] = {
+	{ .val = 0, .div = 2 },
+	{ .val = 1, .div = 2 },
+	{ .val = 2, .div = 4 },
+	{ .val = 3, .div = 8 },
+	{ /* Sentinel */ },
+};
+static SUNXI_CCU_DIV_TABLE(apb_clk, "apb", "ahb",
+			   0x054, 8, 2, apb_div_table, 0);
+
+static SUNXI_CCU_GATE(bus_dma_clk,	"bus-dma",	"ahb",
+		      0x060, BIT(6), 0);
+static SUNXI_CCU_GATE(bus_mmc0_clk,	"bus-mmc0",	"ahb",
+		      0x060, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_mmc1_clk,	"bus-mmc1",	"ahb",
+		      0x060, BIT(9), 0);
+static SUNXI_CCU_GATE(bus_dram_clk,	"bus-dram",	"ahb",
+		      0x060, BIT(14), 0);
+static SUNXI_CCU_GATE(bus_spi0_clk,	"bus-spi0",	"ahb",
+		      0x060, BIT(20), 0);
+static SUNXI_CCU_GATE(bus_spi1_clk,	"bus-spi1",	"ahb",
+		      0x060, BIT(21), 0);
+static SUNXI_CCU_GATE(bus_otg_clk,	"bus-otg",	"ahb",
+		      0x060, BIT(24), 0);
+
+static SUNXI_CCU_GATE(bus_ve_clk,	"bus-ve",	"ahb",
+		      0x064, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_lcd_clk,	"bus-lcd",	"ahb",
+		      0x064, BIT(4), 0);
+static SUNXI_CCU_GATE(bus_deinterlace_clk,	"bus-deinterlace",	"ahb",
+		      0x064, BIT(5), 0);
+static SUNXI_CCU_GATE(bus_csi_clk,	"bus-csi",	"ahb",
+		      0x064, BIT(8), 0);
+static SUNXI_CCU_GATE(bus_tvd_clk,	"bus-tvd",	"ahb",
+		      0x064, BIT(9), 0);
+static SUNXI_CCU_GATE(bus_tve_clk,	"bus-tve",	"ahb",
+		      0x064, BIT(10), 0);
+static SUNXI_CCU_GATE(bus_de_be_clk,	"bus-de-be",	"ahb",
+		      0x064, BIT(12), 0);
+static SUNXI_CCU_GATE(bus_de_fe_clk,	"bus-de-fe",	"ahb",
+		      0x064, BIT(14), 0);
+
+static SUNXI_CCU_GATE(bus_codec_clk,	"bus-codec",	"apb",
+		      0x068, BIT(0), 0);
+static SUNXI_CCU_GATE(bus_spdif_clk,	"bus-spdif",	"apb",
+		      0x068, BIT(1), 0);
+static SUNXI_CCU_GATE(bus_ir_clk,	"bus-ir",	"apb",
+		      0x068, BIT(2), 0);
+static SUNXI_CCU_GATE(bus_rsb_clk,	"bus-rsb",	"apb",
+		      0x068, BIT(3), 0);
+static SUNXI_CCU_GATE(bus_i2s0_clk,	"bus-i2s0",	"apb",
+		      0x068, BIT(12), 0);
+static SUNXI_CCU_GATE(bus_i2c0_clk,	"bus-i2c0",	"apb",
+		      0x068, BIT(16), 0);
+static SUNXI_CCU_GATE(bus_i2c1_clk,	"bus-i2c1",	"apb",
+		      0x068, BIT(17), 0);
+static SUNXI_CCU_GATE(bus_i2c2_clk,	"bus-i2c2",	"apb",
+		      0x068, BIT(18), 0);
+static SUNXI_CCU_GATE(bus_pio_clk,	"bus-pio",	"apb",
+		      0x068, BIT(19), 0);
+static SUNXI_CCU_GATE(bus_uart0_clk,	"bus-uart0",	"apb",
+		      0x068, BIT(20), 0);
+static SUNXI_CCU_GATE(bus_uart1_clk,	"bus-uart1",	"apb",
+		      0x068, BIT(21), 0);
+static SUNXI_CCU_GATE(bus_uart2_clk,	"bus-uart2",	"apb",
+		      0x068, BIT(22), 0);
+
+static const char * const mod0_default_parents[] = { "osc24M", "pll-periph" };
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc0_clk, "mmc0", mod0_default_parents, 0x088,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc0_sample_clk, "mmc0_sample", "mmc0",
+		       0x088, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc0_output_clk, "mmc0_output", "mmc0",
+		       0x088, 8, 3, 0);
+
+static SUNXI_CCU_MP_WITH_MUX_GATE(mmc1_clk, "mmc1", mod0_default_parents, 0x08c,
+				  0, 4,		/* M */
+				  16, 2,	/* P */
+				  24, 2,	/* mux */
+				  BIT(31),	/* gate */
+				  0);
+
+static SUNXI_CCU_PHASE(mmc1_sample_clk, "mmc1_sample", "mmc1",
+		       0x08c, 20, 3, 0);
+static SUNXI_CCU_PHASE(mmc1_output_clk, "mmc1_output", "mmc1",
+		       0x08c, 8, 3, 0);
+
+static const char * const i2s_spdif_parents[] = { "pll-audio-8x",
+						  "pll-audio-4x",
+						  "pll-audio-2x",
+						  "pll-audio" };
+
+static SUNXI_CCU_MUX_WITH_GATE(i2s_clk, "i2s", i2s_spdif_parents,
+			       0x0b0, 16, 2, BIT(31), 0);
+
+static SUNXI_CCU_MUX_WITH_GATE(spdif_clk, "spdif", i2s_spdif_parents,
+			       0x0b4, 16, 2, BIT(31), 0);
+
+/* The BSP header file has a CIR_CFG, but no mod clock uses this definition */
+
+static SUNXI_CCU_GATE(usb_phy0_clk,	"usb-phy0",	"osc24M",
+		      0x0cc, BIT(1), 0);
+
+static SUNXI_CCU_GATE(dram_ve_clk,	"dram-ve",	"pll-ddr",
+		      0x100, BIT(0), 0);
+static SUNXI_CCU_GATE(dram_csi_clk,	"dram-csi",	"pll-ddr",
+		      0x100, BIT(1), 0);
+static SUNXI_CCU_GATE(dram_deinterlace_clk,	"dram-deinterlace",
+		      "pll-ddr", 0x100, BIT(2), 0);
+static SUNXI_CCU_GATE(dram_tvd_clk,	"dram-tvd",	"pll-ddr",
+		      0x100, BIT(3), 0);
+static SUNXI_CCU_GATE(dram_de_fe_clk,	"dram-de-fe",	"pll-ddr",
+		      0x100, BIT(24), 0);
+static SUNXI_CCU_GATE(dram_de_be_clk,	"dram-de-be",	"pll-ddr",
+		      0x100, BIT(26), 0);
+
+static const char * const de_parents[] = { "pll-video", "pll-periph" };
+static const u8 de_table[] = { 0, 2, };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(de_be_clk, "de-be",
+				       de_parents, de_table,
+				       0x104, 0, 4, 24, 3, BIT(31), 0);
+
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(de_fe_clk, "de-fe",
+				       de_parents, de_table,
+				       0x10c, 0, 4, 24, 3, BIT(31), 0);
+
+static const char * const tcon_parents[] = { "pll-video", "pll-video-2x" };
+static const u8 tcon_table[] = { 0, 2, };
+static SUNXI_CCU_MUX_TABLE_WITH_GATE(tcon_clk, "tcon",
+				     tcon_parents, tcon_table,
+				     0x118, 24, 3, BIT(31),
+				     CLK_SET_RATE_PARENT);
+
+static const char * const deinterlace_parents[] = { "pll-video",
+						    "pll-video-2x" };
+static const u8 deinterlace_table[] = { 0, 2, };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(deinterlace_clk, "deinterlace",
+				       deinterlace_parents, deinterlace_table,
+				       0x11c, 0, 4, 24, 3, BIT(31), 0);
+
+static const char * const tve_clk2_parents[] = { "pll-video",
+						 "pll-video-2x" };
+static const u8 tve_clk2_table[] = { 0, 2, };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(tve_clk2_clk, "tve-clk2",
+				       tve_clk2_parents, tve_clk2_table,
+				       0x120, 0, 4, 24, 3, BIT(31), 0);
+static SUNXI_CCU_M_WITH_GATE(tve_clk1_clk, "tve-clk1", "tve-clk2",
+			     0x120, 8, 1, BIT(15), 0);
+
+static const char * const tvd_parents[] = { "pll-video", "osc24M",
+					    "pll-video-2x" };
+static SUNXI_CCU_M_WITH_MUX_GATE(tvd_clk, "tvd", tvd_parents,
+				 0x124, 0, 4, 24, 3, BIT(31), 0);
+
+static const char * const csi_parents[] = { "pll-video", "osc24M" };
+static const u8 csi_table[] = { 0, 5, };
+static SUNXI_CCU_M_WITH_MUX_TABLE_GATE(csi_clk, "csi", csi_parents, csi_table,
+				       0x120, 0, 4, 8, 3, BIT(15), 0);
+
+/*
+ * TODO: BSP says the parent is pll-audio, however common sense and experience
+ * told us it should be pll-ve. pll-ve is totally not used in BSP code.
+ */
+static SUNXI_CCU_GATE(ve_clk, "ve", "pll-audio", 0x13c, BIT(31), 0);
+
+static SUNXI_CCU_GATE(codec_clk, "codec", "pll-audio", 0x140, BIT(31), 0);
+
+static SUNXI_CCU_GATE(avs_clk, "avs", "osc24M", 0x144, BIT(31), 0);
+
+static struct ccu_common *suniv_ccu_clks[] = {
+	&pll_cpu_clk.common,
+	&pll_audio_base_clk.common,
+	&pll_video_clk.common,
+	&pll_ve_clk.common,
+	&pll_ddr0_clk.common,
+	&pll_periph_clk.common,
+	&cpu_clk.common,
+	&ahb_clk.common,
+	&apb_clk.common,
+	&bus_dma_clk.common,
+	&bus_mmc0_clk.common,
+	&bus_mmc1_clk.common,
+	&bus_dram_clk.common,
+	&bus_spi0_clk.common,
+	&bus_spi1_clk.common,
+	&bus_otg_clk.common,
+	&bus_ve_clk.common,
+	&bus_lcd_clk.common,
+	&bus_deinterlace_clk.common,
+	&bus_csi_clk.common,
+	&bus_tve_clk.common,
+	&bus_tvd_clk.common,
+	&bus_de_be_clk.common,
+	&bus_de_fe_clk.common,
+	&bus_codec_clk.common,
+	&bus_spdif_clk.common,
+	&bus_ir_clk.common,
+	&bus_rsb_clk.common,
+	&bus_i2s0_clk.common,
+	&bus_i2c0_clk.common,
+	&bus_i2c1_clk.common,
+	&bus_i2c2_clk.common,
+	&bus_pio_clk.common,
+	&bus_uart0_clk.common,
+	&bus_uart1_clk.common,
+	&bus_uart2_clk.common,
+	&mmc0_clk.common,
+	&mmc0_sample_clk.common,
+	&mmc0_output_clk.common,
+	&mmc1_clk.common,
+	&mmc1_sample_clk.common,
+	&mmc1_output_clk.common,
+	&i2s_clk.common,
+	&spdif_clk.common,
+	&usb_phy0_clk.common,
+	&dram_ve_clk.common,
+	&dram_csi_clk.common,
+	&dram_deinterlace_clk.common,
+	&dram_tvd_clk.common,
+	&dram_de_fe_clk.common,
+	&dram_de_be_clk.common,
+	&de_be_clk.common,
+	&de_fe_clk.common,
+	&tcon_clk.common,
+	&deinterlace_clk.common,
+	&tve_clk2_clk.common,
+	&tve_clk1_clk.common,
+	&tvd_clk.common,
+	&csi_clk.common,
+	&ve_clk.common,
+	&codec_clk.common,
+	&avs_clk.common,
+};
+
+static const struct clk_hw *clk_parent_pll_audio[] = {
+	&pll_audio_base_clk.common.hw
+};
+
+static CLK_FIXED_FACTOR_HWS(pll_audio_clk, "pll-audio",
+			    clk_parent_pll_audio,
+			    4, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_2x_clk, "pll-audio-2x",
+			    clk_parent_pll_audio,
+			    2, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_4x_clk, "pll-audio-4x",
+			    clk_parent_pll_audio,
+			    1, 1, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HWS(pll_audio_8x_clk, "pll-audio-8x",
+			    clk_parent_pll_audio,
+			    1, 2, CLK_SET_RATE_PARENT);
+static CLK_FIXED_FACTOR_HW(pll_video_2x_clk, "pll-video-2x",
+			    &pll_video_clk.common.hw,
+			    1, 2, 0);
+
+static struct clk_hw_onecell_data suniv_hw_clks = {
+	.hws	= {
+		[CLK_PLL_CPU]		= &pll_cpu_clk.common.hw,
+		[CLK_PLL_AUDIO_BASE]	= &pll_audio_base_clk.common.hw,
+		[CLK_PLL_AUDIO]		= &pll_audio_clk.hw,
+		[CLK_PLL_AUDIO_2X]	= &pll_audio_2x_clk.hw,
+		[CLK_PLL_AUDIO_4X]	= &pll_audio_4x_clk.hw,
+		[CLK_PLL_AUDIO_8X]	= &pll_audio_8x_clk.hw,
+		[CLK_PLL_VIDEO]		= &pll_video_clk.common.hw,
+		[CLK_PLL_VIDEO_2X]	= &pll_video_2x_clk.hw,
+		[CLK_PLL_VE]		= &pll_ve_clk.common.hw,
+		[CLK_PLL_DDR0]		= &pll_ddr0_clk.common.hw,
+		[CLK_PLL_PERIPH]	= &pll_periph_clk.common.hw,
+		[CLK_CPU]		= &cpu_clk.common.hw,
+		[CLK_AHB]		= &ahb_clk.common.hw,
+		[CLK_APB]		= &apb_clk.common.hw,
+		[CLK_BUS_DMA]		= &bus_dma_clk.common.hw,
+		[CLK_BUS_MMC0]		= &bus_mmc0_clk.common.hw,
+		[CLK_BUS_MMC1]		= &bus_mmc1_clk.common.hw,
+		[CLK_BUS_DRAM]		= &bus_dram_clk.common.hw,
+		[CLK_BUS_SPI0]		= &bus_spi0_clk.common.hw,
+		[CLK_BUS_SPI1]		= &bus_spi1_clk.common.hw,
+		[CLK_BUS_OTG]		= &bus_otg_clk.common.hw,
+		[CLK_BUS_VE]		= &bus_ve_clk.common.hw,
+		[CLK_BUS_LCD]		= &bus_lcd_clk.common.hw,
+		[CLK_BUS_DEINTERLACE]	= &bus_deinterlace_clk.common.hw,
+		[CLK_BUS_CSI]		= &bus_csi_clk.common.hw,
+		[CLK_BUS_TVD]		= &bus_tvd_clk.common.hw,
+		[CLK_BUS_TVE]		= &bus_tve_clk.common.hw,
+		[CLK_BUS_DE_BE]		= &bus_de_be_clk.common.hw,
+		[CLK_BUS_DE_FE]		= &bus_de_fe_clk.common.hw,
+		[CLK_BUS_CODEC]		= &bus_codec_clk.common.hw,
+		[CLK_BUS_SPDIF]		= &bus_spdif_clk.common.hw,
+		[CLK_BUS_IR]		= &bus_ir_clk.common.hw,
+		[CLK_BUS_RSB]		= &bus_rsb_clk.common.hw,
+		[CLK_BUS_I2S0]		= &bus_i2s0_clk.common.hw,
+		[CLK_BUS_I2C0]		= &bus_i2c0_clk.common.hw,
+		[CLK_BUS_I2C1]		= &bus_i2c1_clk.common.hw,
+		[CLK_BUS_I2C2]		= &bus_i2c2_clk.common.hw,
+		[CLK_BUS_PIO]		= &bus_pio_clk.common.hw,
+		[CLK_BUS_UART0]		= &bus_uart0_clk.common.hw,
+		[CLK_BUS_UART1]		= &bus_uart1_clk.common.hw,
+		[CLK_BUS_UART2]		= &bus_uart2_clk.common.hw,
+		[CLK_MMC0]		= &mmc0_clk.common.hw,
+		[CLK_MMC0_SAMPLE]	= &mmc0_sample_clk.common.hw,
+		[CLK_MMC0_OUTPUT]	= &mmc0_output_clk.common.hw,
+		[CLK_MMC1]		= &mmc1_clk.common.hw,
+		[CLK_MMC1_SAMPLE]	= &mmc1_sample_clk.common.hw,
+		[CLK_MMC1_OUTPUT]	= &mmc1_output_clk.common.hw,
+		[CLK_I2S]		= &i2s_clk.common.hw,
+		[CLK_SPDIF]		= &spdif_clk.common.hw,
+		[CLK_USB_PHY0]		= &usb_phy0_clk.common.hw,
+		[CLK_DRAM_VE]		= &dram_ve_clk.common.hw,
+		[CLK_DRAM_CSI]		= &dram_csi_clk.common.hw,
+		[CLK_DRAM_DEINTERLACE]	= &dram_deinterlace_clk.common.hw,
+		[CLK_DRAM_TVD]		= &dram_tvd_clk.common.hw,
+		[CLK_DRAM_DE_FE]	= &dram_de_fe_clk.common.hw,
+		[CLK_DRAM_DE_BE]	= &dram_de_be_clk.common.hw,
+		[CLK_DE_BE]		= &de_be_clk.common.hw,
+		[CLK_DE_FE]		= &de_fe_clk.common.hw,
+		[CLK_TCON]		= &tcon_clk.common.hw,
+		[CLK_DEINTERLACE]	= &deinterlace_clk.common.hw,
+		[CLK_TVE2_CLK]		= &tve_clk2_clk.common.hw,
+		[CLK_TVE1_CLK]		= &tve_clk1_clk.common.hw,
+		[CLK_TVD]		= &tvd_clk.common.hw,
+		[CLK_CSI]		= &csi_clk.common.hw,
+		[CLK_VE]		= &ve_clk.common.hw,
+		[CLK_CODEC]		= &codec_clk.common.hw,
+		[CLK_AVS]		= &avs_clk.common.hw,
+	},
+	.num	= CLK_NUMBER,
+};
+
+static struct ccu_reset_map suniv_ccu_resets[] = {
+	[RST_USB_PHY0]		=  { 0x0cc, BIT(0) },
+
+	[RST_BUS_DMA]		=  { 0x2c0, BIT(6) },
+	[RST_BUS_MMC0]		=  { 0x2c0, BIT(8) },
+	[RST_BUS_MMC1]		=  { 0x2c0, BIT(9) },
+	[RST_BUS_DRAM]		=  { 0x2c0, BIT(14) },
+	[RST_BUS_SPI0]		=  { 0x2c0, BIT(20) },
+	[RST_BUS_SPI1]		=  { 0x2c0, BIT(21) },
+	[RST_BUS_OTG]		=  { 0x2c0, BIT(24) },
+	[RST_BUS_VE]		=  { 0x2c4, BIT(0) },
+	[RST_BUS_LCD]		=  { 0x2c4, BIT(4) },
+	[RST_BUS_DEINTERLACE]	=  { 0x2c4, BIT(5) },
+	[RST_BUS_CSI]		=  { 0x2c4, BIT(8) },
+	[RST_BUS_TVD]		=  { 0x2c4, BIT(9) },
+	[RST_BUS_TVE]		=  { 0x2c4, BIT(10) },
+	[RST_BUS_DE_BE]		=  { 0x2c4, BIT(12) },
+	[RST_BUS_DE_FE]		=  { 0x2c4, BIT(14) },
+	[RST_BUS_CODEC]		=  { 0x2d0, BIT(0) },
+	[RST_BUS_SPDIF]		=  { 0x2d0, BIT(1) },
+	[RST_BUS_IR]		=  { 0x2d0, BIT(2) },
+	[RST_BUS_RSB]		=  { 0x2d0, BIT(3) },
+	[RST_BUS_I2S0]		=  { 0x2d0, BIT(12) },
+	[RST_BUS_I2C0]		=  { 0x2d0, BIT(16) },
+	[RST_BUS_I2C1]		=  { 0x2d0, BIT(17) },
+	[RST_BUS_I2C2]		=  { 0x2d0, BIT(18) },
+	[RST_BUS_UART0]		=  { 0x2d0, BIT(20) },
+	[RST_BUS_UART1]		=  { 0x2d0, BIT(21) },
+	[RST_BUS_UART2]		=  { 0x2d0, BIT(22) },
+};
+
+static const struct sunxi_ccu_desc suniv_ccu_desc = {
+	.ccu_clks	= suniv_ccu_clks,
+	.num_ccu_clks	= ARRAY_SIZE(suniv_ccu_clks),
+
+	.hw_clks	= &suniv_hw_clks,
+
+	.resets		= suniv_ccu_resets,
+	.num_resets	= ARRAY_SIZE(suniv_ccu_resets),
+};
+
+static struct ccu_pll_nb suniv_pll_cpu_nb = {
+	.common	= &pll_cpu_clk.common,
+	/* copy from pll_cpu_clk */
+	.enable	= BIT(31),
+	.lock	= BIT(28),
+};
+
+static struct ccu_mux_nb suniv_cpu_nb = {
+	.common		= &cpu_clk.common,
+	.cm		= &cpu_clk.mux,
+	.delay_us	= 1, /* > 8 clock cycles at 24 MHz */
+	.bypass_index	= 1, /* index of 24 MHz oscillator */
+};
+
+static void __init suniv_f1c100s_ccu_setup(struct device_node *node)
+{
+	void __iomem *reg;
+	u32 val;
+
+	reg = of_io_request_and_map(node, 0, of_node_full_name(node));
+	if (IS_ERR(reg)) {
+		pr_err("%pOF: Could not map the clock registers\n", node);
+		return;
+	}
+
+	/* Force the PLL-Audio-1x divider to 4 */
+	val = readl(reg + SUNIV_PLL_AUDIO_REG);
+	val &= ~GENMASK(19, 16);
+	writel(val | (3 << 16), reg + SUNIV_PLL_AUDIO_REG);
+
+	of_sunxi_ccu_probe(node, reg, &suniv_ccu_desc);
+
+	/* Gate then ungate PLL CPU after any rate changes */
+	ccu_pll_notifier_register(&suniv_pll_cpu_nb);
+
+	/* Reparent CPU during PLL CPU rate changes */
+	ccu_mux_notifier_register(pll_cpu_clk.common.hw.clk,
+				  &suniv_cpu_nb);
+}
+CLK_OF_DECLARE(suniv_f1c100s_ccu, "allwinner,suniv-f1c100s-ccu",
+	       suniv_f1c100s_ccu_setup);
diff --git a/drivers/clk/sunxi-ng/suniv-f1c100s-ccu.h b/drivers/clk/sunxi-ng/suniv-f1c100s-ccu.h
new file mode 100644
index 000000000000..b22484f1bb9a
--- /dev/null
+++ b/drivers/clk/sunxi-ng/suniv-f1c100s-ccu.h
@@ -0,0 +1,34 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright 2017 Icenowy Zheng <icenowy@aosc.io>
+ *
+ */
+
+#ifndef _CCU_SUNIV_F1C100S_H_
+#define _CCU_SUNIV_F1C100S_H_
+
+#include <dt-bindings/clock/suniv-ccu-f1c100s.h>
+#include <dt-bindings/reset/suniv-ccu-f1c100s.h>
+
+#define CLK_PLL_CPU		0
+#define CLK_PLL_AUDIO_BASE	1
+#define CLK_PLL_AUDIO		2
+#define CLK_PLL_AUDIO_2X	3
+#define CLK_PLL_AUDIO_4X	4
+#define CLK_PLL_AUDIO_8X	5
+#define CLK_PLL_VIDEO		6
+#define CLK_PLL_VIDEO_2X	7
+#define CLK_PLL_VE		8
+#define CLK_PLL_DDR0		9
+#define CLK_PLL_PERIPH		10
+
+/* CPU clock is exported */
+
+#define CLK_AHB			12
+#define CLK_APB			13
+
+/* All bus gates, DRAM gates and mod clocks are exported */
+
+#define CLK_NUMBER		(CLK_AVS + 1)
+
+#endif /* _CCU_SUNIV_F1C100S_H_ */
-- 
2.32.0

